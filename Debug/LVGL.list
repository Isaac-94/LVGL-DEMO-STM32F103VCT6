
LVGL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c388  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b5c  0801c56c  0801c56c  0001d56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f0c8  0801f0c8  00021f98  2**0
                  CONTENTS
  4 .ARM          00000008  0801f0c8  0801f0c8  000200c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f0d0  0801f0d0  00021f98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f0d0  0801f0d0  000200d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f0d4  0801f0d4  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000f98  20000000  0801f0d8  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009f6c  20000f98  08020070  00021f98  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  2000af04  08020070  00022f04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00021f98  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003890c  00000000  00000000  00021fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008ccb  00000000  00000000  0005a8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002490  00000000  00000000  00063598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001cf8  00000000  00000000  00065a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024338  00000000  00000000  00067720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00057d15  00000000  00000000  0008ba58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5892  00000000  00000000  000e376d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00188fff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c9c  00000000  00000000  00189044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00192ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000f98 	.word	0x20000f98
 8000200:	00000000 	.word	0x00000000
 8000204:	0801c554 	.word	0x0801c554

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000f9c 	.word	0x20000f9c
 8000220:	0801c554 	.word	0x0801c554

08000224 <strcmp>:
 8000224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800022c:	2a01      	cmp	r2, #1
 800022e:	bf28      	it	cs
 8000230:	429a      	cmpcs	r2, r3
 8000232:	d0f7      	beq.n	8000224 <strcmp>
 8000234:	1ad0      	subs	r0, r2, r3
 8000236:	4770      	bx	lr

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <lv_scr_act>:
/**
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
    return lv_disp_get_scr_act(lv_disp_get_default());
 800024c:	f00e fcb2 	bl	800ebb4 <lv_disp_get_default>
 8000250:	4603      	mov	r3, r0
 8000252:	4618      	mov	r0, r3
 8000254:	f002 fad5 	bl	8002802 <lv_disp_get_scr_act>
 8000258:	4603      	mov	r3, r0
}
 800025a:	4618      	mov	r0, r3
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <campodetexto>:


}

void campodetexto(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af02      	add	r7, sp, #8
    /*Create styles for the keyboard*/
    static lv_style_t rel_style, pr_style;

    lv_style_copy(&rel_style, &lv_style_btn_rel);
 8000266:	4927      	ldr	r1, [pc, #156]	@ (8000304 <campodetexto+0xa4>)
 8000268:	4827      	ldr	r0, [pc, #156]	@ (8000308 <campodetexto+0xa8>)
 800026a:	f007 fdc5 	bl	8007df8 <lv_style_copy>
    rel_style.body.radius = 0;
 800026e:	4b26      	ldr	r3, [pc, #152]	@ (8000308 <campodetexto+0xa8>)
 8000270:	2200      	movs	r2, #0
 8000272:	80da      	strh	r2, [r3, #6]
    rel_style.body.border.width = 1;
 8000274:	4b24      	ldr	r3, [pc, #144]	@ (8000308 <campodetexto+0xa8>)
 8000276:	2201      	movs	r2, #1
 8000278:	819a      	strh	r2, [r3, #12]

    lv_style_copy(&pr_style, &lv_style_btn_pr);
 800027a:	4924      	ldr	r1, [pc, #144]	@ (800030c <campodetexto+0xac>)
 800027c:	4824      	ldr	r0, [pc, #144]	@ (8000310 <campodetexto+0xb0>)
 800027e:	f007 fdbb 	bl	8007df8 <lv_style_copy>
    pr_style.body.radius = 0;
 8000282:	4b23      	ldr	r3, [pc, #140]	@ (8000310 <campodetexto+0xb0>)
 8000284:	2200      	movs	r2, #0
 8000286:	80da      	strh	r2, [r3, #6]
    pr_style.body.border.width = 1;
 8000288:	4b21      	ldr	r3, [pc, #132]	@ (8000310 <campodetexto+0xb0>)
 800028a:	2201      	movs	r2, #1
 800028c:	819a      	strh	r2, [r3, #12]

    /*Create a keyboard and apply the styles*/
    lv_obj_t *kb = lv_kb_create(lv_scr_act(), NULL);
 800028e:	f7ff ffdb 	bl	8000248 <lv_scr_act>
 8000292:	4603      	mov	r3, r0
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f013 fd6e 	bl	8013d78 <lv_kb_create>
 800029c:	6078      	str	r0, [r7, #4]
    lv_kb_set_cursor_manage(kb, true);
 800029e:	2101      	movs	r1, #1
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f013 fec3 	bl	801402c <lv_kb_set_cursor_manage>
    lv_kb_set_mode(kb, LV_KB_MODE_NUM );
 80002a6:	2101      	movs	r1, #1
 80002a8:	6878      	ldr	r0, [r7, #4]
 80002aa:	f013 fe87 	bl	8013fbc <lv_kb_set_mode>
    lv_kb_set_style(kb, LV_KB_STYLE_BG, &lv_style_transp_tight);
 80002ae:	4a19      	ldr	r2, [pc, #100]	@ (8000314 <campodetexto+0xb4>)
 80002b0:	2100      	movs	r1, #0
 80002b2:	6878      	ldr	r0, [r7, #4]
 80002b4:	f013 ff0a 	bl	80140cc <lv_kb_set_style>
    lv_kb_set_style(kb, LV_KB_STYLE_BTN_REL, &rel_style);
 80002b8:	4a13      	ldr	r2, [pc, #76]	@ (8000308 <campodetexto+0xa8>)
 80002ba:	2101      	movs	r1, #1
 80002bc:	6878      	ldr	r0, [r7, #4]
 80002be:	f013 ff05 	bl	80140cc <lv_kb_set_style>
    lv_kb_set_style(kb, LV_KB_STYLE_BTN_PR, &pr_style);
 80002c2:	4a13      	ldr	r2, [pc, #76]	@ (8000310 <campodetexto+0xb0>)
 80002c4:	2102      	movs	r1, #2
 80002c6:	6878      	ldr	r0, [r7, #4]
 80002c8:	f013 ff00 	bl	80140cc <lv_kb_set_style>

    /*Create a text area. The keyboard will write here*/
    lv_obj_t *ta = lv_ta_create(lv_scr_act(), NULL);
 80002cc:	f7ff ffbc 	bl	8000248 <lv_scr_act>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2100      	movs	r1, #0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f017 fe25 	bl	8017f24 <lv_ta_create>
 80002da:	6038      	str	r0, [r7, #0]
    lv_obj_align(ta, NULL, LV_ALIGN_IN_TOP_MID, 0, 10);
 80002dc:	230a      	movs	r3, #10
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	2300      	movs	r3, #0
 80002e2:	2202      	movs	r2, #2
 80002e4:	2100      	movs	r1, #0
 80002e6:	6838      	ldr	r0, [r7, #0]
 80002e8:	f005 fa90 	bl	800580c <lv_obj_align>
    lv_ta_set_text(ta, "");
 80002ec:	490a      	ldr	r1, [pc, #40]	@ (8000318 <campodetexto+0xb8>)
 80002ee:	6838      	ldr	r0, [r7, #0]
 80002f0:	f018 faa8 	bl	8018844 <lv_ta_set_text>

    /*Assign the text area to the keyboard*/
    lv_kb_set_ta(kb, ta);
 80002f4:	6839      	ldr	r1, [r7, #0]
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f013 fe16 	bl	8013f28 <lv_kb_set_ta>
}
 80002fc:	bf00      	nop
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20002bbc 	.word	0x20002bbc
 8000308:	20000fb4 	.word	0x20000fb4
 800030c:	20002bf8 	.word	0x20002bf8
 8000310:	20000ff0 	.word	0x20000ff0
 8000314:	20002a90 	.word	0x20002a90
 8000318:	0801c57c 	.word	0x0801c57c

0800031c <mainApp>:

void mainApp(void)
{
 800031c:	b590      	push	{r4, r7, lr}
 800031e:	b093      	sub	sp, #76	@ 0x4c
 8000320:	af00      	add	r7, sp, #0
  //definition of ts struct
  lv_init(); //LVGL init
 8000322:	f004 fcc7 	bl	8004cb4 <lv_init>
  BSP_LCD_Init();// display initialization
 8000326:	f001 fd45 	bl	8001db4 <BSP_LCD_Init>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());// Touchscreen initialization
 800032a:	f001 fd63 	bl	8001df4 <BSP_LCD_GetXSize>
 800032e:	4603      	mov	r3, r0
 8000330:	461c      	mov	r4, r3
 8000332:	f001 fd6b 	bl	8001e0c <BSP_LCD_GetYSize>
 8000336:	4603      	mov	r3, r0
 8000338:	4619      	mov	r1, r3
 800033a:	4620      	mov	r0, r4
 800033c:	f001 fdc8 	bl	8001ed0 <BSP_TS_Init>

  //Buffer creation and initialization for LVGL
  static lv_disp_buf_t disp_buf;
  static lv_color_t buf_1[LV_HOR_RES_MAX * 10];
  lv_disp_buf_init(&disp_buf, buf_1, NULL, LV_HOR_RES_MAX * 10);
 8000340:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8000344:	2200      	movs	r2, #0
 8000346:	4913      	ldr	r1, [pc, #76]	@ (8000394 <mainApp+0x78>)
 8000348:	4813      	ldr	r0, [pc, #76]	@ (8000398 <mainApp+0x7c>)
 800034a:	f00e fb84 	bl	800ea56 <lv_disp_buf_init>



  //function for write a pixel in the area LVGL
  lv_disp_drv_t disp_drv;               /*Descriptor of a display driver*/
  lv_disp_drv_init(&disp_drv);          /*Basic initialization*/
 800034e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000352:	4618      	mov	r0, r3
 8000354:	f00e fb46 	bl	800e9e4 <lv_disp_drv_init>
  disp_drv.flush_cb = ILI9341_flush;    /*Set your driver function*/
 8000358:	4b10      	ldr	r3, [pc, #64]	@ (800039c <mainApp+0x80>)
 800035a:	633b      	str	r3, [r7, #48]	@ 0x30
  disp_drv.buffer = &disp_buf;          /*Assign the buffer to the display*/
 800035c:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <mainApp+0x7c>)
 800035e:	62bb      	str	r3, [r7, #40]	@ 0x28
  lv_disp_drv_register(&disp_drv);      /*Finally register the driver*/
 8000360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000364:	4618      	mov	r0, r3
 8000366:	f00e fb93 	bl	800ea90 <lv_disp_drv_register>

  //function for read touchscreen

  lv_indev_drv_t indev_drv;                  /*Descriptor of a input device driver*/
  lv_indev_drv_init(&indev_drv);             /*Basic initialization*/
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	4618      	mov	r0, r3
 800036e:	f00e fd1b 	bl	800eda8 <lv_indev_drv_init>
  indev_drv.type = LV_INDEV_TYPE_POINTER;    /*Touch pad is a pointer-like device*/
 8000372:	2301      	movs	r3, #1
 8000374:	713b      	strb	r3, [r7, #4]
  indev_drv.read_cb = XPT2046_read;      /*Set your driver function*/
 8000376:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <mainApp+0x84>)
 8000378:	60bb      	str	r3, [r7, #8]
  lv_indev_drv_register(&indev_drv);         /*Finally register the driver*/
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	4618      	mov	r0, r3
 800037e:	f00e fd31 	bl	800ede4 <lv_indev_drv_register>

  //demo_create();
   campodetexto();
 8000382:	f7ff ff6d 	bl	8000260 <campodetexto>
  //hello_world();
  while(1)
  {
	  //Delay(10);
	  lv_task_handler();      //LVGL
 8000386:	f010 f839 	bl	80103fc <lv_task_handler>
	  lv_tick_inc(10);        //LVGL
 800038a:	200a      	movs	r0, #10
 800038c:	f00e fdc4 	bl	800ef18 <lv_tick_inc>
	  lv_task_handler();      //LVGL
 8000390:	bf00      	nop
 8000392:	e7f8      	b.n	8000386 <mainApp+0x6a>
 8000394:	20001048 	.word	0x20001048
 8000398:	2000102c 	.word	0x2000102c
 800039c:	08001d65 	.word	0x08001d65
 80003a0:	08001fa1 	.word	0x08001fa1

080003a4 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af02      	add	r7, sp, #8
  LCD_IO_Bl_OnOff(1);
 80003aa:	2001      	movs	r0, #1
 80003ac:	f001 fbe5 	bl	8001b7a <LCD_IO_Bl_OnOff>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_SLPOUT, NULL, 0);    // Exit Sleep
 80003b0:	2395      	movs	r3, #149	@ 0x95
 80003b2:	9300      	str	r3, [sp, #0]
 80003b4:	2300      	movs	r3, #0
 80003b6:	2200      	movs	r2, #0
 80003b8:	2100      	movs	r1, #0
 80003ba:	2011      	movs	r0, #17
 80003bc:	f001 fc02 	bl	8001bc4 <LCD_IO_Transaction>
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b082      	sub	sp, #8
 80003ca:	af02      	add	r7, sp, #8
  LCD_IO_WriteCmd8MultipleData8(ILI9341_SLPIN, NULL, 0);    // Sleep
 80003cc:	2395      	movs	r3, #149	@ 0x95
 80003ce:	9300      	str	r3, [sp, #0]
 80003d0:	2300      	movs	r3, #0
 80003d2:	2200      	movs	r2, #0
 80003d4:	2100      	movs	r1, #0
 80003d6:	2010      	movs	r0, #16
 80003d8:	f001 fbf4 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_Bl_OnOff(0);
 80003dc:	2000      	movs	r0, #0
 80003de:	f001 fbcc 	bl	8001b7a <LCD_IO_Bl_OnOff>
}
 80003e2:	bf00      	nop
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 80003ec:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 80003fc:	23f0      	movs	r3, #240	@ 0xf0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr

08000406 <ili9341_ReadID>:
  * @brief  Get the ILI9341 ID.
  * @param  None
  * @retval The ILI9341 ID
  */
uint32_t ili9341_ReadID(void)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b084      	sub	sp, #16
 800040a:	af02      	add	r7, sp, #8
  uint32_t dt = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	607b      	str	r3, [r7, #4]
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&dt, 3, 1);
 8000410:	1d39      	adds	r1, r7, #4
 8000412:	2399      	movs	r3, #153	@ 0x99
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2301      	movs	r3, #1
 8000418:	2203      	movs	r2, #3
 800041a:	20d3      	movs	r0, #211	@ 0xd3
 800041c:	f001 fbd2 	bl	8001bc4 <LCD_IO_Transaction>
  return dt;
 8000420:	687b      	ldr	r3, [r7, #4]
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <ili9341_Init>:

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 8000432:	4b77      	ldr	r3, [pc, #476]	@ (8000610 <ili9341_Init+0x1e4>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	2b00      	cmp	r3, #0
 800043c:	d115      	bne.n	800046a <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 800043e:	4b74      	ldr	r3, [pc, #464]	@ (8000610 <ili9341_Init+0x1e4>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4b71      	ldr	r3, [pc, #452]	@ (8000610 <ili9341_Init+0x1e4>)
 800044a:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 800044c:	4b70      	ldr	r3, [pc, #448]	@ (8000610 <ili9341_Init+0x1e4>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	f003 0302 	and.w	r3, r3, #2
 8000454:	2b00      	cmp	r3, #0
 8000456:	d101      	bne.n	800045c <ili9341_Init+0x30>
      LCD_IO_Init();
 8000458:	f001 fb9a 	bl	8001b90 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 800045c:	4b6c      	ldr	r3, [pc, #432]	@ (8000610 <ili9341_Init+0x1e4>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	f043 0302 	orr.w	r3, r3, #2
 8000464:	b2da      	uxtb	r2, r3
 8000466:	4b6a      	ldr	r3, [pc, #424]	@ (8000610 <ili9341_Init+0x1e4>)
 8000468:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 800046a:	200a      	movs	r0, #10
 800046c:	f001 fb7a 	bl	8001b64 <LCD_Delay>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_SWRESET, NULL, 0);
 8000470:	2395      	movs	r3, #149	@ 0x95
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	2300      	movs	r3, #0
 8000476:	2200      	movs	r2, #0
 8000478:	2100      	movs	r1, #0
 800047a:	2001      	movs	r0, #1
 800047c:	f001 fba2 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_Delay(10);
 8000480:	200a      	movs	r0, #10
 8000482:	f001 fb6f 	bl	8001b64 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 8000486:	2395      	movs	r3, #149	@ 0x95
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	2300      	movs	r3, #0
 800048c:	2203      	movs	r2, #3
 800048e:	4961      	ldr	r1, [pc, #388]	@ (8000614 <ili9341_Init+0x1e8>)
 8000490:	20ef      	movs	r0, #239	@ 0xef
 8000492:	f001 fb97 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 8000496:	2395      	movs	r3, #149	@ 0x95
 8000498:	9300      	str	r3, [sp, #0]
 800049a:	2300      	movs	r3, #0
 800049c:	2203      	movs	r2, #3
 800049e:	495e      	ldr	r1, [pc, #376]	@ (8000618 <ili9341_Init+0x1ec>)
 80004a0:	20cf      	movs	r0, #207	@ 0xcf
 80004a2:	f001 fb8f 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 80004a6:	2395      	movs	r3, #149	@ 0x95
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	2300      	movs	r3, #0
 80004ac:	2204      	movs	r2, #4
 80004ae:	495b      	ldr	r1, [pc, #364]	@ (800061c <ili9341_Init+0x1f0>)
 80004b0:	20ed      	movs	r0, #237	@ 0xed
 80004b2:	f001 fb87 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 80004b6:	2395      	movs	r3, #149	@ 0x95
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	2300      	movs	r3, #0
 80004bc:	2203      	movs	r2, #3
 80004be:	4958      	ldr	r1, [pc, #352]	@ (8000620 <ili9341_Init+0x1f4>)
 80004c0:	20e8      	movs	r0, #232	@ 0xe8
 80004c2:	f001 fb7f 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 80004c6:	2395      	movs	r3, #149	@ 0x95
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	2300      	movs	r3, #0
 80004cc:	2205      	movs	r2, #5
 80004ce:	4955      	ldr	r1, [pc, #340]	@ (8000624 <ili9341_Init+0x1f8>)
 80004d0:	20cb      	movs	r0, #203	@ 0xcb
 80004d2:	f001 fb77 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 80004d6:	2395      	movs	r3, #149	@ 0x95
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	2300      	movs	r3, #0
 80004dc:	2201      	movs	r2, #1
 80004de:	4952      	ldr	r1, [pc, #328]	@ (8000628 <ili9341_Init+0x1fc>)
 80004e0:	20f7      	movs	r0, #247	@ 0xf7
 80004e2:	f001 fb6f 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 80004e6:	2395      	movs	r3, #149	@ 0x95
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	2202      	movs	r2, #2
 80004ee:	494f      	ldr	r1, [pc, #316]	@ (800062c <ili9341_Init+0x200>)
 80004f0:	20ea      	movs	r0, #234	@ 0xea
 80004f2:	f001 fb67 	bl	8001bc4 <LCD_IO_Transaction>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 80004f6:	2395      	movs	r3, #149	@ 0x95
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2300      	movs	r3, #0
 80004fc:	2201      	movs	r2, #1
 80004fe:	494c      	ldr	r1, [pc, #304]	@ (8000630 <ili9341_Init+0x204>)
 8000500:	20c0      	movs	r0, #192	@ 0xc0
 8000502:	f001 fb5f 	bl	8001bc4 <LCD_IO_Transaction>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8000506:	2395      	movs	r3, #149	@ 0x95
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2300      	movs	r3, #0
 800050c:	2201      	movs	r2, #1
 800050e:	4949      	ldr	r1, [pc, #292]	@ (8000634 <ili9341_Init+0x208>)
 8000510:	20c1      	movs	r0, #193	@ 0xc1
 8000512:	f001 fb57 	bl	8001bc4 <LCD_IO_Transaction>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8000516:	2395      	movs	r3, #149	@ 0x95
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2300      	movs	r3, #0
 800051c:	2202      	movs	r2, #2
 800051e:	4946      	ldr	r1, [pc, #280]	@ (8000638 <ili9341_Init+0x20c>)
 8000520:	20c5      	movs	r0, #197	@ 0xc5
 8000522:	f001 fb4f 	bl	8001bc4 <LCD_IO_Transaction>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8000526:	2395      	movs	r3, #149	@ 0x95
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2300      	movs	r3, #0
 800052c:	2201      	movs	r2, #1
 800052e:	4943      	ldr	r1, [pc, #268]	@ (800063c <ili9341_Init+0x210>)
 8000530:	20c7      	movs	r0, #199	@ 0xc7
 8000532:	f001 fb47 	bl	8001bc4 <LCD_IO_Transaction>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8000536:	2395      	movs	r3, #149	@ 0x95
 8000538:	9300      	str	r3, [sp, #0]
 800053a:	2300      	movs	r3, #0
 800053c:	2201      	movs	r2, #1
 800053e:	4940      	ldr	r1, [pc, #256]	@ (8000640 <ili9341_Init+0x214>)
 8000540:	2037      	movs	r0, #55	@ 0x37
 8000542:	f001 fb3f 	bl	8001bc4 <LCD_IO_Transaction>
  #if ILI9341_WRITEBITDEPTH == 16
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8000546:	2395      	movs	r3, #149	@ 0x95
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2300      	movs	r3, #0
 800054c:	2201      	movs	r2, #1
 800054e:	493d      	ldr	r1, [pc, #244]	@ (8000644 <ili9341_Init+0x218>)
 8000550:	203a      	movs	r0, #58	@ 0x3a
 8000552:	f001 fb37 	bl	8001bc4 <LCD_IO_Transaction>
  #elif ILI9341_WRITEBITDEPTH == 24
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1);
  #endif

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8000556:	2395      	movs	r3, #149	@ 0x95
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2202      	movs	r2, #2
 800055e:	493a      	ldr	r1, [pc, #232]	@ (8000648 <ili9341_Init+0x21c>)
 8000560:	20b1      	movs	r0, #177	@ 0xb1
 8000562:	f001 fb2f 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8000566:	2395      	movs	r3, #149	@ 0x95
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2300      	movs	r3, #0
 800056c:	2203      	movs	r2, #3
 800056e:	4937      	ldr	r1, [pc, #220]	@ (800064c <ili9341_Init+0x220>)
 8000570:	20b6      	movs	r0, #182	@ 0xb6
 8000572:	f001 fb27 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 8000576:	2395      	movs	r3, #149	@ 0x95
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2300      	movs	r3, #0
 800057c:	2201      	movs	r2, #1
 800057e:	4930      	ldr	r1, [pc, #192]	@ (8000640 <ili9341_Init+0x214>)
 8000580:	20f2      	movs	r0, #242	@ 0xf2
 8000582:	f001 fb1f 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8000586:	2395      	movs	r3, #149	@ 0x95
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	2201      	movs	r2, #1
 800058e:	4930      	ldr	r1, [pc, #192]	@ (8000650 <ili9341_Init+0x224>)
 8000590:	2026      	movs	r0, #38	@ 0x26
 8000592:	f001 fb17 	bl	8001bc4 <LCD_IO_Transaction>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 8000596:	2395      	movs	r3, #149	@ 0x95
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	220f      	movs	r2, #15
 800059e:	492d      	ldr	r1, [pc, #180]	@ (8000654 <ili9341_Init+0x228>)
 80005a0:	20e0      	movs	r0, #224	@ 0xe0
 80005a2:	f001 fb0f 	bl	8001bc4 <LCD_IO_Transaction>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 80005a6:	2395      	movs	r3, #149	@ 0x95
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	220f      	movs	r2, #15
 80005ae:	492a      	ldr	r1, [pc, #168]	@ (8000658 <ili9341_Init+0x22c>)
 80005b0:	20e1      	movs	r0, #225	@ 0xe1
 80005b2:	f001 fb07 	bl	8001bc4 <LCD_IO_Transaction>

  LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 80005b6:	2395      	movs	r3, #149	@ 0x95
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2201      	movs	r2, #1
 80005be:	4927      	ldr	r1, [pc, #156]	@ (800065c <ili9341_Init+0x230>)
 80005c0:	2036      	movs	r0, #54	@ 0x36
 80005c2:	f001 faff 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_SLPOUT, NULL, 0);    // Exit Sleep
 80005c6:	2395      	movs	r3, #149	@ 0x95
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	2011      	movs	r0, #17
 80005d2:	f001 faf7 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_Delay(10);
 80005d6:	200a      	movs	r0, #10
 80005d8:	f001 fac4 	bl	8001b64 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 80005dc:	2300      	movs	r3, #0
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	23f0      	movs	r3, #240	@ 0xf0
 80005e2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80005e6:	2100      	movs	r1, #0
 80005e8:	2000      	movs	r0, #0
 80005ea:	f000 fad5 	bl	8000b98 <ili9341_FillRect>
  LCD_Delay(10);
 80005ee:	200a      	movs	r0, #10
 80005f0:	f001 fab8 	bl	8001b64 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DISPON, NULL, 0);    // Display on
 80005f4:	2395      	movs	r3, #149	@ 0x95
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	2029      	movs	r0, #41	@ 0x29
 8000600:	f001 fae0 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_Delay(10);
 8000604:	200a      	movs	r0, #10
 8000606:	f001 faad 	bl	8001b64 <LCD_Delay>
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2000294c 	.word	0x2000294c
 8000614:	0801c580 	.word	0x0801c580
 8000618:	0801c584 	.word	0x0801c584
 800061c:	0801c588 	.word	0x0801c588
 8000620:	0801c590 	.word	0x0801c590
 8000624:	0801c594 	.word	0x0801c594
 8000628:	0801c59c 	.word	0x0801c59c
 800062c:	0801c5a0 	.word	0x0801c5a0
 8000630:	0801c5a4 	.word	0x0801c5a4
 8000634:	0801c5a8 	.word	0x0801c5a8
 8000638:	0801c5ac 	.word	0x0801c5ac
 800063c:	0801c5b0 	.word	0x0801c5b0
 8000640:	0801c5b4 	.word	0x0801c5b4
 8000644:	0801c5b8 	.word	0x0801c5b8
 8000648:	0801c5bc 	.word	0x0801c5bc
 800064c:	0801c5c0 	.word	0x0801c5c0
 8000650:	0801c5c4 	.word	0x0801c5c4
 8000654:	0801c5c8 	.word	0x0801c5c8
 8000658:	0801c5d8 	.word	0x0801c5d8
 800065c:	0801cb51 	.word	0x0801cb51

08000660 <ili9341_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9341_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af02      	add	r7, sp, #8
 8000666:	4603      	mov	r3, r0
 8000668:	460a      	mov	r2, r1
 800066a:	80fb      	strh	r3, [r7, #6]
 800066c:	4613      	mov	r3, r2
 800066e:	80bb      	strh	r3, [r7, #4]
  ILI9341_SETCURSOR(Xpos, Ypos);
 8000670:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000674:	813b      	strh	r3, [r7, #8]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 8000676:	893b      	ldrh	r3, [r7, #8]
 8000678:	ba5b      	rev16	r3, r3
 800067a:	b29b      	uxth	r3, r3
 800067c:	b21b      	sxth	r3, r3
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <ili9341_SetCursor+0x88>)
 8000682:	801a      	strh	r2, [r3, #0]
 8000684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000688:	817b      	strh	r3, [r7, #10]
 800068a:	897b      	ldrh	r3, [r7, #10]
 800068c:	ba5b      	rev16	r3, r3
 800068e:	b29b      	uxth	r3, r3
 8000690:	b21b      	sxth	r3, r3
 8000692:	b29a      	uxth	r2, r3
 8000694:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <ili9341_SetCursor+0x88>)
 8000696:	805a      	strh	r2, [r3, #2]
 8000698:	2395      	movs	r3, #149	@ 0x95
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2300      	movs	r3, #0
 800069e:	2204      	movs	r2, #4
 80006a0:	4911      	ldr	r1, [pc, #68]	@ (80006e8 <ili9341_SetCursor+0x88>)
 80006a2:	202a      	movs	r0, #42	@ 0x2a
 80006a4:	f001 fa8e 	bl	8001bc4 <LCD_IO_Transaction>
 80006a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006ac:	81bb      	strh	r3, [r7, #12]
 80006ae:	89bb      	ldrh	r3, [r7, #12]
 80006b0:	ba5b      	rev16	r3, r3
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <ili9341_SetCursor+0x88>)
 80006ba:	801a      	strh	r2, [r3, #0]
 80006bc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
 80006c2:	89fb      	ldrh	r3, [r7, #14]
 80006c4:	ba5b      	rev16	r3, r3
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <ili9341_SetCursor+0x88>)
 80006ce:	805a      	strh	r2, [r3, #2]
 80006d0:	2395      	movs	r3, #149	@ 0x95
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	2300      	movs	r3, #0
 80006d6:	2204      	movs	r2, #4
 80006d8:	4903      	ldr	r1, [pc, #12]	@ (80006e8 <ili9341_SetCursor+0x88>)
 80006da:	202b      	movs	r0, #43	@ 0x2b
 80006dc:	f001 fa72 	bl	8001bc4 <LCD_IO_Transaction>
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20002948 	.word	0x20002948

080006ec <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af02      	add	r7, sp, #8
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
 80006f6:	460b      	mov	r3, r1
 80006f8:	80bb      	strh	r3, [r7, #4]
 80006fa:	4613      	mov	r3, r2
 80006fc:	807b      	strh	r3, [r7, #2]
  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_DOWN)
 80006fe:	4b31      	ldr	r3, [pc, #196]	@ (80007c4 <ili9341_WritePixel+0xd8>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b28      	cmp	r3, #40	@ 0x28
 8000704:	d00a      	beq.n	800071c <ili9341_WritePixel+0x30>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_DOWN;
 8000706:	4b2f      	ldr	r3, [pc, #188]	@ (80007c4 <ili9341_WritePixel+0xd8>)
 8000708:	2228      	movs	r2, #40	@ 0x28
 800070a:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 800070c:	2395      	movs	r3, #149	@ 0x95
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2300      	movs	r3, #0
 8000712:	2201      	movs	r2, #1
 8000714:	492c      	ldr	r1, [pc, #176]	@ (80007c8 <ili9341_WritePixel+0xdc>)
 8000716:	2036      	movs	r0, #54	@ 0x36
 8000718:	f001 fa54 	bl	8001bc4 <LCD_IO_Transaction>
  }
  ILI9341_SETCURSOR(Xpos, Ypos);
 800071c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000720:	813b      	strh	r3, [r7, #8]
 8000722:	893b      	ldrh	r3, [r7, #8]
 8000724:	ba5b      	rev16	r3, r3
 8000726:	b29b      	uxth	r3, r3
 8000728:	b21b      	sxth	r3, r3
 800072a:	b29a      	uxth	r2, r3
 800072c:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <ili9341_WritePixel+0xe0>)
 800072e:	801a      	strh	r2, [r3, #0]
 8000730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000734:	817b      	strh	r3, [r7, #10]
 8000736:	897b      	ldrh	r3, [r7, #10]
 8000738:	ba5b      	rev16	r3, r3
 800073a:	b29b      	uxth	r3, r3
 800073c:	b21b      	sxth	r3, r3
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b22      	ldr	r3, [pc, #136]	@ (80007cc <ili9341_WritePixel+0xe0>)
 8000742:	805a      	strh	r2, [r3, #2]
 8000744:	2395      	movs	r3, #149	@ 0x95
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	2300      	movs	r3, #0
 800074a:	2204      	movs	r2, #4
 800074c:	491f      	ldr	r1, [pc, #124]	@ (80007cc <ili9341_WritePixel+0xe0>)
 800074e:	202a      	movs	r0, #42	@ 0x2a
 8000750:	f001 fa38 	bl	8001bc4 <LCD_IO_Transaction>
 8000754:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000758:	81bb      	strh	r3, [r7, #12]
 800075a:	89bb      	ldrh	r3, [r7, #12]
 800075c:	ba5b      	rev16	r3, r3
 800075e:	b29b      	uxth	r3, r3
 8000760:	b21b      	sxth	r3, r3
 8000762:	b29a      	uxth	r2, r3
 8000764:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <ili9341_WritePixel+0xe0>)
 8000766:	801a      	strh	r2, [r3, #0]
 8000768:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800076c:	81fb      	strh	r3, [r7, #14]
 800076e:	89fb      	ldrh	r3, [r7, #14]
 8000770:	ba5b      	rev16	r3, r3
 8000772:	b29b      	uxth	r3, r3
 8000774:	b21b      	sxth	r3, r3
 8000776:	b29a      	uxth	r2, r3
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <ili9341_WritePixel+0xe0>)
 800077a:	805a      	strh	r2, [r3, #2]
 800077c:	2395      	movs	r3, #149	@ 0x95
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2300      	movs	r3, #0
 8000782:	2204      	movs	r2, #4
 8000784:	4911      	ldr	r1, [pc, #68]	@ (80007cc <ili9341_WritePixel+0xe0>)
 8000786:	202b      	movs	r0, #43	@ 0x2b
 8000788:	f001 fa1c 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_DrawFill(RGBCode, 1);
 800078c:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <ili9341_WritePixel+0xe4>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00a      	beq.n	80007aa <ili9341_WritePixel+0xbe>
 8000794:	2395      	movs	r3, #149	@ 0x95
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2300      	movs	r3, #0
 800079a:	2201      	movs	r2, #1
 800079c:	490d      	ldr	r1, [pc, #52]	@ (80007d4 <ili9341_WritePixel+0xe8>)
 800079e:	203a      	movs	r0, #58	@ 0x3a
 80007a0:	f001 fa10 	bl	8001bc4 <LCD_IO_Transaction>
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <ili9341_WritePixel+0xe4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
 80007aa:	1cb9      	adds	r1, r7, #2
 80007ac:	f240 1325 	movw	r3, #293	@ 0x125
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	2300      	movs	r3, #0
 80007b4:	2201      	movs	r2, #1
 80007b6:	202c      	movs	r0, #44	@ 0x2c
 80007b8:	f001 fa04 	bl	8001bc4 <LCD_IO_Transaction>
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000054 	.word	0x20000054
 80007c8:	0801cb51 	.word	0x0801cb51
 80007cc:	20002948 	.word	0x20002948
 80007d0:	20002952 	.word	0x20002952
 80007d4:	0801c5e8 	.word	0x0801c5e8

080007d8 <ili9341_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9341_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af02      	add	r7, sp, #8
 80007de:	4603      	mov	r3, r0
 80007e0:	460a      	mov	r2, r1
 80007e2:	80fb      	strh	r3, [r7, #6]
 80007e4:	4613      	mov	r3, r2
 80007e6:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_DOWN)
 80007e8:	4b31      	ldr	r3, [pc, #196]	@ (80008b0 <ili9341_ReadPixel+0xd8>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b28      	cmp	r3, #40	@ 0x28
 80007ee:	d00a      	beq.n	8000806 <ili9341_ReadPixel+0x2e>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_DOWN;
 80007f0:	4b2f      	ldr	r3, [pc, #188]	@ (80008b0 <ili9341_ReadPixel+0xd8>)
 80007f2:	2228      	movs	r2, #40	@ 0x28
 80007f4:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 80007f6:	2395      	movs	r3, #149	@ 0x95
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2300      	movs	r3, #0
 80007fc:	2201      	movs	r2, #1
 80007fe:	492d      	ldr	r1, [pc, #180]	@ (80008b4 <ili9341_ReadPixel+0xdc>)
 8000800:	2036      	movs	r0, #54	@ 0x36
 8000802:	f001 f9df 	bl	8001bc4 <LCD_IO_Transaction>
  }
  ILI9341_SETCURSOR(Xpos, Ypos);
 8000806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800080a:	823b      	strh	r3, [r7, #16]
 800080c:	8a3b      	ldrh	r3, [r7, #16]
 800080e:	ba5b      	rev16	r3, r3
 8000810:	b29b      	uxth	r3, r3
 8000812:	b21b      	sxth	r3, r3
 8000814:	b29a      	uxth	r2, r3
 8000816:	4b28      	ldr	r3, [pc, #160]	@ (80008b8 <ili9341_ReadPixel+0xe0>)
 8000818:	801a      	strh	r2, [r3, #0]
 800081a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800081e:	827b      	strh	r3, [r7, #18]
 8000820:	8a7b      	ldrh	r3, [r7, #18]
 8000822:	ba5b      	rev16	r3, r3
 8000824:	b29b      	uxth	r3, r3
 8000826:	b21b      	sxth	r3, r3
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b23      	ldr	r3, [pc, #140]	@ (80008b8 <ili9341_ReadPixel+0xe0>)
 800082c:	805a      	strh	r2, [r3, #2]
 800082e:	2395      	movs	r3, #149	@ 0x95
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2300      	movs	r3, #0
 8000834:	2204      	movs	r2, #4
 8000836:	4920      	ldr	r1, [pc, #128]	@ (80008b8 <ili9341_ReadPixel+0xe0>)
 8000838:	202a      	movs	r0, #42	@ 0x2a
 800083a:	f001 f9c3 	bl	8001bc4 <LCD_IO_Transaction>
 800083e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000842:	82bb      	strh	r3, [r7, #20]
 8000844:	8abb      	ldrh	r3, [r7, #20]
 8000846:	ba5b      	rev16	r3, r3
 8000848:	b29b      	uxth	r3, r3
 800084a:	b21b      	sxth	r3, r3
 800084c:	b29a      	uxth	r2, r3
 800084e:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <ili9341_ReadPixel+0xe0>)
 8000850:	801a      	strh	r2, [r3, #0]
 8000852:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000856:	82fb      	strh	r3, [r7, #22]
 8000858:	8afb      	ldrh	r3, [r7, #22]
 800085a:	ba5b      	rev16	r3, r3
 800085c:	b29b      	uxth	r3, r3
 800085e:	b21b      	sxth	r3, r3
 8000860:	b29a      	uxth	r2, r3
 8000862:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <ili9341_ReadPixel+0xe0>)
 8000864:	805a      	strh	r2, [r3, #2]
 8000866:	2395      	movs	r3, #149	@ 0x95
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2300      	movs	r3, #0
 800086c:	2204      	movs	r2, #4
 800086e:	4912      	ldr	r1, [pc, #72]	@ (80008b8 <ili9341_ReadPixel+0xe0>)
 8000870:	202b      	movs	r0, #43	@ 0x2b
 8000872:	f001 f9a7 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_ReadBitmap(&ret, 1);
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <ili9341_ReadPixel+0xe4>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d10a      	bne.n	8000894 <ili9341_ReadPixel+0xbc>
 800087e:	2395      	movs	r3, #149	@ 0x95
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2300      	movs	r3, #0
 8000884:	2201      	movs	r2, #1
 8000886:	490e      	ldr	r1, [pc, #56]	@ (80008c0 <ili9341_ReadPixel+0xe8>)
 8000888:	203a      	movs	r0, #58	@ 0x3a
 800088a:	f001 f99b 	bl	8001bc4 <LCD_IO_Transaction>
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <ili9341_ReadPixel+0xe4>)
 8000890:	2201      	movs	r2, #1
 8000892:	701a      	strb	r2, [r3, #0]
 8000894:	f107 010e 	add.w	r1, r7, #14
 8000898:	23c9      	movs	r3, #201	@ 0xc9
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2301      	movs	r3, #1
 800089e:	2201      	movs	r2, #1
 80008a0:	202e      	movs	r0, #46	@ 0x2e
 80008a2:	f001 f98f 	bl	8001bc4 <LCD_IO_Transaction>
  return(ret);
 80008a6:	89fb      	ldrh	r3, [r7, #14]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000054 	.word	0x20000054
 80008b4:	0801cb51 	.word	0x0801cb51
 80008b8:	20002948 	.word	0x20002948
 80008bc:	20002952 	.word	0x20002952
 80008c0:	0801c5ec 	.word	0x0801c5ec

080008c4 <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	4604      	mov	r4, r0
 80008cc:	4608      	mov	r0, r1
 80008ce:	4611      	mov	r1, r2
 80008d0:	461a      	mov	r2, r3
 80008d2:	4623      	mov	r3, r4
 80008d4:	80fb      	strh	r3, [r7, #6]
 80008d6:	4603      	mov	r3, r0
 80008d8:	80bb      	strh	r3, [r7, #4]
 80008da:	460b      	mov	r3, r1
 80008dc:	807b      	strh	r3, [r7, #2]
 80008de:	4613      	mov	r3, r2
 80008e0:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 80008e2:	4a28      	ldr	r2, [pc, #160]	@ (8000984 <ili9341_SetDisplayWindow+0xc0>)
 80008e4:	88bb      	ldrh	r3, [r7, #4]
 80008e6:	8013      	strh	r3, [r2, #0]
 80008e8:	88ba      	ldrh	r2, [r7, #4]
 80008ea:	883b      	ldrh	r3, [r7, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	3b01      	subs	r3, #1
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	4b24      	ldr	r3, [pc, #144]	@ (8000988 <ili9341_SetDisplayWindow+0xc4>)
 80008f6:	801a      	strh	r2, [r3, #0]
  ILI9341_SETWINDOW(Xpos, Xpos + Width - 1, Ypos, Ypos + Height - 1);
 80008f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008fc:	813b      	strh	r3, [r7, #8]
 80008fe:	893b      	ldrh	r3, [r7, #8]
 8000900:	ba5b      	rev16	r3, r3
 8000902:	b29b      	uxth	r3, r3
 8000904:	b21b      	sxth	r3, r3
 8000906:	b29a      	uxth	r2, r3
 8000908:	4b20      	ldr	r3, [pc, #128]	@ (800098c <ili9341_SetDisplayWindow+0xc8>)
 800090a:	801a      	strh	r2, [r3, #0]
 800090c:	88fa      	ldrh	r2, [r7, #6]
 800090e:	887b      	ldrh	r3, [r7, #2]
 8000910:	4413      	add	r3, r2
 8000912:	b29b      	uxth	r3, r3
 8000914:	3b01      	subs	r3, #1
 8000916:	b29b      	uxth	r3, r3
 8000918:	b21b      	sxth	r3, r3
 800091a:	817b      	strh	r3, [r7, #10]
 800091c:	897b      	ldrh	r3, [r7, #10]
 800091e:	ba5b      	rev16	r3, r3
 8000920:	b29b      	uxth	r3, r3
 8000922:	b21b      	sxth	r3, r3
 8000924:	b29a      	uxth	r2, r3
 8000926:	4b19      	ldr	r3, [pc, #100]	@ (800098c <ili9341_SetDisplayWindow+0xc8>)
 8000928:	805a      	strh	r2, [r3, #2]
 800092a:	2395      	movs	r3, #149	@ 0x95
 800092c:	9300      	str	r3, [sp, #0]
 800092e:	2300      	movs	r3, #0
 8000930:	2204      	movs	r2, #4
 8000932:	4916      	ldr	r1, [pc, #88]	@ (800098c <ili9341_SetDisplayWindow+0xc8>)
 8000934:	202a      	movs	r0, #42	@ 0x2a
 8000936:	f001 f945 	bl	8001bc4 <LCD_IO_Transaction>
 800093a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800093e:	81bb      	strh	r3, [r7, #12]
 8000940:	89bb      	ldrh	r3, [r7, #12]
 8000942:	ba5b      	rev16	r3, r3
 8000944:	b29b      	uxth	r3, r3
 8000946:	b21b      	sxth	r3, r3
 8000948:	b29a      	uxth	r2, r3
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <ili9341_SetDisplayWindow+0xc8>)
 800094c:	801a      	strh	r2, [r3, #0]
 800094e:	88ba      	ldrh	r2, [r7, #4]
 8000950:	883b      	ldrh	r3, [r7, #0]
 8000952:	4413      	add	r3, r2
 8000954:	b29b      	uxth	r3, r3
 8000956:	3b01      	subs	r3, #1
 8000958:	b29b      	uxth	r3, r3
 800095a:	b21b      	sxth	r3, r3
 800095c:	81fb      	strh	r3, [r7, #14]
 800095e:	89fb      	ldrh	r3, [r7, #14]
 8000960:	ba5b      	rev16	r3, r3
 8000962:	b29b      	uxth	r3, r3
 8000964:	b21b      	sxth	r3, r3
 8000966:	b29a      	uxth	r2, r3
 8000968:	4b08      	ldr	r3, [pc, #32]	@ (800098c <ili9341_SetDisplayWindow+0xc8>)
 800096a:	805a      	strh	r2, [r3, #2]
 800096c:	2395      	movs	r3, #149	@ 0x95
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	2300      	movs	r3, #0
 8000972:	2204      	movs	r2, #4
 8000974:	4905      	ldr	r1, [pc, #20]	@ (800098c <ili9341_SetDisplayWindow+0xc8>)
 8000976:	202b      	movs	r0, #43	@ 0x2b
 8000978:	f001 f924 	bl	8001bc4 <LCD_IO_Transaction>
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bd90      	pop	{r4, r7, pc}
 8000984:	2000294e 	.word	0x2000294e
 8000988:	20002950 	.word	0x20002950
 800098c:	20002948 	.word	0x20002948

08000990 <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b087      	sub	sp, #28
 8000994:	af02      	add	r7, sp, #8
 8000996:	4604      	mov	r4, r0
 8000998:	4608      	mov	r0, r1
 800099a:	4611      	mov	r1, r2
 800099c:	461a      	mov	r2, r3
 800099e:	4623      	mov	r3, r4
 80009a0:	80fb      	strh	r3, [r7, #6]
 80009a2:	4603      	mov	r3, r0
 80009a4:	80bb      	strh	r3, [r7, #4]
 80009a6:	460b      	mov	r3, r1
 80009a8:	807b      	strh	r3, [r7, #2]
 80009aa:	4613      	mov	r3, r2
 80009ac:	803b      	strh	r3, [r7, #0]
  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_DOWN)
 80009ae:	4b34      	ldr	r3, [pc, #208]	@ (8000a80 <ili9341_DrawHLine+0xf0>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b28      	cmp	r3, #40	@ 0x28
 80009b4:	d00a      	beq.n	80009cc <ili9341_DrawHLine+0x3c>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_DOWN;
 80009b6:	4b32      	ldr	r3, [pc, #200]	@ (8000a80 <ili9341_DrawHLine+0xf0>)
 80009b8:	2228      	movs	r2, #40	@ 0x28
 80009ba:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 80009bc:	2395      	movs	r3, #149	@ 0x95
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2300      	movs	r3, #0
 80009c2:	2201      	movs	r2, #1
 80009c4:	492f      	ldr	r1, [pc, #188]	@ (8000a84 <ili9341_DrawHLine+0xf4>)
 80009c6:	2036      	movs	r0, #54	@ 0x36
 80009c8:	f001 f8fc 	bl	8001bc4 <LCD_IO_Transaction>
  }
  ILI9341_SETWINDOW(Xpos, Xpos + Length - 1, Ypos, Ypos);
 80009cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80009d0:	813b      	strh	r3, [r7, #8]
 80009d2:	893b      	ldrh	r3, [r7, #8]
 80009d4:	ba5b      	rev16	r3, r3
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	b21b      	sxth	r3, r3
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000a88 <ili9341_DrawHLine+0xf8>)
 80009de:	801a      	strh	r2, [r3, #0]
 80009e0:	88ba      	ldrh	r2, [r7, #4]
 80009e2:	883b      	ldrh	r3, [r7, #0]
 80009e4:	4413      	add	r3, r2
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	3b01      	subs	r3, #1
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	817b      	strh	r3, [r7, #10]
 80009f0:	897b      	ldrh	r3, [r7, #10]
 80009f2:	ba5b      	rev16	r3, r3
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	b21b      	sxth	r3, r3
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	4b23      	ldr	r3, [pc, #140]	@ (8000a88 <ili9341_DrawHLine+0xf8>)
 80009fc:	805a      	strh	r2, [r3, #2]
 80009fe:	2395      	movs	r3, #149	@ 0x95
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2300      	movs	r3, #0
 8000a04:	2204      	movs	r2, #4
 8000a06:	4920      	ldr	r1, [pc, #128]	@ (8000a88 <ili9341_DrawHLine+0xf8>)
 8000a08:	202a      	movs	r0, #42	@ 0x2a
 8000a0a:	f001 f8db 	bl	8001bc4 <LCD_IO_Transaction>
 8000a0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a12:	81bb      	strh	r3, [r7, #12]
 8000a14:	89bb      	ldrh	r3, [r7, #12]
 8000a16:	ba5b      	rev16	r3, r3
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	b21b      	sxth	r3, r3
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <ili9341_DrawHLine+0xf8>)
 8000a20:	801a      	strh	r2, [r3, #0]
 8000a22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a26:	81fb      	strh	r3, [r7, #14]
 8000a28:	89fb      	ldrh	r3, [r7, #14]
 8000a2a:	ba5b      	rev16	r3, r3
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	b21b      	sxth	r3, r3
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <ili9341_DrawHLine+0xf8>)
 8000a34:	805a      	strh	r2, [r3, #2]
 8000a36:	2395      	movs	r3, #149	@ 0x95
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	4912      	ldr	r1, [pc, #72]	@ (8000a88 <ili9341_DrawHLine+0xf8>)
 8000a40:	202b      	movs	r0, #43	@ 0x2b
 8000a42:	f001 f8bf 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_DrawFill(RGBCode, Length);
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <ili9341_DrawHLine+0xfc>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00a      	beq.n	8000a64 <ili9341_DrawHLine+0xd4>
 8000a4e:	2395      	movs	r3, #149	@ 0x95
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2300      	movs	r3, #0
 8000a54:	2201      	movs	r2, #1
 8000a56:	490e      	ldr	r1, [pc, #56]	@ (8000a90 <ili9341_DrawHLine+0x100>)
 8000a58:	203a      	movs	r0, #58	@ 0x3a
 8000a5a:	f001 f8b3 	bl	8001bc4 <LCD_IO_Transaction>
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <ili9341_DrawHLine+0xfc>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	883a      	ldrh	r2, [r7, #0]
 8000a66:	1db9      	adds	r1, r7, #6
 8000a68:	f240 1325 	movw	r3, #293	@ 0x125
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	202c      	movs	r0, #44	@ 0x2c
 8000a72:	f001 f8a7 	bl	8001bc4 <LCD_IO_Transaction>
}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd90      	pop	{r4, r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000054 	.word	0x20000054
 8000a84:	0801cb51 	.word	0x0801cb51
 8000a88:	20002948 	.word	0x20002948
 8000a8c:	20002952 	.word	0x20002952
 8000a90:	0801c5e8 	.word	0x0801c5e8

08000a94 <ili9341_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af02      	add	r7, sp, #8
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	4608      	mov	r0, r1
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4623      	mov	r3, r4
 8000aa4:	80fb      	strh	r3, [r7, #6]
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	80bb      	strh	r3, [r7, #4]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	807b      	strh	r3, [r7, #2]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	803b      	strh	r3, [r7, #0]
  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_DOWN)
 8000ab2:	4b34      	ldr	r3, [pc, #208]	@ (8000b84 <ili9341_DrawVLine+0xf0>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b28      	cmp	r3, #40	@ 0x28
 8000ab8:	d00a      	beq.n	8000ad0 <ili9341_DrawVLine+0x3c>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_DOWN;
 8000aba:	4b32      	ldr	r3, [pc, #200]	@ (8000b84 <ili9341_DrawVLine+0xf0>)
 8000abc:	2228      	movs	r2, #40	@ 0x28
 8000abe:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 8000ac0:	2395      	movs	r3, #149	@ 0x95
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	492f      	ldr	r1, [pc, #188]	@ (8000b88 <ili9341_DrawVLine+0xf4>)
 8000aca:	2036      	movs	r0, #54	@ 0x36
 8000acc:	f001 f87a 	bl	8001bc4 <LCD_IO_Transaction>
  }
  ILI9341_SETWINDOW(Xpos, Xpos, Ypos, Ypos + Length - 1);
 8000ad0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ad4:	813b      	strh	r3, [r7, #8]
 8000ad6:	893b      	ldrh	r3, [r7, #8]
 8000ad8:	ba5b      	rev16	r3, r3
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	b21b      	sxth	r3, r3
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b8c <ili9341_DrawVLine+0xf8>)
 8000ae2:	801a      	strh	r2, [r3, #0]
 8000ae4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ae8:	817b      	strh	r3, [r7, #10]
 8000aea:	897b      	ldrh	r3, [r7, #10]
 8000aec:	ba5b      	rev16	r3, r3
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	b21b      	sxth	r3, r3
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	4b25      	ldr	r3, [pc, #148]	@ (8000b8c <ili9341_DrawVLine+0xf8>)
 8000af6:	805a      	strh	r2, [r3, #2]
 8000af8:	2395      	movs	r3, #149	@ 0x95
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2300      	movs	r3, #0
 8000afe:	2204      	movs	r2, #4
 8000b00:	4922      	ldr	r1, [pc, #136]	@ (8000b8c <ili9341_DrawVLine+0xf8>)
 8000b02:	202a      	movs	r0, #42	@ 0x2a
 8000b04:	f001 f85e 	bl	8001bc4 <LCD_IO_Transaction>
 8000b08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b0c:	81bb      	strh	r3, [r7, #12]
 8000b0e:	89bb      	ldrh	r3, [r7, #12]
 8000b10:	ba5b      	rev16	r3, r3
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	b21b      	sxth	r3, r3
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <ili9341_DrawVLine+0xf8>)
 8000b1a:	801a      	strh	r2, [r3, #0]
 8000b1c:	887a      	ldrh	r2, [r7, #2]
 8000b1e:	883b      	ldrh	r3, [r7, #0]
 8000b20:	4413      	add	r3, r2
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	3b01      	subs	r3, #1
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	b21b      	sxth	r3, r3
 8000b2a:	81fb      	strh	r3, [r7, #14]
 8000b2c:	89fb      	ldrh	r3, [r7, #14]
 8000b2e:	ba5b      	rev16	r3, r3
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <ili9341_DrawVLine+0xf8>)
 8000b38:	805a      	strh	r2, [r3, #2]
 8000b3a:	2395      	movs	r3, #149	@ 0x95
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	2204      	movs	r2, #4
 8000b42:	4912      	ldr	r1, [pc, #72]	@ (8000b8c <ili9341_DrawVLine+0xf8>)
 8000b44:	202b      	movs	r0, #43	@ 0x2b
 8000b46:	f001 f83d 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_DrawFill(RGBCode, Length);
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <ili9341_DrawVLine+0xfc>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00a      	beq.n	8000b68 <ili9341_DrawVLine+0xd4>
 8000b52:	2395      	movs	r3, #149	@ 0x95
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2300      	movs	r3, #0
 8000b58:	2201      	movs	r2, #1
 8000b5a:	490e      	ldr	r1, [pc, #56]	@ (8000b94 <ili9341_DrawVLine+0x100>)
 8000b5c:	203a      	movs	r0, #58	@ 0x3a
 8000b5e:	f001 f831 	bl	8001bc4 <LCD_IO_Transaction>
 8000b62:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <ili9341_DrawVLine+0xfc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
 8000b68:	883a      	ldrh	r2, [r7, #0]
 8000b6a:	1db9      	adds	r1, r7, #6
 8000b6c:	f240 1325 	movw	r3, #293	@ 0x125
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2300      	movs	r3, #0
 8000b74:	202c      	movs	r0, #44	@ 0x2c
 8000b76:	f001 f825 	bl	8001bc4 <LCD_IO_Transaction>
}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd90      	pop	{r4, r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000054 	.word	0x20000054
 8000b88:	0801cb51 	.word	0x0801cb51
 8000b8c:	20002948 	.word	0x20002948
 8000b90:	20002952 	.word	0x20002952
 8000b94:	0801c5e8 	.word	0x0801c5e8

08000b98 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4623      	mov	r3, r4
 8000ba8:	80fb      	strh	r3, [r7, #6]
 8000baa:	4603      	mov	r3, r0
 8000bac:	80bb      	strh	r3, [r7, #4]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	807b      	strh	r3, [r7, #2]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	803b      	strh	r3, [r7, #0]
  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_DOWN)
 8000bb6:	4b39      	ldr	r3, [pc, #228]	@ (8000c9c <ili9341_FillRect+0x104>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b28      	cmp	r3, #40	@ 0x28
 8000bbc:	d00a      	beq.n	8000bd4 <ili9341_FillRect+0x3c>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_DOWN;
 8000bbe:	4b37      	ldr	r3, [pc, #220]	@ (8000c9c <ili9341_FillRect+0x104>)
 8000bc0:	2228      	movs	r2, #40	@ 0x28
 8000bc2:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 8000bc4:	2395      	movs	r3, #149	@ 0x95
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4934      	ldr	r1, [pc, #208]	@ (8000ca0 <ili9341_FillRect+0x108>)
 8000bce:	2036      	movs	r0, #54	@ 0x36
 8000bd0:	f000 fff8 	bl	8001bc4 <LCD_IO_Transaction>
  }
  ILI9341_SETWINDOW(Xpos, Xpos + Xsize - 1, Ypos, Ypos + Ysize - 1);
 8000bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd8:	813b      	strh	r3, [r7, #8]
 8000bda:	893b      	ldrh	r3, [r7, #8]
 8000bdc:	ba5b      	rev16	r3, r3
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca4 <ili9341_FillRect+0x10c>)
 8000be6:	801a      	strh	r2, [r3, #0]
 8000be8:	88fa      	ldrh	r2, [r7, #6]
 8000bea:	887b      	ldrh	r3, [r7, #2]
 8000bec:	4413      	add	r3, r2
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	817b      	strh	r3, [r7, #10]
 8000bf8:	897b      	ldrh	r3, [r7, #10]
 8000bfa:	ba5b      	rev16	r3, r3
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	4b28      	ldr	r3, [pc, #160]	@ (8000ca4 <ili9341_FillRect+0x10c>)
 8000c04:	805a      	strh	r2, [r3, #2]
 8000c06:	2395      	movs	r3, #149	@ 0x95
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	4925      	ldr	r1, [pc, #148]	@ (8000ca4 <ili9341_FillRect+0x10c>)
 8000c10:	202a      	movs	r0, #42	@ 0x2a
 8000c12:	f000 ffd7 	bl	8001bc4 <LCD_IO_Transaction>
 8000c16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c1a:	81bb      	strh	r3, [r7, #12]
 8000c1c:	89bb      	ldrh	r3, [r7, #12]
 8000c1e:	ba5b      	rev16	r3, r3
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <ili9341_FillRect+0x10c>)
 8000c28:	801a      	strh	r2, [r3, #0]
 8000c2a:	88ba      	ldrh	r2, [r7, #4]
 8000c2c:	883b      	ldrh	r3, [r7, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	3b01      	subs	r3, #1
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	81fb      	strh	r3, [r7, #14]
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
 8000c3c:	ba5b      	rev16	r3, r3
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <ili9341_FillRect+0x10c>)
 8000c46:	805a      	strh	r2, [r3, #2]
 8000c48:	2395      	movs	r3, #149	@ 0x95
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	2204      	movs	r2, #4
 8000c50:	4914      	ldr	r1, [pc, #80]	@ (8000ca4 <ili9341_FillRect+0x10c>)
 8000c52:	202b      	movs	r0, #43	@ 0x2b
 8000c54:	f000 ffb6 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_DrawFill(RGBCode, Xsize * Ysize);
 8000c58:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <ili9341_FillRect+0x110>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d00a      	beq.n	8000c76 <ili9341_FillRect+0xde>
 8000c60:	2395      	movs	r3, #149	@ 0x95
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	2300      	movs	r3, #0
 8000c66:	2201      	movs	r2, #1
 8000c68:	4910      	ldr	r1, [pc, #64]	@ (8000cac <ili9341_FillRect+0x114>)
 8000c6a:	203a      	movs	r0, #58	@ 0x3a
 8000c6c:	f000 ffaa 	bl	8001bc4 <LCD_IO_Transaction>
 8000c70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <ili9341_FillRect+0x110>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	887b      	ldrh	r3, [r7, #2]
 8000c78:	883a      	ldrh	r2, [r7, #0]
 8000c7a:	fb02 f303 	mul.w	r3, r2, r3
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f240 1325 	movw	r3, #293	@ 0x125
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2300      	movs	r3, #0
 8000c88:	f107 0120 	add.w	r1, r7, #32
 8000c8c:	202c      	movs	r0, #44	@ 0x2c
 8000c8e:	f000 ff99 	bl	8001bc4 <LCD_IO_Transaction>
}
 8000c92:	bf00      	nop
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd90      	pop	{r4, r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000054 	.word	0x20000054
 8000ca0:	0801cb51 	.word	0x0801cb51
 8000ca4:	20002948 	.word	0x20002948
 8000ca8:	20002952 	.word	0x20002952
 8000cac:	0801c5e8 	.word	0x0801c5e8

08000cb0 <ili9341_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9341_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af02      	add	r7, sp, #8
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	603a      	str	r2, [r7, #0]
 8000cba:	80fb      	strh	r3, [r7, #6]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000cc6:	617b      	str	r3, [r7, #20]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000cce:	613b      	str	r3, [r7, #16]
  size = (size - index) / 2;
 8000cd0:	697a      	ldr	r2, [r7, #20]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	085b      	lsrs	r3, r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
  pbmp += index;
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4413      	add	r3, r2
 8000ce0:	603b      	str	r3, [r7, #0]

  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_UP)
 8000ce2:	4b27      	ldr	r3, [pc, #156]	@ (8000d80 <ili9341_DrawBitmap+0xd0>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	2b68      	cmp	r3, #104	@ 0x68
 8000ce8:	d00a      	beq.n	8000d00 <ili9341_DrawBitmap+0x50>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_UP;
 8000cea:	4b25      	ldr	r3, [pc, #148]	@ (8000d80 <ili9341_DrawBitmap+0xd0>)
 8000cec:	2268      	movs	r2, #104	@ 0x68
 8000cee:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenUp, 1);
 8000cf0:	2395      	movs	r3, #149	@ 0x95
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4922      	ldr	r1, [pc, #136]	@ (8000d84 <ili9341_DrawBitmap+0xd4>)
 8000cfa:	2036      	movs	r0, #54	@ 0x36
 8000cfc:	f000 ff62 	bl	8001bc4 <LCD_IO_Transaction>
  }
  transdata.d16[0] = __REVSH(ILI9341_SIZE_Y - 1 - yEnd);
 8000d00:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <ili9341_DrawBitmap+0xd8>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	b21b      	sxth	r3, r3
 8000d0c:	81bb      	strh	r3, [r7, #12]
 8000d0e:	89bb      	ldrh	r3, [r7, #12]
 8000d10:	ba5b      	rev16	r3, r3
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <ili9341_DrawBitmap+0xdc>)
 8000d1a:	801a      	strh	r2, [r3, #0]
  transdata.d16[1] = __REVSH(ILI9341_SIZE_Y - 1 - yStart);
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <ili9341_DrawBitmap+0xe0>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	b21b      	sxth	r3, r3
 8000d28:	81fb      	strh	r3, [r7, #14]
 8000d2a:	89fb      	ldrh	r3, [r7, #14]
 8000d2c:	ba5b      	rev16	r3, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <ili9341_DrawBitmap+0xdc>)
 8000d36:	805a      	strh	r2, [r3, #2]
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PASET, &transdata, 4);
 8000d38:	2395      	movs	r3, #149	@ 0x95
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	2204      	movs	r2, #4
 8000d40:	4912      	ldr	r1, [pc, #72]	@ (8000d8c <ili9341_DrawBitmap+0xdc>)
 8000d42:	202b      	movs	r0, #43	@ 0x2b
 8000d44:	f000 ff3e 	bl	8001bc4 <LCD_IO_Transaction>
  LCD_IO_DrawBitmap(pbmp, size);
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <ili9341_DrawBitmap+0xe4>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00a      	beq.n	8000d66 <ili9341_DrawBitmap+0xb6>
 8000d50:	2395      	movs	r3, #149	@ 0x95
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2300      	movs	r3, #0
 8000d56:	2201      	movs	r2, #1
 8000d58:	490f      	ldr	r1, [pc, #60]	@ (8000d98 <ili9341_DrawBitmap+0xe8>)
 8000d5a:	203a      	movs	r0, #58	@ 0x3a
 8000d5c:	f000 ff32 	bl	8001bc4 <LCD_IO_Transaction>
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <ili9341_DrawBitmap+0xe4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
 8000d66:	23a5      	movs	r3, #165	@ 0xa5
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	6839      	ldr	r1, [r7, #0]
 8000d70:	202c      	movs	r0, #44	@ 0x2c
 8000d72:	f000 ff27 	bl	8001bc4 <LCD_IO_Transaction>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000054 	.word	0x20000054
 8000d84:	0801cb50 	.word	0x0801cb50
 8000d88:	20002950 	.word	0x20002950
 8000d8c:	20002948 	.word	0x20002948
 8000d90:	2000294e 	.word	0x2000294e
 8000d94:	20002952 	.word	0x20002952
 8000d98:	0801c5e8 	.word	0x0801c5e8

08000d9c <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	4604      	mov	r4, r0
 8000da4:	4608      	mov	r0, r1
 8000da6:	4611      	mov	r1, r2
 8000da8:	461a      	mov	r2, r3
 8000daa:	4623      	mov	r3, r4
 8000dac:	80fb      	strh	r3, [r7, #6]
 8000dae:	4603      	mov	r3, r0
 8000db0:	80bb      	strh	r3, [r7, #4]
 8000db2:	460b      	mov	r3, r1
 8000db4:	807b      	strh	r3, [r7, #2]
 8000db6:	4613      	mov	r3, r2
 8000db8:	803b      	strh	r3, [r7, #0]
  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_DOWN)
 8000dba:	4b1a      	ldr	r3, [pc, #104]	@ (8000e24 <ili9341_DrawRGBImage+0x88>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b28      	cmp	r3, #40	@ 0x28
 8000dc0:	d00a      	beq.n	8000dd8 <ili9341_DrawRGBImage+0x3c>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_DOWN;
 8000dc2:	4b18      	ldr	r3, [pc, #96]	@ (8000e24 <ili9341_DrawRGBImage+0x88>)
 8000dc4:	2228      	movs	r2, #40	@ 0x28
 8000dc6:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 8000dc8:	2395      	movs	r3, #149	@ 0x95
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4915      	ldr	r1, [pc, #84]	@ (8000e28 <ili9341_DrawRGBImage+0x8c>)
 8000dd2:	2036      	movs	r0, #54	@ 0x36
 8000dd4:	f000 fef6 	bl	8001bc4 <LCD_IO_Transaction>
  }
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000dd8:	883b      	ldrh	r3, [r7, #0]
 8000dda:	887a      	ldrh	r2, [r7, #2]
 8000ddc:	88b9      	ldrh	r1, [r7, #4]
 8000dde:	88f8      	ldrh	r0, [r7, #6]
 8000de0:	f7ff fd70 	bl	80008c4 <ili9341_SetDisplayWindow>
  LCD_IO_DrawBitmap(pData, Xsize * Ysize);
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <ili9341_DrawRGBImage+0x90>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d00a      	beq.n	8000e02 <ili9341_DrawRGBImage+0x66>
 8000dec:	2395      	movs	r3, #149	@ 0x95
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2300      	movs	r3, #0
 8000df2:	2201      	movs	r2, #1
 8000df4:	490e      	ldr	r1, [pc, #56]	@ (8000e30 <ili9341_DrawRGBImage+0x94>)
 8000df6:	203a      	movs	r0, #58	@ 0x3a
 8000df8:	f000 fee4 	bl	8001bc4 <LCD_IO_Transaction>
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <ili9341_DrawRGBImage+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	887b      	ldrh	r3, [r7, #2]
 8000e04:	883a      	ldrh	r2, [r7, #0]
 8000e06:	fb02 f303 	mul.w	r3, r2, r3
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	23a5      	movs	r3, #165	@ 0xa5
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	2300      	movs	r3, #0
 8000e12:	69b9      	ldr	r1, [r7, #24]
 8000e14:	202c      	movs	r0, #44	@ 0x2c
 8000e16:	f000 fed5 	bl	8001bc4 <LCD_IO_Transaction>
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd90      	pop	{r4, r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000054 	.word	0x20000054
 8000e28:	0801cb51 	.word	0x0801cb51
 8000e2c:	20002952 	.word	0x20002952
 8000e30:	0801c5e8 	.word	0x0801c5e8

08000e34 <ili9341_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	4611      	mov	r1, r2
 8000e40:	461a      	mov	r2, r3
 8000e42:	4623      	mov	r3, r4
 8000e44:	80fb      	strh	r3, [r7, #6]
 8000e46:	4603      	mov	r3, r0
 8000e48:	80bb      	strh	r3, [r7, #4]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	807b      	strh	r3, [r7, #2]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	803b      	strh	r3, [r7, #0]
  if(LastEntry != ILI9341_MAD_DATA_RIGHT_THEN_DOWN)
 8000e52:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <ili9341_ReadRGBImage+0x88>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b28      	cmp	r3, #40	@ 0x28
 8000e58:	d00a      	beq.n	8000e70 <ili9341_ReadRGBImage+0x3c>
  {
    LastEntry = ILI9341_MAD_DATA_RIGHT_THEN_DOWN;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <ili9341_ReadRGBImage+0x88>)
 8000e5c:	2228      	movs	r2, #40	@ 0x28
 8000e5e:	701a      	strb	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_MADCTL, &EntryRightThenDown, 1);
 8000e60:	2395      	movs	r3, #149	@ 0x95
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2300      	movs	r3, #0
 8000e66:	2201      	movs	r2, #1
 8000e68:	4915      	ldr	r1, [pc, #84]	@ (8000ec0 <ili9341_ReadRGBImage+0x8c>)
 8000e6a:	2036      	movs	r0, #54	@ 0x36
 8000e6c:	f000 feaa 	bl	8001bc4 <LCD_IO_Transaction>
  }
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8000e70:	883b      	ldrh	r3, [r7, #0]
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	88b9      	ldrh	r1, [r7, #4]
 8000e76:	88f8      	ldrh	r0, [r7, #6]
 8000e78:	f7ff fd24 	bl	80008c4 <ili9341_SetDisplayWindow>
  LCD_IO_ReadBitmap(pData, Xsize * Ysize);
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <ili9341_ReadRGBImage+0x90>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10a      	bne.n	8000e9a <ili9341_ReadRGBImage+0x66>
 8000e84:	2395      	movs	r3, #149	@ 0x95
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	490e      	ldr	r1, [pc, #56]	@ (8000ec8 <ili9341_ReadRGBImage+0x94>)
 8000e8e:	203a      	movs	r0, #58	@ 0x3a
 8000e90:	f000 fe98 	bl	8001bc4 <LCD_IO_Transaction>
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <ili9341_ReadRGBImage+0x90>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	887b      	ldrh	r3, [r7, #2]
 8000e9c:	883a      	ldrh	r2, [r7, #0]
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	23c9      	movs	r3, #201	@ 0xc9
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	69b9      	ldr	r1, [r7, #24]
 8000eac:	202e      	movs	r0, #46	@ 0x2e
 8000eae:	f000 fe89 	bl	8001bc4 <LCD_IO_Transaction>
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000054 	.word	0x20000054
 8000ec0:	0801cb51 	.word	0x0801cb51
 8000ec4:	20002952 	.word	0x20002952
 8000ec8:	0801c5ec 	.word	0x0801c5ec

08000ecc <ili9341_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9341_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	@ 0x28
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80fb      	strh	r3, [r7, #6]
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	80bb      	strh	r3, [r7, #4]
 8000eda:	4613      	mov	r3, r2
 8000edc:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = __REVSH(scrparam[2]) + Scroll + __REVSH(scrparam[1]);
  else
    Scroll = Scroll + __REVSH(scrparam[1]);
  #elif (ILI9341_ORIENTATION == 1)
  if((TopFix != __REVSH(scrparam[1])) || (BottonFix != __REVSH(scrparam[3])))
 8000ede:	88bb      	ldrh	r3, [r7, #4]
 8000ee0:	4a4e      	ldr	r2, [pc, #312]	@ (800101c <ili9341_Scroll+0x150>)
 8000ee2:	8852      	ldrh	r2, [r2, #2]
 8000ee4:	b212      	sxth	r2, r2
 8000ee6:	83fa      	strh	r2, [r7, #30]
 8000ee8:	8bfa      	ldrh	r2, [r7, #30]
 8000eea:	ba52      	rev16	r2, r2
 8000eec:	b292      	uxth	r2, r2
 8000eee:	b212      	sxth	r2, r2
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d10a      	bne.n	8000f0a <ili9341_Scroll+0x3e>
 8000ef4:	887b      	ldrh	r3, [r7, #2]
 8000ef6:	4a49      	ldr	r2, [pc, #292]	@ (800101c <ili9341_Scroll+0x150>)
 8000ef8:	88d2      	ldrh	r2, [r2, #6]
 8000efa:	b212      	sxth	r2, r2
 8000efc:	83ba      	strh	r2, [r7, #28]
 8000efe:	8bba      	ldrh	r2, [r7, #28]
 8000f00:	ba52      	rev16	r2, r2
 8000f02:	b292      	uxth	r2, r2
 8000f04:	b212      	sxth	r2, r2
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d02b      	beq.n	8000f62 <ili9341_Scroll+0x96>
  {
    scrparam[1] = __REVSH(TopFix);
 8000f0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f0e:	82fb      	strh	r3, [r7, #22]
 8000f10:	8afb      	ldrh	r3, [r7, #22]
 8000f12:	ba5b      	rev16	r3, r3
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	b21b      	sxth	r3, r3
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	4b40      	ldr	r3, [pc, #256]	@ (800101c <ili9341_Scroll+0x150>)
 8000f1c:	805a      	strh	r2, [r3, #2]
    scrparam[3] = __REVSH(BottonFix);
 8000f1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f22:	833b      	strh	r3, [r7, #24]
 8000f24:	8b3b      	ldrh	r3, [r7, #24]
 8000f26:	ba5b      	rev16	r3, r3
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800101c <ili9341_Scroll+0x150>)
 8000f30:	80da      	strh	r2, [r3, #6]
    scrparam[2] = __REVSH(ILI9341_LCD_PIXEL_HEIGHT - TopFix - BottonFix);
 8000f32:	88ba      	ldrh	r2, [r7, #4]
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	4413      	add	r3, r2
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	837b      	strh	r3, [r7, #26]
 8000f44:	8b7b      	ldrh	r3, [r7, #26]
 8000f46:	ba5b      	rev16	r3, r3
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b33      	ldr	r3, [pc, #204]	@ (800101c <ili9341_Scroll+0x150>)
 8000f50:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRDEF, &scrparam[1], 6);
 8000f52:	2395      	movs	r3, #149	@ 0x95
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2300      	movs	r3, #0
 8000f58:	2206      	movs	r2, #6
 8000f5a:	4931      	ldr	r1, [pc, #196]	@ (8001020 <ili9341_Scroll+0x154>)
 8000f5c:	2033      	movs	r0, #51	@ 0x33
 8000f5e:	f000 fe31 	bl	8001bc4 <LCD_IO_Transaction>
  }
  Scroll = (0 - Scroll) % __REVSH(scrparam[2]);
 8000f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f66:	425b      	negs	r3, r3
 8000f68:	4a2c      	ldr	r2, [pc, #176]	@ (800101c <ili9341_Scroll+0x150>)
 8000f6a:	8892      	ldrh	r2, [r2, #4]
 8000f6c:	b212      	sxth	r2, r2
 8000f6e:	82ba      	strh	r2, [r7, #20]
 8000f70:	8aba      	ldrh	r2, [r7, #20]
 8000f72:	ba52      	rev16	r2, r2
 8000f74:	b292      	uxth	r2, r2
 8000f76:	b212      	sxth	r2, r2
 8000f78:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f7c:	fb01 f202 	mul.w	r2, r1, r2
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8000f84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	da18      	bge.n	8000fbe <ili9341_Scroll+0xf2>
    Scroll = __REVSH(scrparam[2]) + Scroll + __REVSH(scrparam[1]);
 8000f8c:	4b23      	ldr	r3, [pc, #140]	@ (800101c <ili9341_Scroll+0x150>)
 8000f8e:	889b      	ldrh	r3, [r3, #4]
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	823b      	strh	r3, [r7, #16]
 8000f94:	8a3b      	ldrh	r3, [r7, #16]
 8000f96:	ba5b      	rev16	r3, r3
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	b21b      	sxth	r3, r3
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <ili9341_Scroll+0x150>)
 8000fa6:	885b      	ldrh	r3, [r3, #2]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	827b      	strh	r3, [r7, #18]
 8000fac:	8a7b      	ldrh	r3, [r7, #18]
 8000fae:	ba5b      	rev16	r3, r3
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	80fb      	strh	r3, [r7, #6]
 8000fbc:	e00c      	b.n	8000fd8 <ili9341_Scroll+0x10c>
  else
    Scroll = Scroll + __REVSH(scrparam[1]);
 8000fbe:	4b17      	ldr	r3, [pc, #92]	@ (800101c <ili9341_Scroll+0x150>)
 8000fc0:	885b      	ldrh	r3, [r3, #2]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	81fb      	strh	r3, [r7, #14]
 8000fc6:	89fb      	ldrh	r3, [r7, #14]
 8000fc8:	ba5b      	rev16	r3, r3
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = __REVSH(scrparam[2]) + Scroll + __REVSH(scrparam[1]);
  else
    Scroll = Scroll + __REVSH(scrparam[1]);
  #endif
  if(Scroll != __REVSH(scrparam[0]))
 8000fd8:	4b10      	ldr	r3, [pc, #64]	@ (800101c <ili9341_Scroll+0x150>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	81bb      	strh	r3, [r7, #12]
 8000fe0:	89bb      	ldrh	r3, [r7, #12]
 8000fe2:	ba5b      	rev16	r3, r3
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d010      	beq.n	8001012 <ili9341_Scroll+0x146>
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	817b      	strh	r3, [r7, #10]
 8000ff4:	897b      	ldrh	r3, [r7, #10]
 8000ff6:	ba5b      	rev16	r3, r3
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	b21b      	sxth	r3, r3
  {
    scrparam[0] = __REVSH(Scroll);
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <ili9341_Scroll+0x150>)
 8001000:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, &scrparam[0], 2);
 8001002:	2395      	movs	r3, #149	@ 0x95
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2300      	movs	r3, #0
 8001008:	2202      	movs	r2, #2
 800100a:	4904      	ldr	r1, [pc, #16]	@ (800101c <ili9341_Scroll+0x150>)
 800100c:	2037      	movs	r0, #55	@ 0x37
 800100e:	f000 fdd9 	bl	8001bc4 <LCD_IO_Transaction>
  }
}
 8001012:	bf00      	nop
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20002954 	.word	0x20002954
 8001020:	20002956 	.word	0x20002956

08001024 <ili9341_UserCommand>:
  * @param  Size      : data number
  * @param  Mode      : 0=write 8bits datas, 1=0=write 16bits datas, 2=read 8bits datas, 3=read 16bits datas
  * @retval None
  */
void ili9341_UserCommand(uint16_t Command, uint8_t* pData, uint32_t Size, uint8_t Mode)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	461a      	mov	r2, r3
 8001030:	4603      	mov	r3, r0
 8001032:	81fb      	strh	r3, [r7, #14]
 8001034:	4613      	mov	r3, r2
 8001036:	737b      	strb	r3, [r7, #13]
  if(Mode == 0)
 8001038:	7b7b      	ldrb	r3, [r7, #13]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10a      	bne.n	8001054 <ili9341_UserCommand+0x30>
    LCD_IO_WriteCmd8MultipleData8((uint8_t)Command, pData, Size);
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4618      	mov	r0, r3
 8001044:	2395      	movs	r3, #149	@ 0x95
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2300      	movs	r3, #0
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	f000 fdb9 	bl	8001bc4 <LCD_IO_Transaction>
    LCD_IO_WriteCmd8MultipleData16((uint8_t)Command, pData, Size);
  else if(Mode == 2)
    LCD_IO_ReadCmd8MultipleData8((uint8_t)Command, pData, Size, 1);
  else if(Mode == 3)
    LCD_IO_ReadCmd8MultipleData16((uint8_t)Command, pData, Size, 1);
}
 8001052:	e028      	b.n	80010a6 <ili9341_UserCommand+0x82>
  else if(Mode == 1)
 8001054:	7b7b      	ldrb	r3, [r7, #13]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d10a      	bne.n	8001070 <ili9341_UserCommand+0x4c>
    LCD_IO_WriteCmd8MultipleData16((uint8_t)Command, pData, Size);
 800105a:	89fb      	ldrh	r3, [r7, #14]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	23a5      	movs	r3, #165	@ 0xa5
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2300      	movs	r3, #0
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	f000 fdab 	bl	8001bc4 <LCD_IO_Transaction>
}
 800106e:	e01a      	b.n	80010a6 <ili9341_UserCommand+0x82>
  else if(Mode == 2)
 8001070:	7b7b      	ldrb	r3, [r7, #13]
 8001072:	2b02      	cmp	r3, #2
 8001074:	d10a      	bne.n	800108c <ili9341_UserCommand+0x68>
    LCD_IO_ReadCmd8MultipleData8((uint8_t)Command, pData, Size, 1);
 8001076:	89fb      	ldrh	r3, [r7, #14]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4618      	mov	r0, r3
 800107c:	2399      	movs	r3, #153	@ 0x99
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	f000 fd9d 	bl	8001bc4 <LCD_IO_Transaction>
}
 800108a:	e00c      	b.n	80010a6 <ili9341_UserCommand+0x82>
  else if(Mode == 3)
 800108c:	7b7b      	ldrb	r3, [r7, #13]
 800108e:	2b03      	cmp	r3, #3
 8001090:	d109      	bne.n	80010a6 <ili9341_UserCommand+0x82>
    LCD_IO_ReadCmd8MultipleData16((uint8_t)Command, pData, Size, 1);
 8001092:	89fb      	ldrh	r3, [r7, #14]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4618      	mov	r0, r3
 8001098:	23a9      	movs	r3, #169	@ 0xa9
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	f000 fd8f 	bl	8001bc4 <LCD_IO_Transaction>
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80010ae:	b490      	push	{r4, r7}
 80010b0:	b088      	sub	sp, #32
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	461a      	mov	r2, r3
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	0e1b      	lsrs	r3, r3, #24
 80010c2:	4413      	add	r3, r2
 80010c4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80010c6:	6822      	ldr	r2, [r4, #0]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa93 f3a3 	rbit	r3, r3
 80010d2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	fab3 f383 	clz	r3, r3
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	210f      	movs	r1, #15
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	401a      	ands	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	fa93 f3a3 	rbit	r3, r3
 80010f2:	61bb      	str	r3, [r7, #24]
  return result;
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fab3 f383 	clz	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	4313      	orrs	r3, r2
 8001106:	6023      	str	r3, [r4, #0]
}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bc90      	pop	{r4, r7}
 8001110:	4770      	bx	lr
	...

08001114 <LCDDirRead>:
//-----------------------------------------------------------------------------
#if LCD_DATADIR == 1

/* Sets the data pins to input */
void LCDDirRead(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  #ifdef LCD_DIRREAD
  LCD_DIRREAD;
  #else
  LL_GPIO_SetPinMode(LCD_D0_GPIO_Port, LCD_D0_Pin, LL_GPIO_MODE_INPUT);
 8001118:	2208      	movs	r2, #8
 800111a:	2101      	movs	r1, #1
 800111c:	482b      	ldr	r0, [pc, #172]	@ (80011cc <LCDDirRead+0xb8>)
 800111e:	f7ff ffc6 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D1_GPIO_Port, LCD_D1_Pin, LL_GPIO_MODE_INPUT);
 8001122:	2208      	movs	r2, #8
 8001124:	2102      	movs	r1, #2
 8001126:	4829      	ldr	r0, [pc, #164]	@ (80011cc <LCDDirRead+0xb8>)
 8001128:	f7ff ffc1 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D2_GPIO_Port, LCD_D2_Pin, LL_GPIO_MODE_INPUT);
 800112c:	2208      	movs	r2, #8
 800112e:	2104      	movs	r1, #4
 8001130:	4826      	ldr	r0, [pc, #152]	@ (80011cc <LCDDirRead+0xb8>)
 8001132:	f7ff ffbc 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D3_GPIO_Port, LCD_D3_Pin, LL_GPIO_MODE_INPUT);
 8001136:	2208      	movs	r2, #8
 8001138:	2108      	movs	r1, #8
 800113a:	4824      	ldr	r0, [pc, #144]	@ (80011cc <LCDDirRead+0xb8>)
 800113c:	f7ff ffb7 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D4_GPIO_Port, LCD_D4_Pin, LL_GPIO_MODE_INPUT);
 8001140:	2208      	movs	r2, #8
 8001142:	2110      	movs	r1, #16
 8001144:	4821      	ldr	r0, [pc, #132]	@ (80011cc <LCDDirRead+0xb8>)
 8001146:	f7ff ffb2 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D5_GPIO_Port, LCD_D5_Pin, LL_GPIO_MODE_INPUT);
 800114a:	2208      	movs	r2, #8
 800114c:	2120      	movs	r1, #32
 800114e:	481f      	ldr	r0, [pc, #124]	@ (80011cc <LCDDirRead+0xb8>)
 8001150:	f7ff ffad 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D6_GPIO_Port, LCD_D6_Pin, LL_GPIO_MODE_INPUT);
 8001154:	2208      	movs	r2, #8
 8001156:	2140      	movs	r1, #64	@ 0x40
 8001158:	481c      	ldr	r0, [pc, #112]	@ (80011cc <LCDDirRead+0xb8>)
 800115a:	f7ff ffa8 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D7_GPIO_Port, LCD_D7_Pin, LL_GPIO_MODE_INPUT);
 800115e:	2208      	movs	r2, #8
 8001160:	2180      	movs	r1, #128	@ 0x80
 8001162:	481a      	ldr	r0, [pc, #104]	@ (80011cc <LCDDirRead+0xb8>)
 8001164:	f7ff ffa3 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D8_GPIO_Port, LCD_D8_Pin, LL_GPIO_MODE_INPUT);
 8001168:	2208      	movs	r2, #8
 800116a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800116e:	4817      	ldr	r0, [pc, #92]	@ (80011cc <LCDDirRead+0xb8>)
 8001170:	f7ff ff9d 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D9_GPIO_Port, LCD_D9_Pin, LL_GPIO_MODE_INPUT);
 8001174:	2208      	movs	r2, #8
 8001176:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800117a:	4814      	ldr	r0, [pc, #80]	@ (80011cc <LCDDirRead+0xb8>)
 800117c:	f7ff ff97 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D10_GPIO_Port, LCD_D10_Pin, LL_GPIO_MODE_INPUT);
 8001180:	2208      	movs	r2, #8
 8001182:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001186:	4811      	ldr	r0, [pc, #68]	@ (80011cc <LCDDirRead+0xb8>)
 8001188:	f7ff ff91 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D11_GPIO_Port, LCD_D11_Pin, LL_GPIO_MODE_INPUT);
 800118c:	2208      	movs	r2, #8
 800118e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001192:	480e      	ldr	r0, [pc, #56]	@ (80011cc <LCDDirRead+0xb8>)
 8001194:	f7ff ff8b 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D12_GPIO_Port, LCD_D12_Pin, LL_GPIO_MODE_INPUT);
 8001198:	2208      	movs	r2, #8
 800119a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800119e:	480b      	ldr	r0, [pc, #44]	@ (80011cc <LCDDirRead+0xb8>)
 80011a0:	f7ff ff85 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D13_GPIO_Port, LCD_D13_Pin, LL_GPIO_MODE_INPUT);
 80011a4:	2208      	movs	r2, #8
 80011a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011aa:	4808      	ldr	r0, [pc, #32]	@ (80011cc <LCDDirRead+0xb8>)
 80011ac:	f7ff ff7f 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D14_GPIO_Port, LCD_D14_Pin, LL_GPIO_MODE_INPUT);
 80011b0:	2208      	movs	r2, #8
 80011b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011b6:	4805      	ldr	r0, [pc, #20]	@ (80011cc <LCDDirRead+0xb8>)
 80011b8:	f7ff ff79 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D15_GPIO_Port, LCD_D15_Pin, LL_GPIO_MODE_INPUT);
 80011bc:	2208      	movs	r2, #8
 80011be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011c2:	4802      	ldr	r0, [pc, #8]	@ (80011cc <LCDDirRead+0xb8>)
 80011c4:	f7ff ff73 	bl	80010ae <LL_GPIO_SetPinMode>
  #endif
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40011800 	.word	0x40011800

080011d0 <LCDDirWrite>:

//-----------------------------------------------------------------------------
/* Sets the data pins to output */
void LCDDirWrite(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  #ifdef LCD_DIRWRITE
  LCD_DIRWRITE;
  #else
  LL_GPIO_SetPinMode(LCD_D0_GPIO_Port, LCD_D0_Pin, LL_GPIO_MODE_OUTPUT);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2101      	movs	r1, #1
 80011d8:	482b      	ldr	r0, [pc, #172]	@ (8001288 <LCDDirWrite+0xb8>)
 80011da:	f7ff ff68 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D1_GPIO_Port, LCD_D1_Pin, LL_GPIO_MODE_OUTPUT);
 80011de:	2201      	movs	r2, #1
 80011e0:	2102      	movs	r1, #2
 80011e2:	4829      	ldr	r0, [pc, #164]	@ (8001288 <LCDDirWrite+0xb8>)
 80011e4:	f7ff ff63 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D2_GPIO_Port, LCD_D2_Pin, LL_GPIO_MODE_OUTPUT);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2104      	movs	r1, #4
 80011ec:	4826      	ldr	r0, [pc, #152]	@ (8001288 <LCDDirWrite+0xb8>)
 80011ee:	f7ff ff5e 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D3_GPIO_Port, LCD_D3_Pin, LL_GPIO_MODE_OUTPUT);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2108      	movs	r1, #8
 80011f6:	4824      	ldr	r0, [pc, #144]	@ (8001288 <LCDDirWrite+0xb8>)
 80011f8:	f7ff ff59 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D4_GPIO_Port, LCD_D4_Pin, LL_GPIO_MODE_OUTPUT);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2110      	movs	r1, #16
 8001200:	4821      	ldr	r0, [pc, #132]	@ (8001288 <LCDDirWrite+0xb8>)
 8001202:	f7ff ff54 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D5_GPIO_Port, LCD_D5_Pin, LL_GPIO_MODE_OUTPUT);
 8001206:	2201      	movs	r2, #1
 8001208:	2120      	movs	r1, #32
 800120a:	481f      	ldr	r0, [pc, #124]	@ (8001288 <LCDDirWrite+0xb8>)
 800120c:	f7ff ff4f 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D6_GPIO_Port, LCD_D6_Pin, LL_GPIO_MODE_OUTPUT);
 8001210:	2201      	movs	r2, #1
 8001212:	2140      	movs	r1, #64	@ 0x40
 8001214:	481c      	ldr	r0, [pc, #112]	@ (8001288 <LCDDirWrite+0xb8>)
 8001216:	f7ff ff4a 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D7_GPIO_Port, LCD_D7_Pin, LL_GPIO_MODE_OUTPUT);
 800121a:	2201      	movs	r2, #1
 800121c:	2180      	movs	r1, #128	@ 0x80
 800121e:	481a      	ldr	r0, [pc, #104]	@ (8001288 <LCDDirWrite+0xb8>)
 8001220:	f7ff ff45 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D8_GPIO_Port, LCD_D8_Pin, LL_GPIO_MODE_OUTPUT);
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800122a:	4817      	ldr	r0, [pc, #92]	@ (8001288 <LCDDirWrite+0xb8>)
 800122c:	f7ff ff3f 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D9_GPIO_Port, LCD_D9_Pin, LL_GPIO_MODE_OUTPUT);
 8001230:	2201      	movs	r2, #1
 8001232:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001236:	4814      	ldr	r0, [pc, #80]	@ (8001288 <LCDDirWrite+0xb8>)
 8001238:	f7ff ff39 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D10_GPIO_Port, LCD_D10_Pin, LL_GPIO_MODE_OUTPUT);
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001242:	4811      	ldr	r0, [pc, #68]	@ (8001288 <LCDDirWrite+0xb8>)
 8001244:	f7ff ff33 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D11_GPIO_Port, LCD_D11_Pin, LL_GPIO_MODE_OUTPUT);
 8001248:	2201      	movs	r2, #1
 800124a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800124e:	480e      	ldr	r0, [pc, #56]	@ (8001288 <LCDDirWrite+0xb8>)
 8001250:	f7ff ff2d 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D12_GPIO_Port, LCD_D12_Pin, LL_GPIO_MODE_OUTPUT);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800125a:	480b      	ldr	r0, [pc, #44]	@ (8001288 <LCDDirWrite+0xb8>)
 800125c:	f7ff ff27 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D13_GPIO_Port, LCD_D13_Pin, LL_GPIO_MODE_OUTPUT);
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001266:	4808      	ldr	r0, [pc, #32]	@ (8001288 <LCDDirWrite+0xb8>)
 8001268:	f7ff ff21 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D14_GPIO_Port, LCD_D14_Pin, LL_GPIO_MODE_OUTPUT);
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001272:	4805      	ldr	r0, [pc, #20]	@ (8001288 <LCDDirWrite+0xb8>)
 8001274:	f7ff ff1b 	bl	80010ae <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(LCD_D15_GPIO_Port, LCD_D15_Pin, LL_GPIO_MODE_OUTPUT);
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800127e:	4802      	ldr	r0, [pc, #8]	@ (8001288 <LCDDirWrite+0xb8>)
 8001280:	f7ff ff15 	bl	80010ae <LL_GPIO_SetPinMode>
  #endif
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40011800 	.word	0x40011800

0800128c <LCDRead8>:

//-----------------------------------------------------------------------------
/* Read the data pins */
uint8_t LCDRead8(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	71fb      	strb	r3, [r7, #7]
  #ifdef LCD_READ
  LCD_READ(ret);
  #else
  if(HAL_GPIO_ReadPin(LCD_D0_GPIO_Port, LCD_D0_Pin))
 8001296:	2101      	movs	r1, #1
 8001298:	482c      	ldr	r0, [pc, #176]	@ (800134c <LCDRead8+0xc0>)
 800129a:	f019 fb3f 	bl	801a91c <HAL_GPIO_ReadPin>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <LCDRead8+0x1c>
    ret = 0x01;
 80012a4:	2301      	movs	r3, #1
 80012a6:	71fb      	strb	r3, [r7, #7]
  if(HAL_GPIO_ReadPin(LCD_D1_GPIO_Port, LCD_D1_Pin))
 80012a8:	2102      	movs	r1, #2
 80012aa:	4828      	ldr	r0, [pc, #160]	@ (800134c <LCDRead8+0xc0>)
 80012ac:	f019 fb36 	bl	801a91c <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <LCDRead8+0x32>
    ret |= 0x02;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	71fb      	strb	r3, [r7, #7]
  if(HAL_GPIO_ReadPin(LCD_D2_GPIO_Port, LCD_D2_Pin))
 80012be:	2104      	movs	r1, #4
 80012c0:	4822      	ldr	r0, [pc, #136]	@ (800134c <LCDRead8+0xc0>)
 80012c2:	f019 fb2b 	bl	801a91c <HAL_GPIO_ReadPin>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <LCDRead8+0x48>
    ret |= 0x04;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	71fb      	strb	r3, [r7, #7]
  if(HAL_GPIO_ReadPin(LCD_D3_GPIO_Port, LCD_D3_Pin))
 80012d4:	2108      	movs	r1, #8
 80012d6:	481d      	ldr	r0, [pc, #116]	@ (800134c <LCDRead8+0xc0>)
 80012d8:	f019 fb20 	bl	801a91c <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <LCDRead8+0x5e>
    ret |= 0x08;
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	71fb      	strb	r3, [r7, #7]
  if(HAL_GPIO_ReadPin(LCD_D4_GPIO_Port, LCD_D4_Pin))
 80012ea:	2110      	movs	r1, #16
 80012ec:	4817      	ldr	r0, [pc, #92]	@ (800134c <LCDRead8+0xc0>)
 80012ee:	f019 fb15 	bl	801a91c <HAL_GPIO_ReadPin>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <LCDRead8+0x74>
    ret |= 0x10;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	71fb      	strb	r3, [r7, #7]
  if(HAL_GPIO_ReadPin(LCD_D5_GPIO_Port, LCD_D5_Pin))
 8001300:	2120      	movs	r1, #32
 8001302:	4812      	ldr	r0, [pc, #72]	@ (800134c <LCDRead8+0xc0>)
 8001304:	f019 fb0a 	bl	801a91c <HAL_GPIO_ReadPin>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <LCDRead8+0x8a>
    ret |= 0x20;
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	f043 0320 	orr.w	r3, r3, #32
 8001314:	71fb      	strb	r3, [r7, #7]
  if(HAL_GPIO_ReadPin(LCD_D6_GPIO_Port, LCD_D6_Pin))
 8001316:	2140      	movs	r1, #64	@ 0x40
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <LCDRead8+0xc0>)
 800131a:	f019 faff 	bl	801a91c <HAL_GPIO_ReadPin>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <LCDRead8+0xa0>
    ret |= 0x40;
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800132a:	71fb      	strb	r3, [r7, #7]
  if(HAL_GPIO_ReadPin(LCD_D7_GPIO_Port, LCD_D7_Pin))
 800132c:	2180      	movs	r1, #128	@ 0x80
 800132e:	4807      	ldr	r0, [pc, #28]	@ (800134c <LCDRead8+0xc0>)
 8001330:	f019 faf4 	bl	801a91c <HAL_GPIO_ReadPin>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <LCDRead8+0xb6>
    ret |= 0x80;
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001340:	71fb      	strb	r3, [r7, #7]
  #endif
  return ret;
 8001342:	79fb      	ldrb	r3, [r7, #7]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40011800 	.word	0x40011800

08001350 <LCDRead16>:

//-----------------------------------------------------------------------------
/* Read the data pins */
uint16_t LCDRead16(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  uint16_t ret = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	80fb      	strh	r3, [r7, #6]
  #ifdef LCD_READ
  LCD_READ(ret);
  #else
  if(HAL_GPIO_ReadPin(LCD_D0_GPIO_Port, LCD_D0_Pin))
 800135a:	2101      	movs	r1, #1
 800135c:	485d      	ldr	r0, [pc, #372]	@ (80014d4 <LCDRead16+0x184>)
 800135e:	f019 fadd 	bl	801a91c <HAL_GPIO_ReadPin>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <LCDRead16+0x1c>
    ret = 0x0001;
 8001368:	2301      	movs	r3, #1
 800136a:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(LCD_D1_GPIO_Port, LCD_D1_Pin))
 800136c:	2102      	movs	r1, #2
 800136e:	4859      	ldr	r0, [pc, #356]	@ (80014d4 <LCDRead16+0x184>)
 8001370:	f019 fad4 	bl	801a91c <HAL_GPIO_ReadPin>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <LCDRead16+0x32>
    ret |= 0x0002;
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(LCD_D2_GPIO_Port, LCD_D2_Pin))
 8001382:	2104      	movs	r1, #4
 8001384:	4853      	ldr	r0, [pc, #332]	@ (80014d4 <LCDRead16+0x184>)
 8001386:	f019 fac9 	bl	801a91c <HAL_GPIO_ReadPin>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <LCDRead16+0x48>
    ret |= 0x0004;
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(LCD_D3_GPIO_Port, LCD_D3_Pin))
 8001398:	2108      	movs	r1, #8
 800139a:	484e      	ldr	r0, [pc, #312]	@ (80014d4 <LCDRead16+0x184>)
 800139c:	f019 fabe 	bl	801a91c <HAL_GPIO_ReadPin>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <LCDRead16+0x5e>
    ret |= 0x0008;
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(LCD_D4_GPIO_Port, LCD_D4_Pin))
 80013ae:	2110      	movs	r1, #16
 80013b0:	4848      	ldr	r0, [pc, #288]	@ (80014d4 <LCDRead16+0x184>)
 80013b2:	f019 fab3 	bl	801a91c <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <LCDRead16+0x74>
    ret |= 0x0010;
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	f043 0310 	orr.w	r3, r3, #16
 80013c2:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(LCD_D5_GPIO_Port, LCD_D5_Pin))
 80013c4:	2120      	movs	r1, #32
 80013c6:	4843      	ldr	r0, [pc, #268]	@ (80014d4 <LCDRead16+0x184>)
 80013c8:	f019 faa8 	bl	801a91c <HAL_GPIO_ReadPin>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <LCDRead16+0x8a>
    ret |= 0x0020;
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	f043 0320 	orr.w	r3, r3, #32
 80013d8:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(LCD_D6_GPIO_Port, LCD_D6_Pin))
 80013da:	2140      	movs	r1, #64	@ 0x40
 80013dc:	483d      	ldr	r0, [pc, #244]	@ (80014d4 <LCDRead16+0x184>)
 80013de:	f019 fa9d 	bl	801a91c <HAL_GPIO_ReadPin>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <LCDRead16+0xa0>
    ret |= 0x0040;
 80013e8:	88fb      	ldrh	r3, [r7, #6]
 80013ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ee:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(LCD_D7_GPIO_Port, LCD_D7_Pin))
 80013f0:	2180      	movs	r1, #128	@ 0x80
 80013f2:	4838      	ldr	r0, [pc, #224]	@ (80014d4 <LCDRead16+0x184>)
 80013f4:	f019 fa92 	bl	801a91c <HAL_GPIO_ReadPin>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <LCDRead16+0xb6>
    ret |= 0x0080;
 80013fe:	88fb      	ldrh	r3, [r7, #6]
 8001400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001404:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(LCD_D8_GPIO_Port, LCD_D8_Pin))
 8001406:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800140a:	4832      	ldr	r0, [pc, #200]	@ (80014d4 <LCDRead16+0x184>)
 800140c:	f019 fa86 	bl	801a91c <HAL_GPIO_ReadPin>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <LCDRead16+0xcc>
    ret = 0x0100;
 8001416:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800141a:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(LCD_D9_GPIO_Port, LCD_D9_Pin))
 800141c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001420:	482c      	ldr	r0, [pc, #176]	@ (80014d4 <LCDRead16+0x184>)
 8001422:	f019 fa7b 	bl	801a91c <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <LCDRead16+0xe4>
    ret |= 0x0200;
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001432:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(LCD_D10_GPIO_Port, LCD_D10_Pin))
 8001434:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001438:	4826      	ldr	r0, [pc, #152]	@ (80014d4 <LCDRead16+0x184>)
 800143a:	f019 fa6f 	bl	801a91c <HAL_GPIO_ReadPin>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <LCDRead16+0xfc>
    ret |= 0x0400;
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800144a:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(LCD_D11_GPIO_Port, LCD_D11_Pin))
 800144c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001450:	4820      	ldr	r0, [pc, #128]	@ (80014d4 <LCDRead16+0x184>)
 8001452:	f019 fa63 	bl	801a91c <HAL_GPIO_ReadPin>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <LCDRead16+0x114>
    ret |= 0x0800;
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001462:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(LCD_D12_GPIO_Port, LCD_D12_Pin))
 8001464:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001468:	481a      	ldr	r0, [pc, #104]	@ (80014d4 <LCDRead16+0x184>)
 800146a:	f019 fa57 	bl	801a91c <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <LCDRead16+0x12c>
    ret |= 0x1000;
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800147a:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(LCD_D13_GPIO_Port, LCD_D13_Pin))
 800147c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001480:	4814      	ldr	r0, [pc, #80]	@ (80014d4 <LCDRead16+0x184>)
 8001482:	f019 fa4b 	bl	801a91c <HAL_GPIO_ReadPin>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <LCDRead16+0x144>
    ret |= 0x2000;
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001492:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(LCD_D14_GPIO_Port, LCD_D14_Pin))
 8001494:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001498:	480e      	ldr	r0, [pc, #56]	@ (80014d4 <LCDRead16+0x184>)
 800149a:	f019 fa3f 	bl	801a91c <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <LCDRead16+0x15c>
    ret |= 0x4000;
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014aa:	80fb      	strh	r3, [r7, #6]
  if(HAL_GPIO_ReadPin(LCD_D15_GPIO_Port, LCD_D15_Pin))
 80014ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014b0:	4808      	ldr	r0, [pc, #32]	@ (80014d4 <LCDRead16+0x184>)
 80014b2:	f019 fa33 	bl	801a91c <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <LCDRead16+0x178>
    ret |= 0x8000;
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014c6:	80fb      	strh	r3, [r7, #6]
  #endif
  return ret;
 80014c8:	88fb      	ldrh	r3, [r7, #6]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40011800 	.word	0x40011800

080014d8 <LCDWrite8>:
pre_dt;

//-----------------------------------------------------------------------------
/* Write the data pins */
void LCDWrite8(uint8_t dt)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  #ifdef LCD_WRITE
  LCD_WRITE((uint16_t)dt);
  #else
  if(dt != pre_dt.dt8)
 80014e2:	4b2a      	ldr	r3, [pc, #168]	@ (800158c <LCDWrite8+0xb4>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	79fa      	ldrb	r2, [r7, #7]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d04a      	beq.n	8001582 <LCDWrite8+0xaa>
  {
    pre_dt.dt8 = dt;
 80014ec:	4a27      	ldr	r2, [pc, #156]	@ (800158c <LCDWrite8+0xb4>)
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	7013      	strb	r3, [r2, #0]
    HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, dt & 0x01);
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	461a      	mov	r2, r3
 80014fc:	2101      	movs	r1, #1
 80014fe:	4824      	ldr	r0, [pc, #144]	@ (8001590 <LCDWrite8+0xb8>)
 8001500:	f019 fa23 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, dt & 0x02);
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	b2db      	uxtb	r3, r3
 800150c:	461a      	mov	r2, r3
 800150e:	2102      	movs	r1, #2
 8001510:	481f      	ldr	r0, [pc, #124]	@ (8001590 <LCDWrite8+0xb8>)
 8001512:	f019 fa1a 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, dt & 0x04);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	b2db      	uxtb	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	2104      	movs	r1, #4
 8001522:	481b      	ldr	r0, [pc, #108]	@ (8001590 <LCDWrite8+0xb8>)
 8001524:	f019 fa11 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, dt & 0x08);
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	2108      	movs	r1, #8
 8001534:	4816      	ldr	r0, [pc, #88]	@ (8001590 <LCDWrite8+0xb8>)
 8001536:	f019 fa08 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, dt & 0x10);
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	b2db      	uxtb	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	2110      	movs	r1, #16
 8001546:	4812      	ldr	r0, [pc, #72]	@ (8001590 <LCDWrite8+0xb8>)
 8001548:	f019 f9ff 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, dt & 0x20);
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f003 0320 	and.w	r3, r3, #32
 8001552:	b2db      	uxtb	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	2120      	movs	r1, #32
 8001558:	480d      	ldr	r0, [pc, #52]	@ (8001590 <LCDWrite8+0xb8>)
 800155a:	f019 f9f6 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, dt & 0x40);
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001564:	b2db      	uxtb	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	2140      	movs	r1, #64	@ 0x40
 800156a:	4809      	ldr	r0, [pc, #36]	@ (8001590 <LCDWrite8+0xb8>)
 800156c:	f019 f9ed 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, dt & 0x80);
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001576:	b2db      	uxtb	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	2180      	movs	r1, #128	@ 0x80
 800157c:	4804      	ldr	r0, [pc, #16]	@ (8001590 <LCDWrite8+0xb8>)
 800157e:	f019 f9e4 	bl	801a94a <HAL_GPIO_WritePin>
  }
  #endif
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000295c 	.word	0x2000295c
 8001590:	40011800 	.word	0x40011800

08001594 <LCDWrite16>:

/* Write the data pins */
void LCDWrite16(uint16_t dt)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	80fb      	strh	r3, [r7, #6]
  #ifdef LCD_WRITE
  LCD_WRITE(dt);
  #else
  if(dt != pre_dt.dt16)
 800159e:	4b65      	ldr	r3, [pc, #404]	@ (8001734 <LCDWrite16+0x1a0>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	88fa      	ldrh	r2, [r7, #6]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	f000 80c0 	beq.w	800172a <LCDWrite16+0x196>
  {
    pre_dt.dt16 = dt;
 80015aa:	4a62      	ldr	r2, [pc, #392]	@ (8001734 <LCDWrite16+0x1a0>)
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	8013      	strh	r3, [r2, #0]
    HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, dt & 0x0001);
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	2101      	movs	r1, #1
 80015be:	485e      	ldr	r0, [pc, #376]	@ (8001738 <LCDWrite16+0x1a4>)
 80015c0:	f019 f9c3 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, dt & 0x0002);
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	2102      	movs	r1, #2
 80015d2:	4859      	ldr	r0, [pc, #356]	@ (8001738 <LCDWrite16+0x1a4>)
 80015d4:	f019 f9b9 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, dt & 0x0004);
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	2104      	movs	r1, #4
 80015e6:	4854      	ldr	r0, [pc, #336]	@ (8001738 <LCDWrite16+0x1a4>)
 80015e8:	f019 f9af 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, dt & 0x0008);
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	2108      	movs	r1, #8
 80015fa:	484f      	ldr	r0, [pc, #316]	@ (8001738 <LCDWrite16+0x1a4>)
 80015fc:	f019 f9a5 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, dt & 0x0010);
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	b2db      	uxtb	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	2110      	movs	r1, #16
 800160e:	484a      	ldr	r0, [pc, #296]	@ (8001738 <LCDWrite16+0x1a4>)
 8001610:	f019 f99b 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, dt & 0x0020);
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	b2db      	uxtb	r3, r3
 800161e:	461a      	mov	r2, r3
 8001620:	2120      	movs	r1, #32
 8001622:	4845      	ldr	r0, [pc, #276]	@ (8001738 <LCDWrite16+0x1a4>)
 8001624:	f019 f991 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, dt & 0x0040);
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461a      	mov	r2, r3
 8001634:	2140      	movs	r1, #64	@ 0x40
 8001636:	4840      	ldr	r0, [pc, #256]	@ (8001738 <LCDWrite16+0x1a4>)
 8001638:	f019 f987 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, dt & 0x0080);
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001644:	b2db      	uxtb	r3, r3
 8001646:	461a      	mov	r2, r3
 8001648:	2180      	movs	r1, #128	@ 0x80
 800164a:	483b      	ldr	r0, [pc, #236]	@ (8001738 <LCDWrite16+0x1a4>)
 800164c:	f019 f97d 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D8_GPIO_Port, LCD_D8_Pin, ((dt & 0x0100) == 0x0100));
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf14      	ite	ne
 800165a:	2301      	movne	r3, #1
 800165c:	2300      	moveq	r3, #0
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001666:	4834      	ldr	r0, [pc, #208]	@ (8001738 <LCDWrite16+0x1a4>)
 8001668:	f019 f96f 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D9_GPIO_Port, LCD_D9_Pin, ((dt & 0x0200) == 0x0200));
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf14      	ite	ne
 8001676:	2301      	movne	r3, #1
 8001678:	2300      	moveq	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001682:	482d      	ldr	r0, [pc, #180]	@ (8001738 <LCDWrite16+0x1a4>)
 8001684:	f019 f961 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D10_GPIO_Port, LCD_D10_Pin, ((dt & 0x0400) == 0x0400));
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800168e:	2b00      	cmp	r3, #0
 8001690:	bf14      	ite	ne
 8001692:	2301      	movne	r3, #1
 8001694:	2300      	moveq	r3, #0
 8001696:	b2db      	uxtb	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800169e:	4826      	ldr	r0, [pc, #152]	@ (8001738 <LCDWrite16+0x1a4>)
 80016a0:	f019 f953 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D11_GPIO_Port, LCD_D11_Pin, ((dt & 0x0800) == 0x0800));
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bf14      	ite	ne
 80016ae:	2301      	movne	r3, #1
 80016b0:	2300      	moveq	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016ba:	481f      	ldr	r0, [pc, #124]	@ (8001738 <LCDWrite16+0x1a4>)
 80016bc:	f019 f945 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D12_GPIO_Port, LCD_D12_Pin, ((dt & 0x1000) == 0x1000));
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bf14      	ite	ne
 80016ca:	2301      	movne	r3, #1
 80016cc:	2300      	moveq	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016d6:	4818      	ldr	r0, [pc, #96]	@ (8001738 <LCDWrite16+0x1a4>)
 80016d8:	f019 f937 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D13_GPIO_Port, LCD_D13_Pin, ((dt & 0x2000) == 0x2000));
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	bf14      	ite	ne
 80016e6:	2301      	movne	r3, #1
 80016e8:	2300      	moveq	r3, #0
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016f2:	4811      	ldr	r0, [pc, #68]	@ (8001738 <LCDWrite16+0x1a4>)
 80016f4:	f019 f929 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D14_GPIO_Port, LCD_D14_Pin, ((dt & 0x4000) == 0x4000));
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bf14      	ite	ne
 8001702:	2301      	movne	r3, #1
 8001704:	2300      	moveq	r3, #0
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800170e:	480a      	ldr	r0, [pc, #40]	@ (8001738 <LCDWrite16+0x1a4>)
 8001710:	f019 f91b 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D15_GPIO_Port, LCD_D15_Pin, ((dt & 0x8000) == 0x8000));
 8001714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001718:	b29b      	uxth	r3, r3
 800171a:	0bdb      	lsrs	r3, r3, #15
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001724:	4804      	ldr	r0, [pc, #16]	@ (8001738 <LCDWrite16+0x1a4>)
 8001726:	f019 f910 	bl	801a94a <HAL_GPIO_WritePin>
  }
  #endif
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000295c 	.word	0x2000295c
 8001738:	40011800 	.word	0x40011800

0800173c <LCDWriteFillMultiData8and16>:
   - pData: 8 or 16 bits data pointer
   - Size: data number
   - dinc: 0=fill mode, 1=multidata mode
   - bitdepth: 0 = 8bit data, 1 = 16bit data */
void LCDWriteFillMultiData8and16(uint8_t * pData, uint32_t Size, uint32_t Mode)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  if(Mode & LCD_IO_FILL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d035      	beq.n	80017be <LCDWriteFillMultiData8and16+0x82>
  { /* fill */
    if(Mode & LCD_IO_DATA8)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f003 0310 	and.w	r3, r3, #16
 8001758:	2b00      	cmp	r3, #0
 800175a:	d015      	beq.n	8001788 <LCDWriteFillMultiData8and16+0x4c>
    { /* fill 8bit */
      LCDWrite8(*pData);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff feb9 	bl	80014d8 <LCDWrite8>
      while(Size--) /* fill 8bit */
 8001766:	e009      	b.n	800177c <LCDWriteFillMultiData8and16+0x40>
      {
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8001768:	2200      	movs	r2, #0
 800176a:	2104      	movs	r1, #4
 800176c:	4830      	ldr	r0, [pc, #192]	@ (8001830 <LCDWriteFillMultiData8and16+0xf4>)
 800176e:	f019 f8ec 	bl	801a94a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8001772:	2201      	movs	r2, #1
 8001774:	2104      	movs	r1, #4
 8001776:	482e      	ldr	r0, [pc, #184]	@ (8001830 <LCDWriteFillMultiData8and16+0xf4>)
 8001778:	f019 f8e7 	bl	801a94a <HAL_GPIO_WritePin>
      while(Size--) /* fill 8bit */
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1e5a      	subs	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <LCDWriteFillMultiData8and16+0x2c>
          pData += 2;
        }
      }
    }
  }
}
 8001786:	e04f      	b.n	8001828 <LCDWriteFillMultiData8and16+0xec>
    else if(Mode & LCD_IO_DATA16)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0320 	and.w	r3, r3, #32
 800178e:	2b00      	cmp	r3, #0
 8001790:	d04a      	beq.n	8001828 <LCDWriteFillMultiData8and16+0xec>
      LCDWrite16(*(uint16_t *)pData);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fefc 	bl	8001594 <LCDWrite16>
      while(Size--)
 800179c:	e009      	b.n	80017b2 <LCDWriteFillMultiData8and16+0x76>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	2104      	movs	r1, #4
 80017a2:	4823      	ldr	r0, [pc, #140]	@ (8001830 <LCDWriteFillMultiData8and16+0xf4>)
 80017a4:	f019 f8d1 	bl	801a94a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80017a8:	2201      	movs	r2, #1
 80017aa:	2104      	movs	r1, #4
 80017ac:	4820      	ldr	r0, [pc, #128]	@ (8001830 <LCDWriteFillMultiData8and16+0xf4>)
 80017ae:	f019 f8cc 	bl	801a94a <HAL_GPIO_WritePin>
      while(Size--)
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1e5a      	subs	r2, r3, #1
 80017b6:	60ba      	str	r2, [r7, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1f0      	bne.n	800179e <LCDWriteFillMultiData8and16+0x62>
}
 80017bc:	e034      	b.n	8001828 <LCDWriteFillMultiData8and16+0xec>
    if(Mode & LCD_IO_DATA8)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d02a      	beq.n	800181e <LCDWriteFillMultiData8and16+0xe2>
      while(Size--)
 80017c8:	e011      	b.n	80017ee <LCDWriteFillMultiData8and16+0xb2>
        LCDWrite8(*pData);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fe82 	bl	80014d8 <LCDWrite8>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2104      	movs	r1, #4
 80017d8:	4815      	ldr	r0, [pc, #84]	@ (8001830 <LCDWriteFillMultiData8and16+0xf4>)
 80017da:	f019 f8b6 	bl	801a94a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	2104      	movs	r1, #4
 80017e2:	4813      	ldr	r0, [pc, #76]	@ (8001830 <LCDWriteFillMultiData8and16+0xf4>)
 80017e4:	f019 f8b1 	bl	801a94a <HAL_GPIO_WritePin>
        pData++;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3301      	adds	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
      while(Size--)
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1e5a      	subs	r2, r3, #1
 80017f2:	60ba      	str	r2, [r7, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1e8      	bne.n	80017ca <LCDWriteFillMultiData8and16+0x8e>
}
 80017f8:	e016      	b.n	8001828 <LCDWriteFillMultiData8and16+0xec>
          LCDWrite16(*(uint16_t *)pData);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fec8 	bl	8001594 <LCDWrite16>
          HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	2104      	movs	r1, #4
 8001808:	4809      	ldr	r0, [pc, #36]	@ (8001830 <LCDWriteFillMultiData8and16+0xf4>)
 800180a:	f019 f89e 	bl	801a94a <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	2104      	movs	r1, #4
 8001812:	4807      	ldr	r0, [pc, #28]	@ (8001830 <LCDWriteFillMultiData8and16+0xf4>)
 8001814:	f019 f899 	bl	801a94a <HAL_GPIO_WritePin>
          pData += 2;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3302      	adds	r3, #2
 800181c:	60fb      	str	r3, [r7, #12]
        while(Size--)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1e5a      	subs	r2, r3, #1
 8001822:	60ba      	str	r2, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1e8      	bne.n	80017fa <LCDWriteFillMultiData8and16+0xbe>
}
 8001828:	bf00      	nop
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40011400 	.word	0x40011400

08001834 <LCDWriteFillMultiData16to24>:
/* Wrtite fill and multi data to Lcd (convert RGB16 bit (5-6-5) to RGB24 bit (8-8-8) mode, no dma capability)
   - pData: RGB 16 bits data pointer
   - Size: data number
   - dinc: 0=fill mode, 1=multidata mode */
void LCDWriteFillMultiData16to24(uint16_t * pData, uint32_t Size, uint32_t Mode)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
    uint16_t c16[2];
    uint32_t c24;
  }rgb888;

  #if LCD_RGB24_MODE == 0
  uint8_t ccnt = 0, ctmp = 0; /* color counter  (even and odd pixels), color temp */
 8001840:	2300      	movs	r3, #0
 8001842:	75fb      	strb	r3, [r7, #23]
 8001844:	2300      	movs	r3, #0
 8001846:	75bb      	strb	r3, [r7, #22]

  if(Mode & LCD_IO_FILL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80b7 	beq.w	80019c2 <LCDWriteFillMultiData16to24+0x18e>
  { /* fill 16bit to 24bit */
    rgb888.c24 = RGB565TO888(*pData);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	121b      	asrs	r3, r3, #8
 800185a:	f003 02f8 	and.w	r2, r3, #248	@ 0xf8
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	015b      	lsls	r3, r3, #5
 8001864:	f403 437c 	and.w	r3, r3, #64512	@ 0xfc00
 8001868:	431a      	orrs	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	04db      	lsls	r3, r3, #19
 8001870:	f403 0378 	and.w	r3, r3, #16252928	@ 0xf80000
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
    while(Size--)
 8001878:	e046      	b.n	8001908 <LCDWriteFillMultiData16to24+0xd4>
    {
      if(!ccnt)
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d12c      	bne.n	80018da <LCDWriteFillMultiData16to24+0xa6>
      {
        ccnt = 1;
 8001880:	2301      	movs	r3, #1
 8001882:	75fb      	strb	r3, [r7, #23]
        LCDWrite16((rgb888.c8[2] << 8) | rgb888.c8[1]);
 8001884:	7cbb      	ldrb	r3, [r7, #18]
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b21a      	sxth	r2, r3
 800188a:	7c7b      	ldrb	r3, [r7, #17]
 800188c:	b21b      	sxth	r3, r3
 800188e:	4313      	orrs	r3, r2
 8001890:	b21b      	sxth	r3, r3
 8001892:	b29b      	uxth	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fe7d 	bl	8001594 <LCDWrite16>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2104      	movs	r1, #4
 800189e:	4857      	ldr	r0, [pc, #348]	@ (80019fc <LCDWriteFillMultiData16to24+0x1c8>)
 80018a0:	f019 f853 	bl	801a94a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	2104      	movs	r1, #4
 80018a8:	4854      	ldr	r0, [pc, #336]	@ (80019fc <LCDWriteFillMultiData16to24+0x1c8>)
 80018aa:	f019 f84e 	bl	801a94a <HAL_GPIO_WritePin>
        LCDWrite16((rgb888.c8[0] << 8) | rgb888.c8[2]);
 80018ae:	7c3b      	ldrb	r3, [r7, #16]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	7cbb      	ldrb	r3, [r7, #18]
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fe68 	bl	8001594 <LCDWrite16>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2104      	movs	r1, #4
 80018c8:	484c      	ldr	r0, [pc, #304]	@ (80019fc <LCDWriteFillMultiData16to24+0x1c8>)
 80018ca:	f019 f83e 	bl	801a94a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2104      	movs	r1, #4
 80018d2:	484a      	ldr	r0, [pc, #296]	@ (80019fc <LCDWriteFillMultiData16to24+0x1c8>)
 80018d4:	f019 f839 	bl	801a94a <HAL_GPIO_WritePin>
 80018d8:	e016      	b.n	8001908 <LCDWriteFillMultiData16to24+0xd4>
      }
      else
      {
        ccnt = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	75fb      	strb	r3, [r7, #23]
        LCDWrite16((rgb888.c8[1] << 8) | rgb888.c8[0]);
 80018de:	7c7b      	ldrb	r3, [r7, #17]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	b21a      	sxth	r2, r3
 80018e4:	7c3b      	ldrb	r3, [r7, #16]
 80018e6:	b21b      	sxth	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fe50 	bl	8001594 <LCDWrite16>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2104      	movs	r1, #4
 80018f8:	4840      	ldr	r0, [pc, #256]	@ (80019fc <LCDWriteFillMultiData16to24+0x1c8>)
 80018fa:	f019 f826 	bl	801a94a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80018fe:	2201      	movs	r2, #1
 8001900:	2104      	movs	r1, #4
 8001902:	483e      	ldr	r0, [pc, #248]	@ (80019fc <LCDWriteFillMultiData16to24+0x1c8>)
 8001904:	f019 f821 	bl	801a94a <HAL_GPIO_WritePin>
    while(Size--)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	1e5a      	subs	r2, r3, #1
 800190c:	60ba      	str	r2, [r7, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1b3      	bne.n	800187a <LCDWriteFillMultiData16to24+0x46>
      HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
    }
  }
  #endif
}
 8001912:	e06f      	b.n	80019f4 <LCDWriteFillMultiData16to24+0x1c0>
      rgb888.c24 = RGB565TO888(*pData);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	121b      	asrs	r3, r3, #8
 800191a:	f003 02f8 	and.w	r2, r3, #248	@ 0xf8
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	015b      	lsls	r3, r3, #5
 8001924:	f403 437c 	and.w	r3, r3, #64512	@ 0xfc00
 8001928:	431a      	orrs	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	04db      	lsls	r3, r3, #19
 8001930:	f403 0378 	and.w	r3, r3, #16252928	@ 0xf80000
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
      pData++;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3302      	adds	r3, #2
 800193c:	60fb      	str	r3, [r7, #12]
      if(!ccnt)
 800193e:	7dfb      	ldrb	r3, [r7, #23]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d119      	bne.n	8001978 <LCDWriteFillMultiData16to24+0x144>
        ccnt = 1;
 8001944:	2301      	movs	r3, #1
 8001946:	75fb      	strb	r3, [r7, #23]
        LCDWrite16((rgb888.c8[2] << 8) | rgb888.c8[1]);
 8001948:	7cbb      	ldrb	r3, [r7, #18]
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	b21a      	sxth	r2, r3
 800194e:	7c7b      	ldrb	r3, [r7, #17]
 8001950:	b21b      	sxth	r3, r3
 8001952:	4313      	orrs	r3, r2
 8001954:	b21b      	sxth	r3, r3
 8001956:	b29b      	uxth	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fe1b 	bl	8001594 <LCDWrite16>
        ctmp = rgb888.c8[0];
 800195e:	7c3b      	ldrb	r3, [r7, #16]
 8001960:	75bb      	strb	r3, [r7, #22]
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2104      	movs	r1, #4
 8001966:	4825      	ldr	r0, [pc, #148]	@ (80019fc <LCDWriteFillMultiData16to24+0x1c8>)
 8001968:	f018 ffef 	bl	801a94a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 800196c:	2201      	movs	r2, #1
 800196e:	2104      	movs	r1, #4
 8001970:	4822      	ldr	r0, [pc, #136]	@ (80019fc <LCDWriteFillMultiData16to24+0x1c8>)
 8001972:	f018 ffea 	bl	801a94a <HAL_GPIO_WritePin>
 8001976:	e024      	b.n	80019c2 <LCDWriteFillMultiData16to24+0x18e>
        ccnt = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	75fb      	strb	r3, [r7, #23]
        LCDWrite16((ctmp << 8) | rgb888.c8[2]);
 800197c:	7dbb      	ldrb	r3, [r7, #22]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b21a      	sxth	r2, r3
 8001982:	7cbb      	ldrb	r3, [r7, #18]
 8001984:	b21b      	sxth	r3, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	b21b      	sxth	r3, r3
 800198a:	b29b      	uxth	r3, r3
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff fe01 	bl	8001594 <LCDWrite16>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	2104      	movs	r1, #4
 8001996:	4819      	ldr	r0, [pc, #100]	@ (80019fc <LCDWriteFillMultiData16to24+0x1c8>)
 8001998:	f018 ffd7 	bl	801a94a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 800199c:	2201      	movs	r2, #1
 800199e:	2104      	movs	r1, #4
 80019a0:	4816      	ldr	r0, [pc, #88]	@ (80019fc <LCDWriteFillMultiData16to24+0x1c8>)
 80019a2:	f018 ffd2 	bl	801a94a <HAL_GPIO_WritePin>
        LCDWrite16(rgb888.c16[0]);
 80019a6:	8a3b      	ldrh	r3, [r7, #16]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fdf3 	bl	8001594 <LCDWrite16>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2104      	movs	r1, #4
 80019b2:	4812      	ldr	r0, [pc, #72]	@ (80019fc <LCDWriteFillMultiData16to24+0x1c8>)
 80019b4:	f018 ffc9 	bl	801a94a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	2104      	movs	r1, #4
 80019bc:	480f      	ldr	r0, [pc, #60]	@ (80019fc <LCDWriteFillMultiData16to24+0x1c8>)
 80019be:	f018 ffc4 	bl	801a94a <HAL_GPIO_WritePin>
    while(Size--)
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	1e5a      	subs	r2, r3, #1
 80019c6:	60ba      	str	r2, [r7, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1a3      	bne.n	8001914 <LCDWriteFillMultiData16to24+0xe0>
    if(!ccnt)
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d110      	bne.n	80019f4 <LCDWriteFillMultiData16to24+0x1c0>
      LCDWrite16(ctmp << 8);
 80019d2:	7dbb      	ldrb	r3, [r7, #22]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fdda 	bl	8001594 <LCDWrite16>
      HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2104      	movs	r1, #4
 80019e4:	4805      	ldr	r0, [pc, #20]	@ (80019fc <LCDWriteFillMultiData16to24+0x1c8>)
 80019e6:	f018 ffb0 	bl	801a94a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80019ea:	2201      	movs	r2, #1
 80019ec:	2104      	movs	r1, #4
 80019ee:	4803      	ldr	r0, [pc, #12]	@ (80019fc <LCDWriteFillMultiData16to24+0x1c8>)
 80019f0:	f018 ffab 	bl	801a94a <HAL_GPIO_WritePin>
}
 80019f4:	bf00      	nop
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40011400 	.word	0x40011400

08001a00 <LCDReadMultiData8and16>:
/* Read data from Lcd
   - pData: 8 or 16 bits data pointer
   - Size: data number
   - bitdepth: 0 = 8bit data, 1 = 16bit data */
void LCDReadMultiData8and16(uint8_t * pData, uint32_t Size, uint32_t Mode)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  { /* not DMA mode */
    if(Mode & LCD_IO_DATA8)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d02c      	beq.n	8001a70 <LCDReadMultiData8and16+0x70>
    { /* 8bit */
      while(Size--)
 8001a16:	e012      	b.n	8001a3e <LCDReadMultiData8and16+0x3e>
      {
        HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2102      	movs	r1, #2
 8001a1c:	4819      	ldr	r0, [pc, #100]	@ (8001a84 <LCDReadMultiData8and16+0x84>)
 8001a1e:	f018 ff94 	bl	801a94a <HAL_GPIO_WritePin>
        *pData = LCDRead8();
 8001a22:	f7ff fc33 	bl	800128c <LCDRead8>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2102      	movs	r1, #2
 8001a32:	4814      	ldr	r0, [pc, #80]	@ (8001a84 <LCDReadMultiData8and16+0x84>)
 8001a34:	f018 ff89 	bl	801a94a <HAL_GPIO_WritePin>
        pData++;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
      while(Size--)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	1e5a      	subs	r2, r3, #1
 8001a42:	60ba      	str	r2, [r7, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1e7      	bne.n	8001a18 <LCDReadMultiData8and16+0x18>
        HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
        pData += 2;
      }
    }
  }
}
 8001a48:	e017      	b.n	8001a7a <LCDReadMultiData8and16+0x7a>
        HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_RESET);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2102      	movs	r1, #2
 8001a4e:	480d      	ldr	r0, [pc, #52]	@ (8001a84 <LCDReadMultiData8and16+0x84>)
 8001a50:	f018 ff7b 	bl	801a94a <HAL_GPIO_WritePin>
        *(uint16_t *)pData = LCDRead16();
 8001a54:	f7ff fc7c 	bl	8001350 <LCDRead16>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	801a      	strh	r2, [r3, #0]
        HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	2102      	movs	r1, #2
 8001a64:	4807      	ldr	r0, [pc, #28]	@ (8001a84 <LCDReadMultiData8and16+0x84>)
 8001a66:	f018 ff70 	bl	801a94a <HAL_GPIO_WritePin>
        pData += 2;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	60fb      	str	r3, [r7, #12]
      while(Size--)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	1e5a      	subs	r2, r3, #1
 8001a74:	60ba      	str	r2, [r7, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1e7      	bne.n	8001a4a <LCDReadMultiData8and16+0x4a>
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40011400 	.word	0x40011400

08001a88 <LCDReadMultiData24to16>:
//-----------------------------------------------------------------------------
/* Read 24bit (8-8-8) RGB data from LCD, and convert to 16bit (5-6-5) RGB data
   - pData: 16 bits RGB data pointer
   - Size: pixel number */
void LCDReadMultiData24to16(uint16_t * pData, uint32_t Size, uint32_t Mode)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
    uint16_t c16[2];
    uint32_t c24;
  }rgb888;

  #if LCD_RGB24_MODE == 0
  uint8_t ccnt = 0, ctmp = 0; /* color counter (even and odd pixels), color temp */
 8001a94:	2300      	movs	r3, #0
 8001a96:	75fb      	strb	r3, [r7, #23]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	75bb      	strb	r3, [r7, #22]
  while(Size--)
 8001a9c:	e056      	b.n	8001b4c <LCDReadMultiData24to16+0xc4>
  {
    if(!ccnt)
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d123      	bne.n	8001aec <LCDReadMultiData24to16+0x64>
    {
      ccnt = 1;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	75fb      	strb	r3, [r7, #23]
      HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2102      	movs	r1, #2
 8001aac:	482c      	ldr	r0, [pc, #176]	@ (8001b60 <LCDReadMultiData24to16+0xd8>)
 8001aae:	f018 ff4c 	bl	801a94a <HAL_GPIO_WritePin>
      rgb888.c16[1] = LCDRead16();
 8001ab2:	f7ff fc4d 	bl	8001350 <LCDRead16>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	827b      	strh	r3, [r7, #18]
      HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8001aba:	2201      	movs	r2, #1
 8001abc:	2102      	movs	r1, #2
 8001abe:	4828      	ldr	r0, [pc, #160]	@ (8001b60 <LCDReadMultiData24to16+0xd8>)
 8001ac0:	f018 ff43 	bl	801a94a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	4825      	ldr	r0, [pc, #148]	@ (8001b60 <LCDReadMultiData24to16+0xd8>)
 8001aca:	f018 ff3e 	bl	801a94a <HAL_GPIO_WritePin>
      rgb888.c16[0] = LCDRead16();
 8001ace:	f7ff fc3f 	bl	8001350 <LCDRead16>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	823b      	strh	r3, [r7, #16]
      HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	2102      	movs	r1, #2
 8001ada:	4821      	ldr	r0, [pc, #132]	@ (8001b60 <LCDReadMultiData24to16+0xd8>)
 8001adc:	f018 ff35 	bl	801a94a <HAL_GPIO_WritePin>
      ctmp = rgb888.c8[0];
 8001ae0:	7c3b      	ldrb	r3, [r7, #16]
 8001ae2:	75bb      	strb	r3, [r7, #22]
      rgb888.c24 >>= 8;
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	e011      	b.n	8001b10 <LCDReadMultiData24to16+0x88>
    }
    else
    {
      ccnt = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	75fb      	strb	r3, [r7, #23]
      HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2102      	movs	r1, #2
 8001af4:	481a      	ldr	r0, [pc, #104]	@ (8001b60 <LCDReadMultiData24to16+0xd8>)
 8001af6:	f018 ff28 	bl	801a94a <HAL_GPIO_WritePin>
      rgb888.c16[0] = LCDRead16();
 8001afa:	f7ff fc29 	bl	8001350 <LCDRead16>
 8001afe:	4603      	mov	r3, r0
 8001b00:	823b      	strh	r3, [r7, #16]
      HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8001b02:	2201      	movs	r2, #1
 8001b04:	2102      	movs	r1, #2
 8001b06:	4816      	ldr	r0, [pc, #88]	@ (8001b60 <LCDReadMultiData24to16+0xd8>)
 8001b08:	f018 ff1f 	bl	801a94a <HAL_GPIO_WritePin>
      rgb888.c8[2] = ctmp;
 8001b0c:	7dbb      	ldrb	r3, [r7, #22]
 8001b0e:	74bb      	strb	r3, [r7, #18]
    }
    *pData = RGB888TO565(rgb888.c24);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	0cdb      	lsrs	r3, r3, #19
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001b38:	f023 0307 	bic.w	r3, r3, #7
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	801a      	strh	r2, [r3, #0]
    pData++;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	1e5a      	subs	r2, r3, #1
 8001b50:	60ba      	str	r2, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1a3      	bne.n	8001a9e <LCDReadMultiData24to16+0x16>
    HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
    *pData = RGB888TO565(rgb888.c24);
    pData++;
  }
  #endif
}
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40011400 	.word	0x40011400

08001b64 <LCD_Delay>:
//=============================================================================
/* Public functions */

/* n millisec delay */
void LCD_Delay(uint32_t Delay)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  #ifndef  osCMSIS
  HAL_Delay(Delay);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f018 fc3d 	bl	801a3ec <HAL_Delay>
  #else
  osDelay(Delay);
  #endif
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <LCD_IO_Bl_OnOff>:

/* Backlight on-off (Bl=0 -> off, Bl=1 -> on) */
//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
    #elif LCD_BLON == 1
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
    #endif
  #endif
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
	...

08001b90 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
/* Lcd IO init, reset, spi speed init, get the freertos task id */
void LCD_IO_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  #if defined(LCD_RST_GPIO_Port) && defined (LCD_RST_Pin)
  HAL_Delay(10);
 8001b94:	200a      	movs	r0, #10
 8001b96:	f018 fc29 	bl	801a3ec <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	4808      	ldr	r0, [pc, #32]	@ (8001bc0 <LCD_IO_Init+0x30>)
 8001ba0:	f018 fed3 	bl	801a94a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001ba4:	200a      	movs	r0, #10
 8001ba6:	f018 fc21 	bl	801a3ec <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001baa:	2201      	movs	r2, #1
 8001bac:	2101      	movs	r1, #1
 8001bae:	4804      	ldr	r0, [pc, #16]	@ (8001bc0 <LCD_IO_Init+0x30>)
 8001bb0:	f018 fecb 	bl	801a94a <HAL_GPIO_WritePin>
  #endif
  LCD_Delay(10);
 8001bb4:	200a      	movs	r0, #10
 8001bb6:	f7ff ffd5 	bl	8001b64 <LCD_Delay>
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40011400 	.word	0x40011400

08001bc4 <LCD_IO_Transaction>:
   - pData: 8 or 16 bits data pointer
   - Size: data number
   - DummySize: dummy byte number at read
   - Mode: 8 or 16 or 24 bit mode, write or read, fill or multidata (see the LCD_IO_... defines) */
void LCD_IO_Transaction(uint16_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize, uint32_t Mode)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	81fb      	strh	r3, [r7, #14]
  #if LCD_DATADIR == 0  /* only TX mode */
  if(Mode & LCD_IO_READ)
    return;
  #endif

  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2110      	movs	r1, #16
 8001bd8:	484b      	ldr	r0, [pc, #300]	@ (8001d08 <LCD_IO_Transaction+0x144>)
 8001bda:	f018 feb6 	bl	801a94a <HAL_GPIO_WritePin>

  /* Command write */
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2108      	movs	r1, #8
 8001be2:	4849      	ldr	r0, [pc, #292]	@ (8001d08 <LCD_IO_Transaction+0x144>)
 8001be4:	f018 feb1 	bl	801a94a <HAL_GPIO_WritePin>
  if(Mode & LCD_IO_CMD8)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00f      	beq.n	8001c12 <LCD_IO_Transaction+0x4e>
  {
    LCDWrite8(Cmd);
 8001bf2:	89fb      	ldrh	r3, [r7, #14]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fc6e 	bl	80014d8 <LCDWrite8>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2104      	movs	r1, #4
 8001c00:	4841      	ldr	r0, [pc, #260]	@ (8001d08 <LCD_IO_Transaction+0x144>)
 8001c02:	f018 fea2 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8001c06:	2201      	movs	r2, #1
 8001c08:	2104      	movs	r1, #4
 8001c0a:	483f      	ldr	r0, [pc, #252]	@ (8001d08 <LCD_IO_Transaction+0x144>)
 8001c0c:	f018 fe9d 	bl	801a94a <HAL_GPIO_WritePin>
 8001c10:	e024      	b.n	8001c5c <LCD_IO_Transaction+0x98>
  }
  else if(Mode & LCD_IO_CMD16)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01f      	beq.n	8001c5c <LCD_IO_Transaction+0x98>
  {
    LCDWrite8(Cmd >> 8);
 8001c1c:	89fb      	ldrh	r3, [r7, #14]
 8001c1e:	0a1b      	lsrs	r3, r3, #8
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fc57 	bl	80014d8 <LCDWrite8>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	4836      	ldr	r0, [pc, #216]	@ (8001d08 <LCD_IO_Transaction+0x144>)
 8001c30:	f018 fe8b 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8001c34:	2201      	movs	r2, #1
 8001c36:	2104      	movs	r1, #4
 8001c38:	4833      	ldr	r0, [pc, #204]	@ (8001d08 <LCD_IO_Transaction+0x144>)
 8001c3a:	f018 fe86 	bl	801a94a <HAL_GPIO_WritePin>
    LCDWrite8(Cmd);
 8001c3e:	89fb      	ldrh	r3, [r7, #14]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fc48 	bl	80014d8 <LCDWrite8>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	482e      	ldr	r0, [pc, #184]	@ (8001d08 <LCD_IO_Transaction+0x144>)
 8001c4e:	f018 fe7c 	bl	801a94a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8001c52:	2201      	movs	r2, #1
 8001c54:	2104      	movs	r1, #4
 8001c56:	482c      	ldr	r0, [pc, #176]	@ (8001d08 <LCD_IO_Transaction+0x144>)
 8001c58:	f018 fe77 	bl	801a94a <HAL_GPIO_WritePin>
  }
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2108      	movs	r1, #8
 8001c60:	4829      	ldr	r0, [pc, #164]	@ (8001d08 <LCD_IO_Transaction+0x144>)
 8001c62:	f018 fe72 	bl	801a94a <HAL_GPIO_WritePin>

  if(Size == 0)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <LCD_IO_Transaction+0xb4>
  { /* only command byte or word */
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2110      	movs	r1, #16
 8001c70:	4825      	ldr	r0, [pc, #148]	@ (8001d08 <LCD_IO_Transaction+0x144>)
 8001c72:	f018 fe6a 	bl	801a94a <HAL_GPIO_WritePin>
    return;
 8001c76:	e043      	b.n	8001d00 <LCD_IO_Transaction+0x13c>
  }

  /* Datas write or read */
  if(Mode & LCD_IO_WRITE)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d010      	beq.n	8001ca4 <LCD_IO_Transaction+0xe0>
  { /* Write Lcd */
    if(Mode & LCD_IO_DATA16TO24)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <LCD_IO_Transaction+0xd4>
      LCDWriteFillMultiData16to24((uint16_t *)pData, Size, Mode);
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	68b8      	ldr	r0, [r7, #8]
 8001c92:	f7ff fdcf 	bl	8001834 <LCDWriteFillMultiData16to24>
 8001c96:	e02e      	b.n	8001cf6 <LCD_IO_Transaction+0x132>
    else
      LCDWriteFillMultiData8and16(pData, Size, Mode);
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	68b8      	ldr	r0, [r7, #8]
 8001c9e:	f7ff fd4d 	bl	800173c <LCDWriteFillMultiData8and16>
 8001ca2:	e028      	b.n	8001cf6 <LCD_IO_Transaction+0x132>
  }
  #if LCD_DATADIR == 1
  else if(Mode & LCD_IO_READ)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d023      	beq.n	8001cf6 <LCD_IO_Transaction+0x132>
  { /* Read LCD */
    LCDDirRead();
 8001cae:	f7ff fa31 	bl	8001114 <LCDDirRead>
    while(DummySize--)
 8001cb2:	e009      	b.n	8001cc8 <LCD_IO_Transaction+0x104>
    {
      HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	4813      	ldr	r0, [pc, #76]	@ (8001d08 <LCD_IO_Transaction+0x144>)
 8001cba:	f018 fe46 	bl	801a94a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	4811      	ldr	r0, [pc, #68]	@ (8001d08 <LCD_IO_Transaction+0x144>)
 8001cc4:	f018 fe41 	bl	801a94a <HAL_GPIO_WritePin>
    while(DummySize--)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	1e5a      	subs	r2, r3, #1
 8001ccc:	603a      	str	r2, [r7, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <LCD_IO_Transaction+0xf0>
    }
    if(Mode & LCD_IO_DATA24TO16)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <LCD_IO_Transaction+0x124>
      LCDReadMultiData24to16((uint16_t *)pData, Size, Mode);
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	68b8      	ldr	r0, [r7, #8]
 8001ce2:	f7ff fed1 	bl	8001a88 <LCDReadMultiData24to16>
 8001ce6:	e004      	b.n	8001cf2 <LCD_IO_Transaction+0x12e>
    else
      LCDReadMultiData8and16(pData, Size, Mode);
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	68b8      	ldr	r0, [r7, #8]
 8001cee:	f7ff fe87 	bl	8001a00 <LCDReadMultiData8and16>
    LCDDirWrite();
 8001cf2:	f7ff fa6d 	bl	80011d0 <LCDDirWrite>
  }
  #endif /* #if LCD_DATADIR == 1 */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2110      	movs	r1, #16
 8001cfa:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <LCD_IO_Transaction+0x144>)
 8001cfc:	f018 fe25 	bl	801a94a <HAL_GPIO_WritePin>
}
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40011400 	.word	0x40011400

08001d0c <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3301      	adds	r3, #1
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	b21b      	sxth	r3, r3
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr

08001d38 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3301      	adds	r3, #1
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	b21b      	sxth	r3, r3
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <ILI9341_flush>:
// LCD FRAME Buffer for 1 ROW uint16_t DISP_fb[(MAX(DISP_VER_RES,DISP_HOR_RES))];
  uint16_t DISP_fb[600];


  void ILI9341_flush(lv_disp_drv_t *disp, const lv_area_t *area, lv_color_t *color_p)
  {
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
      int32_t x, y;
      uint16_t x_size = lv_area_get_width(area);
 8001d70:	68b8      	ldr	r0, [r7, #8]
 8001d72:	f7ff ffcb 	bl	8001d0c <lv_area_get_width>
 8001d76:	4603      	mov	r3, r0
 8001d78:	82fb      	strh	r3, [r7, #22]
      uint16_t y_size = lv_area_get_height(area);
 8001d7a:	68b8      	ldr	r0, [r7, #8]
 8001d7c:	f7ff ffdc 	bl	8001d38 <lv_area_get_height>
 8001d80:	4603      	mov	r3, r0
 8001d82:	82bb      	strh	r3, [r7, #20]

      // valores de 16 bits (RGB565)
      ili9341_DrawRGBImage(area->x1, area->y1, x_size, y_size, (uint16_t *)color_p);
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d92:	461c      	mov	r4, r3
 8001d94:	8afa      	ldrh	r2, [r7, #22]
 8001d96:	8ab9      	ldrh	r1, [r7, #20]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4621      	mov	r1, r4
 8001da0:	f7fe fffc 	bl	8000d9c <ili9341_DrawRGBImage>

      lv_disp_flush_ready(disp);
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f00c ff6e 	bl	800ec86 <lv_disp_flush_ready>
  }
 8001daa:	bf00      	nop
 8001dac:	371c      	adds	r7, #28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}
	...

08001db4 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <BSP_LCD_Init+0x34>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8001dc6:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <BSP_LCD_Init+0x38>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8001dcc:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <BSP_LCD_Init+0x38>)
 8001dce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dd2:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <BSP_LCD_Init+0x38>)
 8001dd6:	4a06      	ldr	r2, [pc, #24]	@ (8001df0 <BSP_LCD_Init+0x3c>)
 8001dd8:	609a      	str	r2, [r3, #8]
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
  #endif
  
  ret = LCD_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000050 	.word	0x20000050
 8001dec:	20002960 	.word	0x20002960
 8001df0:	20000000 	.word	0x20000000

08001df4 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8001df8:	4b03      	ldr	r3, [pc, #12]	@ (8001e08 <BSP_LCD_GetXSize+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfe:	4798      	blx	r3
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000050 	.word	0x20000050

08001e0c <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 8001e10:	4b03      	ldr	r3, [pc, #12]	@ (8001e20 <BSP_LCD_GetYSize+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e16:	4798      	blx	r3
 8001e18:	4603      	mov	r3, r0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000050 	.word	0x20000050

08001e24 <BSP_TS_DisplaycoordCalc>:
   - dy* : pointer to display Y coordinate
   - mx  : max display X coordinate
   - my  : max display Y coordinate
   return: dx, dy */
void BSP_TS_DisplaycoordCalc(uint16_t tx, uint16_t ty, uint16_t * dx, uint16_t * dy, uint16_t mx, uint16_t my)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60ba      	str	r2, [r7, #8]
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	4603      	mov	r3, r0
 8001e30:	81fb      	strh	r3, [r7, #14]
 8001e32:	460b      	mov	r3, r1
 8001e34:	81bb      	strh	r3, [r7, #12]
  int32_t x, y;
  x = (cindex[1] * tx + cindex[2] * ty + cindex[3]) / cindex[0];
 8001e36:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <BSP_TS_DisplaycoordCalc+0xa8>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	89fa      	ldrh	r2, [r7, #14]
 8001e3c:	fb03 f202 	mul.w	r2, r3, r2
 8001e40:	4b22      	ldr	r3, [pc, #136]	@ (8001ecc <BSP_TS_DisplaycoordCalc+0xa8>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	89b9      	ldrh	r1, [r7, #12]
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	441a      	add	r2, r3
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ecc <BSP_TS_DisplaycoordCalc+0xa8>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	441a      	add	r2, r3
 8001e52:	4b1e      	ldr	r3, [pc, #120]	@ (8001ecc <BSP_TS_DisplaycoordCalc+0xa8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e5a:	617b      	str	r3, [r7, #20]
  y = (cindex[4] * tx + cindex[5] * ty + cindex[6]) / cindex[0];
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <BSP_TS_DisplaycoordCalc+0xa8>)
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	89fa      	ldrh	r2, [r7, #14]
 8001e62:	fb03 f202 	mul.w	r2, r3, r2
 8001e66:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <BSP_TS_DisplaycoordCalc+0xa8>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	89b9      	ldrh	r1, [r7, #12]
 8001e6c:	fb01 f303 	mul.w	r3, r1, r3
 8001e70:	441a      	add	r2, r3
 8001e72:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <BSP_TS_DisplaycoordCalc+0xa8>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	441a      	add	r2, r3
 8001e78:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <BSP_TS_DisplaycoordCalc+0xa8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e80:	613b      	str	r3, [r7, #16]

  if(x < 0)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	da02      	bge.n	8001e8e <BSP_TS_DisplaycoordCalc+0x6a>
    x = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	e005      	b.n	8001e9a <BSP_TS_DisplaycoordCalc+0x76>
  else if(x > mx)
 8001e8e:	8c3b      	ldrh	r3, [r7, #32]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	dd01      	ble.n	8001e9a <BSP_TS_DisplaycoordCalc+0x76>
    x = mx;
 8001e96:	8c3b      	ldrh	r3, [r7, #32]
 8001e98:	617b      	str	r3, [r7, #20]

  if(y < 0)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	da02      	bge.n	8001ea6 <BSP_TS_DisplaycoordCalc+0x82>
    y = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]
 8001ea4:	e005      	b.n	8001eb2 <BSP_TS_DisplaycoordCalc+0x8e>
  else if(y > my)
 8001ea6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	dd01      	ble.n	8001eb2 <BSP_TS_DisplaycoordCalc+0x8e>
    y = my;
 8001eae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001eb0:	613b      	str	r3, [r7, #16]

  *dx = x;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	801a      	strh	r2, [r3, #0]
  *dy = y;
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	801a      	strh	r2, [r3, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	371c      	adds	r7, #28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000058 	.word	0x20000058

08001ed0 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	460a      	mov	r2, r1
 8001eda:	80fb      	strh	r3, [r7, #6]
 8001edc:	4613      	mov	r3, r2
 8001ede:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8001ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8001f18 <BSP_TS_Init+0x48>)
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8001eea:	4a0c      	ldr	r2, [pc, #48]	@ (8001f1c <BSP_TS_Init+0x4c>)
 8001eec:	88bb      	ldrh	r3, [r7, #4]
 8001eee:	8013      	strh	r3, [r2, #0]

  if(ts_drv)
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <BSP_TS_Init+0x50>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <BSP_TS_Init+0x2c>
    ret = TS_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]

  if(ret == TS_OK)
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d104      	bne.n	8001f0c <BSP_TS_Init+0x3c>
  {
    /* Initialize the LL TS Driver */
    ts_drv->Init(0);
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <BSP_TS_Init+0x50>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2000      	movs	r0, #0
 8001f0a:	4798      	blx	r3
  }

  return ret;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2000296c 	.word	0x2000296c
 8001f1c:	2000296e 	.word	0x2000296e
 8001f20:	2000009c 	.word	0x2000009c

08001f24 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8001f24:	b5b0      	push	{r4, r5, r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	6078      	str	r0, [r7, #4]
  uint16_t tx, ty, dx, dy;

  TsState->TouchDetected = ts_drv->DetectTouch(0);
 8001f2c:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <BSP_TS_GetState+0x70>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2000      	movs	r0, #0
 8001f34:	4798      	blx	r3
 8001f36:	4603      	mov	r3, r0
 8001f38:	461a      	mov	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	801a      	strh	r2, [r3, #0]
  if(TsState->TouchDetected)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d022      	beq.n	8001f8c <BSP_TS_GetState+0x68>
  {
    ts_drv->GetXY(0, &tx, &ty);
 8001f46:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <BSP_TS_GetState+0x70>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f107 020c 	add.w	r2, r7, #12
 8001f50:	f107 010e 	add.w	r1, r7, #14
 8001f54:	2000      	movs	r0, #0
 8001f56:	4798      	blx	r3
    BSP_TS_DisplaycoordCalc(tx, ty, &dx, &dy, TsXBoundary-1, TsYBoundary-1);
 8001f58:	89f8      	ldrh	r0, [r7, #14]
 8001f5a:	89b9      	ldrh	r1, [r7, #12]
 8001f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <BSP_TS_GetState+0x74>)
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	4a0d      	ldr	r2, [pc, #52]	@ (8001f9c <BSP_TS_GetState+0x78>)
 8001f66:	8812      	ldrh	r2, [r2, #0]
 8001f68:	3a01      	subs	r2, #1
 8001f6a:	b292      	uxth	r2, r2
 8001f6c:	f107 0508 	add.w	r5, r7, #8
 8001f70:	f107 040a 	add.w	r4, r7, #10
 8001f74:	9201      	str	r2, [sp, #4]
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	462b      	mov	r3, r5
 8001f7a:	4622      	mov	r2, r4
 8001f7c:	f7ff ff52 	bl	8001e24 <BSP_TS_DisplaycoordCalc>
    TsState->X = dx;
 8001f80:	897a      	ldrh	r2, [r7, #10]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	805a      	strh	r2, [r3, #2]
    TsState->Y = dy;
 8001f86:	893a      	ldrh	r2, [r7, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	809a      	strh	r2, [r3, #4]
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bdb0      	pop	{r4, r5, r7, pc}
 8001f94:	2000009c 	.word	0x2000009c
 8001f98:	2000296c 	.word	0x2000296c
 8001f9c:	2000296e 	.word	0x2000296e

08001fa0 <XPT2046_read>:
//------------------------------------------LVGL FUNCTION----------------------------------------------------------------
bool XPT2046_read(lv_indev_drv_t * drv, lv_indev_data_t*data)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
	TS_StateTypeDef ts;
    static uint16_t last_x = 0;
    static uint16_t last_y = 0;
    //uint8_t irq = LV_DRV_INDEV_IRQ_READ;
    /*Save the state and save the pressed coordinate*/
    BSP_TS_GetState(&ts);
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ffb8 	bl	8001f24 <BSP_TS_GetState>
      data->state = ts.TouchDetected ? LV_INDEV_STATE_PR : LV_INDEV_STATE_REL;
 8001fb4:	893b      	ldrh	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bf14      	ite	ne
 8001fba:	2301      	movne	r3, #1
 8001fbc:	2300      	moveq	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	739a      	strb	r2, [r3, #14]
      if(data->state == LV_INDEV_STATE_PR)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	7b9b      	ldrb	r3, [r3, #14]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d10e      	bne.n	8001fec <XPT2046_read+0x4c>
        {
        //XPT2046_GetTouch_XY(&x, &y, 1);
        //xpt2046_corr(&x, &y);
        // xpt2046_avg(&x, &y);

        data->point.x = ts.Y;
 8001fce:	89bb      	ldrh	r3, [r7, #12]
 8001fd0:	b21a      	sxth	r2, r3
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	801a      	strh	r2, [r3, #0]
        data->point.y = 240-ts.X;
 8001fd6:	897b      	ldrh	r3, [r7, #10]
 8001fd8:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	b21a      	sxth	r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	805a      	strh	r2, [r3, #2]
        data->state = LV_INDEV_STATE_PR;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	739a      	strb	r2, [r3, #14]
 8001fea:	e002      	b.n	8001ff2 <XPT2046_read+0x52>
    }
    else
        data->state = LV_INDEV_STATE_REL;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	739a      	strb	r2, [r3, #14]
   // printf("X=%d  Y= %d  m_sec=%d count=%d\n\r", x, y, millis(), count);
    return false;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <TS_IO_Delay>:
#elif   defined(__CC_ARM)
#pragma push
#pragma O0
#endif
void TS_IO_Delay(uint32_t c)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  while(c--);
 8002004:	bf00      	nop
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	1e5a      	subs	r2, r3, #1
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1fa      	bne.n	8002006 <TS_IO_Delay+0xa>
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <TS_IO_Transaction>:
#define TS_CLK_DELAY
#endif

//-----------------------------------------------------------------------------
uint16_t TS_IO_Transaction(uint8_t cmd)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	81fb      	strh	r3, [r7, #14]
  uint32_t i;
  HAL_GPIO_WritePin(TS_CS_GPIO_Port, TS_CS_Pin, GPIO_PIN_RESET);
 800202a:	2200      	movs	r2, #0
 800202c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002030:	4835      	ldr	r0, [pc, #212]	@ (8002108 <TS_IO_Transaction+0xec>)
 8002032:	f018 fc8a 	bl	801a94a <HAL_GPIO_WritePin>
  for(i=0; i<8; i++)
 8002036:	2300      	movs	r3, #0
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	e021      	b.n	8002080 <TS_IO_Transaction+0x64>
  {
    HAL_GPIO_WritePin(TS_MOSI_GPIO_Port, TS_MOSI_Pin, cmd & 0x80);
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002042:	b2db      	uxtb	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800204a:	482f      	ldr	r0, [pc, #188]	@ (8002108 <TS_IO_Transaction+0xec>)
 800204c:	f018 fc7d 	bl	801a94a <HAL_GPIO_WritePin>
    TS_CLK_DELAY;
 8002050:	2007      	movs	r0, #7
 8002052:	f7ff ffd3 	bl	8001ffc <TS_IO_Delay>
    HAL_GPIO_WritePin(TS_SCK_GPIO_Port, TS_SCK_Pin, GPIO_PIN_SET);
 8002056:	2201      	movs	r2, #1
 8002058:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800205c:	482a      	ldr	r0, [pc, #168]	@ (8002108 <TS_IO_Transaction+0xec>)
 800205e:	f018 fc74 	bl	801a94a <HAL_GPIO_WritePin>
    TS_CLK_DELAY;
 8002062:	2007      	movs	r0, #7
 8002064:	f7ff ffca 	bl	8001ffc <TS_IO_Delay>
    HAL_GPIO_WritePin(TS_SCK_GPIO_Port, TS_SCK_Pin, GPIO_PIN_RESET);
 8002068:	2200      	movs	r2, #0
 800206a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800206e:	4826      	ldr	r0, [pc, #152]	@ (8002108 <TS_IO_Transaction+0xec>)
 8002070:	f018 fc6b 	bl	801a94a <HAL_GPIO_WritePin>
    cmd <<= 1;
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	71fb      	strb	r3, [r7, #7]
  for(i=0; i<8; i++)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	3301      	adds	r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b07      	cmp	r3, #7
 8002084:	d9da      	bls.n	800203c <TS_IO_Transaction+0x20>

  #if XPT2046_READDELAY > 0
  TS_IO_Delay(XPT2046_READDELAY);
  #endif

  HAL_GPIO_WritePin(TS_MOSI_GPIO_Port, TS_MOSI_Pin, GPIO_PIN_RESET);
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800208c:	481e      	ldr	r0, [pc, #120]	@ (8002108 <TS_IO_Transaction+0xec>)
 800208e:	f018 fc5c 	bl	801a94a <HAL_GPIO_WritePin>
  for(i=0; i<16; i++)
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	e023      	b.n	80020e0 <TS_IO_Transaction+0xc4>
  {
    ret <<= 1;
 8002098:	89fb      	ldrh	r3, [r7, #14]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	81fb      	strh	r3, [r7, #14]
    TS_CLK_DELAY;
 800209e:	2007      	movs	r0, #7
 80020a0:	f7ff ffac 	bl	8001ffc <TS_IO_Delay>
    HAL_GPIO_WritePin(TS_SCK_GPIO_Port, TS_SCK_Pin, GPIO_PIN_SET);
 80020a4:	2201      	movs	r2, #1
 80020a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020aa:	4817      	ldr	r0, [pc, #92]	@ (8002108 <TS_IO_Transaction+0xec>)
 80020ac:	f018 fc4d 	bl	801a94a <HAL_GPIO_WritePin>
    if(HAL_GPIO_ReadPin(TS_MISO_GPIO_Port, TS_MISO_Pin))
 80020b0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020b4:	4814      	ldr	r0, [pc, #80]	@ (8002108 <TS_IO_Transaction+0xec>)
 80020b6:	f018 fc31 	bl	801a91c <HAL_GPIO_ReadPin>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <TS_IO_Transaction+0xac>
      ret |= 1;
 80020c0:	89fb      	ldrh	r3, [r7, #14]
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	81fb      	strh	r3, [r7, #14]
    TS_CLK_DELAY;
 80020c8:	2007      	movs	r0, #7
 80020ca:	f7ff ff97 	bl	8001ffc <TS_IO_Delay>
    HAL_GPIO_WritePin(TS_SCK_GPIO_Port, TS_SCK_Pin, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020d4:	480c      	ldr	r0, [pc, #48]	@ (8002108 <TS_IO_Transaction+0xec>)
 80020d6:	f018 fc38 	bl	801a94a <HAL_GPIO_WritePin>
  for(i=0; i<16; i++)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	3301      	adds	r3, #1
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b0f      	cmp	r3, #15
 80020e4:	d9d8      	bls.n	8002098 <TS_IO_Transaction+0x7c>
  }
  HAL_GPIO_WritePin(TS_CS_GPIO_Port, TS_CS_Pin, GPIO_PIN_SET);
 80020e6:	2201      	movs	r2, #1
 80020e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020ec:	4806      	ldr	r0, [pc, #24]	@ (8002108 <TS_IO_Transaction+0xec>)
 80020ee:	f018 fc2c 	bl	801a94a <HAL_GPIO_WritePin>
  return ((ret & 0x7FFF) >> 3);
 80020f2:	89fb      	ldrh	r3, [r7, #14]
 80020f4:	10db      	asrs	r3, r3, #3
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fc:	b29b      	uxth	r3, r3
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40011400 	.word	0x40011400

0800210c <TS_IO_DetectToch>:
//-----------------------------------------------------------------------------
/* return:
   - 0 : touchscreen is not pressed
   - 1 : touchscreen is pressed */
uint8_t TS_IO_DetectToch(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
  uint8_t  ret;
  #if defined(TS_IRQ_GPIO_Port) && defined (TS_IRQ_Pin)
  if(HAL_GPIO_ReadPin(TS_IRQ_GPIO_Port, TS_IRQ_Pin))
 8002112:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002116:	4808      	ldr	r0, [pc, #32]	@ (8002138 <TS_IO_DetectToch+0x2c>)
 8002118:	f018 fc00 	bl	801a91c <HAL_GPIO_ReadPin>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <TS_IO_DetectToch+0x1c>
    ret = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	71fb      	strb	r3, [r7, #7]
 8002126:	e001      	b.n	800212c <TS_IO_DetectToch+0x20>
  else
    ret = 1;
 8002128:	2301      	movs	r3, #1
 800212a:	71fb      	strb	r3, [r7, #7]
  if((TS_IO_Transaction(XPT2046_CMD_GETZ1) > TS_ZSENS) || (TS_IO_Transaction(XPT2046_CMD_GETZ2) < (4095 - TS_ZSENS)))
    ret = 1;
  else
    ret = 0;
  #endif
  return ret;
 800212c:	79fb      	ldrb	r3, [r7, #7]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40011400 	.word	0x40011400

0800213c <xpt2046_ts_Init>:
TS_DrvTypeDef  *ts_drv = &xpt2046_ts_drv;


//-----------------------------------------------------------------------------
void xpt2046_ts_Init(uint16_t DeviceAddr)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	80fb      	strh	r3, [r7, #6]
  #if TS_SPI_HANDLE != -1 && defined(TS_SPI_SPD) && TS_SPI_SPD >= 0 && TS_SPI_SPD <= 7
  LCD_SPI_SETBAUDRATE(TS_SPI_HANDLE, TS_SPI_SPD);
  #endif
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <xpt2046_ts_DetectTouch>:

//-----------------------------------------------------------------------------
uint8_t xpt2046_ts_DetectTouch(uint16_t DeviceAddr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	80fb      	strh	r3, [r7, #6]
  uint8_t ret = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	77fb      	strb	r3, [r7, #31]
  int32_t x1, x2, y1, y2, i;

  if(TS_IO_DetectToch())
 800215e:	f7ff ffd5 	bl	800210c <TS_IO_DetectToch>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d055      	beq.n	8002214 <xpt2046_ts_DetectTouch+0xc4>
  {
    x1 = TS_IO_Transaction(XPT2046_CMD_GETX); /* Get X */
 8002168:	20d0      	movs	r0, #208	@ 0xd0
 800216a:	f7ff ff57 	bl	800201c <TS_IO_Transaction>
 800216e:	4603      	mov	r3, r0
 8002170:	61bb      	str	r3, [r7, #24]
    y1 = TS_IO_Transaction(XPT2046_CMD_GETY); /* Get Y */
 8002172:	2090      	movs	r0, #144	@ 0x90
 8002174:	f7ff ff52 	bl	800201c <TS_IO_Transaction>
 8002178:	4603      	mov	r3, r0
 800217a:	617b      	str	r3, [r7, #20]
    i = TOUCH_MAXREPEAT;
 800217c:	2308      	movs	r3, #8
 800217e:	613b      	str	r3, [r7, #16]
    while(i--)
 8002180:	e043      	b.n	800220a <xpt2046_ts_DetectTouch+0xba>
    {
      x2 = TS_IO_Transaction(XPT2046_CMD_GETX); /* Get X */
 8002182:	20d0      	movs	r0, #208	@ 0xd0
 8002184:	f7ff ff4a 	bl	800201c <TS_IO_Transaction>
 8002188:	4603      	mov	r3, r0
 800218a:	60fb      	str	r3, [r7, #12]
      y2 = TS_IO_Transaction(XPT2046_CMD_GETY); /* Get Y */
 800218c:	2090      	movs	r0, #144	@ 0x90
 800218e:	f7ff ff45 	bl	800201c <TS_IO_Transaction>
 8002192:	4603      	mov	r3, r0
 8002194:	60bb      	str	r3, [r7, #8]
      printf("y2:%d",(int)y2);
 8002196:	68b9      	ldr	r1, [r7, #8]
 8002198:	4821      	ldr	r0, [pc, #132]	@ (8002220 <xpt2046_ts_DetectTouch+0xd0>)
 800219a:	f019 fb4d 	bl	801b838 <iprintf>
      if((ABS(x1 - x2) < TOUCH_FILTER) && (ABS(y1 - y2) < TOUCH_FILTER))
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f113 0f0f 	cmn.w	r3, #15
 80021a8:	db2b      	blt.n	8002202 <xpt2046_ts_DetectTouch+0xb2>
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	dc26      	bgt.n	8002202 <xpt2046_ts_DetectTouch+0xb2>
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f113 0f0f 	cmn.w	r3, #15
 80021be:	db20      	blt.n	8002202 <xpt2046_ts_DetectTouch+0xb2>
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b0f      	cmp	r3, #15
 80021c8:	dc1b      	bgt.n	8002202 <xpt2046_ts_DetectTouch+0xb2>
      {
        x1 = (x1 + x2) >> 1;
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	105b      	asrs	r3, r3, #1
 80021d2:	61bb      	str	r3, [r7, #24]
        y1 = (y1 + y2) >> 1;
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	4413      	add	r3, r2
 80021da:	105b      	asrs	r3, r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
        i = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
        if(TS_IO_DetectToch())
 80021e2:	f7ff ff93 	bl	800210c <TS_IO_DetectToch>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00e      	beq.n	800220a <xpt2046_ts_DetectTouch+0xba>
        {
          tx = x1;
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <xpt2046_ts_DetectTouch+0xd4>)
 80021f2:	801a      	strh	r2, [r3, #0]
          ty = y1;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <xpt2046_ts_DetectTouch+0xd8>)
 80021fa:	801a      	strh	r2, [r3, #0]
          ret = 1;
 80021fc:	2301      	movs	r3, #1
 80021fe:	77fb      	strb	r3, [r7, #31]
        if(TS_IO_DetectToch())
 8002200:	e003      	b.n	800220a <xpt2046_ts_DetectTouch+0xba>
        }
      }
      else
      {
        x1 = x2;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	61bb      	str	r3, [r7, #24]
        y1 = y2;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	617b      	str	r3, [r7, #20]
    while(i--)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	613a      	str	r2, [r7, #16]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1b6      	bne.n	8002182 <xpt2046_ts_DetectTouch+0x32>
      }
    }
  }
  return ret;
 8002214:	7ffb      	ldrb	r3, [r7, #31]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	0801c5f0 	.word	0x0801c5f0
 8002224:	20002970 	.word	0x20002970
 8002228:	20002972 	.word	0x20002972

0800222c <xpt2046_ts_GetXY>:

//-----------------------------------------------------------------------------
void xpt2046_ts_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	81fb      	strh	r3, [r7, #14]
  *X = tx,
 800223a:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <xpt2046_ts_GetXY+0x28>)
 800223c:	881a      	ldrh	r2, [r3, #0]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	801a      	strh	r2, [r3, #0]
  *Y = ty;
 8002242:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <xpt2046_ts_GetXY+0x2c>)
 8002244:	881a      	ldrh	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	801a      	strh	r2, [r3, #0]
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	20002970 	.word	0x20002970
 8002258:	20002972 	.word	0x20002972

0800225c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002264:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002268:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002274:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002278:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800227c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00b      	beq.n	800229c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002284:	e000      	b.n	8002288 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002286:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002288:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f9      	beq.n	8002286 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002292:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800229c:	687b      	ldr	r3, [r7, #4]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022ac:	f018 f86c 	bl	801a388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022b0:	f000 f806 	bl	80022c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022b4:	f000 f84a 	bl	800234c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mainApp();
 80022b8:	f7fe f830 	bl	800031c <mainApp>
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <main+0x14>

080022c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b090      	sub	sp, #64	@ 0x40
 80022c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022c6:	f107 0318 	add.w	r3, r7, #24
 80022ca:	2228      	movs	r2, #40	@ 0x28
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f019 fb07 	bl	801b8e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]
 80022de:	60da      	str	r2, [r3, #12]
 80022e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022e2:	2301      	movs	r3, #1
 80022e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022f0:	2301      	movs	r3, #1
 80022f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022f4:	2302      	movs	r3, #2
 80022f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80022fe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002302:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002304:	f107 0318 	add.w	r3, r7, #24
 8002308:	4618      	mov	r0, r3
 800230a:	f018 fb37 	bl	801a97c <HAL_RCC_OscConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002314:	f000 f8da 	bl	80024cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002318:	230f      	movs	r3, #15
 800231a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800231c:	2302      	movs	r3, #2
 800231e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002328:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	2102      	movs	r1, #2
 8002332:	4618      	mov	r0, r3
 8002334:	f018 fda4 	bl	801ae80 <HAL_RCC_ClockConfig>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800233e:	f000 f8c5 	bl	80024cc <Error_Handler>
  }
}
 8002342:	bf00      	nop
 8002344:	3740      	adds	r7, #64	@ 0x40
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002360:	4b3f      	ldr	r3, [pc, #252]	@ (8002460 <MX_GPIO_Init+0x114>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a3e      	ldr	r2, [pc, #248]	@ (8002460 <MX_GPIO_Init+0x114>)
 8002366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b3c      	ldr	r3, [pc, #240]	@ (8002460 <MX_GPIO_Init+0x114>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002378:	4b39      	ldr	r3, [pc, #228]	@ (8002460 <MX_GPIO_Init+0x114>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4a38      	ldr	r2, [pc, #224]	@ (8002460 <MX_GPIO_Init+0x114>)
 800237e:	f043 0320 	orr.w	r3, r3, #32
 8002382:	6193      	str	r3, [r2, #24]
 8002384:	4b36      	ldr	r3, [pc, #216]	@ (8002460 <MX_GPIO_Init+0x114>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0320 	and.w	r3, r3, #32
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	4b33      	ldr	r3, [pc, #204]	@ (8002460 <MX_GPIO_Init+0x114>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4a32      	ldr	r2, [pc, #200]	@ (8002460 <MX_GPIO_Init+0x114>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	6193      	str	r3, [r2, #24]
 800239c:	4b30      	ldr	r3, [pc, #192]	@ (8002460 <MX_GPIO_Init+0x114>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002460 <MX_GPIO_Init+0x114>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002460 <MX_GPIO_Init+0x114>)
 80023ae:	f043 0308 	orr.w	r3, r3, #8
 80023b2:	6193      	str	r3, [r2, #24]
 80023b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002460 <MX_GPIO_Init+0x114>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
 80023c0:	2200      	movs	r2, #0
 80023c2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80023c6:	4827      	ldr	r0, [pc, #156]	@ (8002464 <MX_GPIO_Init+0x118>)
 80023c8:	f018 fabf 	bl	801a94a <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_D8_Pin|LCD_D9_Pin
                          |LCD_D10_Pin|LCD_D11_Pin|LCD_D12_Pin|LCD_D13_Pin
                          |LCD_D14_Pin|LCD_D15_Pin|LCD_D0_Pin|LCD_D1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TS_MOSI_Pin|LCD_WR_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 80023cc:	2200      	movs	r2, #0
 80023ce:	f242 010c 	movw	r1, #8204	@ 0x200c
 80023d2:	4825      	ldr	r0, [pc, #148]	@ (8002468 <MX_GPIO_Init+0x11c>)
 80023d4:	f018 fab9 	bl	801a94a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TS_CS_Pin|TS_SCK_Pin|LCD_RST_Pin|LCD_RD_Pin
 80023d8:	2201      	movs	r2, #1
 80023da:	f24c 0113 	movw	r1, #49171	@ 0xc013
 80023de:	4822      	ldr	r0, [pc, #136]	@ (8002468 <MX_GPIO_Init+0x11c>)
 80023e0:	f018 fab3 	bl	801a94a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_D2_Pin LCD_D3_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin LCD_D8_Pin LCD_D9_Pin
                           LCD_D10_Pin LCD_D11_Pin LCD_D12_Pin LCD_D13_Pin
                           LCD_D14_Pin LCD_D15_Pin LCD_D0_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
 80023e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023e8:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_D8_Pin|LCD_D9_Pin
                          |LCD_D10_Pin|LCD_D11_Pin|LCD_D12_Pin|LCD_D13_Pin
                          |LCD_D14_Pin|LCD_D15_Pin|LCD_D0_Pin|LCD_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ea:	2301      	movs	r3, #1
 80023ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023f6:	f107 0310 	add.w	r3, r7, #16
 80023fa:	4619      	mov	r1, r3
 80023fc:	4819      	ldr	r0, [pc, #100]	@ (8002464 <MX_GPIO_Init+0x118>)
 80023fe:	f018 f8f9 	bl	801a5f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_IRQ_Pin TS_MISO_Pin */
  GPIO_InitStruct.Pin = TS_IRQ_Pin|TS_MISO_Pin;
 8002402:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002410:	f107 0310 	add.w	r3, r7, #16
 8002414:	4619      	mov	r1, r3
 8002416:	4814      	ldr	r0, [pc, #80]	@ (8002468 <MX_GPIO_Init+0x11c>)
 8002418:	f018 f8ec 	bl	801a5f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_MOSI_Pin TS_CS_Pin TS_SCK_Pin LCD_RD_Pin
                           LCD_RS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = TS_MOSI_Pin|TS_CS_Pin|TS_SCK_Pin|LCD_RD_Pin
 800241c:	f24e 031a 	movw	r3, #57370	@ 0xe01a
 8002420:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002422:	2301      	movs	r3, #1
 8002424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800242e:	f107 0310 	add.w	r3, r7, #16
 8002432:	4619      	mov	r1, r3
 8002434:	480c      	ldr	r0, [pc, #48]	@ (8002468 <MX_GPIO_Init+0x11c>)
 8002436:	f018 f8dd 	bl	801a5f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_WR_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_WR_Pin;
 800243a:	2305      	movs	r3, #5
 800243c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243e:	2301      	movs	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2302      	movs	r3, #2
 8002448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	4619      	mov	r1, r3
 8002450:	4805      	ldr	r0, [pc, #20]	@ (8002468 <MX_GPIO_Init+0x11c>)
 8002452:	f018 f8cf 	bl	801a5f4 <HAL_GPIO_Init>

}
 8002456:	bf00      	nop
 8002458:	3720      	adds	r7, #32
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
 8002464:	40011800 	.word	0x40011800
 8002468:	40011400 	.word	0x40011400

0800246c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	e009      	b.n	8002496 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	60ba      	str	r2, [r7, #8]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fee6 	bl	800225c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	3301      	adds	r3, #1
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	429a      	cmp	r2, r3
 800249c:	dbf1      	blt.n	8002482 <_write+0x16>
  return len;
 800249e:	687b      	ldr	r3, [r7, #4]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a04      	ldr	r2, [pc, #16]	@ (80024c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d101      	bne.n	80024be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80024ba:	f017 ff7b 	bl	801a3b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40001000 	.word	0x40001000

080024cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80024d0:	b672      	cpsid	i
}
 80024d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <Error_Handler+0x8>

080024d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <HAL_MspInit+0x5c>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	4a14      	ldr	r2, [pc, #80]	@ (8002534 <HAL_MspInit+0x5c>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6193      	str	r3, [r2, #24]
 80024ea:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_MspInit+0x5c>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	60bb      	str	r3, [r7, #8]
 80024f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <HAL_MspInit+0x5c>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002534 <HAL_MspInit+0x5c>)
 80024fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002500:	61d3      	str	r3, [r2, #28]
 8002502:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <HAL_MspInit+0x5c>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <HAL_MspInit+0x60>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	4a04      	ldr	r2, [pc, #16]	@ (8002538 <HAL_MspInit+0x60>)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	40021000 	.word	0x40021000
 8002538:	40010000 	.word	0x40010000

0800253c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08e      	sub	sp, #56	@ 0x38
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002552:	4b34      	ldr	r3, [pc, #208]	@ (8002624 <HAL_InitTick+0xe8>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	4a33      	ldr	r2, [pc, #204]	@ (8002624 <HAL_InitTick+0xe8>)
 8002558:	f043 0310 	orr.w	r3, r3, #16
 800255c:	61d3      	str	r3, [r2, #28]
 800255e:	4b31      	ldr	r3, [pc, #196]	@ (8002624 <HAL_InitTick+0xe8>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800256a:	f107 0210 	add.w	r2, r7, #16
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f018 fddf 	bl	801b138 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800257e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002580:	2b00      	cmp	r3, #0
 8002582:	d103      	bne.n	800258c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002584:	f018 fdc4 	bl	801b110 <HAL_RCC_GetPCLK1Freq>
 8002588:	6378      	str	r0, [r7, #52]	@ 0x34
 800258a:	e004      	b.n	8002596 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800258c:	f018 fdc0 	bl	801b110 <HAL_RCC_GetPCLK1Freq>
 8002590:	4603      	mov	r3, r0
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002598:	4a23      	ldr	r2, [pc, #140]	@ (8002628 <HAL_InitTick+0xec>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0c9b      	lsrs	r3, r3, #18
 80025a0:	3b01      	subs	r3, #1
 80025a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80025a4:	4b21      	ldr	r3, [pc, #132]	@ (800262c <HAL_InitTick+0xf0>)
 80025a6:	4a22      	ldr	r2, [pc, #136]	@ (8002630 <HAL_InitTick+0xf4>)
 80025a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80025aa:	4b20      	ldr	r3, [pc, #128]	@ (800262c <HAL_InitTick+0xf0>)
 80025ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025b0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80025b2:	4a1e      	ldr	r2, [pc, #120]	@ (800262c <HAL_InitTick+0xf0>)
 80025b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80025b8:	4b1c      	ldr	r3, [pc, #112]	@ (800262c <HAL_InitTick+0xf0>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025be:	4b1b      	ldr	r3, [pc, #108]	@ (800262c <HAL_InitTick+0xf0>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c4:	4b19      	ldr	r3, [pc, #100]	@ (800262c <HAL_InitTick+0xf0>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80025ca:	4818      	ldr	r0, [pc, #96]	@ (800262c <HAL_InitTick+0xf0>)
 80025cc:	f018 fe02 	bl	801b1d4 <HAL_TIM_Base_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80025d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d11b      	bne.n	8002616 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80025de:	4813      	ldr	r0, [pc, #76]	@ (800262c <HAL_InitTick+0xf0>)
 80025e0:	f018 fe50 	bl	801b284 <HAL_TIM_Base_Start_IT>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80025ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d111      	bne.n	8002616 <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80025f2:	2036      	movs	r0, #54	@ 0x36
 80025f4:	f017 ffef 	bl	801a5d6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b0f      	cmp	r3, #15
 80025fc:	d808      	bhi.n	8002610 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80025fe:	2200      	movs	r2, #0
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	2036      	movs	r0, #54	@ 0x36
 8002604:	f017 ffcb 	bl	801a59e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002608:	4a0a      	ldr	r2, [pc, #40]	@ (8002634 <HAL_InitTick+0xf8>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e002      	b.n	8002616 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002616:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800261a:	4618      	mov	r0, r3
 800261c:	3738      	adds	r7, #56	@ 0x38
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000
 8002628:	431bde83 	.word	0x431bde83
 800262c:	20002974 	.word	0x20002974
 8002630:	40001000 	.word	0x40001000
 8002634:	20000f34 	.word	0x20000f34

08002638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <NMI_Handler+0x4>

08002640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <HardFault_Handler+0x4>

08002648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <MemManage_Handler+0x4>

08002650 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <BusFault_Handler+0x4>

08002658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <UsageFault_Handler+0x4>

08002660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr

08002690 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002694:	4802      	ldr	r0, [pc, #8]	@ (80026a0 <TIM6_IRQHandler+0x10>)
 8002696:	f018 fe55 	bl	801b344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20002974 	.word	0x20002974

080026a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	e00a      	b.n	80026cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026b6:	f3af 8000 	nop.w
 80026ba:	4601      	mov	r1, r0
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	60ba      	str	r2, [r7, #8]
 80026c2:	b2ca      	uxtb	r2, r1
 80026c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	3301      	adds	r3, #1
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	dbf0      	blt.n	80026b6 <_read+0x12>
  }

  return len;
 80026d4:	687b      	ldr	r3, [r7, #4]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <_close>:
  }
  return len;
}

int _close(int file)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002704:	605a      	str	r2, [r3, #4]
  return 0;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <_isatty>:

int _isatty(int file)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800271a:	2301      	movs	r3, #1
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
	...

08002740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002748:	4a14      	ldr	r2, [pc, #80]	@ (800279c <_sbrk+0x5c>)
 800274a:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <_sbrk+0x60>)
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002754:	4b13      	ldr	r3, [pc, #76]	@ (80027a4 <_sbrk+0x64>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800275c:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <_sbrk+0x64>)
 800275e:	4a12      	ldr	r2, [pc, #72]	@ (80027a8 <_sbrk+0x68>)
 8002760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002762:	4b10      	ldr	r3, [pc, #64]	@ (80027a4 <_sbrk+0x64>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	429a      	cmp	r2, r3
 800276e:	d207      	bcs.n	8002780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002770:	f019 f906 	bl	801b980 <__errno>
 8002774:	4603      	mov	r3, r0
 8002776:	220c      	movs	r2, #12
 8002778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
 800277e:	e009      	b.n	8002794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002780:	4b08      	ldr	r3, [pc, #32]	@ (80027a4 <_sbrk+0x64>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002786:	4b07      	ldr	r3, [pc, #28]	@ (80027a4 <_sbrk+0x64>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	4a05      	ldr	r2, [pc, #20]	@ (80027a4 <_sbrk+0x64>)
 8002790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	2000c000 	.word	0x2000c000
 80027a0:	00000800 	.word	0x00000800
 80027a4:	200029bc 	.word	0x200029bc
 80027a8:	2000af08 	.word	0x2000af08

080027ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027b8:	f7ff fff8 	bl	80027ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027bc:	480b      	ldr	r0, [pc, #44]	@ (80027ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027be:	490c      	ldr	r1, [pc, #48]	@ (80027f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027c0:	4a0c      	ldr	r2, [pc, #48]	@ (80027f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c4:	e002      	b.n	80027cc <LoopCopyDataInit>

080027c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ca:	3304      	adds	r3, #4

080027cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d0:	d3f9      	bcc.n	80027c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d2:	4a09      	ldr	r2, [pc, #36]	@ (80027f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027d4:	4c09      	ldr	r4, [pc, #36]	@ (80027fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d8:	e001      	b.n	80027de <LoopFillZerobss>

080027da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027dc:	3204      	adds	r2, #4

080027de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e0:	d3fb      	bcc.n	80027da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027e2:	f019 f8d3 	bl	801b98c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027e6:	f7ff fd5f 	bl	80022a8 <main>
  bx lr
 80027ea:	4770      	bx	lr
  ldr r0, =_sdata
 80027ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f0:	20000f98 	.word	0x20000f98
  ldr r2, =_sidata
 80027f4:	0801f0d8 	.word	0x0801f0d8
  ldr r2, =_sbss
 80027f8:	20000f98 	.word	0x20000f98
  ldr r4, =_ebss
 80027fc:	2000af04 	.word	0x2000af04

08002800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002800:	e7fe      	b.n	8002800 <ADC1_2_IRQHandler>

08002802 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <lv_disp_get_scr_act+0x14>
 8002810:	f00c f9d0 	bl	800ebb4 <lv_disp_get_default>
 8002814:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <lv_disp_get_scr_act+0x1e>
        LV_LOG_WARN("lv_scr_act: no display registered to get its top layer");
        return NULL;
 800281c:	2300      	movs	r3, #0
 800281e:	e001      	b.n	8002824 <lv_disp_get_scr_act+0x22>
    }

    return disp->act_scr;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8002824:	4618      	mov	r0, r3
 8002826:	3708      	adds	r7, #8
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d102      	bne.n	8002840 <lv_disp_get_layer_top+0x14>
 800283a:	f00c f9bb 	bl	800ebb4 <lv_disp_get_default>
 800283e:	6078      	str	r0, [r7, #4]
    if(!disp) {
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <lv_disp_get_layer_top+0x1e>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
 8002846:	2300      	movs	r3, #0
 8002848:	e001      	b.n	800284e <lv_disp_get_layer_top+0x22>
    }

    return disp->top_layer;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
    if(!disp) disp = lv_disp_get_default();
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <lv_disp_get_layer_sys+0x14>
 8002864:	f00c f9a6 	bl	800ebb4 <lv_disp_get_default>
 8002868:	6078      	str	r0, [r7, #4]
    if(!disp) {
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <lv_disp_get_layer_sys+0x1e>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its top layer");
        return NULL;
 8002870:	2300      	movs	r3, #0
 8002872:	e001      	b.n	8002878 <lv_disp_get_layer_sys+0x22>
    }

    return disp->sys_layer;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <lv_group_init>:

/**
 * Init. the group module
 */
void lv_group_init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
 8002884:	2160      	movs	r1, #96	@ 0x60
 8002886:	4802      	ldr	r0, [pc, #8]	@ (8002890 <lv_group_init+0x10>)
 8002888:	f00d f978 	bl	800fb7c <lv_ll_init>
}
 800288c:	bf00      	nop
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20002d44 	.word	0x20002d44

08002894 <lv_group_add_obj>:
 * Add an object to a group
 * @param group pointer to a group
 * @param obj pointer to an object to add
 */
void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
    if(group == NULL) return;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d041      	beq.n	8002928 <lv_group_add_obj+0x94>

    /*Do not add the object twice*/
    lv_obj_t ** obj_i;
    LV_LL_READ(group->obj_ll, obj_i)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f00d fae9 	bl	800fe7e <lv_ll_get_head>
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	e00a      	b.n	80028c6 <lv_group_add_obj+0x32>
    {
        if((*obj_i) == obj) {
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d038      	beq.n	800292c <lv_group_add_obj+0x98>
    LV_LL_READ(group->obj_ll, obj_i)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68f9      	ldr	r1, [r7, #12]
 80028be:	4618      	mov	r0, r3
 80028c0:	f00d fb01 	bl	800fec6 <lv_ll_get_next>
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f1      	bne.n	80028b0 <lv_group_add_obj+0x1c>
            return;
        }
    }

    /*If the object is already in a group and focused then defocus it*/
    if(obj->group_p) {
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <lv_group_add_obj+0x56>
        if(lv_obj_is_focused(obj)) {
 80028d4:	6838      	ldr	r0, [r7, #0]
 80028d6:	f004 f835 	bl	8006944 <lv_obj_is_focused>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d004      	beq.n	80028ea <lv_group_add_obj+0x56>
            lv_group_refocus(obj->group_p);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fa28 	bl	8002d3a <lv_group_refocus>

            LV_LOG_INFO("lv_group_add_obj: assign object to an other group");
        }
    }

    obj->group_p     = group;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    lv_obj_t ** next = lv_ll_ins_tail(&group->obj_ll);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f00d f9dc 	bl	800fcb0 <lv_ll_ins_tail>
 80028f8:	60b8      	str	r0, [r7, #8]
    lv_mem_assert(next);
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <lv_group_add_obj+0x70>
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <lv_group_add_obj+0x6c>
    if(next == NULL) return;
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d012      	beq.n	8002930 <lv_group_add_obj+0x9c>
    *next = obj;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	601a      	str	r2, [r3, #0]

    /* If the head and the tail is equal then there is only one object in the linked list.
     * In this case automatically activate it*/
    if(lv_ll_get_head(&group->obj_ll) == next) {
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4618      	mov	r0, r3
 8002914:	f00d fab3 	bl	800fe7e <lv_ll_get_head>
 8002918:	4602      	mov	r2, r0
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	4293      	cmp	r3, r2
 800291e:	d108      	bne.n	8002932 <lv_group_add_obj+0x9e>
        lv_group_refocus(group);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 fa0a 	bl	8002d3a <lv_group_refocus>
 8002926:	e004      	b.n	8002932 <lv_group_add_obj+0x9e>
    if(group == NULL) return;
 8002928:	bf00      	nop
 800292a:	e002      	b.n	8002932 <lv_group_add_obj+0x9e>
            return;
 800292c:	bf00      	nop
 800292e:	e000      	b.n	8002932 <lv_group_add_obj+0x9e>
    if(next == NULL) return;
 8002930:	bf00      	nop
    }
}
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <lv_group_remove_obj>:
/**
 * Remove an object from its group
 * @param obj pointer to an object to remove
 */
void lv_group_remove_obj(lv_obj_t * obj)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
    lv_group_t * g = obj->group_p;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002944:	60bb      	str	r3, [r7, #8]
    if(g == NULL) return;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d053      	beq.n	80029f4 <lv_group_remove_obj+0xbc>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d051      	beq.n	80029f8 <lv_group_remove_obj+0xc0>

    /*Focus on the next object*/
    if(*g->obj_focus == obj) {
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	429a      	cmp	r2, r3
 800295e:	d11f      	bne.n	80029a0 <lv_group_remove_obj+0x68>
        /*If this is the only object in the group then focus to nothing.*/
        if(lv_ll_get_head(&g->obj_ll) == g->obj_focus && lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4618      	mov	r0, r3
 8002964:	f00d fa8b 	bl	800fe7e <lv_ll_get_head>
 8002968:	4602      	mov	r2, r0
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	429a      	cmp	r2, r3
 8002970:	d113      	bne.n	800299a <lv_group_remove_obj+0x62>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4618      	mov	r0, r3
 8002976:	f00d fa94 	bl	800fea2 <lv_ll_get_tail>
 800297a:	4602      	mov	r2, r0
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	d10a      	bne.n	800299a <lv_group_remove_obj+0x62>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	68d2      	ldr	r2, [r2, #12]
 8002990:	6810      	ldr	r0, [r2, #0]
 8002992:	2200      	movs	r2, #0
 8002994:	2110      	movs	r1, #16
 8002996:	4798      	blx	r3
 8002998:	e002      	b.n	80029a0 <lv_group_remove_obj+0x68>
        }
        /*If there more objects in the group then focus to the next/prev object*/
        else {
            lv_group_refocus(g);
 800299a:	68b8      	ldr	r0, [r7, #8]
 800299c:	f000 f9cd 	bl	8002d3a <lv_group_refocus>
    }

    /* If the focuses object is still the same then it was the only object in the group but it will
     * be deleted. Set the `obj_focus` to NULL to get back to the initial state of the group with
     * zero objects*/
    if(*g->obj_focus == obj) {
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d102      	bne.n	80029b2 <lv_group_remove_obj+0x7a>
        g->obj_focus = NULL;
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2200      	movs	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
    }

    /*Search the object and remove it from its group */
    lv_obj_t ** i;
    LV_LL_READ(g->obj_ll, i)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f00d fa62 	bl	800fe7e <lv_ll_get_head>
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	e016      	b.n	80029ec <lv_group_remove_obj+0xb4>
    {
        if(*i == obj) {
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d10b      	bne.n	80029e0 <lv_group_remove_obj+0xa8>
            lv_ll_rem(&g->obj_ll, i);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	68f9      	ldr	r1, [r7, #12]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f00d f9a8 	bl	800fd22 <lv_ll_rem>
            lv_mem_free(i);
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f00d fbae 	bl	8010134 <lv_mem_free>
            obj->group_p = NULL;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	62da      	str	r2, [r3, #44]	@ 0x2c
            break;
 80029de:	e00c      	b.n	80029fa <lv_group_remove_obj+0xc2>
    LV_LL_READ(g->obj_ll, i)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	68f9      	ldr	r1, [r7, #12]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f00d fa6e 	bl	800fec6 <lv_ll_get_next>
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1e5      	bne.n	80029be <lv_group_remove_obj+0x86>
 80029f2:	e002      	b.n	80029fa <lv_group_remove_obj+0xc2>
    if(g == NULL) return;
 80029f4:	bf00      	nop
 80029f6:	e000      	b.n	80029fa <lv_group_remove_obj+0xc2>
    if(g->obj_focus == NULL) return; /*Just to be sure (Not possible if there is at least one object in the group)*/
 80029f8:	bf00      	nop
        }
    }
}
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <lv_group_focus_obj>:
/**
 * Focus on an object (defocus the current)
 * @param obj pointer to an object to focus on
 */
void lv_group_focus_obj(lv_obj_t * obj)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
    if(obj == NULL) return;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d07a      	beq.n	8002b04 <lv_group_focus_obj+0x104>
    lv_group_t * g = obj->group_p;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a12:	613b      	str	r3, [r7, #16]
    if(g == NULL) return;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d076      	beq.n	8002b08 <lv_group_focus_obj+0x108>

    if(g->frozen != 0) return;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d170      	bne.n	8002b0c <lv_group_focus_obj+0x10c>

    /*On defocus edit mode must be leaved*/
    lv_group_set_editing(g, false);
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	6938      	ldr	r0, [r7, #16]
 8002a2e:	f000 f8c8 	bl	8002bc2 <lv_group_set_editing>

    lv_obj_t ** i;
    LV_LL_READ(g->obj_ll, i)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f00d fa22 	bl	800fe7e <lv_ll_get_head>
 8002a3a:	6178      	str	r0, [r7, #20]
 8002a3c:	e05e      	b.n	8002afc <lv_group_focus_obj+0xfc>
    {
        if(*i == obj) {
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d153      	bne.n	8002af0 <lv_group_focus_obj+0xf0>
            if(g->obj_focus != NULL) {
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01c      	beq.n	8002a8a <lv_group_focus_obj+0x8a>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	68d2      	ldr	r2, [r2, #12]
 8002a5c:	6810      	ldr	r0, [r2, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2110      	movs	r1, #16
 8002a62:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	210d      	movs	r1, #13
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fc48 	bl	8006304 <lv_event_send>
 8002a74:	4603      	mov	r3, r0
 8002a76:	73fb      	strb	r3, [r7, #15]
                if(res != LV_RES_OK) return;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d148      	bne.n	8002b10 <lv_group_focus_obj+0x110>
                lv_obj_invalidate(*g->obj_focus);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f002 fc69 	bl	800535c <lv_obj_invalidate>
            }

            g->obj_focus = i;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	60da      	str	r2, [r3, #12]

            if(g->obj_focus != NULL) {
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d03d      	beq.n	8002b14 <lv_group_focus_obj+0x114>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	68d2      	ldr	r2, [r2, #12]
 8002aa4:	6810      	ldr	r0, [r2, #0]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	210f      	movs	r1, #15
 8002aaa:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <lv_group_focus_obj+0xbc>
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	6938      	ldr	r0, [r7, #16]
 8002aba:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	210c      	movs	r1, #12
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f003 fc1c 	bl	8006304 <lv_event_send>
 8002acc:	4603      	mov	r3, r0
 8002ace:	73bb      	strb	r3, [r7, #14]
                if(res != LV_RES_OK) return;
 8002ad0:	7bbb      	ldrb	r3, [r7, #14]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d120      	bne.n	8002b18 <lv_group_focus_obj+0x118>
                lv_obj_invalidate(*g->obj_focus);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f002 fc3d 	bl	800535c <lv_obj_invalidate>

                /*If the object or its parent has `top == true` bring it to the foregorund*/
                obj_to_foreground(*g->obj_focus);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fa25 	bl	8002f38 <obj_to_foreground>
            }
            break;
 8002aee:	e011      	b.n	8002b14 <lv_group_focus_obj+0x114>
    LV_LL_READ(g->obj_ll, i)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	6979      	ldr	r1, [r7, #20]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f00d f9e6 	bl	800fec6 <lv_ll_get_next>
 8002afa:	6178      	str	r0, [r7, #20]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d19d      	bne.n	8002a3e <lv_group_focus_obj+0x3e>
 8002b02:	e00a      	b.n	8002b1a <lv_group_focus_obj+0x11a>
    if(obj == NULL) return;
 8002b04:	bf00      	nop
 8002b06:	e008      	b.n	8002b1a <lv_group_focus_obj+0x11a>
    if(g == NULL) return;
 8002b08:	bf00      	nop
 8002b0a:	e006      	b.n	8002b1a <lv_group_focus_obj+0x11a>
    if(g->frozen != 0) return;
 8002b0c:	bf00      	nop
 8002b0e:	e004      	b.n	8002b1a <lv_group_focus_obj+0x11a>
                if(res != LV_RES_OK) return;
 8002b10:	bf00      	nop
 8002b12:	e002      	b.n	8002b1a <lv_group_focus_obj+0x11a>
            break;
 8002b14:	bf00      	nop
 8002b16:	e000      	b.n	8002b1a <lv_group_focus_obj+0x11a>
                if(res != LV_RES_OK) return;
 8002b18:	bf00      	nop
        }
    }
}
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <lv_group_focus_next>:
/**
 * Focus the next object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_next(lv_group_t * group)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
    focus_next_core(group, lv_ll_get_head, lv_ll_get_next);
 8002b28:	4a04      	ldr	r2, [pc, #16]	@ (8002b3c <lv_group_focus_next+0x1c>)
 8002b2a:	4905      	ldr	r1, [pc, #20]	@ (8002b40 <lv_group_focus_next+0x20>)
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f93c 	bl	8002daa <focus_next_core>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	0800fec7 	.word	0x0800fec7
 8002b40:	0800fe7f 	.word	0x0800fe7f

08002b44 <lv_group_focus_prev>:
/**
 * Focus the previous object in a group (defocus the current)
 * @param group pointer to a group
 */
void lv_group_focus_prev(lv_group_t * group)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
    focus_next_core(group, lv_ll_get_tail, lv_ll_get_prev);
 8002b4c:	4a04      	ldr	r2, [pc, #16]	@ (8002b60 <lv_group_focus_prev+0x1c>)
 8002b4e:	4905      	ldr	r1, [pc, #20]	@ (8002b64 <lv_group_focus_prev+0x20>)
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f92a 	bl	8002daa <focus_next_core>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	0800fef9 	.word	0x0800fef9
 8002b64:	0800fea3 	.word	0x0800fea3

08002b68 <lv_group_send_data>:
 * @param group pointer to a group
 * @param c a character (use LV_KEY_.. to navigate)
 * @return result of focused object in group.
 */
lv_res_t lv_group_send_data(lv_group_t * group, uint32_t c)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
    lv_obj_t * act = lv_group_get_focused(group);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f896 	bl	8002ca4 <lv_group_get_focused>
 8002b78:	60f8      	str	r0, [r7, #12]
    if(act == NULL) return LV_RES_OK;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <lv_group_send_data+0x1c>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e01a      	b.n	8002bba <lv_group_send_data+0x52>

    lv_res_t res;

    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	69db      	ldr	r3, [r3, #28]
 8002b88:	463a      	mov	r2, r7
 8002b8a:	2111      	movs	r1, #17
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	4798      	blx	r3
 8002b90:	4603      	mov	r3, r0
 8002b92:	72fb      	strb	r3, [r7, #11]
    if(res != LV_RES_OK) return res;
 8002b94:	7afb      	ldrb	r3, [r7, #11]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d001      	beq.n	8002b9e <lv_group_send_data+0x36>
 8002b9a:	7afb      	ldrb	r3, [r7, #11]
 8002b9c:	e00d      	b.n	8002bba <lv_group_send_data+0x52>

    res = lv_event_send(act, LV_EVENT_KEY, &c);
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	210b      	movs	r1, #11
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f003 fbad 	bl	8006304 <lv_event_send>
 8002baa:	4603      	mov	r3, r0
 8002bac:	72fb      	strb	r3, [r7, #11]
    if(res != LV_RES_OK) return res;
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d001      	beq.n	8002bb8 <lv_group_send_data+0x50>
 8002bb4:	7afb      	ldrb	r3, [r7, #11]
 8002bb6:	e000      	b.n	8002bba <lv_group_send_data+0x52>

    return res;
 8002bb8:	7afb      	ldrb	r3, [r7, #11]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <lv_group_set_editing>:
 * Manually set the current mode (edit or navigate).
 * @param group pointer to group
 * @param edit: true: edit mode; false: navigate mode
 */
void lv_group_set_editing(lv_group_t * group, bool edit)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	70fb      	strb	r3, [r7, #3]
    uint8_t en_val = edit ? 1 : 0;
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	75fb      	strb	r3, [r7, #23]

    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002bd8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d028      	beq.n	8002c38 <lv_group_set_editing+0x76>

    group->editing     = en_val;
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	b2d9      	uxtb	r1, r3
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	f892 305c 	ldrb.w	r3, [r2, #92]	@ 0x5c
 8002bf4:	f361 0341 	bfi	r3, r1, #1, #1
 8002bf8:	f882 305c 	strb.w	r3, [r2, #92]	@ 0x5c
    lv_obj_t * focused = lv_group_get_focused(group);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f851 	bl	8002ca4 <lv_group_get_focused>
 8002c02:	6138      	str	r0, [r7, #16]

    if(focused) {
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d012      	beq.n	8002c30 <lv_group_set_editing+0x6e>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	210f      	movs	r1, #15
 8002c12:	6938      	ldr	r0, [r7, #16]
 8002c14:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	210c      	movs	r1, #12
 8002c20:	4618      	mov	r0, r3
 8002c22:	f003 fb6f 	bl	8006304 <lv_event_send>
 8002c26:	4603      	mov	r3, r0
 8002c28:	73fb      	strb	r3, [r7, #15]
        if(res != LV_RES_OK) return;
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <lv_group_set_editing+0x7a>
    }

    lv_obj_invalidate(focused);
 8002c30:	6938      	ldr	r0, [r7, #16]
 8002c32:	f002 fb93 	bl	800535c <lv_obj_invalidate>
 8002c36:	e002      	b.n	8002c3e <lv_group_set_editing+0x7c>
    if(en_val == group->editing) return; /*Do not set the same mode again*/
 8002c38:	bf00      	nop
 8002c3a:	e000      	b.n	8002c3e <lv_group_set_editing+0x7c>
        if(res != LV_RES_OK) return;
 8002c3c:	bf00      	nop
}
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <lv_group_mod_style>:
 * @param group pointer to group
 * @param style pointer to a style to modify
 * @return a copy of the input style but modified with the 'style_mod' function
 */
lv_style_t * lv_group_mod_style(lv_group_t * group, const lv_style_t * style)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
    /*Load the current style. It will be modified by the callback*/
    lv_style_copy(&group->style_tmp, style);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	331c      	adds	r3, #28
 8002c52:	6839      	ldr	r1, [r7, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f005 f8cf 	bl	8007df8 <lv_style_copy>

    if(group->editing) {
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <lv_group_mod_style+0x3e>
        if(group->style_mod_edit_cb) group->style_mod_edit_cb(group, &group->style_tmp);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d012      	beq.n	8002c98 <lv_group_mod_style+0x54>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	321c      	adds	r2, #28
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4798      	blx	r3
 8002c80:	e00a      	b.n	8002c98 <lv_group_mod_style+0x54>
    } else {
        if(group->style_mod_cb) group->style_mod_cb(group, &group->style_tmp);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d006      	beq.n	8002c98 <lv_group_mod_style+0x54>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	321c      	adds	r2, #28
 8002c92:	4611      	mov	r1, r2
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
    }
    return &group->style_tmp;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	331c      	adds	r3, #28
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <lv_group_get_focused>:
 * Get the focused object or NULL if there isn't one
 * @param group pointer to a group
 * @return pointer to the focused object
 */
lv_obj_t * lv_group_get_focused(const lv_group_t * group)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
    if(!group) return NULL;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <lv_group_get_focused+0x12>
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e008      	b.n	8002cc8 <lv_group_get_focused+0x24>
    if(group->obj_focus == NULL) return NULL;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <lv_group_get_focused+0x1e>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e002      	b.n	8002cc8 <lv_group_get_focused+0x24>

    return *group->obj_focus;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <lv_group_get_editing>:
 * Get the current mode (edit or navigate).
 * @param group pointer to group
 * @return true: edit mode; false: navigate mode
 */
bool lv_group_get_editing(const lv_group_t * group)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
    if(!group) return false;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <lv_group_get_editing+0x12>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e00b      	b.n	8002cfc <lv_group_get_editing+0x2a>
    return group->editing ? true : false;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bf14      	ite	ne
 8002cf6:	2301      	movne	r3, #1
 8002cf8:	2300      	moveq	r3, #0
 8002cfa:	b2db      	uxtb	r3, r3
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <lv_group_get_click_focus>:
 * Get the `click_focus` attribute.
 * @param group pointer to group
 * @return true: `click_focus` is enabled; false: disabled
 */
bool lv_group_get_click_focus(const lv_group_t * group)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
    if(!group) return false;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <lv_group_get_click_focus+0x12>
 8002d14:	2300      	movs	r3, #0
 8002d16:	e00b      	b.n	8002d30 <lv_group_get_click_focus+0x2a>
    return group->click_focus ? true : false;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr

08002d3a <lv_group_refocus>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void lv_group_refocus(lv_group_t * g)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
    /*Refocus must temporarily allow wrapping to work correctly*/
    uint8_t temp_wrap = g->wrap;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d48:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	73fb      	strb	r3, [r7, #15]
    g->wrap           = 1;
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	f892 305c 	ldrb.w	r3, [r2, #92]	@ 0x5c
 8002d56:	f043 0310 	orr.w	r3, r3, #16
 8002d5a:	f882 305c 	strb.w	r3, [r2, #92]	@ 0x5c

    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d103      	bne.n	8002d76 <lv_group_refocus+0x3c>
        lv_group_focus_next(g);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff fed6 	bl	8002b20 <lv_group_focus_next>
 8002d74:	e00a      	b.n	8002d8c <lv_group_refocus+0x52>
    else if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_PREV)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <lv_group_refocus+0x52>
        lv_group_focus_prev(g);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff fedc 	bl	8002b44 <lv_group_focus_prev>
    /*Restore wrap property*/
    g->wrap = temp_wrap;
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	b2d9      	uxtb	r1, r3
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	f892 305c 	ldrb.w	r3, [r2, #92]	@ 0x5c
 8002d9a:	f361 1304 	bfi	r3, r1, #4, #1
 8002d9e:	f882 305c 	strb.w	r3, [r2, #92]	@ 0x5c
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <focus_next_core>:
    }
}

static void focus_next_core(lv_group_t * group, void * (*begin)(const lv_ll_t *),
                            void * (*move)(const lv_ll_t *, const void *))
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b088      	sub	sp, #32
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
    if(group->frozen) return;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f040 80a6 	bne.w	8002f14 <focus_next_core+0x16a>

    lv_obj_t ** obj_next     = group->obj_focus;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	61fb      	str	r3, [r7, #28]
    lv_obj_t ** obj_sentinel = NULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
    bool can_move            = true;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
    bool can_begin           = true;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	75bb      	strb	r3, [r7, #22]

    for(;;) {
        if(obj_next == NULL) {
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d11b      	bne.n	8002e18 <focus_next_core+0x6e>
            if(group->wrap || obj_sentinel == NULL) {
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d103      	bne.n	8002df8 <focus_next_core+0x4e>
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 8090 	bne.w	8002f18 <focus_next_core+0x16e>
                if(!can_begin) return;
 8002df8:	7dbb      	ldrb	r3, [r7, #22]
 8002dfa:	f083 0301 	eor.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f040 808b 	bne.w	8002f1c <focus_next_core+0x172>
                obj_next  = begin(&group->obj_ll);
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4798      	blx	r3
 8002e0e:	61f8      	str	r0, [r7, #28]
                can_move  = false;
 8002e10:	2300      	movs	r3, #0
 8002e12:	75fb      	strb	r3, [r7, #23]
                can_begin = false;
 8002e14:	2300      	movs	r3, #0
 8002e16:	75bb      	strb	r3, [r7, #22]
                /*Currently focused object is the last/first in the group, keep it that way*/
                return;
            }
        }

        if(obj_sentinel == NULL) {
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d104      	bne.n	8002e28 <focus_next_core+0x7e>
            obj_sentinel = obj_next;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	61bb      	str	r3, [r7, #24]
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d07b      	beq.n	8002f20 <focus_next_core+0x176>
        }

        if(can_move) {
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <focus_next_core+0x98>
            obj_next = move(&group->obj_ll, obj_next);
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69f9      	ldr	r1, [r7, #28]
 8002e34:	4610      	mov	r0, r2
 8002e36:	4798      	blx	r3
 8002e38:	61f8      	str	r0, [r7, #28]

            /*Give up if we walked the entire list and haven't found another visible object*/
            if(obj_next == obj_sentinel) return;
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d070      	beq.n	8002f24 <focus_next_core+0x17a>
        }

        can_move = true;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]

        if(obj_next == NULL) continue;
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00b      	beq.n	8002e64 <focus_next_core+0xba>

        /*Hidden objects don't receive focus*/
        if(!lv_obj_get_hidden(*obj_next)) break;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 fca3 	bl	800679c <lv_obj_get_hidden>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f083 0301 	eor.w	r3, r3, #1
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <focus_next_core+0xbe>
 8002e62:	e7ba      	b.n	8002dda <focus_next_core+0x30>
        if(obj_next == NULL) continue;
 8002e64:	bf00      	nop
        if(obj_next == NULL) {
 8002e66:	e7b8      	b.n	8002dda <focus_next_core+0x30>
        if(!lv_obj_get_hidden(*obj_next)) break;
 8002e68:	bf00      	nop
    }

    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d059      	beq.n	8002f28 <focus_next_core+0x17e>

    if(group->obj_focus) {
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01c      	beq.n	8002eb6 <focus_next_core+0x10c>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	68d2      	ldr	r2, [r2, #12]
 8002e88:	6810      	ldr	r0, [r2, #0]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2110      	movs	r1, #16
 8002e8e:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2200      	movs	r2, #0
 8002e98:	210d      	movs	r1, #13
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 fa32 	bl	8006304 <lv_event_send>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	757b      	strb	r3, [r7, #21]
        if(res != LV_RES_OK) return;
 8002ea4:	7d7b      	ldrb	r3, [r7, #21]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d140      	bne.n	8002f2c <focus_next_core+0x182>
        lv_obj_invalidate(*group->obj_focus);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f002 fa53 	bl	800535c <lv_obj_invalidate>
    }

    group->obj_focus = obj_next;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	60da      	str	r2, [r3, #12]

    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	68d2      	ldr	r2, [r2, #12]
 8002ec8:	6810      	ldr	r0, [r2, #0]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	210f      	movs	r1, #15
 8002ece:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	210c      	movs	r1, #12
 8002eda:	4618      	mov	r0, r3
 8002edc:	f003 fa12 	bl	8006304 <lv_event_send>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	753b      	strb	r3, [r7, #20]
    if(res != LV_RES_OK) return;
 8002ee4:	7d3b      	ldrb	r3, [r7, #20]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d122      	bne.n	8002f30 <focus_next_core+0x186>

    /*If the object or its parent has `top == true` bring it to the foregorund*/
    obj_to_foreground(*group->obj_focus);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f821 	bl	8002f38 <obj_to_foreground>

    lv_obj_invalidate(*group->obj_focus);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f002 fa2d 	bl	800535c <lv_obj_invalidate>

    if(group->focus_cb) group->focus_cb(group);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d013      	beq.n	8002f32 <focus_next_core+0x188>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	4798      	blx	r3
 8002f12:	e00e      	b.n	8002f32 <focus_next_core+0x188>
    if(group->frozen) return;
 8002f14:	bf00      	nop
 8002f16:	e00c      	b.n	8002f32 <focus_next_core+0x188>
                return;
 8002f18:	bf00      	nop
 8002f1a:	e00a      	b.n	8002f32 <focus_next_core+0x188>
                if(!can_begin) return;
 8002f1c:	bf00      	nop
 8002f1e:	e008      	b.n	8002f32 <focus_next_core+0x188>
            if(obj_sentinel == NULL) return; /*Group is empty*/
 8002f20:	bf00      	nop
 8002f22:	e006      	b.n	8002f32 <focus_next_core+0x188>
            if(obj_next == obj_sentinel) return;
 8002f24:	bf00      	nop
 8002f26:	e004      	b.n	8002f32 <focus_next_core+0x188>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
 8002f28:	bf00      	nop
 8002f2a:	e002      	b.n	8002f32 <focus_next_core+0x188>
        if(res != LV_RES_OK) return;
 8002f2c:	bf00      	nop
 8002f2e:	e000      	b.n	8002f32 <focus_next_core+0x188>
    if(res != LV_RES_OK) return;
 8002f30:	bf00      	nop
}
 8002f32:	3720      	adds	r7, #32
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <obj_to_foreground>:

static void obj_to_foreground(lv_obj_t * obj)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	60fb      	str	r3, [r7, #12]
    lv_obj_t * last_top = NULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60bb      	str	r3, [r7, #8]
    while(i != NULL) {
 8002f48:	e00d      	b.n	8002f66 <obj_to_foreground+0x2e>
        if(i->top != 0) last_top = i;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <obj_to_foreground+0x26>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	60bb      	str	r3, [r7, #8]
        i = lv_obj_get_parent(i);
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f003 faf0 	bl	8006544 <lv_obj_get_parent>
 8002f64:	60f8      	str	r0, [r7, #12]
    while(i != NULL) {
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ee      	bne.n	8002f4a <obj_to_foreground+0x12>
    }

    if(last_top != NULL) {
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <obj_to_foreground+0x40>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
 8002f72:	68b8      	ldr	r0, [r7, #8]
 8002f74:	f002 fac7 	bl	8005506 <lv_obj_move_foreground>
    }
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <lv_indev_init>:

/**
 * Initialize the display input device subsystem
 */
void lv_indev_init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
    lv_indev_reset(NULL); /*Reset all input devices*/
 8002f84:	2000      	movs	r0, #0
 8002f86:	f000 f8c1 	bl	800310c <lv_indev_reset>
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <lv_indev_read_task>:
/**
 * Called periodically to read the input devices
 * @param param pointer to and input device to read
 */
void lv_indev_read_task(lv_task_t * task)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b089      	sub	sp, #36	@ 0x24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("indev read task started");

    lv_indev_data_t data;

    indev_act = task->user_data;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4a4c      	ldr	r2, [pc, #304]	@ (80030d0 <lv_indev_read_task+0x140>)
 8002f9e:	6013      	str	r3, [r2, #0]

    /*Read and process all indevs*/
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 8002fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80030d0 <lv_indev_read_task+0x140>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 808b 	beq.w	80030c2 <lv_indev_read_task+0x132>

    /*Handle reset query before processing the point*/
    indev_proc_reset_query_handler(indev_act);
 8002fac:	4b48      	ldr	r3, [pc, #288]	@ (80030d0 <lv_indev_read_task+0x140>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f001 faa9 	bl	8004508 <indev_proc_reset_query_handler>

    if(indev_act->proc.disabled) return;
 8002fb6:	4b46      	ldr	r3, [pc, #280]	@ (80030d0 <lv_indev_read_task+0x140>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d17e      	bne.n	80030c6 <lv_indev_read_task+0x136>
    bool more_to_read;
    do {
        /*Read the data*/
        more_to_read = lv_indev_read(indev_act, &data);
 8002fc8:	4b41      	ldr	r3, [pc, #260]	@ (80030d0 <lv_indev_read_task+0x140>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f107 020c 	add.w	r2, r7, #12
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f00b ff6c 	bl	800eeb0 <lv_indev_read>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	77fb      	strb	r3, [r7, #31]

        /*The active object might deleted even in the read function*/
        indev_proc_reset_query_handler(indev_act);
 8002fdc:	4b3c      	ldr	r3, [pc, #240]	@ (80030d0 <lv_indev_read_task+0x140>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f001 fa91 	bl	8004508 <indev_proc_reset_query_handler>
        indev_obj_act = NULL;
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80030d4 <lv_indev_read_task+0x144>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        indev_act->proc.state = data.state;
 8002fec:	4b38      	ldr	r3, [pc, #224]	@ (80030d0 <lv_indev_read_task+0x140>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	7eba      	ldrb	r2, [r7, #26]
 8002ff2:	f883 2020 	strb.w	r2, [r3, #32]

        /*Save the last activity time*/
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
 8002ff6:	4b36      	ldr	r3, [pc, #216]	@ (80030d0 <lv_indev_read_task+0x140>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d108      	bne.n	8003014 <lv_indev_read_task+0x84>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
 8003002:	4b33      	ldr	r3, [pc, #204]	@ (80030d0 <lv_indev_read_task+0x140>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	691c      	ldr	r4, [r3, #16]
 8003008:	f00b ff9c 	bl	800ef44 <lv_tick_get>
 800300c:	4603      	mov	r3, r0
 800300e:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
 8003012:	e010      	b.n	8003036 <lv_indev_read_task+0xa6>
        } else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
 8003014:	4b2e      	ldr	r3, [pc, #184]	@ (80030d0 <lv_indev_read_task+0x140>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b04      	cmp	r3, #4
 800301c:	d10b      	bne.n	8003036 <lv_indev_read_task+0xa6>
 800301e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <lv_indev_read_task+0xa6>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
 8003026:	4b2a      	ldr	r3, [pc, #168]	@ (80030d0 <lv_indev_read_task+0x140>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	691c      	ldr	r4, [r3, #16]
 800302c:	f00b ff8a 	bl	800ef44 <lv_tick_get>
 8003030:	4603      	mov	r3, r0
 8003032:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
        }

        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
 8003036:	4b26      	ldr	r3, [pc, #152]	@ (80030d0 <lv_indev_read_task+0x140>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d108      	bne.n	8003052 <lv_indev_read_task+0xc2>
            indev_pointer_proc(indev_act, &data);
 8003040:	4b23      	ldr	r3, [pc, #140]	@ (80030d0 <lv_indev_read_task+0x140>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f107 020c 	add.w	r2, r7, #12
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f91c 	bl	8003288 <indev_pointer_proc>
 8003050:	e028      	b.n	80030a4 <lv_indev_read_task+0x114>
        } else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
 8003052:	4b1f      	ldr	r3, [pc, #124]	@ (80030d0 <lv_indev_read_task+0x140>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d108      	bne.n	800306e <lv_indev_read_task+0xde>
            indev_keypad_proc(indev_act, &data);
 800305c:	4b1c      	ldr	r3, [pc, #112]	@ (80030d0 <lv_indev_read_task+0x140>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f107 020c 	add.w	r2, r7, #12
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f95a 	bl	8003320 <indev_keypad_proc>
 800306c:	e01a      	b.n	80030a4 <lv_indev_read_task+0x114>
        } else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
 800306e:	4b18      	ldr	r3, [pc, #96]	@ (80030d0 <lv_indev_read_task+0x140>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b04      	cmp	r3, #4
 8003076:	d108      	bne.n	800308a <lv_indev_read_task+0xfa>
            indev_encoder_proc(indev_act, &data);
 8003078:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <lv_indev_read_task+0x140>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f107 020c 	add.w	r2, r7, #12
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fb62 	bl	800374c <indev_encoder_proc>
 8003088:	e00c      	b.n	80030a4 <lv_indev_read_task+0x114>
        } else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
 800308a:	4b11      	ldr	r3, [pc, #68]	@ (80030d0 <lv_indev_read_task+0x140>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d107      	bne.n	80030a4 <lv_indev_read_task+0x114>
            indev_button_proc(indev_act, &data);
 8003094:	4b0e      	ldr	r3, [pc, #56]	@ (80030d0 <lv_indev_read_task+0x140>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f107 020c 	add.w	r2, r7, #12
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fdc6 	bl	8003c30 <indev_button_proc>
        }
        /*Handle reset query if it happened in during processing*/
        indev_proc_reset_query_handler(indev_act);
 80030a4:	4b0a      	ldr	r3, [pc, #40]	@ (80030d0 <lv_indev_read_task+0x140>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f001 fa2d 	bl	8004508 <indev_proc_reset_query_handler>
    } while(more_to_read);
 80030ae:	7ffb      	ldrb	r3, [r7, #31]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d189      	bne.n	8002fc8 <lv_indev_read_task+0x38>

    /*End of indev processing, so no act indev*/
    indev_act     = NULL;
 80030b4:	4b06      	ldr	r3, [pc, #24]	@ (80030d0 <lv_indev_read_task+0x140>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
    indev_obj_act = NULL;
 80030ba:	4b06      	ldr	r3, [pc, #24]	@ (80030d4 <lv_indev_read_task+0x144>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e002      	b.n	80030c8 <lv_indev_read_task+0x138>
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
 80030c2:	bf00      	nop
 80030c4:	e000      	b.n	80030c8 <lv_indev_read_task+0x138>
    if(indev_act->proc.disabled) return;
 80030c6:	bf00      	nop

    LV_LOG_TRACE("indev read task finished");
}
 80030c8:	3724      	adds	r7, #36	@ 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd90      	pop	{r4, r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200029c0 	.word	0x200029c0
 80030d4:	200029c4 	.word	0x200029c4

080030d8 <lv_indev_get_act>:
 * Get the currently processed input device. Can be used in action functions too.
 * @return pointer to the currently processed input device or NULL if no input device processing
 * right now
 */
lv_indev_t * lv_indev_get_act(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
    return indev_act;
 80030dc:	4b02      	ldr	r3, [pc, #8]	@ (80030e8 <lv_indev_get_act+0x10>)
 80030de:	681b      	ldr	r3, [r3, #0]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	200029c0 	.word	0x200029c0

080030ec <lv_indev_get_type>:
 * Get the type of an input device
 * @param indev pointer to an input device
 * @return the type of the input device from `lv_hal_indev_type_t` (`LV_INDEV_TYPE_...`)
 */
lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return LV_INDEV_TYPE_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <lv_indev_get_type+0x12>
 80030fa:	2300      	movs	r3, #0
 80030fc:	e001      	b.n	8003102 <lv_indev_get_type+0x16>

    return indev->driver.type;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	781b      	ldrb	r3, [r3, #0]
}
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr

0800310c <lv_indev_reset>:
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 */
void lv_indev_reset(lv_indev_t * indev)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
    if(indev)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d007      	beq.n	800312a <lv_indev_reset+0x1e>
        indev->proc.reset_query = 1;
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
 8003120:	f043 0302 	orr.w	r3, r3, #2
 8003124:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            i->proc.reset_query = 1;

            i = lv_indev_get_next(i);
        }
    }
}
 8003128:	e012      	b.n	8003150 <lv_indev_reset+0x44>
        lv_indev_t * i = lv_indev_get_next(NULL);
 800312a:	2000      	movs	r0, #0
 800312c:	f00b fea8 	bl	800ee80 <lv_indev_get_next>
 8003130:	60f8      	str	r0, [r7, #12]
        while(i) {
 8003132:	e00a      	b.n	800314a <lv_indev_reset+0x3e>
            i->proc.reset_query = 1;
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            i = lv_indev_get_next(i);
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f00b fe9c 	bl	800ee80 <lv_indev_get_next>
 8003148:	60f8      	str	r0, [r7, #12]
        while(i) {
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f1      	bne.n	8003134 <lv_indev_reset+0x28>
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <lv_indev_reset_long_press>:
/**
 * Reset the long press state of an input device
 * @param indev pointer to an input device
 */
void lv_indev_reset_long_press(lv_indev_t * indev)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
    indev->proc.long_pr_sent         = 0;
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
 8003166:	f36f 0300 	bfc	r3, #0, #1
 800316a:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
    indev->proc.longpr_rep_timestamp = lv_tick_get();
 800316e:	f00b fee9 	bl	800ef44 <lv_tick_get>
 8003172:	4602      	mov	r2, r0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	64da      	str	r2, [r3, #76]	@ 0x4c
    indev->proc.pr_timestamp         = lv_tick_get();
 8003178:	f00b fee4 	bl	800ef44 <lv_tick_get>
 800317c:	4602      	mov	r2, r0
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <lv_indev_get_point>:
 * Get the last point of an input device (for LV_INDEV_TYPE_POINTER and LV_INDEV_TYPE_BUTTON)
 * @param indev pointer to an input device
 * @param point pointer to a point to store the result
 */
void lv_indev_get_point(const lv_indev_t * indev, lv_point_t * point)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	6039      	str	r1, [r7, #0]
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d00c      	beq.n	80031b6 <lv_indev_get_point+0x2c>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d008      	beq.n	80031b6 <lv_indev_get_point+0x2c>
        point->x = -1;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031aa:	801a      	strh	r2, [r3, #0]
        point->y = -1;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031b2:	805a      	strh	r2, [r3, #2]
 80031b4:	e00a      	b.n	80031cc <lv_indev_get_point+0x42>
    } else {
        point->x = indev->proc.types.pointer.act_point.x;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	801a      	strh	r2, [r3, #0]
        point->y = indev->proc.types.pointer.act_point.y;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	805a      	strh	r2, [r3, #2]
    }
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <lv_indev_is_dragging>:
 * LV_INDEV_TYPE_BUTTON)
 * @param indev pointer to an input device
 * @return true: drag is in progress
 */
bool lv_indev_is_dragging(const lv_indev_t * indev)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
    if(indev == NULL) return false;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <lv_indev_is_dragging+0x12>
 80031e4:	2300      	movs	r3, #0
 80031e6:	e014      	b.n	8003212 <lv_indev_is_dragging+0x3c>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d005      	beq.n	80031fc <lv_indev_is_dragging+0x26>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d001      	beq.n	80031fc <lv_indev_is_dragging+0x26>
 80031f8:	2300      	movs	r3, #0
 80031fa:	e00a      	b.n	8003212 <lv_indev_is_dragging+0x3c>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <lv_indev_get_vect>:
 * LV_INDEV_TYPE_BUTTON)
 * @param indev pointer to an input device
 * @param point pointer to a point to store the types.pointer.vector
 */
void lv_indev_get_vect(const lv_indev_t * indev, lv_point_t * point)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
    if(indev == NULL) {
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d106      	bne.n	800323a <lv_indev_get_vect+0x1e>
        point->x = 0;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2200      	movs	r2, #0
 8003230:	801a      	strh	r2, [r3, #0]
        point->y = 0;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2200      	movs	r2, #0
 8003236:	805a      	strh	r2, [r3, #2]
        return;
 8003238:	e018      	b.n	800326c <lv_indev_get_vect+0x50>
    }

    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) {
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d00a      	beq.n	8003258 <lv_indev_get_vect+0x3c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d006      	beq.n	8003258 <lv_indev_get_vect+0x3c>
        point->x = 0;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2200      	movs	r2, #0
 800324e:	801a      	strh	r2, [r3, #0]
        point->y = 0;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	805a      	strh	r2, [r3, #2]
 8003256:	e009      	b.n	800326c <lv_indev_get_vect+0x50>
    } else {
        point->x = indev->proc.types.pointer.vect.x;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	@ 0x2c
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	801a      	strh	r2, [r3, #0]
        point->y = indev->proc.types.pointer.vect.y;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	805a      	strh	r2, [r3, #2]
    }
}
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr

08003274 <lv_indev_get_obj_act>:
/**
 * Gets a pointer to the currently active object in the currently processed input device.
 * @return pointer to currently active object or NULL if no active object
 */
lv_obj_t * lv_indev_get_obj_act(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
    return indev_obj_act;
 8003278:	4b02      	ldr	r3, [pc, #8]	@ (8003284 <lv_indev_get_obj_act+0x10>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	200029c4 	.word	0x200029c4

08003288 <indev_pointer_proc>:
 * Process a new point from LV_INDEV_TYPE_POINTER input device
 * @param i pointer to an input device
 * @param data pointer to the data read from the input device
 */
static void indev_pointer_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
    /*Move the cursor if set and moved*/
    if(i->cursor != NULL &&
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01a      	beq.n	80032d0 <indev_pointer_proc+0x48>
       (i->proc.types.pointer.last_point.x != data->point.x || i->proc.types.pointer.last_point.y != data->point.y)) {
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	f9b3 3000 	ldrsh.w	r3, [r3]
    if(i->cursor != NULL &&
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d107      	bne.n	80032ba <indev_pointer_proc+0x32>
       (i->proc.types.pointer.last_point.x != data->point.x || i->proc.types.pointer.last_point.y != data->point.y)) {
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	@ 0x2a
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d00a      	beq.n	80032d0 <indev_pointer_proc+0x48>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032ca:	461a      	mov	r2, r3
 80032cc:	f002 f945 	bl	800555a <lv_obj_set_pos>
    }

    i->proc.types.pointer.act_point.x = data->point.x;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    i->proc.types.pointer.act_point.y = data->point.y;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    if(i->proc.state == LV_INDEV_STATE_PR) {
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d105      	bne.n	80032fa <indev_pointer_proc+0x72>
        indev_proc_press(&i->proc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3320      	adds	r3, #32
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fce2 	bl	8003cbc <indev_proc_press>
 80032f8:	e004      	b.n	8003304 <indev_pointer_proc+0x7c>
    } else {
        indev_proc_release(&i->proc);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3320      	adds	r3, #32
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 ff58 	bl	80041b4 <indev_proc_release>
    }

    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	851a      	strh	r2, [r3, #40]	@ 0x28
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <indev_keypad_proc>:
 * Process a new point from LV_INDEV_TYPE_KEYPAD input device
 * @param i pointer to an input device
 * @param data pointer to the data read from the input device
 */
static void indev_keypad_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
#if LV_USE_GROUP
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	7b9b      	ldrb	r3, [r3, #14]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d108      	bne.n	8003344 <indev_keypad_proc+0x24>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003338:	f003 0308 	and.w	r3, r3, #8
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 81ec 	bne.w	800371c <indev_keypad_proc+0x3fc>

    if(i->proc.wait_until_release) {
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d014      	beq.n	800337e <indev_keypad_proc+0x5e>
        i->proc.wait_until_release      = 0;
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
 800335a:	f36f 03c3 	bfc	r3, #3, #1
 800335e:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
        i->proc.pr_timestamp            = 0;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	649a      	str	r2, [r3, #72]	@ 0x48
        i->proc.long_pr_sent            = 0;
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
 800336e:	f36f 0300 	bfc	r3, #0, #1
 8003372:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }

    lv_group_t * g = i->group;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003382:	617b      	str	r3, [r7, #20]
    if(g == NULL) return;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 81ca 	beq.w	8003720 <indev_keypad_proc+0x400>

    indev_obj_act = lv_group_get_focused(g);
 800338c:	6978      	ldr	r0, [r7, #20]
 800338e:	f7ff fc89 	bl	8002ca4 <lv_group_get_focused>
 8003392:	4603      	mov	r3, r0
 8003394:	4aa5      	ldr	r2, [pc, #660]	@ (800362c <indev_keypad_proc+0x30c>)
 8003396:	6013      	str	r3, [r2, #0]
    if(indev_obj_act == NULL) return;
 8003398:	4ba4      	ldr	r3, [pc, #656]	@ (800362c <indev_keypad_proc+0x30c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 81c1 	beq.w	8003724 <indev_keypad_proc+0x404>

    /*Save the last key to compare it with the current latter on RELEASE*/
    uint32_t prev_key = i->proc.types.keypad.last_key;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a6:	613b      	str	r3, [r7, #16]

    /* Save the last key.
     * It must be done here else `lv_indev_get_key` will return the last key in events and signals*/
    i->proc.types.keypad.last_key = data->key;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Save the previous state so we can detect state changes below and also set the last state now
     * so if any signal/event handler on the way returns `LV_RES_INV` the last state is remembered
     * for the next time*/
    uint32_t prev_state             = i->proc.types.keypad.last_state;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033b6:	60fb      	str	r3, [r7, #12]
    i->proc.types.keypad.last_state = data->state;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	7b9a      	ldrb	r2, [r3, #14]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /*Key press happened*/
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	7b9b      	ldrb	r3, [r3, #14]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d17b      	bne.n	80034c2 <indev_keypad_proc+0x1a2>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d178      	bne.n	80034c2 <indev_keypad_proc+0x1a2>
        i->proc.pr_timestamp = lv_tick_get();
 80033d0:	f00b fdb8 	bl	800ef44 <lv_tick_get>
 80033d4:	4602      	mov	r2, r0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	649a      	str	r2, [r3, #72]	@ 0x48

        /*Simulate a press on the object if ENTER was pressed*/
        if(data->key == LV_KEY_ENTER) {
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b0a      	cmp	r3, #10
 80033e0:	d125      	bne.n	800342e <indev_keypad_proc+0x10e>
            /*Send the ENTER as a normal KEY*/
            lv_group_send_data(g, LV_KEY_ENTER);
 80033e2:	210a      	movs	r1, #10
 80033e4:	6978      	ldr	r0, [r7, #20]
 80033e6:	f7ff fbbf 	bl	8002b68 <lv_group_send_data>

            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 80033ea:	4b90      	ldr	r3, [pc, #576]	@ (800362c <indev_keypad_proc+0x30c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	4a8e      	ldr	r2, [pc, #568]	@ (800362c <indev_keypad_proc+0x30c>)
 80033f2:	6810      	ldr	r0, [r2, #0]
 80033f4:	2200      	movs	r2, #0
 80033f6:	2107      	movs	r1, #7
 80033f8:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3320      	adds	r3, #32
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fbfc 	bl	8004bfc <indev_reset_check>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	f040 818e 	bne.w	8003728 <indev_keypad_proc+0x408>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 800340c:	4b87      	ldr	r3, [pc, #540]	@ (800362c <indev_keypad_proc+0x30c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2200      	movs	r2, #0
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f002 ff75 	bl	8006304 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3320      	adds	r3, #32
 800341e:	4618      	mov	r0, r3
 8003420:	f001 fbec 	bl	8004bfc <indev_reset_check>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 8171 	beq.w	800370e <indev_keypad_proc+0x3ee>
 800342c:	e189      	b.n	8003742 <indev_keypad_proc+0x422>
        } else if(data->key == LV_KEY_ESC) {
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b1b      	cmp	r3, #27
 8003434:	d114      	bne.n	8003460 <indev_keypad_proc+0x140>
            /*Send the ESC as a normal KEY*/
            lv_group_send_data(g, LV_KEY_ESC);
 8003436:	211b      	movs	r1, #27
 8003438:	6978      	ldr	r0, [r7, #20]
 800343a:	f7ff fb95 	bl	8002b68 <lv_group_send_data>

            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
 800343e:	4b7b      	ldr	r3, [pc, #492]	@ (800362c <indev_keypad_proc+0x30c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2200      	movs	r2, #0
 8003444:	2112      	movs	r1, #18
 8003446:	4618      	mov	r0, r3
 8003448:	f002 ff5c 	bl	8006304 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3320      	adds	r3, #32
 8003450:	4618      	mov	r0, r3
 8003452:	f001 fbd3 	bl	8004bfc <indev_reset_check>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8158 	beq.w	800370e <indev_keypad_proc+0x3ee>
 800345e:	e170      	b.n	8003742 <indev_keypad_proc+0x422>
        }
        /*Move the focus on NEXT*/
        else if(data->key == LV_KEY_NEXT) {
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b09      	cmp	r3, #9
 8003466:	d110      	bne.n	800348a <indev_keypad_proc+0x16a>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8003468:	2100      	movs	r1, #0
 800346a:	6978      	ldr	r0, [r7, #20]
 800346c:	f7ff fba9 	bl	8002bc2 <lv_group_set_editing>
            lv_group_focus_next(g);
 8003470:	6978      	ldr	r0, [r7, #20]
 8003472:	f7ff fb55 	bl	8002b20 <lv_group_focus_next>
            if(indev_reset_check(&i->proc)) return;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3320      	adds	r3, #32
 800347a:	4618      	mov	r0, r3
 800347c:	f001 fbbe 	bl	8004bfc <indev_reset_check>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8143 	beq.w	800370e <indev_keypad_proc+0x3ee>
 8003488:	e15b      	b.n	8003742 <indev_keypad_proc+0x422>
        }
        /*Move the focus on PREV*/
        else if(data->key == LV_KEY_PREV) {
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b0b      	cmp	r3, #11
 8003490:	d110      	bne.n	80034b4 <indev_keypad_proc+0x194>
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 8003492:	2100      	movs	r1, #0
 8003494:	6978      	ldr	r0, [r7, #20]
 8003496:	f7ff fb94 	bl	8002bc2 <lv_group_set_editing>
            lv_group_focus_prev(g);
 800349a:	6978      	ldr	r0, [r7, #20]
 800349c:	f7ff fb52 	bl	8002b44 <lv_group_focus_prev>
            if(indev_reset_check(&i->proc)) return;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3320      	adds	r3, #32
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 fba9 	bl	8004bfc <indev_reset_check>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 812e 	beq.w	800370e <indev_keypad_proc+0x3ee>
 80034b2:	e146      	b.n	8003742 <indev_keypad_proc+0x422>
        }
        /*Just send other keys to the object (e.g. 'A' or `LV_GROUP_KEY_RIGHT`)*/
        else {
            lv_group_send_data(g, data->key);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	4619      	mov	r1, r3
 80034ba:	6978      	ldr	r0, [r7, #20]
 80034bc:	f7ff fb54 	bl	8002b68 <lv_group_send_data>
        if(data->key == LV_KEY_ENTER) {
 80034c0:	e125      	b.n	800370e <indev_keypad_proc+0x3ee>
        }
    }
    /*Pressing*/
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	7b9b      	ldrb	r3, [r3, #14]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	f040 80c3 	bne.w	8003652 <indev_keypad_proc+0x332>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	f040 80bf 	bne.w	8003652 <indev_keypad_proc+0x332>
        /*Long press time has elapsed?*/
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d13b      	bne.n	800355c <indev_keypad_proc+0x23c>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e8:	4618      	mov	r0, r3
 80034ea:	f00b fd32 	bl	800ef52 <lv_tick_elaps>
 80034ee:	4602      	mov	r2, r0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8b5b      	ldrh	r3, [r3, #26]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d931      	bls.n	800355c <indev_keypad_proc+0x23c>
            i->proc.long_pr_sent = 1;
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
 80034fe:	f043 0301 	orr.w	r3, r3, #1
 8003502:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            if(data->key == LV_KEY_ENTER) {
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b0a      	cmp	r3, #10
 800350c:	f040 809f 	bne.w	800364e <indev_keypad_proc+0x32e>
                i->proc.longpr_rep_timestamp = lv_tick_get();
 8003510:	f00b fd18 	bl	800ef44 <lv_tick_get>
 8003514:	4602      	mov	r2, r0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	64da      	str	r2, [r3, #76]	@ 0x4c
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 800351a:	4b44      	ldr	r3, [pc, #272]	@ (800362c <indev_keypad_proc+0x30c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	4a42      	ldr	r2, [pc, #264]	@ (800362c <indev_keypad_proc+0x30c>)
 8003522:	6810      	ldr	r0, [r2, #0]
 8003524:	2200      	movs	r2, #0
 8003526:	210b      	movs	r1, #11
 8003528:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3320      	adds	r3, #32
 800352e:	4618      	mov	r0, r3
 8003530:	f001 fb64 	bl	8004bfc <indev_reset_check>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	f040 80f8 	bne.w	800372c <indev_keypad_proc+0x40c>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 800353c:	4b3b      	ldr	r3, [pc, #236]	@ (800362c <indev_keypad_proc+0x30c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2200      	movs	r2, #0
 8003542:	2104      	movs	r1, #4
 8003544:	4618      	mov	r0, r3
 8003546:	f002 fedd 	bl	8006304 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3320      	adds	r3, #32
 800354e:	4618      	mov	r0, r3
 8003550:	f001 fb54 	bl	8004bfc <indev_reset_check>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d079      	beq.n	800364e <indev_keypad_proc+0x32e>
 800355a:	e0f2      	b.n	8003742 <indev_keypad_proc+0x422>
            }
        }
        /*Long press repeated time has elapsed?*/
        else if(i->proc.long_pr_sent != 0 &&
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80d2 	beq.w	8003712 <indev_keypad_proc+0x3f2>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003572:	4618      	mov	r0, r3
 8003574:	f00b fced 	bl	800ef52 <lv_tick_elaps>
 8003578:	4602      	mov	r2, r0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8b9b      	ldrh	r3, [r3, #28]
        else if(i->proc.long_pr_sent != 0 &&
 800357e:	429a      	cmp	r2, r3
 8003580:	f240 80c7 	bls.w	8003712 <indev_keypad_proc+0x3f2>

            i->proc.longpr_rep_timestamp = lv_tick_get();
 8003584:	f00b fcde 	bl	800ef44 <lv_tick_get>
 8003588:	4602      	mov	r2, r0
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /*Send LONG_PRESS_REP on ENTER*/
            if(data->key == LV_KEY_ENTER) {
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b0a      	cmp	r3, #10
 8003594:	d121      	bne.n	80035da <indev_keypad_proc+0x2ba>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
 8003596:	4b25      	ldr	r3, [pc, #148]	@ (800362c <indev_keypad_proc+0x30c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	4a23      	ldr	r2, [pc, #140]	@ (800362c <indev_keypad_proc+0x30c>)
 800359e:	6810      	ldr	r0, [r2, #0]
 80035a0:	2200      	movs	r2, #0
 80035a2:	210c      	movs	r1, #12
 80035a4:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3320      	adds	r3, #32
 80035aa:	4618      	mov	r0, r3
 80035ac:	f001 fb26 	bl	8004bfc <indev_reset_check>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 80bc 	bne.w	8003730 <indev_keypad_proc+0x410>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 80035b8:	4b1c      	ldr	r3, [pc, #112]	@ (800362c <indev_keypad_proc+0x30c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	2105      	movs	r1, #5
 80035c0:	4618      	mov	r0, r3
 80035c2:	f002 fe9f 	bl	8006304 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3320      	adds	r3, #32
 80035ca:	4618      	mov	r0, r3
 80035cc:	f001 fb16 	bl	8004bfc <indev_reset_check>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 809d 	beq.w	8003712 <indev_keypad_proc+0x3f2>
 80035d8:	e0b3      	b.n	8003742 <indev_keypad_proc+0x422>
            }
            /*Move the focus on NEXT again*/
            else if(data->key == LV_KEY_NEXT) {
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b09      	cmp	r3, #9
 80035e0:	d110      	bne.n	8003604 <indev_keypad_proc+0x2e4>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 80035e2:	2100      	movs	r1, #0
 80035e4:	6978      	ldr	r0, [r7, #20]
 80035e6:	f7ff faec 	bl	8002bc2 <lv_group_set_editing>
                lv_group_focus_next(g);
 80035ea:	6978      	ldr	r0, [r7, #20]
 80035ec:	f7ff fa98 	bl	8002b20 <lv_group_focus_next>
                if(indev_reset_check(&i->proc)) return;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3320      	adds	r3, #32
 80035f4:	4618      	mov	r0, r3
 80035f6:	f001 fb01 	bl	8004bfc <indev_reset_check>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8088 	beq.w	8003712 <indev_keypad_proc+0x3f2>
 8003602:	e09e      	b.n	8003742 <indev_keypad_proc+0x422>
            }
            /*Move the focus on PREV again*/
            else if(data->key == LV_KEY_PREV) {
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b0b      	cmp	r3, #11
 800360a:	d111      	bne.n	8003630 <indev_keypad_proc+0x310>
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
 800360c:	2100      	movs	r1, #0
 800360e:	6978      	ldr	r0, [r7, #20]
 8003610:	f7ff fad7 	bl	8002bc2 <lv_group_set_editing>
                lv_group_focus_prev(g);
 8003614:	6978      	ldr	r0, [r7, #20]
 8003616:	f7ff fa95 	bl	8002b44 <lv_group_focus_prev>
                if(indev_reset_check(&i->proc)) return;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3320      	adds	r3, #32
 800361e:	4618      	mov	r0, r3
 8003620:	f001 faec 	bl	8004bfc <indev_reset_check>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d073      	beq.n	8003712 <indev_keypad_proc+0x3f2>
 800362a:	e08a      	b.n	8003742 <indev_keypad_proc+0x422>
 800362c:	200029c4 	.word	0x200029c4
            }
            /*Just send other keys again to the object (e.g. 'A' or `LV_GORUP_KEY_RIGHT)*/
            else {
                lv_group_send_data(g, data->key);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4619      	mov	r1, r3
 8003636:	6978      	ldr	r0, [r7, #20]
 8003638:	f7ff fa96 	bl	8002b68 <lv_group_send_data>
                if(indev_reset_check(&i->proc)) return;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3320      	adds	r3, #32
 8003640:	4618      	mov	r0, r3
 8003642:	f001 fadb 	bl	8004bfc <indev_reset_check>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d062      	beq.n	8003712 <indev_keypad_proc+0x3f2>
 800364c:	e079      	b.n	8003742 <indev_keypad_proc+0x422>
            if(data->key == LV_KEY_ENTER) {
 800364e:	bf00      	nop
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8003650:	e05f      	b.n	8003712 <indev_keypad_proc+0x3f2>
            }
        }
    }
    /*Release happened*/
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	7b9b      	ldrb	r3, [r3, #14]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d15c      	bne.n	8003714 <indev_keypad_proc+0x3f4>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d159      	bne.n	8003714 <indev_keypad_proc+0x3f4>
        /*The user might clear the key when it was released. Always release the pressed key*/
        data->key = prev_key;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	605a      	str	r2, [r3, #4]
        if(data->key == LV_KEY_ENTER) {
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b0a      	cmp	r3, #10
 800366c:	d144      	bne.n	80036f8 <indev_keypad_proc+0x3d8>

            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 800366e:	4b36      	ldr	r3, [pc, #216]	@ (8003748 <indev_keypad_proc+0x428>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	4a34      	ldr	r2, [pc, #208]	@ (8003748 <indev_keypad_proc+0x428>)
 8003676:	6810      	ldr	r0, [r2, #0]
 8003678:	2200      	movs	r2, #0
 800367a:	210a      	movs	r1, #10
 800367c:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3320      	adds	r3, #32
 8003682:	4618      	mov	r0, r3
 8003684:	f001 faba 	bl	8004bfc <indev_reset_check>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d152      	bne.n	8003734 <indev_keypad_proc+0x414>

            if(i->proc.long_pr_sent == 0) {
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10e      	bne.n	80036bc <indev_keypad_proc+0x39c>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 800369e:	4b2a      	ldr	r3, [pc, #168]	@ (8003748 <indev_keypad_proc+0x428>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	2103      	movs	r1, #3
 80036a6:	4618      	mov	r0, r3
 80036a8:	f002 fe2c 	bl	8006304 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3320      	adds	r3, #32
 80036b0:	4618      	mov	r0, r3
 80036b2:	f001 faa3 	bl	8004bfc <indev_reset_check>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d13d      	bne.n	8003738 <indev_keypad_proc+0x418>
            }

            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 80036bc:	4b22      	ldr	r3, [pc, #136]	@ (8003748 <indev_keypad_proc+0x428>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2200      	movs	r2, #0
 80036c2:	2106      	movs	r1, #6
 80036c4:	4618      	mov	r0, r3
 80036c6:	f002 fe1d 	bl	8006304 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3320      	adds	r3, #32
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 fa94 	bl	8004bfc <indev_reset_check>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d130      	bne.n	800373c <indev_keypad_proc+0x41c>

            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 80036da:	4b1b      	ldr	r3, [pc, #108]	@ (8003748 <indev_keypad_proc+0x428>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2200      	movs	r2, #0
 80036e0:	2107      	movs	r1, #7
 80036e2:	4618      	mov	r0, r3
 80036e4:	f002 fe0e 	bl	8006304 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3320      	adds	r3, #32
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 fa85 	bl	8004bfc <indev_reset_check>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d123      	bne.n	8003740 <indev_keypad_proc+0x420>
        }
        i->proc.pr_timestamp = 0;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	649a      	str	r2, [r3, #72]	@ 0x48
        i->proc.long_pr_sent = 0;
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
 8003704:	f36f 0300 	bfc	r3, #0, #1
 8003708:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
 800370c:	e002      	b.n	8003714 <indev_keypad_proc+0x3f4>
        if(data->key == LV_KEY_ENTER) {
 800370e:	bf00      	nop
 8003710:	e000      	b.n	8003714 <indev_keypad_proc+0x3f4>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8003712:	bf00      	nop
    }
    indev_obj_act = NULL;
 8003714:	4b0c      	ldr	r3, [pc, #48]	@ (8003748 <indev_keypad_proc+0x428>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e012      	b.n	8003742 <indev_keypad_proc+0x422>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 800371c:	bf00      	nop
 800371e:	e010      	b.n	8003742 <indev_keypad_proc+0x422>
    if(g == NULL) return;
 8003720:	bf00      	nop
 8003722:	e00e      	b.n	8003742 <indev_keypad_proc+0x422>
    if(indev_obj_act == NULL) return;
 8003724:	bf00      	nop
 8003726:	e00c      	b.n	8003742 <indev_keypad_proc+0x422>
            if(indev_reset_check(&i->proc)) return;
 8003728:	bf00      	nop
 800372a:	e00a      	b.n	8003742 <indev_keypad_proc+0x422>
                if(indev_reset_check(&i->proc)) return;
 800372c:	bf00      	nop
 800372e:	e008      	b.n	8003742 <indev_keypad_proc+0x422>
                if(indev_reset_check(&i->proc)) return;
 8003730:	bf00      	nop
 8003732:	e006      	b.n	8003742 <indev_keypad_proc+0x422>
            if(indev_reset_check(&i->proc)) return;
 8003734:	bf00      	nop
 8003736:	e004      	b.n	8003742 <indev_keypad_proc+0x422>
                if(indev_reset_check(&i->proc)) return;
 8003738:	bf00      	nop
 800373a:	e002      	b.n	8003742 <indev_keypad_proc+0x422>
            if(indev_reset_check(&i->proc)) return;
 800373c:	bf00      	nop
 800373e:	e000      	b.n	8003742 <indev_keypad_proc+0x422>
            if(indev_reset_check(&i->proc)) return;
 8003740:	bf00      	nop
#else
    (void)data; /*Unused*/
    (void)i;    /*Unused*/
#endif
}
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	200029c4 	.word	0x200029c4

0800374c <indev_encoder_proc>:
 * Process a new point from LV_INDEV_TYPE_ENCODER input device
 * @param i pointer to an input device
 * @param data pointer to the data read from the input device
 */
static void indev_encoder_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
#if LV_USE_GROUP

    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	7b9b      	ldrb	r3, [r3, #14]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d108      	bne.n	8003770 <indev_encoder_proc+0x24>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 823f 	bne.w	8003bee <indev_encoder_proc+0x4a2>

    if(i->proc.wait_until_release) {
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d014      	beq.n	80037aa <indev_encoder_proc+0x5e>
        i->proc.wait_until_release      = 0;
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
 8003786:	f36f 03c3 	bfc	r3, #3, #1
 800378a:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
        i->proc.pr_timestamp            = 0;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	649a      	str	r2, [r3, #72]	@ 0x48
        i->proc.long_pr_sent            = 0;
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
 800379a:	f36f 0300 	bfc	r3, #0, #1
 800379e:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }

    /* Save the last keys before anything else.
     * They need to be already saved if the the function returns for any reason*/
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80037b0:	75fb      	strb	r3, [r7, #23]
    i->proc.types.keypad.last_state = data->state;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	7b9a      	ldrb	r2, [r3, #14]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    i->proc.types.keypad.last_key   = data->key;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	629a      	str	r2, [r3, #40]	@ 0x28

    lv_group_t * g = i->group;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c8:	613b      	str	r3, [r7, #16]
    if(g == NULL) return;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 8210 	beq.w	8003bf2 <indev_encoder_proc+0x4a6>

    indev_obj_act = lv_group_get_focused(g);
 80037d2:	6938      	ldr	r0, [r7, #16]
 80037d4:	f7ff fa66 	bl	8002ca4 <lv_group_get_focused>
 80037d8:	4603      	mov	r3, r0
 80037da:	4a91      	ldr	r2, [pc, #580]	@ (8003a20 <indev_encoder_proc+0x2d4>)
 80037dc:	6013      	str	r3, [r2, #0]
    if(indev_obj_act == NULL) return;
 80037de:	4b90      	ldr	r3, [pc, #576]	@ (8003a20 <indev_encoder_proc+0x2d4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 8207 	beq.w	8003bf6 <indev_encoder_proc+0x4aa>

    /*Process the steps first. They are valid only with released button*/
    if(data->state == LV_INDEV_STATE_REL) {
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	7b9b      	ldrb	r3, [r3, #14]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d15e      	bne.n	80038ae <indev_encoder_proc+0x162>
        /*In edit mode send LEFT/RIGHT keys*/
        if(lv_group_get_editing(g)) {
 80037f0:	6938      	ldr	r0, [r7, #16]
 80037f2:	f7ff fa6e 	bl	8002cd2 <lv_group_get_editing>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d02d      	beq.n	8003858 <indev_encoder_proc+0x10c>
            int32_t s;
            if(data->enc_diff < 0) {
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	da11      	bge.n	800382a <indev_encoder_proc+0xde>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e006      	b.n	800381a <indev_encoder_proc+0xce>
 800380c:	2114      	movs	r1, #20
 800380e:	6938      	ldr	r0, [r7, #16]
 8003810:	f7ff f9aa 	bl	8002b68 <lv_group_send_data>
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	3301      	adds	r3, #1
 8003818:	61fb      	str	r3, [r7, #28]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003820:	425b      	negs	r3, r3
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	429a      	cmp	r2, r3
 8003826:	dbf1      	blt.n	800380c <indev_encoder_proc+0xc0>
 8003828:	e041      	b.n	80038ae <indev_encoder_proc+0x162>
            } else if(data->enc_diff > 0) {
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	dd3c      	ble.n	80038ae <indev_encoder_proc+0x162>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
 8003834:	2300      	movs	r3, #0
 8003836:	61fb      	str	r3, [r7, #28]
 8003838:	e006      	b.n	8003848 <indev_encoder_proc+0xfc>
 800383a:	2113      	movs	r1, #19
 800383c:	6938      	ldr	r0, [r7, #16]
 800383e:	f7ff f993 	bl	8002b68 <lv_group_send_data>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3301      	adds	r3, #1
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800384e:	461a      	mov	r2, r3
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	4293      	cmp	r3, r2
 8003854:	dbf1      	blt.n	800383a <indev_encoder_proc+0xee>
 8003856:	e02a      	b.n	80038ae <indev_encoder_proc+0x162>
            }
        }
        /*In navigate mode focus on the next/prev objects*/
        else {
            int32_t s;
            if(data->enc_diff < 0) {
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	da10      	bge.n	8003884 <indev_encoder_proc+0x138>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	e005      	b.n	8003874 <indev_encoder_proc+0x128>
 8003868:	6938      	ldr	r0, [r7, #16]
 800386a:	f7ff f96b 	bl	8002b44 <lv_group_focus_prev>
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	3301      	adds	r3, #1
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800387a:	425b      	negs	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	429a      	cmp	r2, r3
 8003880:	dbf2      	blt.n	8003868 <indev_encoder_proc+0x11c>
 8003882:	e014      	b.n	80038ae <indev_encoder_proc+0x162>
            } else if(data->enc_diff > 0) {
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	dd0f      	ble.n	80038ae <indev_encoder_proc+0x162>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
 800388e:	2300      	movs	r3, #0
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	e005      	b.n	80038a0 <indev_encoder_proc+0x154>
 8003894:	6938      	ldr	r0, [r7, #16]
 8003896:	f7ff f943 	bl	8002b20 <lv_group_focus_next>
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	3301      	adds	r3, #1
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80038a6:	461a      	mov	r2, r3
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	4293      	cmp	r3, r2
 80038ac:	dbf2      	blt.n	8003894 <indev_encoder_proc+0x148>
            }
        }
    }

    /*Refresh the focused object. It might change due to lv_group_focus_prev/next*/
    indev_obj_act = lv_group_get_focused(g);
 80038ae:	6938      	ldr	r0, [r7, #16]
 80038b0:	f7ff f9f8 	bl	8002ca4 <lv_group_get_focused>
 80038b4:	4603      	mov	r3, r0
 80038b6:	4a5a      	ldr	r2, [pc, #360]	@ (8003a20 <indev_encoder_proc+0x2d4>)
 80038b8:	6013      	str	r3, [r2, #0]
    if(indev_obj_act == NULL) return;
 80038ba:	4b59      	ldr	r3, [pc, #356]	@ (8003a20 <indev_encoder_proc+0x2d4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 819b 	beq.w	8003bfa <indev_encoder_proc+0x4ae>

    /*Button press happened*/
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	7b9b      	ldrb	r3, [r3, #14]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d141      	bne.n	8003950 <indev_encoder_proc+0x204>
 80038cc:	7dfb      	ldrb	r3, [r7, #23]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d13e      	bne.n	8003950 <indev_encoder_proc+0x204>
        bool editable = false;
 80038d2:	2300      	movs	r3, #0
 80038d4:	73fb      	strb	r3, [r7, #15]
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 80038d6:	4b52      	ldr	r3, [pc, #328]	@ (8003a20 <indev_encoder_proc+0x2d4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	4a50      	ldr	r2, [pc, #320]	@ (8003a20 <indev_encoder_proc+0x2d4>)
 80038de:	6810      	ldr	r0, [r2, #0]
 80038e0:	f107 020f 	add.w	r2, r7, #15
 80038e4:	2112      	movs	r1, #18
 80038e6:	4798      	blx	r3

        i->proc.pr_timestamp = lv_tick_get();
 80038e8:	f00b fb2c 	bl	800ef44 <lv_tick_get>
 80038ec:	4602      	mov	r2, r0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	649a      	str	r2, [r3, #72]	@ 0x48
        if(lv_group_get_editing(g) == true || editable == false) {
 80038f2:	6938      	ldr	r0, [r7, #16]
 80038f4:	f7ff f9ed 	bl	8002cd2 <lv_group_get_editing>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <indev_encoder_proc+0x1c0>
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	f083 0301 	eor.w	r3, r3, #1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 816a 	beq.w	8003be0 <indev_encoder_proc+0x494>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
 800390c:	4b44      	ldr	r3, [pc, #272]	@ (8003a20 <indev_encoder_proc+0x2d4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	4a43      	ldr	r2, [pc, #268]	@ (8003a20 <indev_encoder_proc+0x2d4>)
 8003914:	6810      	ldr	r0, [r2, #0]
 8003916:	2200      	movs	r2, #0
 8003918:	2107      	movs	r1, #7
 800391a:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3320      	adds	r3, #32
 8003920:	4618      	mov	r0, r3
 8003922:	f001 f96b 	bl	8004bfc <indev_reset_check>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	f040 8168 	bne.w	8003bfe <indev_encoder_proc+0x4b2>

            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 800392e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a20 <indev_encoder_proc+0x2d4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	2100      	movs	r1, #0
 8003936:	4618      	mov	r0, r3
 8003938:	f002 fce4 	bl	8006304 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3320      	adds	r3, #32
 8003940:	4618      	mov	r0, r3
 8003942:	f001 f95b 	bl	8004bfc <indev_reset_check>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8149 	beq.w	8003be0 <indev_encoder_proc+0x494>
 800394e:	e169      	b.n	8003c24 <indev_encoder_proc+0x4d8>
        }
    }
    /*Pressing*/
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	7b9b      	ldrb	r3, [r3, #14]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d165      	bne.n	8003a24 <indev_encoder_proc+0x2d8>
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d162      	bne.n	8003a24 <indev_encoder_proc+0x2d8>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	f040 813a 	bne.w	8003be4 <indev_encoder_proc+0x498>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003974:	4618      	mov	r0, r3
 8003976:	f00b faec 	bl	800ef52 <lv_tick_elaps>
 800397a:	4602      	mov	r2, r0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8b5b      	ldrh	r3, [r3, #26]
 8003980:	429a      	cmp	r2, r3
 8003982:	f240 812f 	bls.w	8003be4 <indev_encoder_proc+0x498>
            bool editable = false;
 8003986:	2300      	movs	r3, #0
 8003988:	73bb      	strb	r3, [r7, #14]
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 800398a:	4b25      	ldr	r3, [pc, #148]	@ (8003a20 <indev_encoder_proc+0x2d4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	4a23      	ldr	r2, [pc, #140]	@ (8003a20 <indev_encoder_proc+0x2d4>)
 8003992:	6810      	ldr	r0, [r2, #0]
 8003994:	f107 020e 	add.w	r2, r7, #14
 8003998:	2112      	movs	r1, #18
 800399a:	4798      	blx	r3

            /*On enter long press toggle edit mode.*/
            if(editable) {
 800399c:	7bbb      	ldrb	r3, [r7, #14]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d015      	beq.n	80039ce <indev_encoder_proc+0x282>
                /*Don't leave edit mode if there is only one object (nowhere to navigate)*/
                if(lv_ll_is_empty(&g->obj_ll) == false) {
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f00c fb05 	bl	800ffb4 <lv_ll_is_empty>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f083 0301 	eor.w	r3, r3, #1
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d02c      	beq.n	8003a10 <indev_encoder_proc+0x2c4>
                    lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
 80039b6:	6938      	ldr	r0, [r7, #16]
 80039b8:	f7ff f98b 	bl	8002cd2 <lv_group_get_editing>
 80039bc:	4603      	mov	r3, r0
 80039be:	f083 0301 	eor.w	r3, r3, #1
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	4619      	mov	r1, r3
 80039c6:	6938      	ldr	r0, [r7, #16]
 80039c8:	f7ff f8fb 	bl	8002bc2 <lv_group_set_editing>
 80039cc:	e020      	b.n	8003a10 <indev_encoder_proc+0x2c4>
                }
            }
            /*If not editable then just send a long press signal*/
            else {
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
 80039ce:	4b14      	ldr	r3, [pc, #80]	@ (8003a20 <indev_encoder_proc+0x2d4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	4a12      	ldr	r2, [pc, #72]	@ (8003a20 <indev_encoder_proc+0x2d4>)
 80039d6:	6810      	ldr	r0, [r2, #0]
 80039d8:	2200      	movs	r2, #0
 80039da:	210b      	movs	r1, #11
 80039dc:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3320      	adds	r3, #32
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 f90a 	bl	8004bfc <indev_reset_check>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 8109 	bne.w	8003c02 <indev_encoder_proc+0x4b6>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 80039f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a20 <indev_encoder_proc+0x2d4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2200      	movs	r2, #0
 80039f6:	2104      	movs	r1, #4
 80039f8:	4618      	mov	r0, r3
 80039fa:	f002 fc83 	bl	8006304 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3320      	adds	r3, #32
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 f8fa 	bl	8004bfc <indev_reset_check>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f040 80fb 	bne.w	8003c06 <indev_encoder_proc+0x4ba>
            }
            i->proc.long_pr_sent = 1;
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8003a1e:	e0e1      	b.n	8003be4 <indev_encoder_proc+0x498>
 8003a20:	200029c4 	.word	0x200029c4
        }
    }
    /*Release happened*/
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	7b9b      	ldrb	r3, [r3, #14]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f040 80dc 	bne.w	8003be6 <indev_encoder_proc+0x49a>
 8003a2e:	7dfb      	ldrb	r3, [r7, #23]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	f040 80d8 	bne.w	8003be6 <indev_encoder_proc+0x49a>

        bool editable = false;
 8003a36:	2300      	movs	r3, #0
 8003a38:	737b      	strb	r3, [r7, #13]
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
 8003a3a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c2c <indev_encoder_proc+0x4e0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	4a7a      	ldr	r2, [pc, #488]	@ (8003c2c <indev_encoder_proc+0x4e0>)
 8003a42:	6810      	ldr	r0, [r2, #0]
 8003a44:	f107 020d 	add.w	r2, r7, #13
 8003a48:	2112      	movs	r1, #18
 8003a4a:	4798      	blx	r3

        /*The button was released on a non-editable object. Just send enter*/
        if(editable == false) {
 8003a4c:	7b7b      	ldrb	r3, [r7, #13]
 8003a4e:	f083 0301 	eor.w	r3, r3, #1
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d048      	beq.n	8003aea <indev_encoder_proc+0x39e>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8003a58:	4b74      	ldr	r3, [pc, #464]	@ (8003c2c <indev_encoder_proc+0x4e0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	4a73      	ldr	r2, [pc, #460]	@ (8003c2c <indev_encoder_proc+0x4e0>)
 8003a60:	6810      	ldr	r0, [r2, #0]
 8003a62:	2200      	movs	r2, #0
 8003a64:	210a      	movs	r1, #10
 8003a66:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3320      	adds	r3, #32
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f001 f8c5 	bl	8004bfc <indev_reset_check>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f040 80c8 	bne.w	8003c0a <indev_encoder_proc+0x4be>

            if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <indev_encoder_proc+0x34c>
 8003a8a:	4b68      	ldr	r3, [pc, #416]	@ (8003c2c <indev_encoder_proc+0x4e0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2103      	movs	r1, #3
 8003a92:	4618      	mov	r0, r3
 8003a94:	f002 fc36 	bl	8006304 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3320      	adds	r3, #32
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f001 f8ad 	bl	8004bfc <indev_reset_check>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f040 80b2 	bne.w	8003c0e <indev_encoder_proc+0x4c2>

            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8003aaa:	4b60      	ldr	r3, [pc, #384]	@ (8003c2c <indev_encoder_proc+0x4e0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2106      	movs	r1, #6
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f002 fc26 	bl	8006304 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3320      	adds	r3, #32
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 f89d 	bl	8004bfc <indev_reset_check>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f040 80a4 	bne.w	8003c12 <indev_encoder_proc+0x4c6>

            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8003aca:	4b58      	ldr	r3, [pc, #352]	@ (8003c2c <indev_encoder_proc+0x4e0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2107      	movs	r1, #7
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f002 fc16 	bl	8006304 <lv_event_send>
            if(indev_reset_check(&i->proc)) return;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3320      	adds	r3, #32
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 f88d 	bl	8004bfc <indev_reset_check>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d070      	beq.n	8003bca <indev_encoder_proc+0x47e>
 8003ae8:	e09c      	b.n	8003c24 <indev_encoder_proc+0x4d8>
        }
        /*An object is being edited and the button is released. */
        else if(g->editing) {
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d050      	beq.n	8003b9c <indev_encoder_proc+0x450>
            /*Ignore long pressed enter release because it comes from mode switch*/
            if(!i->proc.long_pr_sent || lv_ll_is_empty(&g->obj_ll)) {
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d006      	beq.n	8003b18 <indev_encoder_proc+0x3cc>
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f00c fa51 	bl	800ffb4 <lv_ll_is_empty>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d058      	beq.n	8003bca <indev_encoder_proc+0x47e>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
 8003b18:	4b44      	ldr	r3, [pc, #272]	@ (8003c2c <indev_encoder_proc+0x4e0>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	4a43      	ldr	r2, [pc, #268]	@ (8003c2c <indev_encoder_proc+0x4e0>)
 8003b20:	6810      	ldr	r0, [r2, #0]
 8003b22:	2200      	movs	r2, #0
 8003b24:	210a      	movs	r1, #10
 8003b26:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3320      	adds	r3, #32
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f001 f865 	bl	8004bfc <indev_reset_check>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d16e      	bne.n	8003c16 <indev_encoder_proc+0x4ca>

                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8003b38:	4b3c      	ldr	r3, [pc, #240]	@ (8003c2c <indev_encoder_proc+0x4e0>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2103      	movs	r1, #3
 8003b40:	4618      	mov	r0, r3
 8003b42:	f002 fbdf 	bl	8006304 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3320      	adds	r3, #32
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 f856 	bl	8004bfc <indev_reset_check>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d161      	bne.n	8003c1a <indev_encoder_proc+0x4ce>

                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8003b56:	4b35      	ldr	r3, [pc, #212]	@ (8003c2c <indev_encoder_proc+0x4e0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2106      	movs	r1, #6
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f002 fbd0 	bl	8006304 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3320      	adds	r3, #32
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 f847 	bl	8004bfc <indev_reset_check>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d154      	bne.n	8003c1e <indev_encoder_proc+0x4d2>

                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8003b74:	4b2d      	ldr	r3, [pc, #180]	@ (8003c2c <indev_encoder_proc+0x4e0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2107      	movs	r1, #7
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f002 fbc1 	bl	8006304 <lv_event_send>
                if(indev_reset_check(&i->proc)) return;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3320      	adds	r3, #32
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 f838 	bl	8004bfc <indev_reset_check>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d147      	bne.n	8003c22 <indev_encoder_proc+0x4d6>

                lv_group_send_data(g, LV_KEY_ENTER);
 8003b92:	210a      	movs	r1, #10
 8003b94:	6938      	ldr	r0, [r7, #16]
 8003b96:	f7fe ffe7 	bl	8002b68 <lv_group_send_data>
 8003b9a:	e016      	b.n	8003bca <indev_encoder_proc+0x47e>
            }
        }
        /*If the focused object is editable and now in navigate mode then on enter switch edit
           mode*/
        else if(editable && !g->editing && !i->proc.long_pr_sent) {
 8003b9c:	7b7b      	ldrb	r3, [r7, #13]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d013      	beq.n	8003bca <indev_encoder_proc+0x47e>
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10b      	bne.n	8003bca <indev_encoder_proc+0x47e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d103      	bne.n	8003bca <indev_encoder_proc+0x47e>
            lv_group_set_editing(g, true); /*Set edit mode*/
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	6938      	ldr	r0, [r7, #16]
 8003bc6:	f7fe fffc 	bl	8002bc2 <lv_group_set_editing>
        }

        i->proc.pr_timestamp = 0;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	649a      	str	r2, [r3, #72]	@ 0x48
        i->proc.long_pr_sent = 0;
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
 8003bd6:	f36f 0300 	bfc	r3, #0, #1
 8003bda:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
 8003bde:	e002      	b.n	8003be6 <indev_encoder_proc+0x49a>
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
 8003be0:	bf00      	nop
 8003be2:	e000      	b.n	8003be6 <indev_encoder_proc+0x49a>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
 8003be4:	bf00      	nop
    }
    indev_obj_act = NULL;
 8003be6:	4b11      	ldr	r3, [pc, #68]	@ (8003c2c <indev_encoder_proc+0x4e0>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	e01a      	b.n	8003c24 <indev_encoder_proc+0x4d8>
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
 8003bee:	bf00      	nop
 8003bf0:	e018      	b.n	8003c24 <indev_encoder_proc+0x4d8>
    if(g == NULL) return;
 8003bf2:	bf00      	nop
 8003bf4:	e016      	b.n	8003c24 <indev_encoder_proc+0x4d8>
    if(indev_obj_act == NULL) return;
 8003bf6:	bf00      	nop
 8003bf8:	e014      	b.n	8003c24 <indev_encoder_proc+0x4d8>
    if(indev_obj_act == NULL) return;
 8003bfa:	bf00      	nop
 8003bfc:	e012      	b.n	8003c24 <indev_encoder_proc+0x4d8>
            if(indev_reset_check(&i->proc)) return;
 8003bfe:	bf00      	nop
 8003c00:	e010      	b.n	8003c24 <indev_encoder_proc+0x4d8>
                if(indev_reset_check(&i->proc)) return;
 8003c02:	bf00      	nop
 8003c04:	e00e      	b.n	8003c24 <indev_encoder_proc+0x4d8>
                if(indev_reset_check(&i->proc)) return;
 8003c06:	bf00      	nop
 8003c08:	e00c      	b.n	8003c24 <indev_encoder_proc+0x4d8>
            if(indev_reset_check(&i->proc)) return;
 8003c0a:	bf00      	nop
 8003c0c:	e00a      	b.n	8003c24 <indev_encoder_proc+0x4d8>
            if(indev_reset_check(&i->proc)) return;
 8003c0e:	bf00      	nop
 8003c10:	e008      	b.n	8003c24 <indev_encoder_proc+0x4d8>
            if(indev_reset_check(&i->proc)) return;
 8003c12:	bf00      	nop
 8003c14:	e006      	b.n	8003c24 <indev_encoder_proc+0x4d8>
                if(indev_reset_check(&i->proc)) return;
 8003c16:	bf00      	nop
 8003c18:	e004      	b.n	8003c24 <indev_encoder_proc+0x4d8>
                if(indev_reset_check(&i->proc)) return;
 8003c1a:	bf00      	nop
 8003c1c:	e002      	b.n	8003c24 <indev_encoder_proc+0x4d8>
                if(indev_reset_check(&i->proc)) return;
 8003c1e:	bf00      	nop
 8003c20:	e000      	b.n	8003c24 <indev_encoder_proc+0x4d8>
                if(indev_reset_check(&i->proc)) return;
 8003c22:	bf00      	nop
#else
    (void)data; /*Unused*/
    (void)i;    /*Unused*/
#endif
}
 8003c24:	3720      	adds	r7, #32
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200029c4 	.word	0x200029c4

08003c30 <indev_button_proc>:
 * @param indev pointer to an input device state
 * @param x x coordinate of the next point
 * @param y y coordinate of the next point
 */
static void indev_button_proc(lv_indev_t * i, lv_indev_data_t * data)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
    i->proc.types.pointer.act_point.x = i->btn_points[data->btn_id].x;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    i->proc.types.pointer.act_point.y = i->btn_points[data->btn_id].y;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	84da      	strh	r2, [r3, #38]	@ 0x26

    /*Still the same point is pressed*/
    if(i->proc.types.pointer.last_point.x == i->proc.types.pointer.act_point.x &&
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d111      	bne.n	8003c96 <indev_button_proc+0x66>
       i->proc.types.pointer.last_point.y == i->proc.types.pointer.act_point.y && data->state == LV_INDEV_STATE_PR) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	@ 0x2a
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
    if(i->proc.types.pointer.last_point.x == i->proc.types.pointer.act_point.x &&
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d109      	bne.n	8003c96 <indev_button_proc+0x66>
       i->proc.types.pointer.last_point.y == i->proc.types.pointer.act_point.y && data->state == LV_INDEV_STATE_PR) {
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	7b9b      	ldrb	r3, [r3, #14]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d105      	bne.n	8003c96 <indev_button_proc+0x66>
        indev_proc_press(&i->proc);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3320      	adds	r3, #32
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 f814 	bl	8003cbc <indev_proc_press>
 8003c94:	e004      	b.n	8003ca0 <indev_button_proc+0x70>
    } else {
        /*If a new point comes always make a release*/
        indev_proc_release(&i->proc);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3320      	adds	r3, #32
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fa8a 	bl	80041b4 <indev_proc_release>
    }

    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <indev_proc_press>:
 * Process the pressed state of LV_INDEV_TYPE_POINER input devices
 * @param indev pointer to an input device 'proc'
 * @return LV_RES_OK: no indev reset required; LV_RES_INV: indev reset is required
 */
static void indev_proc_press(lv_indev_proc_t * proc)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
    indev_obj_act = proc->types.pointer.act_obj;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	4a71      	ldr	r2, [pc, #452]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003cca:	6013      	str	r3, [r2, #0]

    if(proc->wait_until_release != 0) return;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f040 824c 	bne.w	8004176 <indev_proc_press+0x4ba>

    lv_disp_t * disp = indev_act->driver.disp;
 8003cde:	4b6d      	ldr	r3, [pc, #436]	@ (8003e94 <indev_proc_press+0x1d8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	60fb      	str	r3, [r7, #12]

    /*If there is no last object then search*/
    if(indev_obj_act == NULL) {
 8003ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d129      	bne.n	8003d42 <indev_proc_press+0x86>
        indev_obj_act = indev_search_obj(proc, lv_disp_get_layer_sys(disp));
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f7fe fdb1 	bl	8002856 <lv_disp_get_layer_sys>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fc53 	bl	80045a4 <indev_search_obj>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4a63      	ldr	r2, [pc, #396]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003d02:	6013      	str	r3, [r2, #0]
        if(indev_obj_act == NULL) indev_obj_act = indev_search_obj(proc, lv_disp_get_layer_top(disp));
 8003d04:	4b62      	ldr	r3, [pc, #392]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <indev_proc_press+0x66>
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f7fe fd8d 	bl	800282c <lv_disp_get_layer_top>
 8003d12:	4603      	mov	r3, r0
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fc44 	bl	80045a4 <indev_search_obj>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	4a5c      	ldr	r2, [pc, #368]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003d20:	6013      	str	r3, [r2, #0]
        if(indev_obj_act == NULL) indev_obj_act = indev_search_obj(proc, lv_disp_get_scr_act(disp));
 8003d22:	4b5b      	ldr	r3, [pc, #364]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d148      	bne.n	8003dbc <indev_proc_press+0x100>
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f7fe fd69 	bl	8002802 <lv_disp_get_scr_act>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4619      	mov	r1, r3
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fc35 	bl	80045a4 <indev_search_obj>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4a54      	ldr	r2, [pc, #336]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	e03c      	b.n	8003dbc <indev_proc_press+0x100>
    }
    /*If there is last object but it is not dragged and not protected also search*/
    else if(proc->types.pointer.drag_in_prog == 0 &&
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d134      	bne.n	8003dbc <indev_proc_press+0x100>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
 8003d52:	4b4f      	ldr	r3, [pc, #316]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2110      	movs	r1, #16
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f002 fdb1 	bl	80068c0 <lv_obj_is_protected>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	f083 0301 	eor.w	r3, r3, #1
 8003d64:	b2db      	uxtb	r3, r3
    else if(proc->types.pointer.drag_in_prog == 0 &&
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d028      	beq.n	8003dbc <indev_proc_press+0x100>
        indev_obj_act = indev_search_obj(proc, lv_disp_get_layer_sys(disp));
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f7fe fd73 	bl	8002856 <lv_disp_get_layer_sys>
 8003d70:	4603      	mov	r3, r0
 8003d72:	4619      	mov	r1, r3
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fc15 	bl	80045a4 <indev_search_obj>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	4a44      	ldr	r2, [pc, #272]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003d7e:	6013      	str	r3, [r2, #0]
        if(indev_obj_act == NULL) indev_obj_act = indev_search_obj(proc, lv_disp_get_layer_top(disp));
 8003d80:	4b43      	ldr	r3, [pc, #268]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <indev_proc_press+0xe2>
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7fe fd4f 	bl	800282c <lv_disp_get_layer_top>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4619      	mov	r1, r3
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fc06 	bl	80045a4 <indev_search_obj>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4a3d      	ldr	r2, [pc, #244]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003d9c:	6013      	str	r3, [r2, #0]
        if(indev_obj_act == NULL) indev_obj_act = indev_search_obj(proc, lv_disp_get_scr_act(disp));
 8003d9e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <indev_proc_press+0x100>
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f7fe fd2b 	bl	8002802 <lv_disp_get_scr_act>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fbf7 	bl	80045a4 <indev_search_obj>
 8003db6:	4603      	mov	r3, r0
 8003db8:	4a35      	ldr	r2, [pc, #212]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003dba:	6013      	str	r3, [r2, #0]
    /*If a dragable or a protected object was the last then keep it*/
    else {
    }

    /*If a new object was found reset some variables and send a pressed signal*/
    if(indev_obj_act != proc->types.pointer.act_obj) {
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699a      	ldr	r2, [r3, #24]
 8003dc0:	4b33      	ldr	r3, [pc, #204]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	f000 809c 	beq.w	8003f02 <indev_proc_press+0x246>

        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	811a      	strh	r2, [r3, #8]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	815a      	strh	r2, [r3, #10]

        /*If a new object found the previous was lost, so send a signal*/
        if(proc->types.pointer.act_obj != NULL) {
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01c      	beq.n	8003e20 <indev_proc_press+0x164>
            /*Save the obj because in special cases `act_obj` can change in the signal function*/
            lv_obj_t * last_obj = proc->types.pointer.act_obj;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	60bb      	str	r3, [r7, #8]

            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	4a28      	ldr	r2, [pc, #160]	@ (8003e94 <indev_proc_press+0x1d8>)
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	2109      	movs	r1, #9
 8003df6:	68b8      	ldr	r0, [r7, #8]
 8003df8:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fefe 	bl	8004bfc <indev_reset_check>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f040 81b9 	bne.w	800417a <indev_proc_press+0x4be>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	68b8      	ldr	r0, [r7, #8]
 8003e0e:	f002 fa79 	bl	8006304 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fef2 	bl	8004bfc <indev_reset_check>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f040 81af 	bne.w	800417e <indev_proc_press+0x4c2>
        }

        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
 8003e20:	4b1b      	ldr	r3, [pc, #108]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	619a      	str	r2, [r3, #24]
        proc->types.pointer.last_obj = indev_obj_act;
 8003e28:	4b19      	ldr	r3, [pc, #100]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	61da      	str	r2, [r3, #28]

        if(indev_obj_act != NULL) {
 8003e30:	4b17      	ldr	r3, [pc, #92]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d064      	beq.n	8003f02 <indev_proc_press+0x246>
            /* Save the time when the obj pressed.
             * It is necessary to count the long press time.*/
            proc->pr_timestamp                 = lv_tick_get();
 8003e38:	f00b f884 	bl	800ef44 <lv_tick_get>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	629a      	str	r2, [r3, #40]	@ 0x28
            proc->long_pr_sent                 = 0;
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8003e48:	f36f 0300 	bfc	r3, #0, #1
 8003e4c:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
            proc->types.pointer.drag_limit_out = 0;
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 8003e56:	f36f 0300 	bfc	r3, #0, #1
 8003e5a:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
            proc->types.pointer.drag_in_prog   = 0;
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 8003e64:	f36f 0341 	bfc	r3, #1, #1
 8003e68:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
            proc->types.pointer.drag_sum.x     = 0;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	821a      	strh	r2, [r3, #16]
            proc->types.pointer.drag_sum.y     = 0;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	825a      	strh	r2, [r3, #18]
            proc->types.pointer.vect.x         = 0;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	819a      	strh	r2, [r3, #12]
            proc->types.pointer.vect.y         = 0;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	81da      	strh	r2, [r3, #14]

            /*Search for 'top' attribute*/
            lv_obj_t * i        = indev_obj_act;
 8003e84:	4b02      	ldr	r3, [pc, #8]	@ (8003e90 <indev_proc_press+0x1d4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	617b      	str	r3, [r7, #20]
            lv_obj_t * last_top = NULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
            while(i != NULL) {
 8003e8e:	e011      	b.n	8003eb4 <indev_proc_press+0x1f8>
 8003e90:	200029c4 	.word	0x200029c4
 8003e94:	200029c0 	.word	0x200029c0
                if(i->top) last_top = i;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <indev_proc_press+0x1f0>
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	613b      	str	r3, [r7, #16]
                i = lv_obj_get_parent(i);
 8003eac:	6978      	ldr	r0, [r7, #20]
 8003eae:	f002 fb49 	bl	8006544 <lv_obj_get_parent>
 8003eb2:	6178      	str	r0, [r7, #20]
            while(i != NULL) {
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1ee      	bne.n	8003e98 <indev_proc_press+0x1dc>
            }

            if(last_top != NULL) {
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <indev_proc_press+0x20a>
                /*Move the last_top object to the foreground*/
                lv_obj_move_foreground(last_top);
 8003ec0:	6938      	ldr	r0, [r7, #16]
 8003ec2:	f001 fb20 	bl	8005506 <lv_obj_move_foreground>
            }

            /*Send a signal about the press*/
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
 8003ec6:	4b3d      	ldr	r3, [pc, #244]	@ (8003fbc <indev_proc_press+0x300>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	4a3b      	ldr	r2, [pc, #236]	@ (8003fbc <indev_proc_press+0x300>)
 8003ece:	6810      	ldr	r0, [r2, #0]
 8003ed0:	4a3b      	ldr	r2, [pc, #236]	@ (8003fc0 <indev_proc_press+0x304>)
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	2107      	movs	r1, #7
 8003ed6:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fe8f 	bl	8004bfc <indev_reset_check>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f040 814e 	bne.w	8004182 <indev_proc_press+0x4c6>

            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
 8003ee6:	4b35      	ldr	r3, [pc, #212]	@ (8003fbc <indev_proc_press+0x300>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	2100      	movs	r1, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f002 fa08 	bl	8006304 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fe81 	bl	8004bfc <indev_reset_check>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f040 8142 	bne.w	8004186 <indev_proc_press+0x4ca>
        }
    }

    /*Calculate the types.pointer.vector*/
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	b21a      	sxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	819a      	strh	r2, [r3, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	b21a      	sxth	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	81da      	strh	r2, [r3, #14]

    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	10db      	asrs	r3, r3, #3
 8003f46:	b21a      	sxth	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	829a      	strh	r2, [r3, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003f52:	461a      	mov	r2, r3
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	10db      	asrs	r3, r3, #3
 8003f5c:	b21a      	sxth	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	82da      	strh	r2, [r3, #22]

    if(proc->types.pointer.drag_throw_vect.x < 0)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	da09      	bge.n	8003f80 <indev_proc_press+0x2c4>
        proc->types.pointer.drag_throw_vect.x++;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3301      	adds	r3, #1
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	b21a      	sxth	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	829a      	strh	r2, [r3, #20]
 8003f7e:	e00d      	b.n	8003f9c <indev_proc_press+0x2e0>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	dd08      	ble.n	8003f9c <indev_proc_press+0x2e0>
        proc->types.pointer.drag_throw_vect.x--;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	b21a      	sxth	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	829a      	strh	r2, [r3, #20]

    if(proc->types.pointer.drag_throw_vect.y < 0)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	da0e      	bge.n	8003fc4 <indev_proc_press+0x308>
        proc->types.pointer.drag_throw_vect.y++;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	b21a      	sxth	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	82da      	strh	r2, [r3, #22]
 8003fb8:	e012      	b.n	8003fe0 <indev_proc_press+0x324>
 8003fba:	bf00      	nop
 8003fbc:	200029c4 	.word	0x200029c4
 8003fc0:	200029c0 	.word	0x200029c0
    else if(proc->types.pointer.drag_throw_vect.y > 0)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	dd08      	ble.n	8003fe0 <indev_proc_press+0x324>
        proc->types.pointer.drag_throw_vect.y--;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	b21a      	sxth	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	82da      	strh	r2, [r3, #22]

    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	10db      	asrs	r3, r3, #3
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	b21a      	sxth	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	829a      	strh	r2, [r3, #20]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004004:	b29a      	uxth	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	10db      	asrs	r3, r3, #3
 8004010:	b29b      	uxth	r3, r3
 8004012:	4413      	add	r3, r2
 8004014:	b29b      	uxth	r3, r3
 8004016:	b21a      	sxth	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	82da      	strh	r2, [r3, #22]

    /*If there is active object and it can be dragged run the drag*/
    if(indev_obj_act != NULL) {
 800401c:	4b63      	ldr	r3, [pc, #396]	@ (80041ac <indev_proc_press+0x4f0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 80bf 	beq.w	80041a4 <indev_proc_press+0x4e8>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
 8004026:	4b61      	ldr	r3, [pc, #388]	@ (80041ac <indev_proc_press+0x4f0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	4a5f      	ldr	r2, [pc, #380]	@ (80041ac <indev_proc_press+0x4f0>)
 800402e:	6810      	ldr	r0, [r2, #0]
 8004030:	4a5f      	ldr	r2, [pc, #380]	@ (80041b0 <indev_proc_press+0x4f4>)
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	2108      	movs	r1, #8
 8004036:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fddf 	bl	8004bfc <indev_reset_check>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	f040 80a2 	bne.w	800418a <indev_proc_press+0x4ce>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
 8004046:	4b59      	ldr	r3, [pc, #356]	@ (80041ac <indev_proc_press+0x4f0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2200      	movs	r2, #0
 800404c:	2101      	movs	r1, #1
 800404e:	4618      	mov	r0, r3
 8004050:	f002 f958 	bl	8006304 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fdd1 	bl	8004bfc <indev_reset_check>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	f040 8096 	bne.w	800418e <indev_proc_press+0x4d2>

        indev_drag(proc);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 faf2 	bl	800464c <indev_drag>
        if(indev_reset_check(proc)) return;
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fdc7 	bl	8004bfc <indev_reset_check>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	f040 808e 	bne.w	8004192 <indev_proc_press+0x4d6>

        /*If there is no drag then check for long press time*/
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d13a      	bne.n	80040fc <indev_proc_press+0x440>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d132      	bne.n	80040fc <indev_proc_press+0x440>
            /*Send a signal about the long press if enough time elapsed*/
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409a:	4618      	mov	r0, r3
 800409c:	f00a ff59 	bl	800ef52 <lv_tick_elaps>
 80040a0:	4602      	mov	r2, r0
 80040a2:	4b43      	ldr	r3, [pc, #268]	@ (80041b0 <indev_proc_press+0x4f4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	8b5b      	ldrh	r3, [r3, #26]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d927      	bls.n	80040fc <indev_proc_press+0x440>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
 80040ac:	4b3f      	ldr	r3, [pc, #252]	@ (80041ac <indev_proc_press+0x4f0>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	4a3e      	ldr	r2, [pc, #248]	@ (80041ac <indev_proc_press+0x4f0>)
 80040b4:	6810      	ldr	r0, [r2, #0]
 80040b6:	4a3e      	ldr	r2, [pc, #248]	@ (80041b0 <indev_proc_press+0x4f4>)
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	210b      	movs	r1, #11
 80040bc:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fd9c 	bl	8004bfc <indev_reset_check>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d165      	bne.n	8004196 <indev_proc_press+0x4da>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
 80040ca:	4b38      	ldr	r3, [pc, #224]	@ (80041ac <indev_proc_press+0x4f0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2200      	movs	r2, #0
 80040d0:	2104      	movs	r1, #4
 80040d2:	4618      	mov	r0, r3
 80040d4:	f002 f916 	bl	8006304 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fd8f 	bl	8004bfc <indev_reset_check>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d15a      	bne.n	800419a <indev_proc_press+0x4de>

                /*Mark the signal sending to do not send it again*/
                proc->long_pr_sent = 1;
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 80040ea:	f043 0301 	orr.w	r3, r3, #1
 80040ee:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30

                /*Save the long press time stamp for the long press repeat handler*/
                proc->longpr_rep_timestamp = lv_tick_get();
 80040f2:	f00a ff27 	bl	800ef44 <lv_tick_get>
 80040f6:	4602      	mov	r2, r0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	62da      	str	r2, [r3, #44]	@ 0x2c
            }
        }
        /*Send long press repeated signal*/
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d14b      	bne.n	80041a4 <indev_proc_press+0x4e8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d043      	beq.n	80041a4 <indev_proc_press+0x4e8>
            /*Send a signal about the long press repeat if enough time elapsed*/
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004120:	4618      	mov	r0, r3
 8004122:	f00a ff16 	bl	800ef52 <lv_tick_elaps>
 8004126:	4602      	mov	r2, r0
 8004128:	4b21      	ldr	r3, [pc, #132]	@ (80041b0 <indev_proc_press+0x4f4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	8b9b      	ldrh	r3, [r3, #28]
 800412e:	429a      	cmp	r2, r3
 8004130:	d938      	bls.n	80041a4 <indev_proc_press+0x4e8>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
 8004132:	4b1e      	ldr	r3, [pc, #120]	@ (80041ac <indev_proc_press+0x4f0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	4a1c      	ldr	r2, [pc, #112]	@ (80041ac <indev_proc_press+0x4f0>)
 800413a:	6810      	ldr	r0, [r2, #0]
 800413c:	4a1c      	ldr	r2, [pc, #112]	@ (80041b0 <indev_proc_press+0x4f4>)
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	210c      	movs	r1, #12
 8004142:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fd59 	bl	8004bfc <indev_reset_check>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d126      	bne.n	800419e <indev_proc_press+0x4e2>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
 8004150:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <indev_proc_press+0x4f0>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2200      	movs	r2, #0
 8004156:	2105      	movs	r1, #5
 8004158:	4618      	mov	r0, r3
 800415a:	f002 f8d3 	bl	8006304 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fd4c 	bl	8004bfc <indev_reset_check>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d11b      	bne.n	80041a2 <indev_proc_press+0x4e6>
                proc->longpr_rep_timestamp = lv_tick_get();
 800416a:	f00a feeb 	bl	800ef44 <lv_tick_get>
 800416e:	4602      	mov	r2, r0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004174:	e016      	b.n	80041a4 <indev_proc_press+0x4e8>
    if(proc->wait_until_release != 0) return;
 8004176:	bf00      	nop
 8004178:	e014      	b.n	80041a4 <indev_proc_press+0x4e8>
            if(indev_reset_check(proc)) return;
 800417a:	bf00      	nop
 800417c:	e012      	b.n	80041a4 <indev_proc_press+0x4e8>
            if(indev_reset_check(proc)) return;
 800417e:	bf00      	nop
 8004180:	e010      	b.n	80041a4 <indev_proc_press+0x4e8>
            if(indev_reset_check(proc)) return;
 8004182:	bf00      	nop
 8004184:	e00e      	b.n	80041a4 <indev_proc_press+0x4e8>
            if(indev_reset_check(proc)) return;
 8004186:	bf00      	nop
 8004188:	e00c      	b.n	80041a4 <indev_proc_press+0x4e8>
        if(indev_reset_check(proc)) return;
 800418a:	bf00      	nop
 800418c:	e00a      	b.n	80041a4 <indev_proc_press+0x4e8>
        if(indev_reset_check(proc)) return;
 800418e:	bf00      	nop
 8004190:	e008      	b.n	80041a4 <indev_proc_press+0x4e8>
        if(indev_reset_check(proc)) return;
 8004192:	bf00      	nop
 8004194:	e006      	b.n	80041a4 <indev_proc_press+0x4e8>
                if(indev_reset_check(proc)) return;
 8004196:	bf00      	nop
 8004198:	e004      	b.n	80041a4 <indev_proc_press+0x4e8>
                if(indev_reset_check(proc)) return;
 800419a:	bf00      	nop
 800419c:	e002      	b.n	80041a4 <indev_proc_press+0x4e8>
                if(indev_reset_check(proc)) return;
 800419e:	bf00      	nop
 80041a0:	e000      	b.n	80041a4 <indev_proc_press+0x4e8>
                if(indev_reset_check(proc)) return;
 80041a2:	bf00      	nop
            }
        }
    }
}
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	200029c4 	.word	0x200029c4
 80041b0:	200029c0 	.word	0x200029c0

080041b4 <indev_proc_release>:
/**
 * Process the released state of LV_INDEV_TYPE_POINER input devices
 * @param proc pointer to an input device 'proc'
 */
static void indev_proc_release(lv_indev_proc_t * proc)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
    if(proc->wait_until_release != 0) {
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d012      	beq.n	80041f2 <indev_proc_release+0x3e>
        proc->types.pointer.act_obj  = NULL;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	619a      	str	r2, [r3, #24]
        proc->types.pointer.last_obj = NULL;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	61da      	str	r2, [r3, #28]
        proc->pr_timestamp           = 0;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	629a      	str	r2, [r3, #40]	@ 0x28
        proc->longpr_rep_timestamp   = 0;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	62da      	str	r2, [r3, #44]	@ 0x2c
        proc->wait_until_release     = 0;
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 80041ea:	f36f 03c3 	bfc	r3, #3, #1
 80041ee:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
    }
    indev_obj_act = proc->types.pointer.act_obj;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	4a91      	ldr	r2, [pc, #580]	@ (800443c <indev_proc_release+0x288>)
 80041f8:	6013      	str	r3, [r2, #0]

    /*Forget the act obj and send a released signal */
    if(indev_obj_act) {
 80041fa:	4b90      	ldr	r3, [pc, #576]	@ (800443c <indev_proc_release+0x288>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 8152 	beq.w	80044a8 <indev_proc_release+0x2f4>
        /* If the object was protected against press lost then it possible that
         * the object is already not pressed but still it is the `act_obj`.
         * In this case send the `LV_SIGNAL_RELEASED/CLICKED` instead of `LV_SIGNAL_PRESS_LOST` if
         * the indev is ON the `types.pointer.act_obj` */
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
 8004204:	4b8d      	ldr	r3, [pc, #564]	@ (800443c <indev_proc_release+0x288>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2110      	movs	r1, #16
 800420a:	4618      	mov	r0, r3
 800420c:	f002 fb58 	bl	80068c0 <lv_obj_is_protected>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d049      	beq.n	80042aa <indev_proc_release+0xf6>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 8004216:	4b89      	ldr	r3, [pc, #548]	@ (800443c <indev_proc_release+0x288>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	4a87      	ldr	r2, [pc, #540]	@ (800443c <indev_proc_release+0x288>)
 800421e:	6810      	ldr	r0, [r2, #0]
 8004220:	4a87      	ldr	r2, [pc, #540]	@ (8004440 <indev_proc_release+0x28c>)
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	210a      	movs	r1, #10
 8004226:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fce7 	bl	8004bfc <indev_reset_check>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	f040 814e 	bne.w	80044d2 <indev_proc_release+0x31e>

            if(proc->types.pointer.drag_in_prog == 0) {
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d123      	bne.n	800428e <indev_proc_release+0xda>
                if(proc->long_pr_sent == 0) {
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10d      	bne.n	8004272 <indev_proc_release+0xbe>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 8004256:	4b79      	ldr	r3, [pc, #484]	@ (800443c <indev_proc_release+0x288>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2200      	movs	r2, #0
 800425c:	2103      	movs	r1, #3
 800425e:	4618      	mov	r0, r3
 8004260:	f002 f850 	bl	8006304 <lv_event_send>
                    if(indev_reset_check(proc)) return;
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fcc9 	bl	8004bfc <indev_reset_check>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	f040 8132 	bne.w	80044d6 <indev_proc_release+0x322>
                }

                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8004272:	4b72      	ldr	r3, [pc, #456]	@ (800443c <indev_proc_release+0x288>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	2106      	movs	r1, #6
 800427a:	4618      	mov	r0, r3
 800427c:	f002 f842 	bl	8006304 <lv_event_send>
                if(indev_reset_check(proc)) return;
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fcbb 	bl	8004bfc <indev_reset_check>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	f040 8126 	bne.w	80044da <indev_proc_release+0x326>
            }

            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 800428e:	4b6b      	ldr	r3, [pc, #428]	@ (800443c <indev_proc_release+0x288>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2200      	movs	r2, #0
 8004294:	2107      	movs	r1, #7
 8004296:	4618      	mov	r0, r3
 8004298:	f002 f834 	bl	8006304 <lv_event_send>
            if(indev_reset_check(proc)) return;
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fcad 	bl	8004bfc <indev_reset_check>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d04a      	beq.n	800433e <indev_proc_release+0x18a>
 80042a8:	e12a      	b.n	8004500 <indev_proc_release+0x34c>
        }
        /* The simple case: `act_obj` was not protected against press lost.
         * If it is already not pressed then `indev_proc_press` would set `indev_obj_act = NULL`*/
        else {
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
 80042aa:	4b64      	ldr	r3, [pc, #400]	@ (800443c <indev_proc_release+0x288>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	4a62      	ldr	r2, [pc, #392]	@ (800443c <indev_proc_release+0x288>)
 80042b2:	6810      	ldr	r0, [r2, #0]
 80042b4:	4a62      	ldr	r2, [pc, #392]	@ (8004440 <indev_proc_release+0x28c>)
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	210a      	movs	r1, #10
 80042ba:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fc9d 	bl	8004bfc <indev_reset_check>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f040 810a 	bne.w	80044de <indev_proc_release+0x32a>

            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d115      	bne.n	8004306 <indev_proc_release+0x152>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10d      	bne.n	8004306 <indev_proc_release+0x152>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
 80042ea:	4b54      	ldr	r3, [pc, #336]	@ (800443c <indev_proc_release+0x288>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2200      	movs	r2, #0
 80042f0:	2103      	movs	r1, #3
 80042f2:	4618      	mov	r0, r3
 80042f4:	f002 f806 	bl	8006304 <lv_event_send>
                if(indev_reset_check(proc)) return;
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fc7f 	bl	8004bfc <indev_reset_check>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	f040 80ee 	bne.w	80044e2 <indev_proc_release+0x32e>
            }

            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
 8004306:	4b4d      	ldr	r3, [pc, #308]	@ (800443c <indev_proc_release+0x288>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2200      	movs	r2, #0
 800430c:	2106      	movs	r1, #6
 800430e:	4618      	mov	r0, r3
 8004310:	f001 fff8 	bl	8006304 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fc71 	bl	8004bfc <indev_reset_check>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	f040 80e2 	bne.w	80044e6 <indev_proc_release+0x332>

            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
 8004322:	4b46      	ldr	r3, [pc, #280]	@ (800443c <indev_proc_release+0x288>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2200      	movs	r2, #0
 8004328:	2107      	movs	r1, #7
 800432a:	4618      	mov	r0, r3
 800432c:	f001 ffea 	bl	8006304 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fc63 	bl	8004bfc <indev_reset_check>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	f040 80d6 	bne.w	80044ea <indev_proc_release+0x336>
        }

        if(indev_reset_check(proc)) return;
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fc5c 	bl	8004bfc <indev_reset_check>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	f040 80d1 	bne.w	80044ee <indev_proc_release+0x33a>

        /*Handle click focus*/
        bool click_focus_sent = false;
 800434c:	2300      	movs	r3, #0
 800434e:	75fb      	strb	r3, [r7, #23]
#if LV_USE_GROUP
        lv_group_t * g = lv_obj_get_group(indev_obj_act);
 8004350:	4b3a      	ldr	r3, [pc, #232]	@ (800443c <indev_proc_release+0x288>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f002 faea 	bl	800692e <lv_obj_get_group>
 800435a:	6138      	str	r0, [r7, #16]

        /*Check, if the parent is in a group and focus on it.*/
        /*Respect the click focus protection*/
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false) {
 800435c:	4b37      	ldr	r3, [pc, #220]	@ (800443c <indev_proc_release+0x288>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2120      	movs	r1, #32
 8004362:	4618      	mov	r0, r3
 8004364:	f002 faac 	bl	80068c0 <lv_obj_is_protected>
 8004368:	4603      	mov	r3, r0
 800436a:	f083 0301 	eor.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d02e      	beq.n	80043d2 <indev_proc_release+0x21e>
            lv_obj_t * parent = indev_obj_act;
 8004374:	4b31      	ldr	r3, [pc, #196]	@ (800443c <indev_proc_release+0x288>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60fb      	str	r3, [r7, #12]

            while(g == NULL) {
 800437a:	e014      	b.n	80043a6 <indev_proc_release+0x1f2>
                parent = lv_obj_get_parent(parent);
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f002 f8e1 	bl	8006544 <lv_obj_get_parent>
 8004382:	60f8      	str	r0, [r7, #12]
                if(parent == NULL) break;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d011      	beq.n	80043ae <indev_proc_release+0x1fa>

                /*Ignore is the protected against click focus*/
                if(lv_obj_is_protected(parent, LV_PROTECT_CLICK_FOCUS)) {
 800438a:	2120      	movs	r1, #32
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f002 fa97 	bl	80068c0 <lv_obj_is_protected>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <indev_proc_release+0x1ea>
                    parent = NULL;
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]
                    break;
 800439c:	e008      	b.n	80043b0 <indev_proc_release+0x1fc>
                }
                g = lv_obj_get_group(parent);
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f002 fac5 	bl	800692e <lv_obj_get_group>
 80043a4:	6138      	str	r0, [r7, #16]
            while(g == NULL) {
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0e7      	beq.n	800437c <indev_proc_release+0x1c8>
 80043ac:	e000      	b.n	80043b0 <indev_proc_release+0x1fc>
                if(parent == NULL) break;
 80043ae:	bf00      	nop
            }

            /* If a parent is in a group make it focused.
             * `LV_EVENT_FOCUSED/DEFOCUSED` will be sent by `lv_group_focus_obj`*/
            if(g && parent) {
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00d      	beq.n	80043d2 <indev_proc_release+0x21e>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <indev_proc_release+0x21e>
                if(lv_group_get_click_focus(g)) {
 80043bc:	6938      	ldr	r0, [r7, #16]
 80043be:	f7fe fca2 	bl	8002d06 <lv_group_get_click_focus>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <indev_proc_release+0x21e>
                    click_focus_sent = true;
 80043c8:	2301      	movs	r3, #1
 80043ca:	75fb      	strb	r3, [r7, #23]
                    lv_group_focus_obj(parent);
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f7fe fb17 	bl	8002a00 <lv_group_focus_obj>
        }
#endif

        /* Send defocus to the lastly "active" object and foucus to the new one.
         * DO not sent the events if they was sent by the click focus*/
        if(proc->types.pointer.last_pressed != indev_obj_act && click_focus_sent == false) {
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1a      	ldr	r2, [r3, #32]
 80043d6:	4b19      	ldr	r3, [pc, #100]	@ (800443c <indev_proc_release+0x288>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d023      	beq.n	8004426 <indev_proc_release+0x272>
 80043de:	7dfb      	ldrb	r3, [r7, #23]
 80043e0:	f083 0301 	eor.w	r3, r3, #1
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d01d      	beq.n	8004426 <indev_proc_release+0x272>
            lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	2200      	movs	r2, #0
 80043f0:	210d      	movs	r1, #13
 80043f2:	4618      	mov	r0, r3
 80043f4:	f001 ff86 	bl	8006304 <lv_event_send>
            if(indev_reset_check(proc)) return;
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fbff 	bl	8004bfc <indev_reset_check>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d176      	bne.n	80044f2 <indev_proc_release+0x33e>

            lv_event_send(proc->types.pointer.act_obj, LV_EVENT_FOCUSED, NULL);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2200      	movs	r2, #0
 800440a:	210c      	movs	r1, #12
 800440c:	4618      	mov	r0, r3
 800440e:	f001 ff79 	bl	8006304 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fbf2 	bl	8004bfc <indev_reset_check>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d16b      	bne.n	80044f6 <indev_proc_release+0x342>

            proc->types.pointer.last_pressed = indev_obj_act;
 800441e:	4b07      	ldr	r3, [pc, #28]	@ (800443c <indev_proc_release+0x288>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	621a      	str	r2, [r3, #32]
        }

        if(indev_reset_check(proc)) return;
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fbe8 	bl	8004bfc <indev_reset_check>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d163      	bne.n	80044fa <indev_proc_release+0x346>

        /*Send LV_EVENT_DRAG_THROW_BEGIN if required */
        /*If drag parent is active check recursively the drag_parent attribute*/
        lv_obj_t * drag_obj = indev_obj_act;
 8004432:	4b02      	ldr	r3, [pc, #8]	@ (800443c <indev_proc_release+0x288>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60bb      	str	r3, [r7, #8]
        while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 8004438:	e008      	b.n	800444c <indev_proc_release+0x298>
 800443a:	bf00      	nop
 800443c:	200029c4 	.word	0x200029c4
 8004440:	200029c0 	.word	0x200029c0
            drag_obj = lv_obj_get_parent(drag_obj);
 8004444:	68b8      	ldr	r0, [r7, #8]
 8004446:	f002 f87d 	bl	8006544 <lv_obj_get_parent>
 800444a:	60b8      	str	r0, [r7, #8]
        while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 800444c:	68b8      	ldr	r0, [r7, #8]
 800444e:	f002 fa04 	bl	800685a <lv_obj_get_drag_parent>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <indev_proc_release+0x2aa>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f2      	bne.n	8004444 <indev_proc_release+0x290>
        }

        if(drag_obj) {
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d018      	beq.n	8004496 <indev_proc_release+0x2e2>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
 8004464:	68b8      	ldr	r0, [r7, #8]
 8004466:	f002 f9e4 	bl	8006832 <lv_obj_get_drag_throw>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d012      	beq.n	8004496 <indev_proc_release+0x2e2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <indev_proc_release+0x2e2>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
 8004480:	2200      	movs	r2, #0
 8004482:	210a      	movs	r1, #10
 8004484:	68b8      	ldr	r0, [r7, #8]
 8004486:	f001 ff3d 	bl	8006304 <lv_event_send>
                if(indev_reset_check(proc)) return;
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fbb6 	bl	8004bfc <indev_reset_check>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d133      	bne.n	80044fe <indev_proc_release+0x34a>
            }
        }

        proc->types.pointer.act_obj = NULL;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	619a      	str	r2, [r3, #24]
        proc->pr_timestamp          = 0;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	629a      	str	r2, [r3, #40]	@ 0x28
        proc->longpr_rep_timestamp  = 0;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /*The reset can be set in the signal function.
     * In case of reset query ignore the remaining parts.*/
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d027      	beq.n	8004500 <indev_proc_release+0x34c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d11f      	bne.n	8004500 <indev_proc_release+0x34c>
        indev_drag_throw(proc);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 fa5b 	bl	800497c <indev_drag_throw>
        if(indev_reset_check(proc)) return;
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fb98 	bl	8004bfc <indev_reset_check>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	e016      	b.n	8004500 <indev_proc_release+0x34c>
            if(indev_reset_check(proc)) return;
 80044d2:	bf00      	nop
 80044d4:	e014      	b.n	8004500 <indev_proc_release+0x34c>
                    if(indev_reset_check(proc)) return;
 80044d6:	bf00      	nop
 80044d8:	e012      	b.n	8004500 <indev_proc_release+0x34c>
                if(indev_reset_check(proc)) return;
 80044da:	bf00      	nop
 80044dc:	e010      	b.n	8004500 <indev_proc_release+0x34c>
            if(indev_reset_check(proc)) return;
 80044de:	bf00      	nop
 80044e0:	e00e      	b.n	8004500 <indev_proc_release+0x34c>
                if(indev_reset_check(proc)) return;
 80044e2:	bf00      	nop
 80044e4:	e00c      	b.n	8004500 <indev_proc_release+0x34c>
            if(indev_reset_check(proc)) return;
 80044e6:	bf00      	nop
 80044e8:	e00a      	b.n	8004500 <indev_proc_release+0x34c>
            if(indev_reset_check(proc)) return;
 80044ea:	bf00      	nop
 80044ec:	e008      	b.n	8004500 <indev_proc_release+0x34c>
        if(indev_reset_check(proc)) return;
 80044ee:	bf00      	nop
 80044f0:	e006      	b.n	8004500 <indev_proc_release+0x34c>
            if(indev_reset_check(proc)) return;
 80044f2:	bf00      	nop
 80044f4:	e004      	b.n	8004500 <indev_proc_release+0x34c>
            if(indev_reset_check(proc)) return;
 80044f6:	bf00      	nop
 80044f8:	e002      	b.n	8004500 <indev_proc_release+0x34c>
        if(indev_reset_check(proc)) return;
 80044fa:	bf00      	nop
 80044fc:	e000      	b.n	8004500 <indev_proc_release+0x34c>
                if(indev_reset_check(proc)) return;
 80044fe:	bf00      	nop
    }
}
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop

08004508 <indev_proc_reset_query_handler>:
 * @param data pointer to the data read from the input device
 * Reset input device if a reset query has been sent to it
 * @param indev pointer to an input device
 */
static void indev_proc_reset_query_handler(lv_indev_t * indev)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
    if(indev->proc.reset_query) {
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d039      	beq.n	8004594 <indev_proc_reset_query_handler+0x8c>
        indev->proc.types.pointer.act_obj           = NULL;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	639a      	str	r2, [r3, #56]	@ 0x38
        indev->proc.types.pointer.last_obj          = NULL;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	63da      	str	r2, [r3, #60]	@ 0x3c
        indev->proc.types.pointer.last_pressed      = NULL;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	641a      	str	r2, [r3, #64]	@ 0x40
        indev->proc.types.pointer.drag_limit_out    = 0;
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	f892 3044 	ldrb.w	r3, [r2, #68]	@ 0x44
 8004538:	f36f 0300 	bfc	r3, #0, #1
 800453c:	f882 3044 	strb.w	r3, [r2, #68]	@ 0x44
        indev->proc.types.pointer.drag_in_prog      = 0;
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	f892 3044 	ldrb.w	r3, [r2, #68]	@ 0x44
 8004546:	f36f 0341 	bfc	r3, #1, #1
 800454a:	f882 3044 	strb.w	r3, [r2, #68]	@ 0x44
        indev->proc.long_pr_sent                    = 0;
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
 8004554:	f36f 0300 	bfc	r3, #0, #1
 8004558:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
        indev->proc.pr_timestamp                    = 0;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	649a      	str	r2, [r3, #72]	@ 0x48
        indev->proc.longpr_rep_timestamp            = 0;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	64da      	str	r2, [r3, #76]	@ 0x4c
        indev->proc.types.pointer.drag_sum.x        = 0;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	861a      	strh	r2, [r3, #48]	@ 0x30
        indev->proc.types.pointer.drag_sum.y        = 0;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	865a      	strh	r2, [r3, #50]	@ 0x32
        indev->proc.types.pointer.drag_throw_vect.x = 0;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	869a      	strh	r2, [r3, #52]	@ 0x34
        indev->proc.types.pointer.drag_throw_vect.y = 0;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	86da      	strh	r2, [r3, #54]	@ 0x36
        indev->proc.reset_query                     = 0;
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
 8004586:	f36f 0341 	bfc	r3, #1, #1
 800458a:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
        indev_obj_act                               = NULL;
 800458e:	4b04      	ldr	r3, [pc, #16]	@ (80045a0 <indev_proc_reset_query_handler+0x98>)
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
    }
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	200029c4 	.word	0x200029c4

080045a4 <indev_search_obj>:
 * @param proc pointer to  the `lv_indev_proc_t` part of the input device
 * @param obj pointer to a start object, typically the screen
 * @return pointer to the found object or NULL if there was no suitable object
 */
static lv_obj_t * indev_search_obj(const lv_indev_proc_t * proc, lv_obj_t * obj)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad.y1;
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad.y2;

    if(lv_area_is_point_on(&ext_area, &proc->types.pointer.act_point)) {
#else
    if(lv_area_is_point_on(&obj->coords, &proc->types.pointer.act_point)) {
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	f103 0210 	add.w	r2, r3, #16
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3304      	adds	r3, #4
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f00b f857 	bl	800f672 <lv_area_is_point_on>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d03a      	beq.n	8004640 <indev_search_obj+0x9c>
#endif
        lv_obj_t * i;

        LV_LL_READ(obj->child_ll, i)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	3304      	adds	r3, #4
 80045ce:	4618      	mov	r0, r3
 80045d0:	f00b fc55 	bl	800fe7e <lv_ll_get_head>
 80045d4:	6138      	str	r0, [r7, #16]
 80045d6:	e00e      	b.n	80045f6 <indev_search_obj+0x52>
        {
            found_p = indev_search_obj(proc, i);
 80045d8:	6939      	ldr	r1, [r7, #16]
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff ffe2 	bl	80045a4 <indev_search_obj>
 80045e0:	6178      	str	r0, [r7, #20]

            /*If a child was found then break*/
            if(found_p != NULL) {
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <indev_search_obj+0x5a>
        LV_LL_READ(obj->child_ll, i)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	3304      	adds	r3, #4
 80045ec:	6939      	ldr	r1, [r7, #16]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f00b fc69 	bl	800fec6 <lv_ll_get_next>
 80045f4:	6138      	str	r0, [r7, #16]
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1ed      	bne.n	80045d8 <indev_search_obj+0x34>
 80045fc:	e000      	b.n	8004600 <indev_search_obj+0x5c>
                break;
 80045fe:	bf00      	nop
            }
        }

        /*If then the children was not ok, and this obj is clickable
         * and it or its parent is not hidden then save this object*/
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d11c      	bne.n	8004640 <indev_search_obj+0x9c>
 8004606:	6838      	ldr	r0, [r7, #0]
 8004608:	f002 f8dc 	bl	80067c4 <lv_obj_get_click>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d016      	beq.n	8004640 <indev_search_obj+0x9c>
            lv_obj_t * hidden_i = obj;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	60fb      	str	r3, [r7, #12]
            while(hidden_i != NULL) {
 8004616:	e009      	b.n	800462c <indev_search_obj+0x88>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f002 f8bf 	bl	800679c <lv_obj_get_hidden>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d107      	bne.n	8004634 <indev_search_obj+0x90>
                hidden_i = lv_obj_get_parent(hidden_i);
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f001 ff8d 	bl	8006544 <lv_obj_get_parent>
 800462a:	60f8      	str	r0, [r7, #12]
            while(hidden_i != NULL) {
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f2      	bne.n	8004618 <indev_search_obj+0x74>
 8004632:	e000      	b.n	8004636 <indev_search_obj+0x92>
                if(lv_obj_get_hidden(hidden_i) == true) break;
 8004634:	bf00      	nop
            }
            /*No parent found with hidden == true*/
            if(hidden_i == NULL) found_p = obj;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <indev_search_obj+0x9c>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	617b      	str	r3, [r7, #20]
        }
    }

    return found_p;
 8004640:	697b      	ldr	r3, [r7, #20]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <indev_drag>:
/**
 * Handle the dragging of indev_proc_p->types.pointer.act_obj
 * @param indev pointer to a input device state
 */
static void indev_drag(lv_indev_proc_t * state)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	@ 0x28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    lv_obj_t * drag_obj    = state->types.pointer.act_obj;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	627b      	str	r3, [r7, #36]	@ 0x24
    bool drag_just_started = false;
 800465a:	2300      	movs	r3, #0
 800465c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /*If drag parent is active check recursively the drag_parent attribute*/
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 8004660:	e003      	b.n	800466a <indev_drag+0x1e>
        drag_obj = lv_obj_get_parent(drag_obj);
 8004662:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004664:	f001 ff6e 	bl	8006544 <lv_obj_get_parent>
 8004668:	6278      	str	r0, [r7, #36]	@ 0x24
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 800466a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800466c:	f002 f8f5 	bl	800685a <lv_obj_get_drag_parent>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <indev_drag+0x30>
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f2      	bne.n	8004662 <indev_drag+0x16>
    }

    if(drag_obj == NULL) return;
 800467c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 816f 	beq.w	8004962 <indev_drag+0x316>

    if(lv_obj_get_drag(drag_obj) == false) return;
 8004684:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004686:	f002 f8b1 	bl	80067ec <lv_obj_get_drag>
 800468a:	4603      	mov	r3, r0
 800468c:	f083 0301 	eor.w	r3, r3, #1
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	f040 8167 	bne.w	8004966 <indev_drag+0x31a>

    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8004698:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800469a:	f002 f8bb 	bl	8006814 <lv_obj_get_drag_dir>
 800469e:	4603      	mov	r3, r0
 80046a0:	777b      	strb	r3, [r7, #29]

    /*Count the movement by drag*/
    state->types.pointer.drag_sum.x += state->types.pointer.vect.x;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	4413      	add	r3, r2
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	b21a      	sxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	821a      	strh	r2, [r3, #16]
    state->types.pointer.drag_sum.y += state->types.pointer.vect.y;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	4413      	add	r3, r2
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	b21a      	sxth	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	825a      	strh	r2, [r3, #18]

    /*Enough move?*/
    if(state->types.pointer.drag_limit_out == 0) {
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d12b      	bne.n	800473e <indev_drag+0xf2>
        /*If a move is greater then LV_DRAG_LIMIT then begin the drag*/
        if(((allowed_dirs & LV_DRAG_DIR_HOR) &&
 80046e6:	7f7b      	ldrb	r3, [r7, #29]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00b      	beq.n	8004708 <indev_drag+0xbc>
            LV_MATH_ABS(state->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	bfb8      	it	lt
 80046fa:	425b      	neglt	r3, r3
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	4a9e      	ldr	r2, [pc, #632]	@ (8004978 <indev_drag+0x32c>)
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	7e12      	ldrb	r2, [r2, #24]
        if(((allowed_dirs & LV_DRAG_DIR_HOR) &&
 8004704:	4293      	cmp	r3, r2
 8004706:	d210      	bcs.n	800472a <indev_drag+0xde>
           ((allowed_dirs & LV_DRAG_DIR_VER) &&
 8004708:	7f7b      	ldrb	r3, [r7, #29]
 800470a:	f003 0302 	and.w	r3, r3, #2
            LV_MATH_ABS(state->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
 800470e:	2b00      	cmp	r3, #0
 8004710:	d015      	beq.n	800473e <indev_drag+0xf2>
            LV_MATH_ABS(state->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004718:	2b00      	cmp	r3, #0
 800471a:	bfb8      	it	lt
 800471c:	425b      	neglt	r3, r3
 800471e:	b29b      	uxth	r3, r3
 8004720:	4a95      	ldr	r2, [pc, #596]	@ (8004978 <indev_drag+0x32c>)
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	7e12      	ldrb	r2, [r2, #24]
           ((allowed_dirs & LV_DRAG_DIR_VER) &&
 8004726:	4293      	cmp	r3, r2
 8004728:	d309      	bcc.n	800473e <indev_drag+0xf2>
            state->types.pointer.drag_limit_out = 1;
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
            drag_just_started                   = true;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        }
    }

    /*If the drag limit is exceeded handle the dragging*/
    if(state->types.pointer.drag_limit_out != 0) {
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	f000 8110 	beq.w	8004970 <indev_drag+0x324>
        /*Set new position if the vector is not zero*/
        if(state->types.pointer.vect.x != 0 || state->types.pointer.vect.y != 0) {
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d105      	bne.n	8004766 <indev_drag+0x11a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 8105 	beq.w	8004970 <indev_drag+0x324>

            uint16_t inv_buf_size =
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
 8004766:	4b84      	ldr	r3, [pc, #528]	@ (8004978 <indev_drag+0x32c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	4618      	mov	r0, r3
 800476e:	f00a faa4 	bl	800ecba <lv_disp_get_inv_buf_size>
 8004772:	4603      	mov	r3, r0
 8004774:	837b      	strh	r3, [r7, #26]

            lv_coord_t prev_x     = drag_obj->coords.x1;
 8004776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004778:	8a1b      	ldrh	r3, [r3, #16]
 800477a:	833b      	strh	r3, [r7, #24]
            lv_coord_t prev_y     = drag_obj->coords.y1;
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	8a5b      	ldrh	r3, [r3, #18]
 8004780:	82fb      	strh	r3, [r7, #22]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 8004782:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004784:	f001 fede 	bl	8006544 <lv_obj_get_parent>
 8004788:	4603      	mov	r3, r0
 800478a:	4618      	mov	r0, r3
 800478c:	f001 ff43 	bl	8006616 <lv_obj_get_width>
 8004790:	4603      	mov	r3, r0
 8004792:	82bb      	strh	r3, [r7, #20]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 8004794:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004796:	f001 fed5 	bl	8006544 <lv_obj_get_parent>
 800479a:	4603      	mov	r3, r0
 800479c:	4618      	mov	r0, r3
 800479e:	f001 ff48 	bl	8006632 <lv_obj_get_height>
 80047a2:	4603      	mov	r3, r0
 80047a4:	827b      	strh	r3, [r7, #18]

            /*Get the coordinates of the object and modify them*/
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
 80047a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80047a8:	f001 ff03 	bl	80065b2 <lv_obj_get_x>
 80047ac:	4603      	mov	r3, r0
 80047ae:	843b      	strh	r3, [r7, #32]
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
 80047b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80047b2:	f001 ff17 	bl	80065e4 <lv_obj_get_y>
 80047b6:	4603      	mov	r3, r0
 80047b8:	83fb      	strh	r3, [r7, #30]

            if(allowed_dirs == LV_DRAG_DIR_ALL) {
 80047ba:	7f7b      	ldrb	r3, [r7, #29]
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d128      	bne.n	8004812 <indev_drag+0x1c6>
                if(drag_just_started) {
 80047c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00f      	beq.n	80047e8 <indev_drag+0x19c>
                    act_x += state->types.pointer.drag_sum.x;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	8c3b      	ldrh	r3, [r7, #32]
 80047d2:	4413      	add	r3, r2
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	843b      	strh	r3, [r7, #32]
                    act_y += state->types.pointer.drag_sum.y;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80047de:	b29a      	uxth	r2, r3
 80047e0:	8bfb      	ldrh	r3, [r7, #30]
 80047e2:	4413      	add	r3, r2
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	83fb      	strh	r3, [r7, #30]
                }
                lv_obj_set_pos(drag_obj, act_x + state->types.pointer.vect.x, act_y + state->types.pointer.vect.y);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	8c3b      	ldrh	r3, [r7, #32]
 80047f2:	4413      	add	r3, r2
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	b219      	sxth	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80047fe:	b29a      	uxth	r2, r3
 8004800:	8bfb      	ldrh	r3, [r7, #30]
 8004802:	4413      	add	r3, r2
 8004804:	b29b      	uxth	r3, r3
 8004806:	b21b      	sxth	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800480c:	f000 fea5 	bl	800555a <lv_obj_set_pos>
 8004810:	e03a      	b.n	8004888 <indev_drag+0x23c>
            } else if(allowed_dirs & LV_DRAG_DIR_HOR) {
 8004812:	7f7b      	ldrb	r3, [r7, #29]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b00      	cmp	r3, #0
 800481a:	d018      	beq.n	800484e <indev_drag+0x202>
                if(drag_just_started) {
 800481c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004820:	2b00      	cmp	r3, #0
 8004822:	d007      	beq.n	8004834 <indev_drag+0x1e8>
                    act_x += state->types.pointer.drag_sum.x;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800482a:	b29a      	uxth	r2, r3
 800482c:	8c3b      	ldrh	r3, [r7, #32]
 800482e:	4413      	add	r3, r2
 8004830:	b29b      	uxth	r3, r3
 8004832:	843b      	strh	r3, [r7, #32]
                }
                lv_obj_set_x(drag_obj, act_x + state->types.pointer.vect.x);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800483a:	b29a      	uxth	r2, r3
 800483c:	8c3b      	ldrh	r3, [r7, #32]
 800483e:	4413      	add	r3, r2
 8004840:	b29b      	uxth	r3, r3
 8004842:	b21b      	sxth	r3, r3
 8004844:	4619      	mov	r1, r3
 8004846:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004848:	f000 ff12 	bl	8005670 <lv_obj_set_x>
 800484c:	e01c      	b.n	8004888 <indev_drag+0x23c>
            } else if(allowed_dirs & LV_DRAG_DIR_VER) {
 800484e:	7f7b      	ldrb	r3, [r7, #29]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d017      	beq.n	8004888 <indev_drag+0x23c>
                if(drag_just_started) {
 8004858:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <indev_drag+0x224>
                    act_y += state->types.pointer.drag_sum.y;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004866:	b29a      	uxth	r2, r3
 8004868:	8bfb      	ldrh	r3, [r7, #30]
 800486a:	4413      	add	r3, r2
 800486c:	b29b      	uxth	r3, r3
 800486e:	83fb      	strh	r3, [r7, #30]
                }
                lv_obj_set_y(drag_obj, act_y + state->types.pointer.vect.y);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004876:	b29a      	uxth	r2, r3
 8004878:	8bfb      	ldrh	r3, [r7, #30]
 800487a:	4413      	add	r3, r2
 800487c:	b29b      	uxth	r3, r3
 800487e:	b21b      	sxth	r3, r3
 8004880:	4619      	mov	r1, r3
 8004882:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004884:	f000 ff09 	bl	800569a <lv_obj_set_y>
            }

            /*Set the drag in progress flag*/
            /*Send the drag begin signal on first move*/
            if(state->types.pointer.drag_in_prog == 0) {
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d117      	bne.n	80048c8 <indev_drag+0x27c>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
 8004898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	4a36      	ldr	r2, [pc, #216]	@ (8004978 <indev_drag+0x32c>)
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	210d      	movs	r1, #13
 80048a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048a4:	4798      	blx	r3
                if(indev_reset_check(state)) return;
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f9a8 	bl	8004bfc <indev_reset_check>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d15b      	bne.n	800496a <indev_drag+0x31e>
                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
 80048b2:	2200      	movs	r2, #0
 80048b4:	2108      	movs	r1, #8
 80048b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048b8:	f001 fd24 	bl	8006304 <lv_event_send>
                if(indev_reset_check(state)) return;
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f99d 	bl	8004bfc <indev_reset_check>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d152      	bne.n	800496e <indev_drag+0x322>
            }

            state->types.pointer.drag_in_prog = 1;
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 80048ce:	f043 0302 	orr.w	r3, r3, #2
 80048d2:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24

            /*If the object didn't moved then clear the invalidated areas*/
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80048dc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d145      	bne.n	8004970 <indev_drag+0x324>
 80048e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80048ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d13e      	bne.n	8004970 <indev_drag+0x324>
                state->types.pointer.drag_in_prog = 0;
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 80048f8:	f36f 0341 	bfc	r3, #1, #1
 80048fc:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
                /*In a special case if the object is moved on a page and
                 * the scrollable has fit == true and the object is dragged of the page then
                 * while its coordinate is not changing only the parent's size is reduced */
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
 8004900:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004902:	f001 fe1f 	bl	8006544 <lv_obj_get_parent>
 8004906:	4603      	mov	r3, r0
 8004908:	4618      	mov	r0, r3
 800490a:	f001 fe84 	bl	8006616 <lv_obj_get_width>
 800490e:	4603      	mov	r3, r0
 8004910:	823b      	strh	r3, [r7, #16]
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
 8004912:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004914:	f001 fe16 	bl	8006544 <lv_obj_get_parent>
 8004918:	4603      	mov	r3, r0
 800491a:	4618      	mov	r0, r3
 800491c:	f001 fe89 	bl	8006632 <lv_obj_get_height>
 8004920:	4603      	mov	r3, r0
 8004922:	81fb      	strh	r3, [r7, #14]
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
 8004924:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004928:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800492c:	429a      	cmp	r2, r3
 800492e:	d11f      	bne.n	8004970 <indev_drag+0x324>
 8004930:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004934:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004938:	429a      	cmp	r2, r3
 800493a:	d119      	bne.n	8004970 <indev_drag+0x324>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
 800493c:	4b0e      	ldr	r3, [pc, #56]	@ (8004978 <indev_drag+0x32c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	4618      	mov	r0, r3
 8004944:	f00a f9b9 	bl	800ecba <lv_disp_get_inv_buf_size>
 8004948:	4603      	mov	r3, r0
 800494a:	81bb      	strh	r3, [r7, #12]
                    lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
 800494c:	4b0a      	ldr	r3, [pc, #40]	@ (8004978 <indev_drag+0x32c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6918      	ldr	r0, [r3, #16]
 8004952:	89ba      	ldrh	r2, [r7, #12]
 8004954:	8b7b      	ldrh	r3, [r7, #26]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	b29b      	uxth	r3, r3
 800495a:	4619      	mov	r1, r3
 800495c:	f00a f9bc 	bl	800ecd8 <lv_disp_pop_from_inv_buf>
 8004960:	e006      	b.n	8004970 <indev_drag+0x324>
    if(drag_obj == NULL) return;
 8004962:	bf00      	nop
 8004964:	e004      	b.n	8004970 <indev_drag+0x324>
    if(lv_obj_get_drag(drag_obj) == false) return;
 8004966:	bf00      	nop
 8004968:	e002      	b.n	8004970 <indev_drag+0x324>
                if(indev_reset_check(state)) return;
 800496a:	bf00      	nop
 800496c:	e000      	b.n	8004970 <indev_drag+0x324>
                if(indev_reset_check(state)) return;
 800496e:	bf00      	nop
                }
            }
        }
    }
}
 8004970:	3728      	adds	r7, #40	@ 0x28
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	200029c0 	.word	0x200029c0

0800497c <indev_drag_throw>:
/**
 * Handle throwing by drag if the drag is ended
 * @param indev pointer to an input device state
 */
static void indev_drag_throw(lv_indev_proc_t * proc)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	@ 0x28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
    if(proc->types.pointer.drag_in_prog == 0) return;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8121 	beq.w	8004bd8 <indev_drag_throw+0x25c>

    lv_obj_t * drag_obj = proc->types.pointer.last_obj;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24

    /*If drag parent is active check recursively the drag_parent attribute*/
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 800499c:	e003      	b.n	80049a6 <indev_drag_throw+0x2a>
        drag_obj = lv_obj_get_parent(drag_obj);
 800499e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049a0:	f001 fdd0 	bl	8006544 <lv_obj_get_parent>
 80049a4:	6278      	str	r0, [r7, #36]	@ 0x24
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
 80049a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049a8:	f001 ff57 	bl	800685a <lv_obj_get_drag_parent>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <indev_drag_throw+0x3c>
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f2      	bne.n	800499e <indev_drag_throw+0x22>
    }

    if(drag_obj == NULL) {
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 810e 	beq.w	8004bdc <indev_drag_throw+0x260>
        return;
    }

    /*Return if the drag throw is not enabled*/
    if(lv_obj_get_drag_throw(drag_obj) == false) {
 80049c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049c2:	f001 ff36 	bl	8006832 <lv_obj_get_drag_throw>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f083 0301 	eor.w	r3, r3, #1
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01f      	beq.n	8004a12 <indev_drag_throw+0x96>
        proc->types.pointer.drag_in_prog = 0;
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 80049d8:	f36f 0341 	bfc	r3, #1, #1
 80049dc:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	4a83      	ldr	r2, [pc, #524]	@ (8004bf4 <indev_drag_throw+0x278>)
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	210e      	movs	r1, #14
 80049ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049ec:	4798      	blx	r3
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 80049ee:	2200      	movs	r2, #0
 80049f0:	2109      	movs	r1, #9
 80049f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049f4:	f001 fc86 	bl	8006304 <lv_event_send>
        if(indev_reset_check(proc)) return;
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f8ff 	bl	8004bfc <indev_reset_check>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f040 80ed 	bne.w	8004be0 <indev_drag_throw+0x264>

        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8004a06:	2200      	movs	r2, #0
 8004a08:	2109      	movs	r1, #9
 8004a0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a0c:	f001 fc7a 	bl	8006304 <lv_event_send>
        return;
 8004a10:	e0ed      	b.n	8004bee <indev_drag_throw+0x272>
    }

    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
 8004a12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a14:	f001 fefe 	bl	8006814 <lv_obj_get_drag_dir>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    /*Reduce the vectors*/
    proc->types.pointer.drag_throw_vect.x =
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004a24:	461a      	mov	r2, r3
 8004a26:	4b73      	ldr	r3, [pc, #460]	@ (8004bf4 <indev_drag_throw+0x278>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	7e5b      	ldrb	r3, [r3, #25]
 8004a2c:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8004a30:	fb02 f303 	mul.w	r3, r2, r3
 8004a34:	4a70      	ldr	r2, [pc, #448]	@ (8004bf8 <indev_drag_throw+0x27c>)
 8004a36:	fb82 1203 	smull	r1, r2, r2, r3
 8004a3a:	1152      	asrs	r2, r2, #5
 8004a3c:	17db      	asrs	r3, r3, #31
 8004a3e:	1ad3      	subs	r3, r2, r3
    proc->types.pointer.drag_throw_vect.x =
 8004a40:	b21a      	sxth	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	829a      	strh	r2, [r3, #20]
    proc->types.pointer.drag_throw_vect.y =
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4b69      	ldr	r3, [pc, #420]	@ (8004bf4 <indev_drag_throw+0x278>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	7e5b      	ldrb	r3, [r3, #25]
 8004a54:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8004a58:	fb02 f303 	mul.w	r3, r2, r3
 8004a5c:	4a66      	ldr	r2, [pc, #408]	@ (8004bf8 <indev_drag_throw+0x27c>)
 8004a5e:	fb82 1203 	smull	r1, r2, r2, r3
 8004a62:	1152      	asrs	r2, r2, #5
 8004a64:	17db      	asrs	r3, r3, #31
 8004a66:	1ad3      	subs	r3, r2, r3
    proc->types.pointer.drag_throw_vect.y =
 8004a68:	b21a      	sxth	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	82da      	strh	r2, [r3, #22]

    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d105      	bne.n	8004a84 <indev_drag_throw+0x108>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 808b 	beq.w	8004b9a <indev_drag_throw+0x21e>
        /*Get the coordinates and modify them*/
        lv_area_t coords_ori;
        lv_obj_get_coords(drag_obj, &coords_ori);
 8004a84:	f107 0314 	add.w	r3, r7, #20
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a8c:	f001 fd82 	bl	8006594 <lv_obj_get_coords>
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
 8004a90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a92:	f001 fd8e 	bl	80065b2 <lv_obj_get_x>
 8004a96:	4603      	mov	r3, r0
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	843b      	strh	r3, [r7, #32]
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
 8004aa8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004aaa:	f001 fd9b 	bl	80065e4 <lv_obj_get_y>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	4413      	add	r3, r2
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	83fb      	strh	r3, [r7, #30]

        if(allowed_dirs == LV_DRAG_DIR_ALL)
 8004ac0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d108      	bne.n	8004ada <indev_drag_throw+0x15e>
            lv_obj_set_pos(drag_obj, act_x, act_y);
 8004ac8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8004acc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ad4:	f000 fd41 	bl	800555a <lv_obj_set_pos>
 8004ad8:	e018      	b.n	8004b0c <indev_drag_throw+0x190>
        else if(allowed_dirs & LV_DRAG_DIR_HOR)
 8004ada:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d006      	beq.n	8004af4 <indev_drag_throw+0x178>
            lv_obj_set_x(drag_obj, act_x);
 8004ae6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004aea:	4619      	mov	r1, r3
 8004aec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004aee:	f000 fdbf 	bl	8005670 <lv_obj_set_x>
 8004af2:	e00b      	b.n	8004b0c <indev_drag_throw+0x190>
        else if(allowed_dirs & LV_DRAG_DIR_VER)
 8004af4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <indev_drag_throw+0x190>
            lv_obj_set_y(drag_obj, act_y);
 8004b00:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004b04:	4619      	mov	r1, r3
 8004b06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b08:	f000 fdc7 	bl	800569a <lv_obj_set_y>

        lv_area_t coord_new;
        lv_obj_get_coords(drag_obj, &coord_new);
 8004b0c:	f107 030c 	add.w	r3, r7, #12
 8004b10:	4619      	mov	r1, r3
 8004b12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b14:	f001 fd3e 	bl	8006594 <lv_obj_get_coords>

        /*If non of the coordinates are changed then do not continue throwing*/
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
 8004b18:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004b1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d004      	beq.n	8004b2e <indev_drag_throw+0x1b2>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d15a      	bne.n	8004be4 <indev_drag_throw+0x268>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
 8004b2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004b32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d004      	beq.n	8004b44 <indev_drag_throw+0x1c8>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d14f      	bne.n	8004be4 <indev_drag_throw+0x268>
            proc->types.pointer.drag_in_prog      = 0;
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 8004b4a:	f36f 0341 	bfc	r3, #1, #1
 8004b4e:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
            proc->types.pointer.vect.x            = 0;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	819a      	strh	r2, [r3, #12]
            proc->types.pointer.vect.y            = 0;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	81da      	strh	r2, [r3, #14]
            proc->types.pointer.drag_throw_vect.x = 0;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	829a      	strh	r2, [r3, #20]
            proc->types.pointer.drag_throw_vect.y = 0;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	82da      	strh	r2, [r3, #22]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	4a21      	ldr	r2, [pc, #132]	@ (8004bf4 <indev_drag_throw+0x278>)
 8004b70:	6812      	ldr	r2, [r2, #0]
 8004b72:	210e      	movs	r1, #14
 8004b74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b76:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f83f 	bl	8004bfc <indev_reset_check>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d131      	bne.n	8004be8 <indev_drag_throw+0x26c>
            lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8004b84:	2200      	movs	r2, #0
 8004b86:	2109      	movs	r1, #9
 8004b88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b8a:	f001 fbbb 	bl	8006304 <lv_event_send>
            if(indev_reset_check(proc)) return;
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f834 	bl	8004bfc <indev_reset_check>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
 8004b98:	e024      	b.n	8004be4 <indev_drag_throw+0x268>
        }
    }
    /*If the types.pointer.vectors become 0 -> types.pointer.drag_in_prog = 0 and send a drag end
       signal*/
    else {
        proc->types.pointer.drag_in_prog = 0;
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 8004ba0:	f36f 0341 	bfc	r3, #1, #1
 8004ba4:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	4a11      	ldr	r2, [pc, #68]	@ (8004bf4 <indev_drag_throw+0x278>)
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	210e      	movs	r1, #14
 8004bb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bb4:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f820 	bl	8004bfc <indev_reset_check>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d114      	bne.n	8004bec <indev_drag_throw+0x270>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2109      	movs	r1, #9
 8004bc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bc8:	f001 fb9c 	bl	8006304 <lv_event_send>
        if(indev_reset_check(proc)) return;
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f815 	bl	8004bfc <indev_reset_check>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	e00a      	b.n	8004bee <indev_drag_throw+0x272>
    if(proc->types.pointer.drag_in_prog == 0) return;
 8004bd8:	bf00      	nop
 8004bda:	e008      	b.n	8004bee <indev_drag_throw+0x272>
        return;
 8004bdc:	bf00      	nop
 8004bde:	e006      	b.n	8004bee <indev_drag_throw+0x272>
        if(indev_reset_check(proc)) return;
 8004be0:	bf00      	nop
 8004be2:	e004      	b.n	8004bee <indev_drag_throw+0x272>
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
 8004be4:	bf00      	nop
 8004be6:	e002      	b.n	8004bee <indev_drag_throw+0x272>
            if(indev_reset_check(proc)) return;
 8004be8:	bf00      	nop
 8004bea:	e000      	b.n	8004bee <indev_drag_throw+0x272>
        if(indev_reset_check(proc)) return;
 8004bec:	bf00      	nop
    }
}
 8004bee:	3728      	adds	r7, #40	@ 0x28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	200029c0 	.word	0x200029c0
 8004bf8:	51eb851f 	.word	0x51eb851f

08004bfc <indev_reset_check>:
 * Checks if the reset_query flag has been set. If so, perform necessary global indev cleanup actions
 * @param proc pointer to an input device 'proc'
 * return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
    if(proc->reset_query) {
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <indev_reset_check+0x1e>
        indev_obj_act = NULL;
 8004c14:	4b09      	ldr	r3, [pc, #36]	@ (8004c3c <indev_reset_check+0x40>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf14      	ite	ne
 8004c2c:	2301      	movne	r3, #1
 8004c2e:	2300      	moveq	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	200029c4 	.word	0x200029c4

08004c40 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8004c4a:	2208      	movs	r2, #8
 8004c4c:	6839      	ldr	r1, [r7, #0]
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f016 fecb 	bl	801b9ea <memcpy>
}
 8004c54:	bf00      	nop
 8004c56:	3708      	adds	r7, #8
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3301      	adds	r3, #1
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	b21b      	sxth	r3, r3
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr

08004c88 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	b21b      	sxth	r3, r3
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <lv_init>:

/**
 * Init. the 'lv' library.
 */
void lv_init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
    /* Do nothing if already initialized */
    if(lv_initialized) {
 8004cb8:	4b13      	ldr	r3, [pc, #76]	@ (8004d08 <lv_init+0x54>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d121      	bne.n	8004d04 <lv_init+0x50>
    }

    LV_LOG_TRACE("lv_init started");

    /*Initialize the lv_misc modules*/
    lv_mem_init();
 8004cc0:	f00b f9e0 	bl	8010084 <lv_mem_init>
    lv_task_core_init();
 8004cc4:	f00b fb8c 	bl	80103e0 <lv_task_core_init>

#if LV_USE_FILESYSTEM
    lv_fs_init();
 8004cc8:	f00a fdd4 	bl	800f874 <lv_fs_init>
#endif

#if LV_USE_ANIMATION
    lv_anim_core_init();
 8004ccc:	f00a f95e 	bl	800ef8c <lv_anim_core_init>
#endif

#if LV_USE_GROUP
    lv_group_init();
 8004cd0:	f7fd fdd6 	bl	8002880 <lv_group_init>
#endif

    /*Init. the sstyles*/
    lv_style_init();
 8004cd4:	f002 fe38 	bl	8007948 <lv_style_init>

    /*Initialize the screen refresh system*/
    lv_refr_init();
 8004cd8:	f002 f86e 	bl	8006db8 <lv_refr_init>

    lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
 8004cdc:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8004ce0:	480a      	ldr	r0, [pc, #40]	@ (8004d0c <lv_init+0x58>)
 8004ce2:	f00a ff4b 	bl	800fb7c <lv_ll_init>
    lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
 8004ce6:	2160      	movs	r1, #96	@ 0x60
 8004ce8:	4809      	ldr	r0, [pc, #36]	@ (8004d10 <lv_init+0x5c>)
 8004cea:	f00a ff47 	bl	800fb7c <lv_ll_init>

    /*Init the input device handling*/
    lv_indev_init();
 8004cee:	f7fe f947 	bl	8002f80 <lv_indev_init>

    lv_img_decoder_init();
 8004cf2:	f008 fbb3 	bl	800d45c <lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	f008 face 	bl	800d298 <lv_img_cache_set_size>

    lv_initialized = true;
 8004cfc:	4b02      	ldr	r3, [pc, #8]	@ (8004d08 <lv_init+0x54>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	e000      	b.n	8004d06 <lv_init+0x52>
        return;
 8004d04:	bf00      	nop
    LV_LOG_INFO("lv_init ready");
}
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	200029c8 	.word	0x200029c8
 8004d0c:	20002d14 	.word	0x20002d14
 8004d10:	20002d20 	.word	0x20002d20

08004d14 <lv_obj_create>:
 *                  If NULL then a screen will be created
 * @param copy pointer to a base object, if not NULL then the new object will be copied from it
 * @return pointer to the new object
 */
lv_obj_t * lv_obj_create(lv_obj_t * parent, const lv_obj_t * copy)
{
 8004d14:	b590      	push	{r4, r7, lr}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]

    lv_obj_t * new_obj = NULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
    /*Create a screen if the parent is NULL*/
    if(parent == NULL) {
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f040 80c0 	bne.w	8004eaa <lv_obj_create+0x196>
        LV_LOG_TRACE("Screen create started");
        lv_disp_t * disp = lv_disp_get_default();
 8004d2a:	f009 ff43 	bl	800ebb4 <lv_disp_get_default>
 8004d2e:	60f8      	str	r0, [r7, #12]
        if(!disp) {
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <lv_obj_create+0x26>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
            return NULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	e26c      	b.n	8005214 <lv_obj_create+0x500>
        }

        new_obj = lv_ll_ins_head(&disp->scr_ll);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3328      	adds	r3, #40	@ 0x28
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f00a ff3b 	bl	800fbba <lv_ll_ins_head>
 8004d44:	6178      	str	r0, [r7, #20]
        lv_mem_assert(new_obj);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <lv_obj_create+0x3c>
 8004d4c:	bf00      	nop
 8004d4e:	e7fd      	b.n	8004d4c <lv_obj_create+0x38>
        if(new_obj == NULL) return NULL;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <lv_obj_create+0x46>
 8004d56:	2300      	movs	r3, #0
 8004d58:	e25c      	b.n	8005214 <lv_obj_create+0x500>

        new_obj->par = NULL; /*Screens has no a parent*/
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	3304      	adds	r3, #4
 8004d64:	2148      	movs	r1, #72	@ 0x48
 8004d66:	4618      	mov	r0, r3
 8004d68:	f00a ff08 	bl	800fb7c <lv_ll_init>

        /*Set coordinates to full screen size*/
        new_obj->coords.x1    = 0;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	821a      	strh	r2, [r3, #16]
        new_obj->coords.y1    = 0;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2200      	movs	r2, #0
 8004d76:	825a      	strh	r2, [r3, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f009 ff25 	bl	800ebc8 <lv_disp_get_hor_res>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	b21a      	sxth	r2, r3
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	829a      	strh	r2, [r3, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	f009 ff3d 	bl	800ec0c <lv_disp_get_ver_res>
 8004d92:	4603      	mov	r3, r0
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	b21a      	sxth	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	82da      	strh	r2, [r3, #22]
        new_obj->ext_draw_pad = 0;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2200      	movs	r2, #0
 8004da4:	869a      	strh	r2, [r3, #52]	@ 0x34
        new_obj->ext_click_pad_ver = 0;
#endif

        /*Init realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        new_obj->realign.xofs         = 0;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2200      	movs	r2, #0
 8004db2:	879a      	strh	r2, [r3, #60]	@ 0x3c
        new_obj->realign.yofs         = 0;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2200      	movs	r2, #0
 8004db8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        new_obj->realign.base         = NULL;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	639a      	str	r2, [r3, #56]	@ 0x38
        new_obj->realign.auto_realign = 0;
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 8004dc6:	f36f 0300 	bfc	r3, #0, #1
 8004dca:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
#endif

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 8004dce:	f015 fad1 	bl	801a374 <lv_theme_get_current>
 8004dd2:	60b8      	str	r0, [r7, #8]
        if(th) {
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <lv_obj_create+0xd0>
            new_obj->style_p = th->style.scr;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004de2:	e002      	b.n	8004dea <lv_obj_create+0xd6>
        } else {
            new_obj->style_p = &lv_style_scr;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	4a5c      	ldr	r2, [pc, #368]	@ (8004f58 <lv_obj_create+0x244>)
 8004de8:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        /*Set the callbacks*/
        lv_obj_set_signal_cb(new_obj, lv_obj_signal);
 8004dea:	495c      	ldr	r1, [pc, #368]	@ (8004f5c <lv_obj_create+0x248>)
 8004dec:	6978      	ldr	r0, [r7, #20]
 8004dee:	f001 fb17 	bl	8006420 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_obj, lv_obj_design);
 8004df2:	495b      	ldr	r1, [pc, #364]	@ (8004f60 <lv_obj_create+0x24c>)
 8004df4:	6978      	ldr	r0, [r7, #20]
 8004df6:	f001 fb20 	bl	800643a <lv_obj_set_design_cb>
        new_obj->event_cb = NULL;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	619a      	str	r2, [r3, #24]

        /*Init. user date*/
#if LV_USE_USER_DATA
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	3344      	adds	r3, #68	@ 0x44
 8004e04:	2204      	movs	r2, #4
 8004e06:	2100      	movs	r1, #0
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f016 fd6a 	bl	801b8e2 <memset>
#endif

#if LV_USE_GROUP
        new_obj->group_p = NULL;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
        /*Set attributes*/
        new_obj->click        = 0;
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8004e1a:	f36f 0300 	bfc	r3, #0, #1
 8004e1e:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->drag         = 0;
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8004e28:	f36f 0341 	bfc	r3, #1, #1
 8004e2c:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->drag_throw   = 0;
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8004e36:	f36f 0382 	bfc	r3, #2, #1
 8004e3a:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->drag_parent  = 0;
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8004e44:	f36f 03c3 	bfc	r3, #3, #1
 8004e48:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->hidden       = 0;
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8004e52:	f36f 1304 	bfc	r3, #4, #1
 8004e56:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->top          = 0;
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8004e60:	f36f 1345 	bfc	r3, #5, #1
 8004e64:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->protect      = LV_PROTECT_NONE;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
        new_obj->opa_scale_en = 0;
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8004e76:	f36f 1386 	bfc	r3, #6, #1
 8004e7a:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->opa_scale    = LV_OPA_COVER;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	22ff      	movs	r2, #255	@ 0xff
 8004e82:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        new_obj->parent_event = 0;
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8004e8c:	f36f 13c7 	bfc	r3, #7, #1
 8004e90:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->reserved     = 0;
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	f892 3031 	ldrb.w	r3, [r2, #49]	@ 0x31
 8004e9a:	f36f 0387 	bfc	r3, #2, #6
 8004e9e:	f882 3031 	strb.w	r3, [r2, #49]	@ 0x31

        new_obj->ext_attr = NULL;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ea8:	e0be      	b.n	8005028 <lv_obj_create+0x314>
    }
    /*parent != NULL create normal obj. on a parent*/
    else {
        LV_LOG_TRACE("Object create started");

        new_obj = lv_ll_ins_head(&parent->child_ll);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3304      	adds	r3, #4
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f00a fe83 	bl	800fbba <lv_ll_ins_head>
 8004eb4:	6178      	str	r0, [r7, #20]
        lv_mem_assert(new_obj);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <lv_obj_create+0x1ac>
 8004ebc:	bf00      	nop
 8004ebe:	e7fd      	b.n	8004ebc <lv_obj_create+0x1a8>
        if(new_obj == NULL) return NULL;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <lv_obj_create+0x1b6>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e1a4      	b.n	8005214 <lv_obj_create+0x500>

        new_obj->par = parent; /*Set the parent*/
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	601a      	str	r2, [r3, #0]
        lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	2148      	movs	r1, #72	@ 0x48
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f00a fe50 	bl	800fb7c <lv_ll_init>

        /*Set coordinates left top corner of parent*/
        new_obj->coords.x1    = parent->coords.x1;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	821a      	strh	r2, [r3, #16]
        new_obj->coords.y1    = parent->coords.y1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	825a      	strh	r2, [r3, #18]
        new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3364      	adds	r3, #100	@ 0x64
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	b21a      	sxth	r2, r3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	829a      	strh	r2, [r3, #20]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3342      	adds	r3, #66	@ 0x42
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	b21a      	sxth	r2, r3
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	82da      	strh	r2, [r3, #22]
        new_obj->ext_draw_pad = 0;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2200      	movs	r2, #0
 8004f18:	869a      	strh	r2, [r3, #52]	@ 0x34
        new_obj->ext_click_pad_ver = 0;
#endif

        /*Init realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = LV_ALIGN_CENTER;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        new_obj->realign.xofs         = 0;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2200      	movs	r2, #0
 8004f26:	879a      	strh	r2, [r3, #60]	@ 0x3c
        new_obj->realign.yofs         = 0;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        new_obj->realign.base         = NULL;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2200      	movs	r2, #0
 8004f32:	639a      	str	r2, [r3, #56]	@ 0x38
        new_obj->realign.auto_realign = 0;
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 8004f3a:	f36f 0300 	bfc	r3, #0, #1
 8004f3e:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
#endif
        /*Set appearance*/
        lv_theme_t * th = lv_theme_get_current();
 8004f42:	f015 fa17 	bl	801a374 <lv_theme_get_current>
 8004f46:	6138      	str	r0, [r7, #16]
        if(th) {
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <lv_obj_create+0x250>
            new_obj->style_p = th->style.panel;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f56:	e008      	b.n	8004f6a <lv_obj_create+0x256>
 8004f58:	200029dc 	.word	0x200029dc
 8004f5c:	08006a91 	.word	0x08006a91
 8004f60:	08006975 	.word	0x08006975
        } else {
            new_obj->style_p = &lv_style_plain_color;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	4aad      	ldr	r2, [pc, #692]	@ (800521c <lv_obj_create+0x508>)
 8004f68:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        /*Set the callbacks*/
        lv_obj_set_signal_cb(new_obj, lv_obj_signal);
 8004f6a:	49ad      	ldr	r1, [pc, #692]	@ (8005220 <lv_obj_create+0x50c>)
 8004f6c:	6978      	ldr	r0, [r7, #20]
 8004f6e:	f001 fa57 	bl	8006420 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_obj, lv_obj_design);
 8004f72:	49ac      	ldr	r1, [pc, #688]	@ (8005224 <lv_obj_create+0x510>)
 8004f74:	6978      	ldr	r0, [r7, #20]
 8004f76:	f001 fa60 	bl	800643a <lv_obj_set_design_cb>
        new_obj->event_cb = NULL;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	619a      	str	r2, [r3, #24]
        new_obj->ext_click_pad_ver = 0;
#endif

        /*Init. user date*/
#if LV_USE_USER_DATA
        memset(&new_obj->user_data, 0, sizeof(lv_obj_user_data_t));
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	3344      	adds	r3, #68	@ 0x44
 8004f84:	2204      	movs	r2, #4
 8004f86:	2100      	movs	r1, #0
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f016 fcaa 	bl	801b8e2 <memset>
#endif

#if LV_USE_GROUP
        new_obj->group_p = NULL;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2200      	movs	r2, #0
 8004f92:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif

        /*Set attributes*/
        new_obj->click        = 1;
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->drag         = 0;
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8004fa8:	f36f 0341 	bfc	r3, #1, #1
 8004fac:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->drag_dir     = LV_DRAG_DIR_ALL;
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	f892 3031 	ldrb.w	r3, [r2, #49]	@ 0x31
 8004fb6:	f043 0303 	orr.w	r3, r3, #3
 8004fba:	f882 3031 	strb.w	r3, [r2, #49]	@ 0x31
        new_obj->drag_throw   = 0;
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8004fc4:	f36f 0382 	bfc	r3, #2, #1
 8004fc8:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->drag_parent  = 0;
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8004fd2:	f36f 03c3 	bfc	r3, #3, #1
 8004fd6:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->hidden       = 0;
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8004fe0:	f36f 1304 	bfc	r3, #4, #1
 8004fe4:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->top          = 0;
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8004fee:	f36f 1345 	bfc	r3, #5, #1
 8004ff2:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->protect      = LV_PROTECT_NONE;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
        new_obj->opa_scale    = LV_OPA_COVER;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	22ff      	movs	r2, #255	@ 0xff
 8005002:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
        new_obj->opa_scale_en = 0;
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 800500c:	f36f 1386 	bfc	r3, #6, #1
 8005010:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->parent_event = 0;
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 800501a:	f36f 13c7 	bfc	r3, #7, #1
 800501e:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30

        new_obj->ext_attr = NULL;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2200      	movs	r2, #0
 8005026:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Copy the attributes if required*/
    if(copy != NULL) {
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 80e5 	beq.w	80051fa <lv_obj_create+0x4e6>
        lv_area_copy(&new_obj->coords, &copy->coords);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f103 0210 	add.w	r2, r3, #16
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	3310      	adds	r3, #16
 800503a:	4619      	mov	r1, r3
 800503c:	4610      	mov	r0, r2
 800503e:	f7ff fdff 	bl	8004c40 <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	@ 0x34
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	869a      	strh	r2, [r3, #52]	@ 0x34
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
#endif

        /*Set free data*/
#if LV_USE_USER_DATA
        memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	3344      	adds	r3, #68	@ 0x44
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	3244      	adds	r2, #68	@ 0x44
 8005054:	6812      	ldr	r2, [r2, #0]
 8005056:	601a      	str	r2, [r3, #0]
#endif
        /*Copy realign*/
#if LV_USE_OBJ_REALIGN
        new_obj->realign.align        = copy->realign.align;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        new_obj->realign.xofs         = copy->realign.xofs;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	879a      	strh	r2, [r3, #60]	@ 0x3c
        new_obj->realign.yofs         = copy->realign.yofs;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	@ 0x3e
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	87da      	strh	r2, [r3, #62]	@ 0x3e
        new_obj->realign.base         = copy->realign.base;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	639a      	str	r2, [r3, #56]	@ 0x38
        new_obj->realign.auto_realign = copy->realign.auto_realign;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005086:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800508a:	b2d9      	uxtb	r1, r3
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 8005092:	f361 0300 	bfi	r3, r1, #0, #1
 8005096:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
#endif

        /*Only copy the `event_cb`. `signal_cb` and `design_cb` will be copied the the derived
         * object type (e.g. `lv_btn`)*/
        new_obj->event_cb = copy->event_cb;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	619a      	str	r2, [r3, #24]

        /*Copy attributes*/
        new_obj->click        = copy->click;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80050a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80050ac:	b2d9      	uxtb	r1, r3
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 80050b4:	f361 0300 	bfi	r3, r1, #0, #1
 80050b8:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->drag         = copy->drag;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80050c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80050c6:	b2d9      	uxtb	r1, r3
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 80050ce:	f361 0341 	bfi	r3, r1, #1, #1
 80050d2:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->drag_dir     = copy->drag_dir;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80050dc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80050e0:	b2d9      	uxtb	r1, r3
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	f892 3031 	ldrb.w	r3, [r2, #49]	@ 0x31
 80050e8:	f361 0301 	bfi	r3, r1, #0, #2
 80050ec:	f882 3031 	strb.w	r3, [r2, #49]	@ 0x31
        new_obj->drag_throw   = copy->drag_throw;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80050f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80050fa:	b2d9      	uxtb	r1, r3
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8005102:	f361 0382 	bfi	r3, r1, #2, #1
 8005106:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->drag_parent  = copy->drag_parent;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005110:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005114:	b2d9      	uxtb	r1, r3
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 800511c:	f361 03c3 	bfi	r3, r1, #3, #1
 8005120:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->hidden       = copy->hidden;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800512a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800512e:	b2d9      	uxtb	r1, r3
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8005136:	f361 1304 	bfi	r3, r1, #4, #1
 800513a:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->top          = copy->top;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005144:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005148:	b2d9      	uxtb	r1, r3
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8005150:	f361 1345 	bfi	r3, r1, #5, #1
 8005154:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->parent_event = copy->parent_event;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800515e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005162:	b2d9      	uxtb	r1, r3
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 800516a:	f361 13c7 	bfi	r3, r1, #7, #1
 800516e:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30

        new_obj->opa_scale_en = copy->opa_scale_en;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005178:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800517c:	b2d9      	uxtb	r1, r3
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8005184:	f361 1386 	bfi	r3, r1, #6, #1
 8005188:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
        new_obj->protect      = copy->protect;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
        new_obj->opa_scale    = copy->opa_scale;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        new_obj->style_p = copy->style_p;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	629a      	str	r2, [r3, #40]	@ 0x28

#if LV_USE_GROUP
        /*Add to the same group*/
        if(copy->group_p != NULL) {
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <lv_obj_create+0x4ac>
            lv_group_add_obj(copy->group_p, new_obj);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b8:	6979      	ldr	r1, [r7, #20]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fd fb6a 	bl	8002894 <lv_group_add_obj>
        }
#endif

        /*Set the same coordinates for non screen objects*/
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
 80051c0:	6838      	ldr	r0, [r7, #0]
 80051c2:	f001 f9bf 	bl	8006544 <lv_obj_get_parent>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d011      	beq.n	80051f0 <lv_obj_create+0x4dc>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00e      	beq.n	80051f0 <lv_obj_create+0x4dc>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
 80051d2:	6838      	ldr	r0, [r7, #0]
 80051d4:	f001 f9ed 	bl	80065b2 <lv_obj_get_x>
 80051d8:	4603      	mov	r3, r0
 80051da:	461c      	mov	r4, r3
 80051dc:	6838      	ldr	r0, [r7, #0]
 80051de:	f001 fa01 	bl	80065e4 <lv_obj_get_y>
 80051e2:	4603      	mov	r3, r0
 80051e4:	461a      	mov	r2, r3
 80051e6:	4621      	mov	r1, r4
 80051e8:	6978      	ldr	r0, [r7, #20]
 80051ea:	f000 f9b6 	bl	800555a <lv_obj_set_pos>
 80051ee:	e004      	b.n	80051fa <lv_obj_create+0x4e6>
        } else {
            lv_obj_set_pos(new_obj, 0, 0);
 80051f0:	2200      	movs	r2, #0
 80051f2:	2100      	movs	r1, #0
 80051f4:	6978      	ldr	r0, [r7, #20]
 80051f6:	f000 f9b0 	bl	800555a <lv_obj_set_pos>

        LV_LOG_INFO("Object create ready");
    }

    /*Send a signal to the parent to notify it about the new child*/
    if(parent != NULL) {
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <lv_obj_create+0x4fe>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	2101      	movs	r1, #1
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	4798      	blx	r3

        /*Invalidate the area if not screen created*/
        lv_obj_invalidate(new_obj);
 800520c:	6978      	ldr	r0, [r7, #20]
 800520e:	f000 f8a5 	bl	800535c <lv_obj_invalidate>
    }

    return new_obj;
 8005212:	697b      	ldr	r3, [r7, #20]
}
 8005214:	4618      	mov	r0, r3
 8005216:	371c      	adds	r7, #28
 8005218:	46bd      	mov	sp, r7
 800521a:	bd90      	pop	{r4, r7, pc}
 800521c:	20002b08 	.word	0x20002b08
 8005220:	08006a91 	.word	0x08006a91
 8005224:	08006975 	.word	0x08006975

08005228 <lv_obj_del>:
 * Delete 'obj' and all of its children
 * @param obj pointer to an object to delete
 * @return LV_RES_INV because the object is deleted
 */
lv_res_t lv_obj_del(lv_obj_t * obj)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
    lv_obj_invalidate(obj);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f893 	bl	800535c <lv_obj_invalidate>

    /*Delete from the group*/
#if LV_USE_GROUP
    lv_group_t * group = lv_obj_get_group(obj);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f001 fb79 	bl	800692e <lv_obj_get_group>
 800523c:	6178      	str	r0, [r7, #20]
    if(group) lv_group_remove_obj(obj);
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <lv_obj_del+0x22>
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fd fb77 	bl	8002938 <lv_group_remove_obj>
#endif

        /*Remove the animations from this object*/
#if LV_USE_ANIMATION
    lv_anim_del(obj, NULL);
 800524a:	2100      	movs	r1, #0
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f009 fef9 	bl	800f044 <lv_anim_del>
#endif

    /*Recursively delete the children*/
    lv_obj_t * i;
    lv_obj_t * i_next;
    i = lv_ll_get_head(&(obj->child_ll));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3304      	adds	r3, #4
 8005256:	4618      	mov	r0, r3
 8005258:	f00a fe11 	bl	800fe7e <lv_ll_get_head>
 800525c:	61f8      	str	r0, [r7, #28]
    while(i != NULL) {
 800525e:	e00b      	b.n	8005278 <lv_obj_del+0x50>
        /*Get the next object before delete this*/
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3304      	adds	r3, #4
 8005264:	69f9      	ldr	r1, [r7, #28]
 8005266:	4618      	mov	r0, r3
 8005268:	f00a fe2d 	bl	800fec6 <lv_ll_get_next>
 800526c:	60b8      	str	r0, [r7, #8]

        /*Call the recursive del to the child too*/
        delete_children(i);
 800526e:	69f8      	ldr	r0, [r7, #28]
 8005270:	f001 fccb 	bl	8006c0a <delete_children>

        /*Set i to the next node*/
        i = i_next;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	61fb      	str	r3, [r7, #28]
    while(i != NULL) {
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f0      	bne.n	8005260 <lv_obj_del+0x38>
    }

    /*Let the user free the resources used in `LV_EVENT_DELETE`*/
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 800527e:	2200      	movs	r2, #0
 8005280:	2113      	movs	r1, #19
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f001 f83e 	bl	8006304 <lv_event_send>

    lv_event_mark_deleted(obj);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f001 fd3d 	bl	8006d08 <lv_event_mark_deleted>

    /*Remove the object from parent's children list*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f001 f958 	bl	8006544 <lv_obj_get_parent>
 8005294:	6138      	str	r0, [r7, #16]
    if(par == NULL) { /*It is a screen*/
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10a      	bne.n	80052b2 <lv_obj_del+0x8a>
        lv_disp_t * d = lv_obj_get_disp(obj);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f001 f917 	bl	80064d0 <lv_obj_get_disp>
 80052a2:	60f8      	str	r0, [r7, #12]
        lv_ll_rem(&d->scr_ll, obj);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3328      	adds	r3, #40	@ 0x28
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f00a fd39 	bl	800fd22 <lv_ll_rem>
 80052b0:	e005      	b.n	80052be <lv_obj_del+0x96>
    } else {
        lv_ll_rem(&(par->child_ll), obj);
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	3304      	adds	r3, #4
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f00a fd32 	bl	800fd22 <lv_ll_rem>
    }

    /* Reset all input devices if the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 80052be:	2000      	movs	r0, #0
 80052c0:	f009 fdde 	bl	800ee80 <lv_indev_get_next>
 80052c4:	61b8      	str	r0, [r7, #24]
    while(indev) {
 80052c6:	e026      	b.n	8005316 <lv_obj_del+0xee>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d004      	beq.n	80052dc <lv_obj_del+0xb4>
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d102      	bne.n	80052e2 <lv_obj_del+0xba>
            lv_indev_reset(indev);
 80052dc:	69b8      	ldr	r0, [r7, #24]
 80052de:	f7fd ff15 	bl	800310c <lv_indev_reset>
        }
        if(indev->proc.types.pointer.last_pressed == obj) {
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d102      	bne.n	80052f2 <lv_obj_del+0xca>
            indev->proc.types.pointer.last_pressed = NULL;
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2200      	movs	r2, #0
 80052f0:	641a      	str	r2, [r3, #64]	@ 0x40
        }

#if LV_USE_GROUP
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d108      	bne.n	800530e <lv_obj_del+0xe6>
 80052fc:	f7fd ffba 	bl	8003274 <lv_indev_get_obj_act>
 8005300:	4602      	mov	r2, r0
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4293      	cmp	r3, r2
 8005306:	d102      	bne.n	800530e <lv_obj_del+0xe6>
            lv_indev_reset(indev);
 8005308:	69b8      	ldr	r0, [r7, #24]
 800530a:	f7fd feff 	bl	800310c <lv_indev_reset>
        }
#endif
        indev = lv_indev_get_next(indev);
 800530e:	69b8      	ldr	r0, [r7, #24]
 8005310:	f009 fdb6 	bl	800ee80 <lv_indev_get_next>
 8005314:	61b8      	str	r0, [r7, #24]
    while(indev) {
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1d5      	bne.n	80052c8 <lv_obj_del+0xa0>
    }

    /* All children deleted.
     * Now clean up the object specific data*/
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	2200      	movs	r2, #0
 8005322:	2100      	movs	r1, #0
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4798      	blx	r3

    /*Delete the base objects*/
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532c:	2b00      	cmp	r3, #0
 800532e:	d004      	beq.n	800533a <lv_obj_del+0x112>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005334:	4618      	mov	r0, r3
 8005336:	f00a fefd 	bl	8010134 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f00a fefa 	bl	8010134 <lv_mem_free>

    /*Send a signal to the parent to notify it about the child delete*/
    if(par != NULL) {
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d005      	beq.n	8005352 <lv_obj_del+0x12a>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	2200      	movs	r2, #0
 800534c:	2101      	movs	r1, #1
 800534e:	6938      	ldr	r0, [r7, #16]
 8005350:	4798      	blx	r3
    }

    return LV_RES_INV;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3720      	adds	r7, #32
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <lv_obj_invalidate>:
/**
 * Mark the object as invalid therefore its current position will be redrawn by 'lv_refr_task'
 * @param obj pointer to an object
 */
void lv_obj_invalidate(const lv_obj_t * obj)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08a      	sub	sp, #40	@ 0x28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
    if(lv_obj_get_hidden(obj)) return;
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f001 fa19 	bl	800679c <lv_obj_get_hidden>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d17e      	bne.n	800546e <lv_obj_invalidate+0x112>

    /*Invalidate the object only if it belongs to the 'LV_GC_ROOT(_lv_act_scr)'*/
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f001 f899 	bl	80064a8 <lv_obj_get_screen>
 8005376:	61f8      	str	r0, [r7, #28]
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
 8005378:	69f8      	ldr	r0, [r7, #28]
 800537a:	f001 f8a9 	bl	80064d0 <lv_obj_get_disp>
 800537e:	61b8      	str	r0, [r7, #24]
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 8005380:	69b8      	ldr	r0, [r7, #24]
 8005382:	f7fd fa3e 	bl	8002802 <lv_disp_get_scr_act>
 8005386:	4602      	mov	r2, r0
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	4293      	cmp	r3, r2
 800538c:	d00d      	beq.n	80053aa <lv_obj_invalidate+0x4e>
 800538e:	69b8      	ldr	r0, [r7, #24]
 8005390:	f7fd fa4c 	bl	800282c <lv_disp_get_layer_top>
 8005394:	4602      	mov	r2, r0
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4293      	cmp	r3, r2
 800539a:	d006      	beq.n	80053aa <lv_obj_invalidate+0x4e>
       obj_scr == lv_disp_get_layer_sys(disp)) {
 800539c:	69b8      	ldr	r0, [r7, #24]
 800539e:	f7fd fa5a 	bl	8002856 <lv_disp_get_layer_sys>
 80053a2:	4602      	mov	r2, r0
    if(obj_scr == lv_disp_get_scr_act(disp) || obj_scr == lv_disp_get_layer_top(disp) ||
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d164      	bne.n	8005474 <lv_obj_invalidate+0x118>
        /*Truncate recursively to the parents*/
        lv_area_t area_trunc;
        lv_obj_t * par = lv_obj_get_parent(obj);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f001 f8ca 	bl	8006544 <lv_obj_get_parent>
 80053b0:	6278      	str	r0, [r7, #36]	@ 0x24
        bool union_ok  = true;
 80053b2:	2301      	movs	r3, #1
 80053b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        /*Start with the original coordinates*/
        lv_coord_t ext_size = obj->ext_draw_pad;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80053bc:	82fb      	strh	r3, [r7, #22]
        lv_area_copy(&area_trunc, &obj->coords);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f103 0210 	add.w	r2, r3, #16
 80053c4:	f107 030c 	add.w	r3, r7, #12
 80053c8:	4611      	mov	r1, r2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff fc38 	bl	8004c40 <lv_area_copy>
        area_trunc.x1 -= ext_size;
 80053d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	8afb      	ldrh	r3, [r7, #22]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	b29b      	uxth	r3, r3
 80053dc:	b21b      	sxth	r3, r3
 80053de:	81bb      	strh	r3, [r7, #12]
        area_trunc.y1 -= ext_size;
 80053e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	8afb      	ldrh	r3, [r7, #22]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	b21b      	sxth	r3, r3
 80053ee:	81fb      	strh	r3, [r7, #14]
        area_trunc.x2 += ext_size;
 80053f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	8afb      	ldrh	r3, [r7, #22]
 80053f8:	4413      	add	r3, r2
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	b21b      	sxth	r3, r3
 80053fe:	823b      	strh	r3, [r7, #16]
        area_trunc.y2 += ext_size;
 8005400:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005404:	b29a      	uxth	r2, r3
 8005406:	8afb      	ldrh	r3, [r7, #22]
 8005408:	4413      	add	r3, r2
 800540a:	b29b      	uxth	r3, r3
 800540c:	b21b      	sxth	r3, r3
 800540e:	827b      	strh	r3, [r7, #18]

        /*Check through all parents*/
        while(par != NULL) {
 8005410:	e01d      	b.n	800544e <lv_obj_invalidate+0xf2>
            union_ok = lv_area_intersect(&area_trunc, &area_trunc, &par->coords);
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	f103 0210 	add.w	r2, r3, #16
 8005418:	f107 010c 	add.w	r1, r7, #12
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	4618      	mov	r0, r3
 8005422:	f00a f89b 	bl	800f55c <lv_area_intersect>
 8005426:	4603      	mov	r3, r0
 8005428:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 800542c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005430:	f083 0301 	eor.w	r3, r3, #1
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10d      	bne.n	8005456 <lv_obj_invalidate+0xfa>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 800543a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800543c:	f001 f9ae 	bl	800679c <lv_obj_get_hidden>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d115      	bne.n	8005472 <lv_obj_invalidate+0x116>

            par = lv_obj_get_parent(par);
 8005446:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005448:	f001 f87c 	bl	8006544 <lv_obj_get_parent>
 800544c:	6278      	str	r0, [r7, #36]	@ 0x24
        while(par != NULL) {
 800544e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1de      	bne.n	8005412 <lv_obj_invalidate+0xb6>
 8005454:	e000      	b.n	8005458 <lv_obj_invalidate+0xfc>
            if(union_ok == false) break;       /*If no common parts with parent break;*/
 8005456:	bf00      	nop
        }

        if(union_ok) lv_inv_area(disp, &area_trunc);
 8005458:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800545c:	2b00      	cmp	r3, #0
 800545e:	d009      	beq.n	8005474 <lv_obj_invalidate+0x118>
 8005460:	f107 030c 	add.w	r3, r7, #12
 8005464:	4619      	mov	r1, r3
 8005466:	69b8      	ldr	r0, [r7, #24]
 8005468:	f001 fcac 	bl	8006dc4 <lv_inv_area>
 800546c:	e002      	b.n	8005474 <lv_obj_invalidate+0x118>
    if(lv_obj_get_hidden(obj)) return;
 800546e:	bf00      	nop
 8005470:	e000      	b.n	8005474 <lv_obj_invalidate+0x118>
            if(lv_obj_get_hidden(par)) return; /*If the parent is hidden then the child is hidden and won't be drawn*/
 8005472:	bf00      	nop
    }
}
 8005474:	3728      	adds	r7, #40	@ 0x28
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <lv_obj_set_parent>:
 * Set a new parent for an object. Its relative position will be the same.
 * @param obj pointer to an object. Can't be a screen.
 * @param parent pointer to the new parent object. (Can't be NULL)
 */
void lv_obj_set_parent(lv_obj_t * obj, lv_obj_t * parent)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
    if(obj->par == NULL) {
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d036      	beq.n	80054fa <lv_obj_set_parent+0x80>
        LV_LOG_WARN("Can't set the parent of a screen");
        return;
    }

    if(parent == NULL) {
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d035      	beq.n	80054fe <lv_obj_set_parent+0x84>
        LV_LOG_WARN("Can't set parent == NULL to an object");
        return;
    }

    lv_obj_invalidate(obj);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff ff62 	bl	800535c <lv_obj_invalidate>

    lv_point_t old_pos;
    old_pos.x = lv_obj_get_x(obj);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f001 f88a 	bl	80065b2 <lv_obj_get_x>
 800549e:	4603      	mov	r3, r0
 80054a0:	813b      	strh	r3, [r7, #8]
    old_pos.y = lv_obj_get_y(obj);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f001 f89e 	bl	80065e4 <lv_obj_get_y>
 80054a8:	4603      	mov	r3, r0
 80054aa:	817b      	strh	r3, [r7, #10]

    lv_obj_t * old_par = obj->par;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	60fb      	str	r3, [r7, #12]

    lv_ll_chg_list(&obj->par->child_ll, &parent->child_ll, obj, true);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	1d18      	adds	r0, r3, #4
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	1d19      	adds	r1, r3, #4
 80054bc:	2301      	movs	r3, #1
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	f00a fc88 	bl	800fdd4 <lv_ll_chg_list>
    obj->par = parent;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	601a      	str	r2, [r3, #0]
    lv_obj_set_pos(obj, old_pos.x, old_pos.y);
 80054ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80054ce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80054d2:	4619      	mov	r1, r3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f840 	bl	800555a <lv_obj_set_pos>

    /*Notify the original parent because one of its children is lost*/
    old_par->signal_cb(old_par, LV_SIGNAL_CHILD_CHG, NULL);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	2200      	movs	r2, #0
 80054e0:	2101      	movs	r1, #1
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	4798      	blx	r3

    /*Notify the new parent about the child*/
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	2101      	movs	r1, #1
 80054ee:	6838      	ldr	r0, [r7, #0]
 80054f0:	4798      	blx	r3

    lv_obj_invalidate(obj);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff ff32 	bl	800535c <lv_obj_invalidate>
 80054f8:	e002      	b.n	8005500 <lv_obj_set_parent+0x86>
        return;
 80054fa:	bf00      	nop
 80054fc:	e000      	b.n	8005500 <lv_obj_set_parent+0x86>
        return;
 80054fe:	bf00      	nop
}
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <lv_obj_move_foreground>:
/**
 * Move and object to the foreground
 * @param obj pointer to an object
 */
void lv_obj_move_foreground(lv_obj_t * obj)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
    lv_obj_t * parent = lv_obj_get_parent(obj);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f001 f818 	bl	8006544 <lv_obj_get_parent>
 8005514:	60f8      	str	r0, [r7, #12]

    /*Do nothing of already in the foreground*/
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3304      	adds	r3, #4
 800551a:	4618      	mov	r0, r3
 800551c:	f00a fcaf 	bl	800fe7e <lv_ll_get_head>
 8005520:	4602      	mov	r2, r0
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4293      	cmp	r3, r2
 8005526:	d014      	beq.n	8005552 <lv_obj_move_foreground+0x4c>

    lv_obj_invalidate(parent);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f7ff ff17 	bl	800535c <lv_obj_invalidate>

    lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1d18      	adds	r0, r3, #4
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	1d19      	adds	r1, r3, #4
 8005536:	2301      	movs	r3, #1
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	f00a fc4b 	bl	800fdd4 <lv_ll_chg_list>

    /*Notify the new parent about the child*/
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	2101      	movs	r1, #1
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	4798      	blx	r3

    lv_obj_invalidate(parent);
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f7ff ff06 	bl	800535c <lv_obj_invalidate>
 8005550:	e000      	b.n	8005554 <lv_obj_move_foreground+0x4e>
    if(lv_ll_get_head(&parent->child_ll) == obj) return;
 8005552:	bf00      	nop
}
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <lv_obj_set_pos>:
 * @param obj pointer to an object
 * @param x new distance from the left side of the parent
 * @param y new distance from the top of the parent
 */
void lv_obj_set_pos(lv_obj_t * obj, lv_coord_t x, lv_coord_t y)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b086      	sub	sp, #24
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	460b      	mov	r3, r1
 8005564:	807b      	strh	r3, [r7, #2]
 8005566:	4613      	mov	r3, r2
 8005568:	803b      	strh	r3, [r7, #0]
    /*Convert x and y to absolute coordinates*/
    lv_obj_t * par = obj->par;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	617b      	str	r3, [r7, #20]

    x = x + par->coords.x1;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005576:	b29a      	uxth	r2, r3
 8005578:	887b      	ldrh	r3, [r7, #2]
 800557a:	4413      	add	r3, r2
 800557c:	b29b      	uxth	r3, r3
 800557e:	807b      	strh	r3, [r7, #2]
    y = y + par->coords.y1;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005586:	b29a      	uxth	r2, r3
 8005588:	883b      	ldrh	r3, [r7, #0]
 800558a:	4413      	add	r3, r2
 800558c:	b29b      	uxth	r3, r3
 800558e:	803b      	strh	r3, [r7, #0]

    /*Calculate and set the movement*/
    lv_point_t diff;
    diff.x = x - obj->coords.x1;
 8005590:	887a      	ldrh	r2, [r7, #2]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005598:	b29b      	uxth	r3, r3
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	b29b      	uxth	r3, r3
 800559e:	b21b      	sxth	r3, r3
 80055a0:	823b      	strh	r3, [r7, #16]
    diff.y = y - obj->coords.y1;
 80055a2:	883a      	ldrh	r2, [r7, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	b21b      	sxth	r3, r3
 80055b2:	827b      	strh	r3, [r7, #18]

    /* Do nothing if the position is not changed */
    /* It is very important else recursive positioning can
     * occur without position change*/
    if(diff.x == 0 && diff.y == 0) return;
 80055b4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d103      	bne.n	80055c4 <lv_obj_set_pos+0x6a>
 80055bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d051      	beq.n	8005668 <lv_obj_set_pos+0x10e>

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fec9 	bl	800535c <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 80055ca:	f107 0308 	add.w	r3, r7, #8
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 ffdf 	bl	8006594 <lv_obj_get_coords>

    obj->coords.x1 += diff.x;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80055dc:	b29a      	uxth	r2, r3
 80055de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	4413      	add	r3, r2
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	b21a      	sxth	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	821a      	strh	r2, [r3, #16]
    obj->coords.y1 += diff.y;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80055f4:	b29a      	uxth	r2, r3
 80055f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	4413      	add	r3, r2
 80055fe:	b29b      	uxth	r3, r3
 8005600:	b21a      	sxth	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	825a      	strh	r2, [r3, #18]
    obj->coords.x2 += diff.x;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800560c:	b29a      	uxth	r2, r3
 800560e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005612:	b29b      	uxth	r3, r3
 8005614:	4413      	add	r3, r2
 8005616:	b29b      	uxth	r3, r3
 8005618:	b21a      	sxth	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	829a      	strh	r2, [r3, #20]
    obj->coords.y2 += diff.y;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005624:	b29a      	uxth	r2, r3
 8005626:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800562a:	b29b      	uxth	r3, r3
 800562c:	4413      	add	r3, r2
 800562e:	b29b      	uxth	r3, r3
 8005630:	b21a      	sxth	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	82da      	strh	r2, [r3, #22]

    refresh_children_position(obj, diff.x, diff.y);
 8005636:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800563a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 fa67 	bl	8006b14 <refresh_children_position>

    /*Inform the object about its new coordinates*/
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f107 0208 	add.w	r2, r7, #8
 800564e:	2102      	movs	r1, #2
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	4798      	blx	r3

    /*Send a signal to the parent too*/
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	2101      	movs	r1, #1
 800565c:	6978      	ldr	r0, [r7, #20]
 800565e:	4798      	blx	r3

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f7ff fe7b 	bl	800535c <lv_obj_invalidate>
 8005666:	e000      	b.n	800566a <lv_obj_set_pos+0x110>
    if(diff.x == 0 && diff.y == 0) return;
 8005668:	bf00      	nop
}
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <lv_obj_set_x>:
 * Set the x coordinate of a object
 * @param obj pointer to an object
 * @param x new distance from the left side from the parent
 */
void lv_obj_set_x(lv_obj_t * obj, lv_coord_t x)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	807b      	strh	r3, [r7, #2]
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 ffb1 	bl	80065e4 <lv_obj_get_y>
 8005682:	4603      	mov	r3, r0
 8005684:	461a      	mov	r2, r3
 8005686:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800568a:	4619      	mov	r1, r3
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff ff64 	bl	800555a <lv_obj_set_pos>
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <lv_obj_set_y>:
 * Set the y coordinate of a object
 * @param obj pointer to an object
 * @param y new distance from the top of the parent
 */
void lv_obj_set_y(lv_obj_t * obj, lv_coord_t y)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b082      	sub	sp, #8
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	460b      	mov	r3, r1
 80056a4:	807b      	strh	r3, [r7, #2]
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 ff83 	bl	80065b2 <lv_obj_get_x>
 80056ac:	4603      	mov	r3, r0
 80056ae:	4619      	mov	r1, r3
 80056b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056b4:	461a      	mov	r2, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7ff ff4f 	bl	800555a <lv_obj_set_pos>
}
 80056bc:	bf00      	nop
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <lv_obj_set_size>:
 * @param obj pointer to an object
 * @param w new width
 * @param h new height
 */
void lv_obj_set_size(lv_obj_t * obj, lv_coord_t w, lv_coord_t h)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	460b      	mov	r3, r1
 80056ce:	807b      	strh	r3, [r7, #2]
 80056d0:	4613      	mov	r3, r2
 80056d2:	803b      	strh	r3, [r7, #0]

    /* Do nothing if the size is not changed */
    /* It is very important else recursive resizing can
     * occur without size change*/
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 ff9e 	bl	8006616 <lv_obj_get_width>
 80056da:	4603      	mov	r3, r0
 80056dc:	461a      	mov	r2, r3
 80056de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d108      	bne.n	80056f8 <lv_obj_set_size+0x34>
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 ffa3 	bl	8006632 <lv_obj_get_height>
 80056ec:	4603      	mov	r3, r0
 80056ee:	461a      	mov	r2, r3
 80056f0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d05a      	beq.n	80057ae <lv_obj_set_size+0xea>
        return;
    }

    /*Invalidate the original area*/
    lv_obj_invalidate(obj);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff fe2f 	bl	800535c <lv_obj_invalidate>

    /*Save the original coordinates*/
    lv_area_t ori;
    lv_obj_get_coords(obj, &ori);
 80056fe:	f107 0308 	add.w	r3, r7, #8
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 ff45 	bl	8006594 <lv_obj_get_coords>

    /*Set the length and height*/
    obj->coords.x2 = obj->coords.x1 + w - 1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005710:	b29a      	uxth	r2, r3
 8005712:	887b      	ldrh	r3, [r7, #2]
 8005714:	4413      	add	r3, r2
 8005716:	b29b      	uxth	r3, r3
 8005718:	3b01      	subs	r3, #1
 800571a:	b29b      	uxth	r3, r3
 800571c:	b21a      	sxth	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	829a      	strh	r2, [r3, #20]
    obj->coords.y2 = obj->coords.y1 + h - 1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005728:	b29a      	uxth	r2, r3
 800572a:	883b      	ldrh	r3, [r7, #0]
 800572c:	4413      	add	r3, r2
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29b      	uxth	r3, r3
 8005734:	b21a      	sxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	82da      	strh	r2, [r3, #22]

    /*Send a signal to the object with its new coordinates*/
    obj->signal_cb(obj, LV_SIGNAL_CORD_CHG, &ori);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	f107 0208 	add.w	r2, r7, #8
 8005742:	2102      	movs	r1, #2
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	4798      	blx	r3

    /*Send a signal to the parent too*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fefb 	bl	8006544 <lv_obj_get_parent>
 800574e:	6138      	str	r0, [r7, #16]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <lv_obj_set_size+0x9e>
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	2101      	movs	r1, #1
 800575e:	6938      	ldr	r0, [r7, #16]
 8005760:	4798      	blx	r3

    /*Tell the children the parent's size has changed*/
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3304      	adds	r3, #4
 8005766:	4618      	mov	r0, r3
 8005768:	f00a fb89 	bl	800fe7e <lv_ll_get_head>
 800576c:	6178      	str	r0, [r7, #20]
 800576e:	e00c      	b.n	800578a <lv_obj_set_size+0xc6>
    {
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	2200      	movs	r2, #0
 8005776:	2103      	movs	r1, #3
 8005778:	6978      	ldr	r0, [r7, #20]
 800577a:	4798      	blx	r3
    LV_LL_READ(obj->child_ll, i)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3304      	adds	r3, #4
 8005780:	6979      	ldr	r1, [r7, #20]
 8005782:	4618      	mov	r0, r3
 8005784:	f00a fb9f 	bl	800fec6 <lv_ll_get_next>
 8005788:	6178      	str	r0, [r7, #20]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1ef      	bne.n	8005770 <lv_obj_set_size+0xac>
    }

    /*Invalidate the new area*/
    lv_obj_invalidate(obj);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff fde3 	bl	800535c <lv_obj_invalidate>

    /*Automatically realign the object if required*/
#if LV_USE_OBJ_REALIGN
    if(obj->realign.auto_realign) lv_obj_realign(obj);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d004      	beq.n	80057b0 <lv_obj_set_size+0xec>
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fca4 	bl	80060f4 <lv_obj_realign>
 80057ac:	e000      	b.n	80057b0 <lv_obj_set_size+0xec>
        return;
 80057ae:	bf00      	nop
#endif
}
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <lv_obj_set_width>:
 * Set the width of an object
 * @param obj pointer to an object
 * @param w new width
 */
void lv_obj_set_width(lv_obj_t * obj, lv_coord_t w)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b082      	sub	sp, #8
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	460b      	mov	r3, r1
 80057c0:	807b      	strh	r3, [r7, #2]
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 ff35 	bl	8006632 <lv_obj_get_height>
 80057c8:	4603      	mov	r3, r0
 80057ca:	461a      	mov	r2, r3
 80057cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057d0:	4619      	mov	r1, r3
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7ff ff76 	bl	80056c4 <lv_obj_set_size>
}
 80057d8:	bf00      	nop
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <lv_obj_set_height>:
 * Set the height of an object
 * @param obj pointer to an object
 * @param h new height
 */
void lv_obj_set_height(lv_obj_t * obj, lv_coord_t h)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	807b      	strh	r3, [r7, #2]
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 ff12 	bl	8006616 <lv_obj_get_width>
 80057f2:	4603      	mov	r3, r0
 80057f4:	4619      	mov	r1, r3
 80057f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057fa:	461a      	mov	r2, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff ff61 	bl	80056c4 <lv_obj_set_size>
}
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <lv_obj_align>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_mod x coordinate shift after alignment
 * @param y_mod y coordinate shift after alignment
 */
void lv_obj_align(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_mod, lv_coord_t y_mod)
{
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b089      	sub	sp, #36	@ 0x24
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	4611      	mov	r1, r2
 8005818:	461a      	mov	r2, r3
 800581a:	460b      	mov	r3, r1
 800581c:	71fb      	strb	r3, [r7, #7]
 800581e:	4613      	mov	r3, r2
 8005820:	80bb      	strh	r3, [r7, #4]
    lv_coord_t new_x = lv_obj_get_x(obj);
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 fec5 	bl	80065b2 <lv_obj_get_x>
 8005828:	4603      	mov	r3, r0
 800582a:	83fb      	strh	r3, [r7, #30]
    lv_coord_t new_y = lv_obj_get_y(obj);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 fed9 	bl	80065e4 <lv_obj_get_y>
 8005832:	4603      	mov	r3, r0
 8005834:	83bb      	strh	r3, [r7, #28]

    if(base == NULL) {
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d103      	bne.n	8005844 <lv_obj_align+0x38>
        base = lv_obj_get_parent(obj);
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 fe81 	bl	8006544 <lv_obj_get_parent>
 8005842:	60b8      	str	r0, [r7, #8]
    }

    switch(align) {
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	2b14      	cmp	r3, #20
 8005848:	f200 81f9 	bhi.w	8005c3e <lv_obj_align+0x432>
 800584c:	a201      	add	r2, pc, #4	@ (adr r2, 8005854 <lv_obj_align+0x48>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	080058a9 	.word	0x080058a9
 8005858:	080058ff 	.word	0x080058ff
 800585c:	08005909 	.word	0x08005909
 8005860:	08005939 	.word	0x08005939
 8005864:	08005959 	.word	0x08005959
 8005868:	08005979 	.word	0x08005979
 800586c:	080059bf 	.word	0x080059bf
 8005870:	080059f5 	.word	0x080059f5
 8005874:	08005a25 	.word	0x08005a25
 8005878:	08005a6b 	.word	0x08005a6b
 800587c:	08005a81 	.word	0x08005a81
 8005880:	08005abd 	.word	0x08005abd
 8005884:	08005ae9 	.word	0x08005ae9
 8005888:	08005af9 	.word	0x08005af9
 800588c:	08005b2f 	.word	0x08005b2f
 8005890:	08005b55 	.word	0x08005b55
 8005894:	08005b6b 	.word	0x08005b6b
 8005898:	08005ba7 	.word	0x08005ba7
 800589c:	08005bd3 	.word	0x08005bd3
 80058a0:	08005be3 	.word	0x08005be3
 80058a4:	08005c19 	.word	0x08005c19
        case LV_ALIGN_CENTER:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 80058a8:	68b8      	ldr	r0, [r7, #8]
 80058aa:	f000 feb4 	bl	8006616 <lv_obj_get_width>
 80058ae:	4603      	mov	r3, r0
 80058b0:	0fda      	lsrs	r2, r3, #31
 80058b2:	4413      	add	r3, r2
 80058b4:	105b      	asrs	r3, r3, #1
 80058b6:	b21b      	sxth	r3, r3
 80058b8:	b29c      	uxth	r4, r3
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 feab 	bl	8006616 <lv_obj_get_width>
 80058c0:	4603      	mov	r3, r0
 80058c2:	0fda      	lsrs	r2, r3, #31
 80058c4:	4413      	add	r3, r2
 80058c6:	105b      	asrs	r3, r3, #1
 80058c8:	b21b      	sxth	r3, r3
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	1ae3      	subs	r3, r4, r3
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80058d2:	68b8      	ldr	r0, [r7, #8]
 80058d4:	f000 fead 	bl	8006632 <lv_obj_get_height>
 80058d8:	4603      	mov	r3, r0
 80058da:	0fda      	lsrs	r2, r3, #31
 80058dc:	4413      	add	r3, r2
 80058de:	105b      	asrs	r3, r3, #1
 80058e0:	b21b      	sxth	r3, r3
 80058e2:	b29c      	uxth	r4, r3
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fea4 	bl	8006632 <lv_obj_get_height>
 80058ea:	4603      	mov	r3, r0
 80058ec:	0fda      	lsrs	r2, r3, #31
 80058ee:	4413      	add	r3, r2
 80058f0:	105b      	asrs	r3, r3, #1
 80058f2:	b21b      	sxth	r3, r3
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	1ae3      	subs	r3, r4, r3
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	83bb      	strh	r3, [r7, #28]
            break;
 80058fc:	e19f      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_IN_TOP_LEFT:
            new_x = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8005902:	2300      	movs	r3, #0
 8005904:	83bb      	strh	r3, [r7, #28]
            break;
 8005906:	e19a      	b.n	8005c3e <lv_obj_align+0x432>
        case LV_ALIGN_IN_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8005908:	68b8      	ldr	r0, [r7, #8]
 800590a:	f000 fe84 	bl	8006616 <lv_obj_get_width>
 800590e:	4603      	mov	r3, r0
 8005910:	0fda      	lsrs	r2, r3, #31
 8005912:	4413      	add	r3, r2
 8005914:	105b      	asrs	r3, r3, #1
 8005916:	b21b      	sxth	r3, r3
 8005918:	b29c      	uxth	r4, r3
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 fe7b 	bl	8006616 <lv_obj_get_width>
 8005920:	4603      	mov	r3, r0
 8005922:	0fda      	lsrs	r2, r3, #31
 8005924:	4413      	add	r3, r2
 8005926:	105b      	asrs	r3, r3, #1
 8005928:	b21b      	sxth	r3, r3
 800592a:	b29b      	uxth	r3, r3
 800592c:	1ae3      	subs	r3, r4, r3
 800592e:	b29b      	uxth	r3, r3
 8005930:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	83bb      	strh	r3, [r7, #28]
            break;
 8005936:	e182      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_IN_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8005938:	68b8      	ldr	r0, [r7, #8]
 800593a:	f000 fe6c 	bl	8006616 <lv_obj_get_width>
 800593e:	4603      	mov	r3, r0
 8005940:	b29c      	uxth	r4, r3
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 fe67 	bl	8006616 <lv_obj_get_width>
 8005948:	4603      	mov	r3, r0
 800594a:	b29b      	uxth	r3, r3
 800594c:	1ae3      	subs	r3, r4, r3
 800594e:	b29b      	uxth	r3, r3
 8005950:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	83bb      	strh	r3, [r7, #28]
            break;
 8005956:	e172      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            new_x = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 800595c:	68b8      	ldr	r0, [r7, #8]
 800595e:	f000 fe68 	bl	8006632 <lv_obj_get_height>
 8005962:	4603      	mov	r3, r0
 8005964:	b29c      	uxth	r4, r3
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 fe63 	bl	8006632 <lv_obj_get_height>
 800596c:	4603      	mov	r3, r0
 800596e:	b29b      	uxth	r3, r3
 8005970:	1ae3      	subs	r3, r4, r3
 8005972:	b29b      	uxth	r3, r3
 8005974:	83bb      	strh	r3, [r7, #28]
            break;
 8005976:	e162      	b.n	8005c3e <lv_obj_align+0x432>
        case LV_ALIGN_IN_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8005978:	68b8      	ldr	r0, [r7, #8]
 800597a:	f000 fe4c 	bl	8006616 <lv_obj_get_width>
 800597e:	4603      	mov	r3, r0
 8005980:	0fda      	lsrs	r2, r3, #31
 8005982:	4413      	add	r3, r2
 8005984:	105b      	asrs	r3, r3, #1
 8005986:	b21b      	sxth	r3, r3
 8005988:	b29c      	uxth	r4, r3
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 fe43 	bl	8006616 <lv_obj_get_width>
 8005990:	4603      	mov	r3, r0
 8005992:	0fda      	lsrs	r2, r3, #31
 8005994:	4413      	add	r3, r2
 8005996:	105b      	asrs	r3, r3, #1
 8005998:	b21b      	sxth	r3, r3
 800599a:	b29b      	uxth	r3, r3
 800599c:	1ae3      	subs	r3, r4, r3
 800599e:	b29b      	uxth	r3, r3
 80059a0:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80059a2:	68b8      	ldr	r0, [r7, #8]
 80059a4:	f000 fe45 	bl	8006632 <lv_obj_get_height>
 80059a8:	4603      	mov	r3, r0
 80059aa:	b29c      	uxth	r4, r3
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fe40 	bl	8006632 <lv_obj_get_height>
 80059b2:	4603      	mov	r3, r0
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	1ae3      	subs	r3, r4, r3
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	83bb      	strh	r3, [r7, #28]
            break;
 80059bc:	e13f      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 80059be:	68b8      	ldr	r0, [r7, #8]
 80059c0:	f000 fe29 	bl	8006616 <lv_obj_get_width>
 80059c4:	4603      	mov	r3, r0
 80059c6:	b29c      	uxth	r4, r3
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 fe24 	bl	8006616 <lv_obj_get_width>
 80059ce:	4603      	mov	r3, r0
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	1ae3      	subs	r3, r4, r3
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 80059d8:	68b8      	ldr	r0, [r7, #8]
 80059da:	f000 fe2a 	bl	8006632 <lv_obj_get_height>
 80059de:	4603      	mov	r3, r0
 80059e0:	b29c      	uxth	r4, r3
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 fe25 	bl	8006632 <lv_obj_get_height>
 80059e8:	4603      	mov	r3, r0
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	1ae3      	subs	r3, r4, r3
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	83bb      	strh	r3, [r7, #28]
            break;
 80059f2:	e124      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_IN_LEFT_MID:
            new_x = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 80059f8:	68b8      	ldr	r0, [r7, #8]
 80059fa:	f000 fe1a 	bl	8006632 <lv_obj_get_height>
 80059fe:	4603      	mov	r3, r0
 8005a00:	0fda      	lsrs	r2, r3, #31
 8005a02:	4413      	add	r3, r2
 8005a04:	105b      	asrs	r3, r3, #1
 8005a06:	b21b      	sxth	r3, r3
 8005a08:	b29c      	uxth	r4, r3
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fe11 	bl	8006632 <lv_obj_get_height>
 8005a10:	4603      	mov	r3, r0
 8005a12:	0fda      	lsrs	r2, r3, #31
 8005a14:	4413      	add	r3, r2
 8005a16:	105b      	asrs	r3, r3, #1
 8005a18:	b21b      	sxth	r3, r3
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	1ae3      	subs	r3, r4, r3
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	83bb      	strh	r3, [r7, #28]
            break;
 8005a22:	e10c      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_IN_RIGHT_MID:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8005a24:	68b8      	ldr	r0, [r7, #8]
 8005a26:	f000 fdf6 	bl	8006616 <lv_obj_get_width>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	b29c      	uxth	r4, r3
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 fdf1 	bl	8006616 <lv_obj_get_width>
 8005a34:	4603      	mov	r3, r0
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	1ae3      	subs	r3, r4, r3
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8005a3e:	68b8      	ldr	r0, [r7, #8]
 8005a40:	f000 fdf7 	bl	8006632 <lv_obj_get_height>
 8005a44:	4603      	mov	r3, r0
 8005a46:	0fda      	lsrs	r2, r3, #31
 8005a48:	4413      	add	r3, r2
 8005a4a:	105b      	asrs	r3, r3, #1
 8005a4c:	b21b      	sxth	r3, r3
 8005a4e:	b29c      	uxth	r4, r3
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fdee 	bl	8006632 <lv_obj_get_height>
 8005a56:	4603      	mov	r3, r0
 8005a58:	0fda      	lsrs	r2, r3, #31
 8005a5a:	4413      	add	r3, r2
 8005a5c:	105b      	asrs	r3, r3, #1
 8005a5e:	b21b      	sxth	r3, r3
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	1ae3      	subs	r3, r4, r3
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	83bb      	strh	r3, [r7, #28]
            break;
 8005a68:	e0e9      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_TOP_LEFT:
            new_x = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	83fb      	strh	r3, [r7, #30]
            new_y = -lv_obj_get_height(obj);
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f000 fddf 	bl	8006632 <lv_obj_get_height>
 8005a74:	4603      	mov	r3, r0
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	425b      	negs	r3, r3
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	83bb      	strh	r3, [r7, #28]
            break;
 8005a7e:	e0de      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8005a80:	68b8      	ldr	r0, [r7, #8]
 8005a82:	f000 fdc8 	bl	8006616 <lv_obj_get_width>
 8005a86:	4603      	mov	r3, r0
 8005a88:	0fda      	lsrs	r2, r3, #31
 8005a8a:	4413      	add	r3, r2
 8005a8c:	105b      	asrs	r3, r3, #1
 8005a8e:	b21b      	sxth	r3, r3
 8005a90:	b29c      	uxth	r4, r3
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f000 fdbf 	bl	8006616 <lv_obj_get_width>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	0fda      	lsrs	r2, r3, #31
 8005a9c:	4413      	add	r3, r2
 8005a9e:	105b      	asrs	r3, r3, #1
 8005aa0:	b21b      	sxth	r3, r3
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	1ae3      	subs	r3, r4, r3
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	83fb      	strh	r3, [r7, #30]
            new_y = -lv_obj_get_height(obj);
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 fdc1 	bl	8006632 <lv_obj_get_height>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	425b      	negs	r3, r3
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	83bb      	strh	r3, [r7, #28]
            break;
 8005aba:	e0c0      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8005abc:	68b8      	ldr	r0, [r7, #8]
 8005abe:	f000 fdaa 	bl	8006616 <lv_obj_get_width>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	b29c      	uxth	r4, r3
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fda5 	bl	8006616 <lv_obj_get_width>
 8005acc:	4603      	mov	r3, r0
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	1ae3      	subs	r3, r4, r3
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	83fb      	strh	r3, [r7, #30]
            new_y = -lv_obj_get_height(obj);
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 fdab 	bl	8006632 <lv_obj_get_height>
 8005adc:	4603      	mov	r3, r0
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	425b      	negs	r3, r3
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	83bb      	strh	r3, [r7, #28]
            break;
 8005ae6:	e0aa      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            new_x = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base);
 8005aec:	68b8      	ldr	r0, [r7, #8]
 8005aee:	f000 fda0 	bl	8006632 <lv_obj_get_height>
 8005af2:	4603      	mov	r3, r0
 8005af4:	83bb      	strh	r3, [r7, #28]
            break;
 8005af6:	e0a2      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - lv_obj_get_width(obj) / 2;
 8005af8:	68b8      	ldr	r0, [r7, #8]
 8005afa:	f000 fd8c 	bl	8006616 <lv_obj_get_width>
 8005afe:	4603      	mov	r3, r0
 8005b00:	0fda      	lsrs	r2, r3, #31
 8005b02:	4413      	add	r3, r2
 8005b04:	105b      	asrs	r3, r3, #1
 8005b06:	b21b      	sxth	r3, r3
 8005b08:	b29c      	uxth	r4, r3
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fd83 	bl	8006616 <lv_obj_get_width>
 8005b10:	4603      	mov	r3, r0
 8005b12:	0fda      	lsrs	r2, r3, #31
 8005b14:	4413      	add	r3, r2
 8005b16:	105b      	asrs	r3, r3, #1
 8005b18:	b21b      	sxth	r3, r3
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	1ae3      	subs	r3, r4, r3
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base);
 8005b22:	68b8      	ldr	r0, [r7, #8]
 8005b24:	f000 fd85 	bl	8006632 <lv_obj_get_height>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	83bb      	strh	r3, [r7, #28]
            break;
 8005b2c:	e087      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - lv_obj_get_width(obj);
 8005b2e:	68b8      	ldr	r0, [r7, #8]
 8005b30:	f000 fd71 	bl	8006616 <lv_obj_get_width>
 8005b34:	4603      	mov	r3, r0
 8005b36:	b29c      	uxth	r4, r3
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fd6c 	bl	8006616 <lv_obj_get_width>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	1ae3      	subs	r3, r4, r3
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base);
 8005b48:	68b8      	ldr	r0, [r7, #8]
 8005b4a:	f000 fd72 	bl	8006632 <lv_obj_get_height>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	83bb      	strh	r3, [r7, #28]
            break;
 8005b52:	e074      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_LEFT_TOP:
            new_x = -lv_obj_get_width(obj);
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 fd5e 	bl	8006616 <lv_obj_get_width>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	425b      	negs	r3, r3
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	83bb      	strh	r3, [r7, #28]
            break;
 8005b68:	e069      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_LEFT_MID:
            new_x = -lv_obj_get_width(obj);
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 fd53 	bl	8006616 <lv_obj_get_width>
 8005b70:	4603      	mov	r3, r0
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	425b      	negs	r3, r3
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8005b7a:	68b8      	ldr	r0, [r7, #8]
 8005b7c:	f000 fd59 	bl	8006632 <lv_obj_get_height>
 8005b80:	4603      	mov	r3, r0
 8005b82:	0fda      	lsrs	r2, r3, #31
 8005b84:	4413      	add	r3, r2
 8005b86:	105b      	asrs	r3, r3, #1
 8005b88:	b21b      	sxth	r3, r3
 8005b8a:	b29c      	uxth	r4, r3
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fd50 	bl	8006632 <lv_obj_get_height>
 8005b92:	4603      	mov	r3, r0
 8005b94:	0fda      	lsrs	r2, r3, #31
 8005b96:	4413      	add	r3, r2
 8005b98:	105b      	asrs	r3, r3, #1
 8005b9a:	b21b      	sxth	r3, r3
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	1ae3      	subs	r3, r4, r3
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	83bb      	strh	r3, [r7, #28]
            break;
 8005ba4:	e04b      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            new_x = -lv_obj_get_width(obj);
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 fd35 	bl	8006616 <lv_obj_get_width>
 8005bac:	4603      	mov	r3, r0
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	425b      	negs	r3, r3
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8005bb6:	68b8      	ldr	r0, [r7, #8]
 8005bb8:	f000 fd3b 	bl	8006632 <lv_obj_get_height>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	b29c      	uxth	r4, r3
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 fd36 	bl	8006632 <lv_obj_get_height>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	1ae3      	subs	r3, r4, r3
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	83bb      	strh	r3, [r7, #28]
            break;
 8005bd0:	e035      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_RIGHT_TOP:
            new_x = lv_obj_get_width(base);
 8005bd2:	68b8      	ldr	r0, [r7, #8]
 8005bd4:	f000 fd1f 	bl	8006616 <lv_obj_get_width>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	83fb      	strh	r3, [r7, #30]
            new_y = 0;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	83bb      	strh	r3, [r7, #28]
            break;
 8005be0:	e02d      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_RIGHT_MID:
            new_x = lv_obj_get_width(base);
 8005be2:	68b8      	ldr	r0, [r7, #8]
 8005be4:	f000 fd17 	bl	8006616 <lv_obj_get_width>
 8005be8:	4603      	mov	r3, r0
 8005bea:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) / 2 - lv_obj_get_height(obj) / 2;
 8005bec:	68b8      	ldr	r0, [r7, #8]
 8005bee:	f000 fd20 	bl	8006632 <lv_obj_get_height>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	0fda      	lsrs	r2, r3, #31
 8005bf6:	4413      	add	r3, r2
 8005bf8:	105b      	asrs	r3, r3, #1
 8005bfa:	b21b      	sxth	r3, r3
 8005bfc:	b29c      	uxth	r4, r3
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 fd17 	bl	8006632 <lv_obj_get_height>
 8005c04:	4603      	mov	r3, r0
 8005c06:	0fda      	lsrs	r2, r3, #31
 8005c08:	4413      	add	r3, r2
 8005c0a:	105b      	asrs	r3, r3, #1
 8005c0c:	b21b      	sxth	r3, r3
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	1ae3      	subs	r3, r4, r3
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	83bb      	strh	r3, [r7, #28]
            break;
 8005c16:	e012      	b.n	8005c3e <lv_obj_align+0x432>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            new_x = lv_obj_get_width(base);
 8005c18:	68b8      	ldr	r0, [r7, #8]
 8005c1a:	f000 fcfc 	bl	8006616 <lv_obj_get_width>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	83fb      	strh	r3, [r7, #30]
            new_y = lv_obj_get_height(base) - lv_obj_get_height(obj);
 8005c22:	68b8      	ldr	r0, [r7, #8]
 8005c24:	f000 fd05 	bl	8006632 <lv_obj_get_height>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	b29c      	uxth	r4, r3
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fd00 	bl	8006632 <lv_obj_get_height>
 8005c32:	4603      	mov	r3, r0
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	1ae3      	subs	r3, r4, r3
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	83bb      	strh	r3, [r7, #28]
            break;
 8005c3c:	bf00      	nop
    }

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 fc80 	bl	8006544 <lv_obj_get_parent>
 8005c44:	61b8      	str	r0, [r7, #24]
    lv_coord_t base_abs_x = base->coords.x1;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	8a1b      	ldrh	r3, [r3, #16]
 8005c4a:	82fb      	strh	r3, [r7, #22]
    lv_coord_t base_abs_y = base->coords.y1;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	8a5b      	ldrh	r3, [r3, #18]
 8005c50:	82bb      	strh	r3, [r7, #20]
    lv_coord_t par_abs_x  = par->coords.x1;
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	8a1b      	ldrh	r3, [r3, #16]
 8005c56:	827b      	strh	r3, [r7, #18]
    lv_coord_t par_abs_y  = par->coords.y1;
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	8a5b      	ldrh	r3, [r3, #18]
 8005c5c:	823b      	strh	r3, [r7, #16]
    new_x += x_mod + base_abs_x;
 8005c5e:	88ba      	ldrh	r2, [r7, #4]
 8005c60:	8afb      	ldrh	r3, [r7, #22]
 8005c62:	4413      	add	r3, r2
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	8bfb      	ldrh	r3, [r7, #30]
 8005c68:	4413      	add	r3, r2
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	83fb      	strh	r3, [r7, #30]
    new_y += y_mod + base_abs_y;
 8005c6e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005c70:	8abb      	ldrh	r3, [r7, #20]
 8005c72:	4413      	add	r3, r2
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	8bbb      	ldrh	r3, [r7, #28]
 8005c78:	4413      	add	r3, r2
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	83bb      	strh	r3, [r7, #28]
    new_x -= par_abs_x;
 8005c7e:	8bfa      	ldrh	r2, [r7, #30]
 8005c80:	8a7b      	ldrh	r3, [r7, #18]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	83fb      	strh	r3, [r7, #30]
    new_y -= par_abs_y;
 8005c88:	8bba      	ldrh	r2, [r7, #28]
 8005c8a:	8a3b      	ldrh	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	83bb      	strh	r3, [r7, #28]

    lv_obj_set_pos(obj, new_x, new_y);
 8005c92:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005c96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f7ff fc5c 	bl	800555a <lv_obj_set_pos>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	79fa      	ldrb	r2, [r7, #7]
 8005ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    obj->realign.xofs        = x_mod;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	88ba      	ldrh	r2, [r7, #4]
 8005cae:	879a      	strh	r2, [r3, #60]	@ 0x3c
    obj->realign.yofs        = y_mod;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8005cb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    obj->realign.base        = base;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	639a      	str	r2, [r3, #56]	@ 0x38
    obj->realign.origo_align = 0;
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 8005cc2:	f36f 0341 	bfc	r3, #1, #1
 8005cc6:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
#endif
}
 8005cca:	bf00      	nop
 8005ccc:	3724      	adds	r7, #36	@ 0x24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd90      	pop	{r4, r7, pc}
 8005cd2:	bf00      	nop

08005cd4 <lv_obj_align_origo>:
 * @param align type of alignment (see 'lv_align_t' enum)
 * @param x_mod x coordinate shift after alignment
 * @param y_mod y coordinate shift after alignment
 */
void lv_obj_align_origo(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, lv_coord_t x_mod, lv_coord_t y_mod)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08a      	sub	sp, #40	@ 0x28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	4611      	mov	r1, r2
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	71fb      	strb	r3, [r7, #7]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	80bb      	strh	r3, [r7, #4]
    lv_coord_t new_x = lv_obj_get_x(obj);
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 fc61 	bl	80065b2 <lv_obj_get_x>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    lv_coord_t new_y = lv_obj_get_y(obj);
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 fc75 	bl	80065e4 <lv_obj_get_y>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	84bb      	strh	r3, [r7, #36]	@ 0x24

    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fc89 	bl	8006616 <lv_obj_get_width>
 8005d04:	4603      	mov	r3, r0
 8005d06:	0fda      	lsrs	r2, r3, #31
 8005d08:	4413      	add	r3, r2
 8005d0a:	105b      	asrs	r3, r3, #1
 8005d0c:	847b      	strh	r3, [r7, #34]	@ 0x22
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 fc8f 	bl	8006632 <lv_obj_get_height>
 8005d14:	4603      	mov	r3, r0
 8005d16:	0fda      	lsrs	r2, r3, #31
 8005d18:	4413      	add	r3, r2
 8005d1a:	105b      	asrs	r3, r3, #1
 8005d1c:	843b      	strh	r3, [r7, #32]

    if(base == NULL) {
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <lv_obj_align_origo+0x58>
        base = lv_obj_get_parent(obj);
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 fc0d 	bl	8006544 <lv_obj_get_parent>
 8005d2a:	60b8      	str	r0, [r7, #8]
    }

    switch(align) {
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
 8005d2e:	2b14      	cmp	r3, #20
 8005d30:	f200 8195 	bhi.w	800605e <lv_obj_align_origo+0x38a>
 8005d34:	a201      	add	r2, pc, #4	@ (adr r2, 8005d3c <lv_obj_align_origo+0x68>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005d91 	.word	0x08005d91
 8005d40:	08005dc7 	.word	0x08005dc7
 8005d44:	08005dd9 	.word	0x08005dd9
 8005d48:	08005dfd 	.word	0x08005dfd
 8005d4c:	08005e19 	.word	0x08005e19
 8005d50:	08005e35 	.word	0x08005e35
 8005d54:	08005e63 	.word	0x08005e63
 8005d58:	08005e89 	.word	0x08005e89
 8005d5c:	08005ead 	.word	0x08005ead
 8005d60:	08005edb 	.word	0x08005edb
 8005d64:	08005eed 	.word	0x08005eed
 8005d68:	08005f11 	.word	0x08005f11
 8005d6c:	08005f2d 	.word	0x08005f2d
 8005d70:	08005f49 	.word	0x08005f49
 8005d74:	08005f77 	.word	0x08005f77
 8005d78:	08005f9d 	.word	0x08005f9d
 8005d7c:	08005faf 	.word	0x08005faf
 8005d80:	08005fd3 	.word	0x08005fd3
 8005d84:	08005fef 	.word	0x08005fef
 8005d88:	0800600b 	.word	0x0800600b
 8005d8c:	08006039 	.word	0x08006039
        case LV_ALIGN_CENTER:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8005d90:	68b8      	ldr	r0, [r7, #8]
 8005d92:	f000 fc40 	bl	8006616 <lv_obj_get_width>
 8005d96:	4603      	mov	r3, r0
 8005d98:	0fda      	lsrs	r2, r3, #31
 8005d9a:	4413      	add	r3, r2
 8005d9c:	105b      	asrs	r3, r3, #1
 8005d9e:	b21b      	sxth	r3, r3
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8005daa:	68b8      	ldr	r0, [r7, #8]
 8005dac:	f000 fc41 	bl	8006632 <lv_obj_get_height>
 8005db0:	4603      	mov	r3, r0
 8005db2:	0fda      	lsrs	r2, r3, #31
 8005db4:	4413      	add	r3, r2
 8005db6:	105b      	asrs	r3, r3, #1
 8005db8:	b21b      	sxth	r3, r3
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	8c3b      	ldrh	r3, [r7, #32]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005dc4:	e14b      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_TOP_LEFT:
            new_x = -obj_w_half;
 8005dc6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005dc8:	425b      	negs	r3, r3
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = -obj_h_half;
 8005dce:	8c3b      	ldrh	r3, [r7, #32]
 8005dd0:	425b      	negs	r3, r3
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005dd6:	e142      	b.n	800605e <lv_obj_align_origo+0x38a>
        case LV_ALIGN_IN_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8005dd8:	68b8      	ldr	r0, [r7, #8]
 8005dda:	f000 fc1c 	bl	8006616 <lv_obj_get_width>
 8005dde:	4603      	mov	r3, r0
 8005de0:	0fda      	lsrs	r2, r3, #31
 8005de2:	4413      	add	r3, r2
 8005de4:	105b      	asrs	r3, r3, #1
 8005de6:	b21b      	sxth	r3, r3
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = -obj_h_half;
 8005df2:	8c3b      	ldrh	r3, [r7, #32]
 8005df4:	425b      	negs	r3, r3
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005dfa:	e130      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8005dfc:	68b8      	ldr	r0, [r7, #8]
 8005dfe:	f000 fc0a 	bl	8006616 <lv_obj_get_width>
 8005e02:	4603      	mov	r3, r0
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = -obj_h_half;
 8005e0e:	8c3b      	ldrh	r3, [r7, #32]
 8005e10:	425b      	negs	r3, r3
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005e16:	e122      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_BOTTOM_LEFT:
            new_x = -obj_w_half;
 8005e18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e1a:	425b      	negs	r3, r3
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8005e20:	68b8      	ldr	r0, [r7, #8]
 8005e22:	f000 fc06 	bl	8006632 <lv_obj_get_height>
 8005e26:	4603      	mov	r3, r0
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	8c3b      	ldrh	r3, [r7, #32]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005e32:	e114      	b.n	800605e <lv_obj_align_origo+0x38a>
        case LV_ALIGN_IN_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8005e34:	68b8      	ldr	r0, [r7, #8]
 8005e36:	f000 fbee 	bl	8006616 <lv_obj_get_width>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	0fda      	lsrs	r2, r3, #31
 8005e3e:	4413      	add	r3, r2
 8005e40:	105b      	asrs	r3, r3, #1
 8005e42:	b21b      	sxth	r3, r3
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8005e4e:	68b8      	ldr	r0, [r7, #8]
 8005e50:	f000 fbef 	bl	8006632 <lv_obj_get_height>
 8005e54:	4603      	mov	r3, r0
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	8c3b      	ldrh	r3, [r7, #32]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005e60:	e0fd      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8005e62:	68b8      	ldr	r0, [r7, #8]
 8005e64:	f000 fbd7 	bl	8006616 <lv_obj_get_width>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8005e74:	68b8      	ldr	r0, [r7, #8]
 8005e76:	f000 fbdc 	bl	8006632 <lv_obj_get_height>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	8c3b      	ldrh	r3, [r7, #32]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005e86:	e0ea      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_LEFT_MID:
            new_x = -obj_w_half;
 8005e88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e8a:	425b      	negs	r3, r3
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8005e90:	68b8      	ldr	r0, [r7, #8]
 8005e92:	f000 fbce 	bl	8006632 <lv_obj_get_height>
 8005e96:	4603      	mov	r3, r0
 8005e98:	0fda      	lsrs	r2, r3, #31
 8005e9a:	4413      	add	r3, r2
 8005e9c:	105b      	asrs	r3, r3, #1
 8005e9e:	b21b      	sxth	r3, r3
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	8c3b      	ldrh	r3, [r7, #32]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005eaa:	e0d8      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_IN_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8005eac:	68b8      	ldr	r0, [r7, #8]
 8005eae:	f000 fbb2 	bl	8006616 <lv_obj_get_width>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8005ebe:	68b8      	ldr	r0, [r7, #8]
 8005ec0:	f000 fbb7 	bl	8006632 <lv_obj_get_height>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	0fda      	lsrs	r2, r3, #31
 8005ec8:	4413      	add	r3, r2
 8005eca:	105b      	asrs	r3, r3, #1
 8005ecc:	b21b      	sxth	r3, r3
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	8c3b      	ldrh	r3, [r7, #32]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005ed8:	e0c1      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_TOP_LEFT:
            new_x = -obj_w_half;
 8005eda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005edc:	425b      	negs	r3, r3
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = -obj_h_half;
 8005ee2:	8c3b      	ldrh	r3, [r7, #32]
 8005ee4:	425b      	negs	r3, r3
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005eea:	e0b8      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_TOP_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8005eec:	68b8      	ldr	r0, [r7, #8]
 8005eee:	f000 fb92 	bl	8006616 <lv_obj_get_width>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	0fda      	lsrs	r2, r3, #31
 8005ef6:	4413      	add	r3, r2
 8005ef8:	105b      	asrs	r3, r3, #1
 8005efa:	b21b      	sxth	r3, r3
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = -obj_h_half;
 8005f06:	8c3b      	ldrh	r3, [r7, #32]
 8005f08:	425b      	negs	r3, r3
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005f0e:	e0a6      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_TOP_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8005f10:	68b8      	ldr	r0, [r7, #8]
 8005f12:	f000 fb80 	bl	8006616 <lv_obj_get_width>
 8005f16:	4603      	mov	r3, r0
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = -obj_h_half;
 8005f22:	8c3b      	ldrh	r3, [r7, #32]
 8005f24:	425b      	negs	r3, r3
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005f2a:	e098      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_BOTTOM_LEFT:
            new_x = -obj_w_half;
 8005f2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f2e:	425b      	negs	r3, r3
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8005f34:	68b8      	ldr	r0, [r7, #8]
 8005f36:	f000 fb7c 	bl	8006632 <lv_obj_get_height>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	8c3b      	ldrh	r3, [r7, #32]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005f46:	e08a      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_BOTTOM_MID:
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
 8005f48:	68b8      	ldr	r0, [r7, #8]
 8005f4a:	f000 fb64 	bl	8006616 <lv_obj_get_width>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	0fda      	lsrs	r2, r3, #31
 8005f52:	4413      	add	r3, r2
 8005f54:	105b      	asrs	r3, r3, #1
 8005f56:	b21b      	sxth	r3, r3
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8005f62:	68b8      	ldr	r0, [r7, #8]
 8005f64:	f000 fb65 	bl	8006632 <lv_obj_get_height>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	8c3b      	ldrh	r3, [r7, #32]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005f74:	e073      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_BOTTOM_RIGHT:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8005f76:	68b8      	ldr	r0, [r7, #8]
 8005f78:	f000 fb4d 	bl	8006616 <lv_obj_get_width>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8005f88:	68b8      	ldr	r0, [r7, #8]
 8005f8a:	f000 fb52 	bl	8006632 <lv_obj_get_height>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	8c3b      	ldrh	r3, [r7, #32]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005f9a:	e060      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_LEFT_TOP:
            new_x = -obj_w_half;
 8005f9c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f9e:	425b      	negs	r3, r3
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = -obj_h_half;
 8005fa4:	8c3b      	ldrh	r3, [r7, #32]
 8005fa6:	425b      	negs	r3, r3
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005fac:	e057      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_LEFT_MID:
            new_x = -obj_w_half;
 8005fae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005fb0:	425b      	negs	r3, r3
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 8005fb6:	68b8      	ldr	r0, [r7, #8]
 8005fb8:	f000 fb3b 	bl	8006632 <lv_obj_get_height>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	0fda      	lsrs	r2, r3, #31
 8005fc0:	4413      	add	r3, r2
 8005fc2:	105b      	asrs	r3, r3, #1
 8005fc4:	b21b      	sxth	r3, r3
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	8c3b      	ldrh	r3, [r7, #32]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005fd0:	e045      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_LEFT_BOTTOM:
            new_x = -obj_w_half;
 8005fd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005fd4:	425b      	negs	r3, r3
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 8005fda:	68b8      	ldr	r0, [r7, #8]
 8005fdc:	f000 fb29 	bl	8006632 <lv_obj_get_height>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	8c3b      	ldrh	r3, [r7, #32]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8005fec:	e037      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_RIGHT_TOP:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8005fee:	68b8      	ldr	r0, [r7, #8]
 8005ff0:	f000 fb11 	bl	8006616 <lv_obj_get_width>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = -obj_h_half;
 8006000:	8c3b      	ldrh	r3, [r7, #32]
 8006002:	425b      	negs	r3, r3
 8006004:	b29b      	uxth	r3, r3
 8006006:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8006008:	e029      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_RIGHT_MID:
            new_x = lv_obj_get_width(base) - obj_w_half;
 800600a:	68b8      	ldr	r0, [r7, #8]
 800600c:	f000 fb03 	bl	8006616 <lv_obj_get_width>
 8006010:	4603      	mov	r3, r0
 8006012:	b29a      	uxth	r2, r3
 8006014:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	b29b      	uxth	r3, r3
 800601a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
 800601c:	68b8      	ldr	r0, [r7, #8]
 800601e:	f000 fb08 	bl	8006632 <lv_obj_get_height>
 8006022:	4603      	mov	r3, r0
 8006024:	0fda      	lsrs	r2, r3, #31
 8006026:	4413      	add	r3, r2
 8006028:	105b      	asrs	r3, r3, #1
 800602a:	b21b      	sxth	r3, r3
 800602c:	b29a      	uxth	r2, r3
 800602e:	8c3b      	ldrh	r3, [r7, #32]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	b29b      	uxth	r3, r3
 8006034:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 8006036:	e012      	b.n	800605e <lv_obj_align_origo+0x38a>

        case LV_ALIGN_OUT_RIGHT_BOTTOM:
            new_x = lv_obj_get_width(base) - obj_w_half;
 8006038:	68b8      	ldr	r0, [r7, #8]
 800603a:	f000 faec 	bl	8006616 <lv_obj_get_width>
 800603e:	4603      	mov	r3, r0
 8006040:	b29a      	uxth	r2, r3
 8006042:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	b29b      	uxth	r3, r3
 8006048:	84fb      	strh	r3, [r7, #38]	@ 0x26
            new_y = lv_obj_get_height(base) - obj_h_half;
 800604a:	68b8      	ldr	r0, [r7, #8]
 800604c:	f000 faf1 	bl	8006632 <lv_obj_get_height>
 8006050:	4603      	mov	r3, r0
 8006052:	b29a      	uxth	r2, r3
 8006054:	8c3b      	ldrh	r3, [r7, #32]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	b29b      	uxth	r3, r3
 800605a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            break;
 800605c:	bf00      	nop
    }

    /*Bring together the coordination system of base and obj*/
    lv_obj_t * par        = lv_obj_get_parent(obj);
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 fa70 	bl	8006544 <lv_obj_get_parent>
 8006064:	61f8      	str	r0, [r7, #28]
    lv_coord_t base_abs_x = base->coords.x1;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	8a1b      	ldrh	r3, [r3, #16]
 800606a:	837b      	strh	r3, [r7, #26]
    lv_coord_t base_abs_y = base->coords.y1;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	8a5b      	ldrh	r3, [r3, #18]
 8006070:	833b      	strh	r3, [r7, #24]
    lv_coord_t par_abs_x  = par->coords.x1;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	8a1b      	ldrh	r3, [r3, #16]
 8006076:	82fb      	strh	r3, [r7, #22]
    lv_coord_t par_abs_y  = par->coords.y1;
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	8a5b      	ldrh	r3, [r3, #18]
 800607c:	82bb      	strh	r3, [r7, #20]
    new_x += x_mod + base_abs_x;
 800607e:	88ba      	ldrh	r2, [r7, #4]
 8006080:	8b7b      	ldrh	r3, [r7, #26]
 8006082:	4413      	add	r3, r2
 8006084:	b29a      	uxth	r2, r3
 8006086:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006088:	4413      	add	r3, r2
 800608a:	b29b      	uxth	r3, r3
 800608c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    new_y += y_mod + base_abs_y;
 800608e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8006090:	8b3b      	ldrh	r3, [r7, #24]
 8006092:	4413      	add	r3, r2
 8006094:	b29a      	uxth	r2, r3
 8006096:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006098:	4413      	add	r3, r2
 800609a:	b29b      	uxth	r3, r3
 800609c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    new_x -= par_abs_x;
 800609e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80060a0:	8afb      	ldrh	r3, [r7, #22]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    new_y -= par_abs_y;
 80060a8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80060aa:	8abb      	ldrh	r3, [r7, #20]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	84bb      	strh	r3, [r7, #36]	@ 0x24

    lv_obj_set_pos(obj, new_x, new_y);
 80060b2:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80060b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80060ba:	4619      	mov	r1, r3
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7ff fa4c 	bl	800555a <lv_obj_set_pos>

#if LV_USE_OBJ_REALIGN
    /*Save the last align parameters to use them in `lv_obj_realign`*/
    obj->realign.align       = align;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	79fa      	ldrb	r2, [r7, #7]
 80060c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    obj->realign.xofs        = x_mod;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	88ba      	ldrh	r2, [r7, #4]
 80060ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
    obj->realign.yofs        = y_mod;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80060d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    obj->realign.base        = base;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	639a      	str	r2, [r3, #56]	@ 0x38
    obj->realign.origo_align = 1;
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	f892 3041 	ldrb.w	r3, [r2, #65]	@ 0x41
 80060e2:	f043 0302 	orr.w	r3, r3, #2
 80060e6:	f882 3041 	strb.w	r3, [r2, #65]	@ 0x41
#endif
}
 80060ea:	bf00      	nop
 80060ec:	3728      	adds	r7, #40	@ 0x28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop

080060f4 <lv_obj_realign>:
/**
 * Realign the object based on the last `lv_obj_align` parameters.
 * @param obj pointer to an object
 */
void lv_obj_realign(lv_obj_t * obj)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	6078      	str	r0, [r7, #4]
#if LV_USE_OBJ_REALIGN
    if(obj->realign.origo_align)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d010      	beq.n	800612e <lv_obj_realign+0x3a>
        lv_obj_align_origo(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f9b3 003c 	ldrsh.w	r0, [r3, #60]	@ 0x3c
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	4603      	mov	r3, r0
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff fdd4 	bl	8005cd4 <lv_obj_align_origo>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
#else
    (void)obj;
    LV_LOG_WARN("lv_obj_realaign: no effect because LV_USE_OBJ_REALIGN = 0");
#endif
}
 800612c:	e00f      	b.n	800614e <lv_obj_realign+0x5a>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f9b3 003c 	ldrsh.w	r0, [r3, #60]	@ 0x3c
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	4603      	mov	r3, r0
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7ff fb5f 	bl	800580c <lv_obj_align>
}
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <lv_obj_set_style>:
 * Set a new style for an object
 * @param obj pointer to an object
 * @param style_p pointer to the new style
 */
void lv_obj_set_style(lv_obj_t * obj, const lv_style_t * style)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b082      	sub	sp, #8
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	6039      	str	r1, [r7, #0]
    obj->style_p = style;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	629a      	str	r2, [r3, #40]	@ 0x28

    /*Send a signal about style change to every children with NULL style*/
    refresh_children_style(obj);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fd22 	bl	8006bb0 <refresh_children_style>

    /*Notify the object about the style change too*/
    lv_obj_refresh_style(obj);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f804 	bl	800617a <lv_obj_refresh_style>
}
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <lv_obj_refresh_style>:
/**
 * Notify an object about its style is modified
 * @param obj pointer to an object
 */
void lv_obj_refresh_style(lv_obj_t * obj)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
    lv_obj_invalidate(obj);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff f8ea 	bl	800535c <lv_obj_invalidate>
    obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	2200      	movs	r2, #0
 800618e:	2104      	movs	r1, #4
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	4798      	blx	r3
    lv_obj_invalidate(obj);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff f8e1 	bl	800535c <lv_obj_invalidate>
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <lv_obj_set_hidden>:
 * Hide an object. It won't be visible and clickable.
 * @param obj pointer to an object
 * @param en true: hide the object
 */
void lv_obj_set_hidden(lv_obj_t * obj, bool en)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b084      	sub	sp, #16
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	460b      	mov	r3, r1
 80061ac:	70fb      	strb	r3, [r7, #3]
    if(!obj->hidden) lv_obj_invalidate(obj); /*Invalidate when not hidden (hidden objects are ignored) */
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80061b4:	f003 0310 	and.w	r3, r3, #16
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d102      	bne.n	80061c4 <lv_obj_set_hidden+0x22>
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff f8cc 	bl	800535c <lv_obj_invalidate>

    obj->hidden = en == false ? 0 : 1;
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	f083 0301 	eor.w	r3, r3, #1
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <lv_obj_set_hidden+0x32>
 80061d0:	2100      	movs	r1, #0
 80061d2:	e000      	b.n	80061d6 <lv_obj_set_hidden+0x34>
 80061d4:	2101      	movs	r1, #1
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 80061dc:	f361 1304 	bfi	r3, r1, #4, #1
 80061e0:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30

    if(!obj->hidden) lv_obj_invalidate(obj); /*Invalidate when not hidden (hidden objects are ignored) */
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d102      	bne.n	80061fa <lv_obj_set_hidden+0x58>
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff f8b1 	bl	800535c <lv_obj_invalidate>

    lv_obj_t * par = lv_obj_get_parent(obj);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f9a2 	bl	8006544 <lv_obj_get_parent>
 8006200:	60f8      	str	r0, [r7, #12]
    par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	2101      	movs	r1, #1
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	4798      	blx	r3
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <lv_obj_set_click>:
 * Enable or disable the clicking of an object
 * @param obj pointer to an object
 * @param en true: make the object clickable
 */
void lv_obj_set_click(lv_obj_t * obj, bool en)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	460b      	mov	r3, r1
 8006220:	70fb      	strb	r3, [r7, #3]
    obj->click = (en == true ? 1 : 0);
 8006222:	78f9      	ldrb	r1, [r7, #3]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 800622a:	f361 0300 	bfi	r3, r1, #0, #1
 800622e:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	bc80      	pop	{r7}
 800623a:	4770      	bx	lr

0800623c <lv_obj_set_drag>:
 * Enable the dragging of an object
 * @param obj pointer to an object
 * @param en true: make the object dragable
 */
void lv_obj_set_drag(lv_obj_t * obj, bool en)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	70fb      	strb	r3, [r7, #3]
    if(en == true) lv_obj_set_click(obj, true); /*Drag is useless without enabled clicking*/
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <lv_obj_set_drag+0x1a>
 800624e:	2101      	movs	r1, #1
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7ff ffe0 	bl	8006216 <lv_obj_set_click>
    obj->drag = (en == true ? 1 : 0);
 8006256:	78f9      	ldrb	r1, [r7, #3]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 800625e:	f361 0341 	bfi	r3, r1, #1, #1
 8006262:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
}
 8006266:	bf00      	nop
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <lv_obj_set_drag_throw>:
 * Enable the throwing of an object after is is dragged
 * @param obj pointer to an object
 * @param en true: enable the drag throw
 */
void lv_obj_set_drag_throw(lv_obj_t * obj, bool en)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	460b      	mov	r3, r1
 8006278:	70fb      	strb	r3, [r7, #3]
    obj->drag_throw = (en == true ? 1 : 0);
 800627a:	78f9      	ldrb	r1, [r7, #3]
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	f892 3030 	ldrb.w	r3, [r2, #48]	@ 0x30
 8006282:	f361 0382 	bfi	r3, r1, #2, #1
 8006286:	f882 3030 	strb.w	r3, [r2, #48]	@ 0x30
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	bc80      	pop	{r7}
 8006292:	4770      	bx	lr

08006294 <lv_obj_set_protect>:
 * Set a bit or bits in the protect filed
 * @param obj pointer to an object
 * @param prot 'OR'-ed values from `lv_protect_t`
 */
void lv_obj_set_protect(lv_obj_t * obj, uint8_t prot)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	70fb      	strb	r3, [r7, #3]
    obj->protect |= prot;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr

080062bc <lv_obj_clear_protect>:
 * Clear a bit or bits in the protect filed
 * @param obj pointer to an object
 * @param prot 'OR'-ed values from `lv_protect_t`
 */
void lv_obj_clear_protect(lv_obj_t * obj, uint8_t prot)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	70fb      	strb	r3, [r7, #3]
    prot = (~prot) & 0xFF;
 80062c8:	78fb      	ldrb	r3, [r7, #3]
 80062ca:	43db      	mvns	r3, r3
 80062cc:	70fb      	strb	r3, [r7, #3]
    obj->protect &= prot;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	4013      	ands	r3, r2
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bc80      	pop	{r7}
 80062e8:	4770      	bx	lr

080062ea <lv_obj_set_event_cb>:
 * Used by the user to react on event which happens with the object.
 * @param obj pointer to an object
 * @param event_cb the new event function
 */
void lv_obj_set_event_cb(lv_obj_t * obj, lv_event_cb_t event_cb)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
    obj->event_cb = event_cb;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	619a      	str	r2, [r3, #24]
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr

08006304 <lv_event_send>:
 * @param event the type of the event from `lv_event_t`
 * @param data arbitrary data depending on the object type and the event. (Usually `NULL`)
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send(lv_obj_t * obj, lv_event_t event, const void * data)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	460b      	mov	r3, r1
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	72fb      	strb	r3, [r7, #11]
    if(obj == NULL) return LV_RES_OK;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <lv_event_send+0x18>
 8006318:	2301      	movs	r3, #1
 800631a:	e009      	b.n	8006330 <lv_event_send+0x2c>

    lv_res_t res;
    res = lv_event_send_func(obj->event_cb, obj, event, data);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6998      	ldr	r0, [r3, #24]
 8006320:	7afa      	ldrb	r2, [r7, #11]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68f9      	ldr	r1, [r7, #12]
 8006326:	f000 f807 	bl	8006338 <lv_event_send_func>
 800632a:	4603      	mov	r3, r0
 800632c:	75fb      	strb	r3, [r7, #23]
    return res;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <lv_event_send_func>:
 * @param event an event
 * @param data pointer to a custom data
 * @return LV_RES_OK: `obj` was not deleted in the event; LV_RES_INV: `obj` was deleted in the event
 */
lv_res_t lv_event_send_func(lv_event_cb_t event_xcb, lv_obj_t * obj, lv_event_t event, const void * data)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	@ 0x28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	603b      	str	r3, [r7, #0]
 8006344:	4613      	mov	r3, r2
 8006346:	71fb      	strb	r3, [r7, #7]
    /* Build a simple linked list from the objects used in the events
     * It's important to know if an this object was deleted by a nested event
     * called from this `even_cb`. */
    lv_event_temp_data_t event_temp_data;
    event_temp_data.obj     = obj;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	613b      	str	r3, [r7, #16]
    event_temp_data.deleted = false;
 800634c:	2300      	movs	r3, #0
 800634e:	753b      	strb	r3, [r7, #20]
    event_temp_data.prev    = NULL;
 8006350:	2300      	movs	r3, #0
 8006352:	61bb      	str	r3, [r7, #24]

    if(event_temp_data_head) {
 8006354:	4b2b      	ldr	r3, [pc, #172]	@ (8006404 <lv_event_send_func+0xcc>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <lv_event_send_func+0x2a>
        event_temp_data.prev = event_temp_data_head;
 800635c:	4b29      	ldr	r3, [pc, #164]	@ (8006404 <lv_event_send_func+0xcc>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	61bb      	str	r3, [r7, #24]
    }
    event_temp_data_head = &event_temp_data;
 8006362:	4a28      	ldr	r2, [pc, #160]	@ (8006404 <lv_event_send_func+0xcc>)
 8006364:	f107 0310 	add.w	r3, r7, #16
 8006368:	6013      	str	r3, [r2, #0]

    const void * event_act_data_save = event_act_data;
 800636a:	4b27      	ldr	r3, [pc, #156]	@ (8006408 <lv_event_send_func+0xd0>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	627b      	str	r3, [r7, #36]	@ 0x24
    event_act_data                   = data;
 8006370:	4a25      	ldr	r2, [pc, #148]	@ (8006408 <lv_event_send_func+0xd0>)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6013      	str	r3, [r2, #0]

    /*Call the input device's feedback callback if set*/
    lv_indev_t * indev_act = lv_indev_get_act();
 8006376:	f7fc feaf 	bl	80030d8 <lv_indev_get_act>
 800637a:	6238      	str	r0, [r7, #32]
    if(indev_act) {
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d009      	beq.n	8006396 <lv_event_send_func+0x5e>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d005      	beq.n	8006396 <lv_event_send_func+0x5e>
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	6a3a      	ldr	r2, [r7, #32]
 8006390:	79f9      	ldrb	r1, [r7, #7]
 8006392:	4610      	mov	r0, r2
 8006394:	4798      	blx	r3
    }

    /*Call the event callback itself*/
    if(event_xcb) event_xcb(obj, event);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d004      	beq.n	80063a6 <lv_event_send_func+0x6e>
 800639c:	79fa      	ldrb	r2, [r7, #7]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4611      	mov	r1, r2
 80063a2:	68b8      	ldr	r0, [r7, #8]
 80063a4:	4798      	blx	r3

    /*Restore the event data*/
    event_act_data = event_act_data_save;
 80063a6:	4a18      	ldr	r2, [pc, #96]	@ (8006408 <lv_event_send_func+0xd0>)
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063aa:	6013      	str	r3, [r2, #0]

    /*Remove this element from the list*/
    event_temp_data_head = event_temp_data_head->prev;
 80063ac:	4b15      	ldr	r3, [pc, #84]	@ (8006404 <lv_event_send_func+0xcc>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	4a14      	ldr	r2, [pc, #80]	@ (8006404 <lv_event_send_func+0xcc>)
 80063b4:	6013      	str	r3, [r2, #0]

    if(event_temp_data.deleted) {
 80063b6:	7d3b      	ldrb	r3, [r7, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <lv_event_send_func+0x88>
        return LV_RES_INV;
 80063bc:	2300      	movs	r3, #0
 80063be:	e01d      	b.n	80063fc <lv_event_send_func+0xc4>
    }

    if(obj) {
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d019      	beq.n	80063fa <lv_event_send_func+0xc2>
        if(obj->parent_event && obj->par) {
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80063cc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d011      	beq.n	80063fa <lv_event_send_func+0xc2>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00d      	beq.n	80063fa <lv_event_send_func+0xc2>
            lv_res_t res = lv_event_send(obj->par, event, data);
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	79f9      	ldrb	r1, [r7, #7]
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff ff8c 	bl	8006304 <lv_event_send>
 80063ec:	4603      	mov	r3, r0
 80063ee:	77fb      	strb	r3, [r7, #31]
            if(res != LV_RES_OK) {
 80063f0:	7ffb      	ldrb	r3, [r7, #31]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d001      	beq.n	80063fa <lv_event_send_func+0xc2>
                return LV_RES_INV;
 80063f6:	2300      	movs	r3, #0
 80063f8:	e000      	b.n	80063fc <lv_event_send_func+0xc4>
            }
        }
    }

    return LV_RES_OK;
 80063fa:	2301      	movs	r3, #1
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3728      	adds	r7, #40	@ 0x28
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	200029cc 	.word	0x200029cc
 8006408:	200029d0 	.word	0x200029d0

0800640c <lv_event_get_data>:
/**
 * Get the `data` parameter of the current event
 * @return the `data` parameter
 */
const void * lv_event_get_data(void)
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
    return event_act_data;
 8006410:	4b02      	ldr	r3, [pc, #8]	@ (800641c <lv_event_get_data+0x10>)
 8006412:	681b      	ldr	r3, [r3, #0]
}
 8006414:	4618      	mov	r0, r3
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr
 800641c:	200029d0 	.word	0x200029d0

08006420 <lv_obj_set_signal_cb>:
 * Always call the previous signal function in the new.
 * @param obj pointer to an object
 * @param cb the new signal function
 */
void lv_obj_set_signal_cb(lv_obj_t * obj, lv_signal_cb_t signal_cb)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
    obj->signal_cb = signal_cb;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	61da      	str	r2, [r3, #28]
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	bc80      	pop	{r7}
 8006438:	4770      	bx	lr

0800643a <lv_obj_set_design_cb>:
 * Set a new design function for an object
 * @param obj pointer to an object
 * @param design_cb the new design function
 */
void lv_obj_set_design_cb(lv_obj_t * obj, lv_design_cb_t design_cb)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]
    obj->design_cb = design_cb;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	bf00      	nop
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr

08006454 <lv_obj_allocate_ext_attr>:
 * @param obj pointer to an object
 * @param ext_size the size of the new ext. data
 * @return Normal pointer to the allocated ext
 */
void * lv_obj_allocate_ext_attr(lv_obj_t * obj, uint16_t ext_size)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	807b      	strh	r3, [r7, #2]
    obj->ext_attr = lv_mem_realloc(obj->ext_attr, ext_size);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006464:	887a      	ldrh	r2, [r7, #2]
 8006466:	4611      	mov	r1, r2
 8006468:	4618      	mov	r0, r3
 800646a:	f009 feaf 	bl	80101cc <lv_mem_realloc>
 800646e:	4602      	mov	r2, r0
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	625a      	str	r2, [r3, #36]	@ 0x24

    return (void *)obj->ext_attr;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <lv_obj_refresh_ext_draw_pad>:
/**
 * Send a 'LV_SIGNAL_REFR_EXT_SIZE' signal to the object
 * @param obj pointer to an object
 */
void lv_obj_refresh_ext_draw_pad(lv_obj_t * obj)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
    obj->ext_draw_pad = 0;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	869a      	strh	r2, [r3, #52]	@ 0x34
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	2200      	movs	r2, #0
 8006494:	2105      	movs	r1, #5
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	4798      	blx	r3

    lv_obj_invalidate(obj);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fe ff5e 	bl	800535c <lv_obj_invalidate>
}
 80064a0:	bf00      	nop
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <lv_obj_get_screen>:
 * Return with the screen of an object
 * @param obj pointer to an object
 * @return pointer to a screen
 */
lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
    const lv_obj_t * par = obj;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60fb      	str	r3, [r7, #12]
    const lv_obj_t * act_p;

    do {
        act_p = par;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	60bb      	str	r3, [r7, #8]
        par   = lv_obj_get_parent(act_p);
 80064b8:	68b8      	ldr	r0, [r7, #8]
 80064ba:	f000 f843 	bl	8006544 <lv_obj_get_parent>
 80064be:	60f8      	str	r0, [r7, #12]
    } while(par != NULL);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f6      	bne.n	80064b4 <lv_obj_get_screen+0xc>

    return (lv_obj_t *)act_p;
 80064c6:	68bb      	ldr	r3, [r7, #8]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <lv_obj_get_disp>:
 * Get the display of an object
 * @param scr pointer to an object
 * @return pointer the object's display
 */
lv_disp_t * lv_obj_get_disp(const lv_obj_t * obj)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
    const lv_obj_t * scr;

    if(obj->par == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <lv_obj_get_disp+0x16>
        scr = obj; /*`obj` is a screen*/
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	e003      	b.n	80064ee <lv_obj_get_disp+0x1e>
    else
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff ffde 	bl	80064a8 <lv_obj_get_screen>
 80064ec:	6178      	str	r0, [r7, #20]

    lv_disp_t * d;
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 80064ee:	4814      	ldr	r0, [pc, #80]	@ (8006540 <lv_obj_get_disp+0x70>)
 80064f0:	f009 fcc5 	bl	800fe7e <lv_ll_get_head>
 80064f4:	6138      	str	r0, [r7, #16]
 80064f6:	e01b      	b.n	8006530 <lv_obj_get_disp+0x60>
    {
        lv_obj_t * s;
        LV_LL_READ(d->scr_ll, s)
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	3328      	adds	r3, #40	@ 0x28
 80064fc:	4618      	mov	r0, r3
 80064fe:	f009 fcbe 	bl	800fe7e <lv_ll_get_head>
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	e00c      	b.n	8006520 <lv_obj_get_disp+0x50>
        {
            if(s == scr) return d;
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	429a      	cmp	r2, r3
 800650c:	d101      	bne.n	8006512 <lv_obj_get_disp+0x42>
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	e012      	b.n	8006538 <lv_obj_get_disp+0x68>
        LV_LL_READ(d->scr_ll, s)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	3328      	adds	r3, #40	@ 0x28
 8006516:	68f9      	ldr	r1, [r7, #12]
 8006518:	4618      	mov	r0, r3
 800651a:	f009 fcd4 	bl	800fec6 <lv_ll_get_next>
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1ef      	bne.n	8006506 <lv_obj_get_disp+0x36>
    LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d)
 8006526:	6939      	ldr	r1, [r7, #16]
 8006528:	4805      	ldr	r0, [pc, #20]	@ (8006540 <lv_obj_get_disp+0x70>)
 800652a:	f009 fccc 	bl	800fec6 <lv_ll_get_next>
 800652e:	6138      	str	r0, [r7, #16]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d1e0      	bne.n	80064f8 <lv_obj_get_disp+0x28>
        }
    }

    LV_LOG_WARN("lv_scr_get_disp: screen not found")
    return NULL;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20002d14 	.word	0x20002d14

08006544 <lv_obj_get_parent>:
 * Returns with the parent of an object
 * @param obj pointer to an object
 * @return pointer to the parent of  'obj'
 */
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
    return obj->par;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr

0800655a <lv_obj_get_child>:
 * @param child NULL at first call to get the next children
 *                  and the previous return value later
 * @return the child after 'act_child' or NULL if no more child
 */
lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, const lv_obj_t * child)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	6039      	str	r1, [r7, #0]
    lv_obj_t * result = NULL;
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]

    if(child == NULL) {
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d106      	bne.n	800657c <lv_obj_get_child+0x22>
        result = lv_ll_get_head(&obj->child_ll);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	4618      	mov	r0, r3
 8006574:	f009 fc83 	bl	800fe7e <lv_ll_get_head>
 8006578:	60f8      	str	r0, [r7, #12]
 800657a:	e006      	b.n	800658a <lv_obj_get_child+0x30>
    } else {
        result = lv_ll_get_next(&obj->child_ll, child);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3304      	adds	r3, #4
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f009 fc9f 	bl	800fec6 <lv_ll_get_next>
 8006588:	60f8      	str	r0, [r7, #12]
    }

    return result;
 800658a:	68fb      	ldr	r3, [r7, #12]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <lv_obj_get_coords>:
 * Copy the coordinates of an object to an area
 * @param obj pointer to an object
 * @param cords_p pointer to an area to store the coordinates
 */
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * cords_p)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
    lv_area_copy(cords_p, &obj->coords);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3310      	adds	r3, #16
 80065a2:	4619      	mov	r1, r3
 80065a4:	6838      	ldr	r0, [r7, #0]
 80065a6:	f7fe fb4b 	bl	8004c40 <lv_area_copy>
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <lv_obj_get_x>:
 * Get the x coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the left side of its parent
 */
lv_coord_t lv_obj_get_x(const lv_obj_t * obj)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b084      	sub	sp, #16
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
    lv_coord_t rel_x;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff ffc2 	bl	8006544 <lv_obj_get_parent>
 80065c0:	60f8      	str	r0, [r7, #12]
    rel_x             = obj->coords.x1 - parent->coords.x1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	817b      	strh	r3, [r7, #10]

    return rel_x;
 80065d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <lv_obj_get_y>:
 * Get the y coordinate of object
 * @param obj pointer to an object
 * @return distance of 'obj' from the top of its parent
 */
lv_coord_t lv_obj_get_y(const lv_obj_t * obj)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
    lv_coord_t rel_y;
    lv_obj_t * parent = lv_obj_get_parent(obj);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff ffa9 	bl	8006544 <lv_obj_get_parent>
 80065f2:	60f8      	str	r0, [r7, #12]
    rel_y             = obj->coords.y1 - parent->coords.y1;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006602:	b29b      	uxth	r3, r3
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	b29b      	uxth	r3, r3
 8006608:	817b      	strh	r3, [r7, #10]

    return rel_y;
 800660a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <lv_obj_get_width>:
 * Get the width of an object
 * @param obj pointer to an object
 * @return the width
 */
lv_coord_t lv_obj_get_width(const lv_obj_t * obj)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
    return lv_area_get_width(&obj->coords);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3310      	adds	r3, #16
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fb1a 	bl	8004c5c <lv_area_get_width>
 8006628:	4603      	mov	r3, r0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <lv_obj_get_height>:
 * Get the height of an object
 * @param obj pointer to an object
 * @return the height
 */
lv_coord_t lv_obj_get_height(const lv_obj_t * obj)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b082      	sub	sp, #8
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
    return lv_area_get_height(&obj->coords);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3310      	adds	r3, #16
 800663e:	4618      	mov	r0, r3
 8006640:	f7fe fb22 	bl	8004c88 <lv_area_get_height>
 8006644:	4603      	mov	r3, r0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <lv_obj_get_width_fit>:
 * Get that width reduced by the left and right padding.
 * @param obj pointer to an object
 * @return the width which still fits into the container
 */
lv_coord_t lv_obj_get_width_fit(lv_obj_t * obj)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
    const lv_style_t * style = lv_obj_get_style(obj);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f848 	bl	80066ec <lv_obj_get_style>
 800665c:	60f8      	str	r0, [r7, #12]

    return lv_obj_get_width(obj) - style->body.padding.left - style->body.padding.right;
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff ffd9 	bl	8006616 <lv_obj_get_width>
 8006664:	4603      	mov	r3, r0
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800666e:	b29b      	uxth	r3, r3
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	b29a      	uxth	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800667a:	b29b      	uxth	r3, r3
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	b29b      	uxth	r3, r3
 8006680:	b21b      	sxth	r3, r3
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <lv_obj_get_height_fit>:
 * Get that height reduced by the top an bottom padding.
 * @param obj pointer to an object
 * @return the height which still fits into the container
 */
lv_coord_t lv_obj_get_height_fit(lv_obj_t * obj)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
    const lv_style_t * style = lv_obj_get_style(obj);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f82a 	bl	80066ec <lv_obj_get_style>
 8006698:	60f8      	str	r0, [r7, #12]

    return lv_obj_get_height(obj) - style->body.padding.top - style->body.padding.bottom;
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff ffc9 	bl	8006632 <lv_obj_get_height>
 80066a0:	4603      	mov	r3, r0
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	b21b      	sxth	r3, r3
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <lv_obj_get_auto_realign>:
 * Get the automatic realign property of the object.
 * @param obj pointer to an object
 * @return  true: auto realign is enabled; false: auto realign is disabled
 */
bool lv_obj_get_auto_realign(lv_obj_t * obj)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
#if LV_USE_OBJ_REALIGN
    return obj->realign.auto_realign ? true : false;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	bf14      	ite	ne
 80066dc:	2301      	movne	r3, #1
 80066de:	2300      	moveq	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
#else
    (void)obj;
    return false;
#endif
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc80      	pop	{r7}
 80066ea:	4770      	bx	lr

080066ec <lv_obj_get_style>:
 * Get the style pointer of an object (if NULL get style of the parent)
 * @param obj pointer to an object
 * @return pointer to a style
 */
const lv_style_t * lv_obj_get_style(const lv_obj_t * obj)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
    const lv_style_t * style_act = obj->style_p;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f8:	617b      	str	r3, [r7, #20]
    if(style_act == NULL) {
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d12c      	bne.n	800675a <lv_obj_get_style+0x6e>
        lv_obj_t * par = obj->par;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	613b      	str	r3, [r7, #16]

        while(par) {
 8006706:	e025      	b.n	8006754 <lv_obj_get_style+0x68>
            if(par->style_p) {
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01e      	beq.n	800674e <lv_obj_get_style+0x62>
                if(par->style_p->glass == 0) {
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d116      	bne.n	800674e <lv_obj_get_style+0x62>
#if LV_USE_GROUP == 0
                    style_act = par->style_p;
#else
                    /*If a parent is focused then use then focused style*/
                    lv_group_t * g = lv_obj_get_group(par);
 8006720:	6938      	ldr	r0, [r7, #16]
 8006722:	f000 f904 	bl	800692e <lv_obj_get_group>
 8006726:	60f8      	str	r0, [r7, #12]
                    if(lv_group_get_focused(g) == par) {
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f7fc fabb 	bl	8002ca4 <lv_group_get_focused>
 800672e:	4602      	mov	r2, r0
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	4293      	cmp	r3, r2
 8006734:	d107      	bne.n	8006746 <lv_obj_get_style+0x5a>
                        style_act = lv_group_mod_style(g, par->style_p);
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673a:	4619      	mov	r1, r3
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f7fc fa81 	bl	8002c44 <lv_group_mod_style>
 8006742:	6178      	str	r0, [r7, #20]
                    } else {
                        style_act = par->style_p;
                    }
#endif
                    break;
 8006744:	e009      	b.n	800675a <lv_obj_get_style+0x6e>
                        style_act = par->style_p;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674a:	617b      	str	r3, [r7, #20]
                    break;
 800674c:	e005      	b.n	800675a <lv_obj_get_style+0x6e>
                }
            }
            par = par->par;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	613b      	str	r3, [r7, #16]
        while(par) {
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1d6      	bne.n	8006708 <lv_obj_get_style+0x1c>
        }
    }
#if LV_USE_GROUP
    if(obj->group_p) {
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00f      	beq.n	8006782 <lv_obj_get_style+0x96>
        if(lv_group_get_focused(obj->group_p) == obj) {
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006766:	4618      	mov	r0, r3
 8006768:	f7fc fa9c 	bl	8002ca4 <lv_group_get_focused>
 800676c:	4602      	mov	r2, r0
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4293      	cmp	r3, r2
 8006772:	d106      	bne.n	8006782 <lv_obj_get_style+0x96>
            style_act = lv_group_mod_style(obj->group_p, style_act);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006778:	6979      	ldr	r1, [r7, #20]
 800677a:	4618      	mov	r0, r3
 800677c:	f7fc fa62 	bl	8002c44 <lv_group_mod_style>
 8006780:	6178      	str	r0, [r7, #20]
        }
    }
#endif

    if(style_act == NULL) style_act = &lv_style_plain;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <lv_obj_get_style+0xa0>
 8006788:	4b03      	ldr	r3, [pc, #12]	@ (8006798 <lv_obj_get_style+0xac>)
 800678a:	617b      	str	r3, [r7, #20]

    return style_act;
 800678c:	697b      	ldr	r3, [r7, #20]
}
 800678e:	4618      	mov	r0, r3
 8006790:	3718      	adds	r7, #24
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20002acc 	.word	0x20002acc

0800679c <lv_obj_get_hidden>:
 * Get the hidden attribute of an object
 * @param obj pointer to an object
 * @return true: the object is hidden
 */
bool lv_obj_get_hidden(const lv_obj_t * obj)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
    return obj->hidden == 0 ? false : true;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80067aa:	f003 0310 	and.w	r3, r3, #16
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bf14      	ite	ne
 80067b4:	2301      	movne	r3, #1
 80067b6:	2300      	moveq	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	bc80      	pop	{r7}
 80067c2:	4770      	bx	lr

080067c4 <lv_obj_get_click>:
 * Get the click enable attribute of an object
 * @param obj pointer to an object
 * @return true: the object is clickable
 */
bool lv_obj_get_click(const lv_obj_t * obj)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
    return obj->click == 0 ? false : true;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	bf14      	ite	ne
 80067dc:	2301      	movne	r3, #1
 80067de:	2300      	moveq	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr

080067ec <lv_obj_get_drag>:
 * Get the drag enable attribute of an object
 * @param obj pointer to an object
 * @return true: the object is dragable
 */
bool lv_obj_get_drag(const lv_obj_t * obj)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
    return obj->drag == 0 ? false : true;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	bf14      	ite	ne
 8006804:	2301      	movne	r3, #1
 8006806:	2300      	moveq	r3, #0
 8006808:	b2db      	uxtb	r3, r3
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr

08006814 <lv_obj_get_drag_dir>:
 * Get the directions an object can be dragged
 * @param obj pointer to an object
 * @return bitwise OR of allowed directions an object can be dragged in
 */
lv_drag_dir_t lv_obj_get_drag_dir(const lv_obj_t * obj)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
    return obj->drag_dir;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006822:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006826:	b2db      	uxtb	r3, r3
}
 8006828:	4618      	mov	r0, r3
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr

08006832 <lv_obj_get_drag_throw>:
 * Get the drag throw enable attribute of an object
 * @param obj pointer to an object
 * @return true: drag throw is enabled
 */
bool lv_obj_get_drag_throw(const lv_obj_t * obj)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
    return obj->drag_throw == 0 ? false : true;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	bf14      	ite	ne
 800684a:	2301      	movne	r3, #1
 800684c:	2300      	moveq	r3, #0
 800684e:	b2db      	uxtb	r3, r3
}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	bc80      	pop	{r7}
 8006858:	4770      	bx	lr

0800685a <lv_obj_get_drag_parent>:
 * Get the drag parent attribute of an object
 * @param obj pointer to an object
 * @return true: drag parent is enabled
 */
bool lv_obj_get_drag_parent(const lv_obj_t * obj)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
    return obj->drag_parent == 0 ? false : true;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	bf14      	ite	ne
 8006872:	2301      	movne	r3, #1
 8006874:	2300      	moveq	r3, #0
 8006876:	b2db      	uxtb	r3, r3
}
 8006878:	4618      	mov	r0, r3
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr

08006882 <lv_obj_get_opa_scale>:
 * Get the opa scale parameter of an object
 * @param obj pointer to an object
 * @return opa scale [0..255]
 */
lv_opa_t lv_obj_get_opa_scale(const lv_obj_t * obj)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
    const lv_obj_t * parent = obj;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60fb      	str	r3, [r7, #12]

    while(parent) {
 800688e:	e00f      	b.n	80068b0 <lv_obj_get_opa_scale+0x2e>
        if(parent->opa_scale_en) return parent->opa_scale;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <lv_obj_get_opa_scale+0x26>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80068a6:	e007      	b.n	80068b8 <lv_obj_get_opa_scale+0x36>
        parent = lv_obj_get_parent(parent);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f7ff fe4b 	bl	8006544 <lv_obj_get_parent>
 80068ae:	60f8      	str	r0, [r7, #12]
    while(parent) {
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1ec      	bne.n	8006890 <lv_obj_get_opa_scale+0xe>
    }

    return LV_OPA_COVER;
 80068b6:	23ff      	movs	r3, #255	@ 0xff
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <lv_obj_is_protected>:
 * @param obj pointer to an object
 * @param prot protect bits to test ('OR'ed values of `lv_protect_t`)
 * @return false: none of the given bits are set, true: at least one bit is set
 */
bool lv_obj_is_protected(const lv_obj_t * obj, uint8_t prot)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	70fb      	strb	r3, [r7, #3]
    return (obj->protect & prot) == 0 ? false : true;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80068d2:	78fb      	ldrb	r3, [r7, #3]
 80068d4:	4013      	ands	r3, r2
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	bf14      	ite	ne
 80068dc:	2301      	movne	r3, #1
 80068de:	2300      	moveq	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bc80      	pop	{r7}
 80068ea:	4770      	bx	lr

080068ec <lv_obj_get_signal_cb>:
 * Get the signal function of an object
 * @param obj pointer to an object
 * @return the signal function
 */
lv_signal_cb_t lv_obj_get_signal_cb(const lv_obj_t * obj)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
    return obj->signal_cb;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	69db      	ldr	r3, [r3, #28]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bc80      	pop	{r7}
 8006900:	4770      	bx	lr

08006902 <lv_obj_get_design_cb>:
 * Get the design function of an object
 * @param obj pointer to an object
 * @return the design function
 */
lv_design_cb_t lv_obj_get_design_cb(const lv_obj_t * obj)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
    return obj->design_cb;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
}
 800690e:	4618      	mov	r0, r3
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr

08006918 <lv_obj_get_ext_attr>:
 * @param obj pointer to an object
 * @return the ext pointer but not the dynamic version
 *         Use it as ext->data1, and NOT da(ext)->data1
 */
void * lv_obj_get_ext_attr(const lv_obj_t * obj)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
    return obj->ext_attr;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8006924:	4618      	mov	r0, r3
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr

0800692e <lv_obj_get_group>:
 * Get the group of the object
 * @param obj pointer to an object
 * @return the pointer to group of the object
 */
void * lv_obj_get_group(const lv_obj_t * obj)
{
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
    return obj->group_p;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	bc80      	pop	{r7}
 8006942:	4770      	bx	lr

08006944 <lv_obj_is_focused>:
 * Tell whether the object is the focused object of a group or not.
 * @param obj pointer to an object
 * @return true: the object is focused, false: the object is not focused or not in a group
 */
bool lv_obj_is_focused(const lv_obj_t * obj)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
    if(obj->group_p) {
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00a      	beq.n	800696a <lv_obj_is_focused+0x26>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006958:	4618      	mov	r0, r3
 800695a:	f7fc f9a3 	bl	8002ca4 <lv_group_get_focused>
 800695e:	4602      	mov	r2, r0
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4293      	cmp	r3, r2
 8006964:	d101      	bne.n	800696a <lv_obj_is_focused+0x26>
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <lv_obj_is_focused+0x28>
    }

    return false;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <lv_obj_design>:
 *                                  (return 'true' if yes)
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 * @param return true/false, depends on 'mode'
 */
static bool lv_obj_design(lv_obj_t * obj, const lv_area_t * mask_p, lv_design_mode_t mode)
{
 8006974:	b590      	push	{r4, r7, lr}
 8006976:	b08b      	sub	sp, #44	@ 0x2c
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	4613      	mov	r3, r2
 8006980:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 8006982:	79fb      	ldrb	r3, [r7, #7]
 8006984:	2b02      	cmp	r3, #2
 8006986:	d16a      	bne.n	8006a5e <lv_obj_design+0xea>

        /*Most trivial test. Is the mask fully IN the object? If no it surely doesn't cover it*/
        if(lv_area_is_in(mask_p, &obj->coords) == false) return false;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3310      	adds	r3, #16
 800698c:	4619      	mov	r1, r3
 800698e:	68b8      	ldr	r0, [r7, #8]
 8006990:	f008 fecb 	bl	800f72a <lv_area_is_in>
 8006994:	4603      	mov	r3, r0
 8006996:	f083 0301 	eor.w	r3, r3, #1
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <lv_obj_design+0x30>
 80069a0:	2300      	movs	r3, #0
 80069a2:	e070      	b.n	8006a86 <lv_obj_design+0x112>

        /*Can cover the area only if fully solid (no opacity)*/
        const lv_style_t * style = lv_obj_get_style(obj);
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f7ff fea1 	bl	80066ec <lv_obj_get_style>
 80069aa:	6238      	str	r0, [r7, #32]
        if(style->body.opa < LV_OPA_MAX) return false;
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	7a1b      	ldrb	r3, [r3, #8]
 80069b0:	2bfa      	cmp	r3, #250	@ 0xfa
 80069b2:	d801      	bhi.n	80069b8 <lv_obj_design+0x44>
 80069b4:	2300      	movs	r3, #0
 80069b6:	e066      	b.n	8006a86 <lv_obj_design+0x112>

        /* Because of the radius it is not sure the area is covered
         * Check the areas where there is no radius*/
        lv_coord_t r = style->body.radius;
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	88db      	ldrh	r3, [r3, #6]
 80069bc:	83fb      	strh	r3, [r7, #30]

        if(r == LV_RADIUS_CIRCLE) return false;
 80069be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80069c2:	f647 4218 	movw	r2, #31768	@ 0x7c18
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d101      	bne.n	80069ce <lv_obj_design+0x5a>
 80069ca:	2300      	movs	r3, #0
 80069cc:	e05b      	b.n	8006a86 <lv_obj_design+0x112>

        lv_area_t area_tmp;

        /*Check horizontally without radius*/
        lv_obj_get_coords(obj, &area_tmp);
 80069ce:	f107 0314 	add.w	r3, r7, #20
 80069d2:	4619      	mov	r1, r3
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f7ff fddd 	bl	8006594 <lv_obj_get_coords>
        area_tmp.x1 += r;
 80069da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80069de:	b29a      	uxth	r2, r3
 80069e0:	8bfb      	ldrh	r3, [r7, #30]
 80069e2:	4413      	add	r3, r2
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	b21b      	sxth	r3, r3
 80069e8:	82bb      	strh	r3, [r7, #20]
        area_tmp.x2 -= r;
 80069ea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	8bfb      	ldrh	r3, [r7, #30]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	b21b      	sxth	r3, r3
 80069f8:	833b      	strh	r3, [r7, #24]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 80069fa:	f107 0314 	add.w	r3, r7, #20
 80069fe:	4619      	mov	r1, r3
 8006a00:	68b8      	ldr	r0, [r7, #8]
 8006a02:	f008 fe92 	bl	800f72a <lv_area_is_in>
 8006a06:	4603      	mov	r3, r0
 8006a08:	f083 0301 	eor.w	r3, r3, #1
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <lv_obj_design+0xa2>
 8006a12:	2300      	movs	r3, #0
 8006a14:	e037      	b.n	8006a86 <lv_obj_design+0x112>

        /*Check vertically without radius*/
        lv_obj_get_coords(obj, &area_tmp);
 8006a16:	f107 0314 	add.w	r3, r7, #20
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f7ff fdb9 	bl	8006594 <lv_obj_get_coords>
        area_tmp.y1 += r;
 8006a22:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	8bfb      	ldrh	r3, [r7, #30]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	b21b      	sxth	r3, r3
 8006a30:	82fb      	strh	r3, [r7, #22]
        area_tmp.y2 -= r;
 8006a32:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	8bfb      	ldrh	r3, [r7, #30]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	b21b      	sxth	r3, r3
 8006a40:	837b      	strh	r3, [r7, #26]
        if(lv_area_is_in(mask_p, &area_tmp) == false) return false;
 8006a42:	f107 0314 	add.w	r3, r7, #20
 8006a46:	4619      	mov	r1, r3
 8006a48:	68b8      	ldr	r0, [r7, #8]
 8006a4a:	f008 fe6e 	bl	800f72a <lv_area_is_in>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f083 0301 	eor.w	r3, r3, #1
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d014      	beq.n	8006a84 <lv_obj_design+0x110>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e013      	b.n	8006a86 <lv_obj_design+0x112>

    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8006a5e:	79fb      	ldrb	r3, [r7, #7]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10f      	bne.n	8006a84 <lv_obj_design+0x110>
        const lv_style_t * style = lv_obj_get_style(obj);
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f7ff fe41 	bl	80066ec <lv_obj_get_style>
 8006a6a:	6278      	str	r0, [r7, #36]	@ 0x24
        lv_draw_rect(&obj->coords, mask_p, style, lv_obj_get_opa_scale(obj));
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f103 0410 	add.w	r4, r3, #16
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f7ff ff05 	bl	8006882 <lv_obj_get_opa_scale>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f002 fcf4 	bl	800946c <lv_draw_rect>
    }

    return true;
 8006a84:	2301      	movs	r3, #1
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	372c      	adds	r7, #44	@ 0x2c
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd90      	pop	{r4, r7, pc}
	...

08006a90 <lv_obj_signal>:
 * @param sign signal type
 * @param param parameter for the signal (depends on signal type)
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_obj_signal(lv_obj_t * obj, lv_signal_t sign, void * param)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	607a      	str	r2, [r7, #4]
 8006a9c:	72fb      	strb	r3, [r7, #11]
    (void)param;

    lv_res_t res = LV_RES_OK;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	77fb      	strb	r3, [r7, #31]

    const lv_style_t * style = lv_obj_get_style(obj);
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7ff fe22 	bl	80066ec <lv_obj_get_style>
 8006aa8:	61b8      	str	r0, [r7, #24]

    if(sign == LV_SIGNAL_CHILD_CHG) {
 8006aaa:	7afb      	ldrb	r3, [r7, #11]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d109      	bne.n	8006ac4 <lv_obj_signal+0x34>
        /*Return 'invalid' if the child change signal is not enabled*/
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f7ff ff04 	bl	80068c0 <lv_obj_is_protected>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d022      	beq.n	8006b04 <lv_obj_signal+0x74>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	77fb      	strb	r3, [r7, #31]
 8006ac2:	e01f      	b.n	8006b04 <lv_obj_signal+0x74>
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8006ac4:	7afb      	ldrb	r3, [r7, #11]
 8006ac6:	2b05      	cmp	r3, #5
 8006ac8:	d10d      	bne.n	8006ae6 <lv_obj_signal+0x56>
        if(style->body.shadow.width > obj->ext_draw_pad) obj->ext_draw_pad = style->body.shadow.width;
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	dd14      	ble.n	8006b04 <lv_obj_signal+0x74>
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	869a      	strh	r2, [r3, #52]	@ 0x34
 8006ae4:	e00e      	b.n	8006b04 <lv_obj_signal+0x74>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8006ae6:	7afb      	ldrb	r3, [r7, #11]
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d103      	bne.n	8006af4 <lv_obj_signal+0x64>
        lv_obj_refresh_ext_draw_pad(obj);
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f7ff fcc7 	bl	8006480 <lv_obj_refresh_ext_draw_pad>
 8006af2:	e007      	b.n	8006b04 <lv_obj_signal+0x74>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8006af4:	7afb      	ldrb	r3, [r7, #11]
 8006af6:	2b06      	cmp	r3, #6
 8006af8:	d104      	bne.n	8006b04 <lv_obj_signal+0x74>
        lv_obj_type_t * buf = param;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	617b      	str	r3, [r7, #20]
        buf->type[0]        = "lv_obj";
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	4a03      	ldr	r2, [pc, #12]	@ (8006b10 <lv_obj_signal+0x80>)
 8006b02:	601a      	str	r2, [r3, #0]
    }

    return res;
 8006b04:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3720      	adds	r7, #32
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	0801c5f8 	.word	0x0801c5f8

08006b14 <refresh_children_position>:
 * @param obj pointer to an object which children will be repositioned
 * @param x_diff x coordinate shift
 * @param y_diff y coordinate shift
 */
static void refresh_children_position(lv_obj_t * obj, lv_coord_t x_diff, lv_coord_t y_diff)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	807b      	strh	r3, [r7, #2]
 8006b20:	4613      	mov	r3, r2
 8006b22:	803b      	strh	r3, [r7, #0]
    lv_obj_t * i;
    LV_LL_READ(obj->child_ll, i)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3304      	adds	r3, #4
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f009 f9a8 	bl	800fe7e <lv_ll_get_head>
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	e036      	b.n	8006ba0 <refresh_children_position+0x8c>
    {
        i->coords.x1 += x_diff;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	887b      	ldrh	r3, [r7, #2]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	b21a      	sxth	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	821a      	strh	r2, [r3, #16]
        i->coords.y1 += y_diff;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	883b      	ldrh	r3, [r7, #0]
 8006b50:	4413      	add	r3, r2
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	b21a      	sxth	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	825a      	strh	r2, [r3, #18]
        i->coords.x2 += x_diff;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	887b      	ldrh	r3, [r7, #2]
 8006b64:	4413      	add	r3, r2
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	b21a      	sxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	829a      	strh	r2, [r3, #20]
        i->coords.y2 += y_diff;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	883b      	ldrh	r3, [r7, #0]
 8006b78:	4413      	add	r3, r2
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	b21a      	sxth	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	82da      	strh	r2, [r3, #22]

        refresh_children_position(i, x_diff, y_diff);
 8006b82:	f9b7 2000 	ldrsh.w	r2, [r7]
 8006b86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7ff ffc1 	bl	8006b14 <refresh_children_position>
    LV_LL_READ(obj->child_ll, i)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3304      	adds	r3, #4
 8006b96:	68f9      	ldr	r1, [r7, #12]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f009 f994 	bl	800fec6 <lv_ll_get_next>
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1c5      	bne.n	8006b32 <refresh_children_position+0x1e>
    }
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <refresh_children_style>:
 * Recursively refresh the style of the children. Go deeper until a not NULL style is found
 * because the NULL styles are inherited from the parent
 * @param obj pointer to an object
 */
static void refresh_children_style(lv_obj_t * obj)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
 8006bb8:	2100      	movs	r1, #0
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff fccd 	bl	800655a <lv_obj_get_child>
 8006bc0:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 8006bc2:	e01a      	b.n	8006bfa <refresh_children_style+0x4a>
        if(child->style_p == NULL) {
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <refresh_children_style+0x2a>
            refresh_children_style(child); /*Check children too*/
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff ffef 	bl	8006bb0 <refresh_children_style>
            lv_obj_refresh_style(child);   /*Notify the child about the style change*/
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f7ff fad1 	bl	800617a <lv_obj_refresh_style>
 8006bd8:	e00a      	b.n	8006bf0 <refresh_children_style+0x40>
        } else if(child->style_p->glass) {
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <refresh_children_style+0x40>
            /*Children with 'glass' parent might be effected if their style == NULL*/
            refresh_children_style(child);
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f7ff ffe0 	bl	8006bb0 <refresh_children_style>
        }
        child = lv_obj_get_child(obj, child);
 8006bf0:	68f9      	ldr	r1, [r7, #12]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff fcb1 	bl	800655a <lv_obj_get_child>
 8006bf8:	60f8      	str	r0, [r7, #12]
    while(child != NULL) {
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1e1      	bne.n	8006bc4 <refresh_children_style+0x14>
    }
}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <delete_children>:
/**
 * Called by 'lv_obj_del' to delete the children objects
 * @param obj pointer to an object (all of its children will be deleted)
 */
static void delete_children(lv_obj_t * obj)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b088      	sub	sp, #32
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
    lv_obj_t * i;
    lv_obj_t * i_next;
    i = lv_ll_get_head(&(obj->child_ll));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4618      	mov	r0, r3
 8006c18:	f009 f931 	bl	800fe7e <lv_ll_get_head>
 8006c1c:	61f8      	str	r0, [r7, #28]

    /*Remove from the group; remove before transversing children so that
     * the object still has access to all children during the
     * LV_SIGNAL_DEFOCUS call*/
#if LV_USE_GROUP
    lv_group_t * group = lv_obj_get_group(obj);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff fe85 	bl	800692e <lv_obj_get_group>
 8006c24:	6178      	str	r0, [r7, #20]
    if(group) lv_group_remove_obj(obj);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00f      	beq.n	8006c4c <delete_children+0x42>
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7fb fe83 	bl	8002938 <lv_group_remove_obj>
#endif

    while(i != NULL) {
 8006c32:	e00b      	b.n	8006c4c <delete_children+0x42>
        /*Get the next object before delete this*/
        i_next = lv_ll_get_next(&(obj->child_ll), i);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3304      	adds	r3, #4
 8006c38:	69f9      	ldr	r1, [r7, #28]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f009 f943 	bl	800fec6 <lv_ll_get_next>
 8006c40:	60f8      	str	r0, [r7, #12]

        /*Call the recursive del to the child too*/
        delete_children(i);
 8006c42:	69f8      	ldr	r0, [r7, #28]
 8006c44:	f7ff ffe1 	bl	8006c0a <delete_children>

        /*Set i to the next node*/
        i = i_next;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	61fb      	str	r3, [r7, #28]
    while(i != NULL) {
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1f0      	bne.n	8006c34 <delete_children+0x2a>
    }

    /*Let the suer free the resources used in `LV_EVENT_DELETE`*/
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
 8006c52:	2200      	movs	r2, #0
 8006c54:	2113      	movs	r1, #19
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7ff fb54 	bl	8006304 <lv_event_send>

    lv_event_mark_deleted(obj);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f853 	bl	8006d08 <lv_event_mark_deleted>

    /*Remove the animations from this object*/
#if LV_USE_ANIMATION
    lv_anim_del(obj, NULL);
 8006c62:	2100      	movs	r1, #0
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f008 f9ed 	bl	800f044 <lv_anim_del>
#endif

    /* Reset the input devices if
     * the object to delete is used*/
    lv_indev_t * indev = lv_indev_get_next(NULL);
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	f008 f908 	bl	800ee80 <lv_indev_get_next>
 8006c70:	61b8      	str	r0, [r7, #24]
    while(indev) {
 8006c72:	e026      	b.n	8006cc2 <delete_children+0xb8>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d004      	beq.n	8006c88 <delete_children+0x7e>
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d102      	bne.n	8006c8e <delete_children+0x84>
            lv_indev_reset(indev);
 8006c88:	69b8      	ldr	r0, [r7, #24]
 8006c8a:	f7fc fa3f 	bl	800310c <lv_indev_reset>
        }

        if(indev->proc.types.pointer.last_pressed == obj) {
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d102      	bne.n	8006c9e <delete_children+0x94>
            indev->proc.types.pointer.last_pressed = NULL;
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
#if LV_USE_GROUP
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
 8006c9e:	69bb      	ldr	r3, [r7, #24]
 8006ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d108      	bne.n	8006cba <delete_children+0xb0>
 8006ca8:	f7fc fae4 	bl	8003274 <lv_indev_get_obj_act>
 8006cac:	4602      	mov	r2, r0
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d102      	bne.n	8006cba <delete_children+0xb0>
            lv_indev_reset(indev);
 8006cb4:	69b8      	ldr	r0, [r7, #24]
 8006cb6:	f7fc fa29 	bl	800310c <lv_indev_reset>
        }
#endif
        indev = lv_indev_get_next(indev);
 8006cba:	69b8      	ldr	r0, [r7, #24]
 8006cbc:	f008 f8e0 	bl	800ee80 <lv_indev_get_next>
 8006cc0:	61b8      	str	r0, [r7, #24]
    while(indev) {
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1d5      	bne.n	8006c74 <delete_children+0x6a>
    }

    /*Remove the object from parent's children list*/
    lv_obj_t * par = lv_obj_get_parent(obj);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff fc3b 	bl	8006544 <lv_obj_get_parent>
 8006cce:	6138      	str	r0, [r7, #16]
    lv_ll_rem(&(par->child_ll), obj);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	6879      	ldr	r1, [r7, #4]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f009 f823 	bl	800fd22 <lv_ll_rem>

    /* Clean up the object specific data*/
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	69db      	ldr	r3, [r3, #28]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4798      	blx	r3

    /*Delete the base objects*/
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <delete_children+0xf0>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f009 fa1d 	bl	8010134 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f009 fa1a 	bl	8010134 <lv_mem_free>
}
 8006d00:	bf00      	nop
 8006d02:	3720      	adds	r7, #32
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <lv_event_mark_deleted>:

static void lv_event_mark_deleted(lv_obj_t * obj)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
    lv_event_temp_data_t * t = event_temp_data_head;
 8006d10:	4b0b      	ldr	r3, [pc, #44]	@ (8006d40 <lv_event_mark_deleted+0x38>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	60fb      	str	r3, [r7, #12]

    while(t) {
 8006d16:	e00a      	b.n	8006d2e <lv_event_mark_deleted+0x26>
        if(t->obj == obj) t->deleted = true;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d102      	bne.n	8006d28 <lv_event_mark_deleted+0x20>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2201      	movs	r2, #1
 8006d26:	711a      	strb	r2, [r3, #4]
        t = t->prev;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	60fb      	str	r3, [r7, #12]
    while(t) {
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1f1      	bne.n	8006d18 <lv_event_mark_deleted+0x10>
    }
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr
 8006d40:	200029cc 	.word	0x200029cc

08006d44 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8006d4e:	2208      	movs	r2, #8
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f014 fe49 	bl	801b9ea <memcpy>
}
 8006d58:	bf00      	nop
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	b21b      	sxth	r3, r3
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr

08006d8c <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	3301      	adds	r3, #1
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	b21b      	sxth	r3, r3
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc80      	pop	{r7}
 8006db6:	4770      	bx	lr

08006db8 <lv_refr_init>:

/**
 * Initialize the screen refresh subsystem
 */
void lv_refr_init(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
    /*Nothing to do*/
}
 8006dbc:	bf00      	nop
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bc80      	pop	{r7}
 8006dc2:	4770      	bx	lr

08006dc4 <lv_inv_area>:
 * @param area_p pointer to area which should be invalidated (NULL: delete the invalidated areas)
 * @param disp pointer to display where the area should be invalidated (NULL can be used if there is
 * only one display)
 */
void lv_inv_area(lv_disp_t * disp, const lv_area_t * area_p)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
    if(!disp) disp = lv_disp_get_default();
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d102      	bne.n	8006dda <lv_inv_area+0x16>
 8006dd4:	f007 feee 	bl	800ebb4 <lv_disp_get_default>
 8006dd8:	6078      	str	r0, [r7, #4]
    if(!disp) return;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 809b 	beq.w	8006f18 <lv_inv_area+0x154>

    /*Clear the invalidate buffer if the parameter is NULL*/
    if(area_p == NULL) {
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d107      	bne.n	8006df8 <lv_inv_area+0x34>
        disp->inv_p = 0;
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	f8b2 3160 	ldrh.w	r3, [r2, #352]	@ 0x160
 8006dee:	f36f 0309 	bfc	r3, #0, #10
 8006df2:	f8a2 3160 	strh.w	r3, [r2, #352]	@ 0x160
        return;
 8006df6:	e092      	b.n	8006f1e <lv_inv_area+0x15a>
    }

    lv_area_t scr_area;
    scr_area.x1 = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	82bb      	strh	r3, [r7, #20]
    scr_area.y1 = 0;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	82fb      	strh	r3, [r7, #22]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f007 fee1 	bl	800ebc8 <lv_disp_get_hor_res>
 8006e06:	4603      	mov	r3, r0
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	b21b      	sxth	r3, r3
 8006e10:	833b      	strh	r3, [r7, #24]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f007 fefa 	bl	800ec0c <lv_disp_get_ver_res>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	b21b      	sxth	r3, r3
 8006e22:	837b      	strh	r3, [r7, #26]

    lv_area_t com_area;
    bool suc;

    suc = lv_area_intersect(&com_area, area_p, &scr_area);
 8006e24:	f107 0214 	add.w	r2, r7, #20
 8006e28:	f107 030c 	add.w	r3, r7, #12
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f008 fb94 	bl	800f55c <lv_area_intersect>
 8006e34:	4603      	mov	r3, r0
 8006e36:	777b      	strb	r3, [r7, #29]

    /*The area is truncated to the screen*/
    if(suc != false) {
 8006e38:	7f7b      	ldrb	r3, [r7, #29]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d06f      	beq.n	8006f1e <lv_inv_area+0x15a>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp_refr->driver, &com_area);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d008      	beq.n	8006e58 <lv_inv_area+0x94>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	4a36      	ldr	r2, [pc, #216]	@ (8006f24 <lv_inv_area+0x160>)
 8006e4c:	6812      	ldr	r2, [r2, #0]
 8006e4e:	4610      	mov	r0, r2
 8006e50:	f107 020c 	add.w	r2, r7, #12
 8006e54:	4611      	mov	r1, r2
 8006e56:	4798      	blx	r3

        /*Save only if this area is not in one of the saved areas*/
        uint16_t i;
        for(i = 0; i < disp->inv_p; i++) {
 8006e58:	2300      	movs	r3, #0
 8006e5a:	83fb      	strh	r3, [r7, #30]
 8006e5c:	e010      	b.n	8006e80 <lv_inv_area+0xbc>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 8006e5e:	8bfb      	ldrh	r3, [r7, #30]
 8006e60:	3308      	adds	r3, #8
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	441a      	add	r2, r3
 8006e68:	f107 030c 	add.w	r3, r7, #12
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f008 fc5b 	bl	800f72a <lv_area_is_in>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d150      	bne.n	8006f1c <lv_inv_area+0x158>
        for(i = 0; i < disp->inv_p; i++) {
 8006e7a:	8bfb      	ldrh	r3, [r7, #30]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	83fb      	strh	r3, [r7, #30]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 8006e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	8bfb      	ldrh	r3, [r7, #30]
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d3e4      	bcc.n	8006e5e <lv_inv_area+0x9a>
        }

        /*Save the area*/
        if(disp->inv_p < LV_INV_BUF_SIZE) {
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 8006e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	2b1f      	cmp	r3, #31
 8006ea2:	d810      	bhi.n	8006ec6 <lv_inv_area+0x102>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 8006eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3308      	adds	r3, #8
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f107 020c 	add.w	r2, r7, #12
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff ff40 	bl	8006d44 <lv_area_copy>
 8006ec4:	e016      	b.n	8006ef4 <lv_inv_area+0x130>
        } else { /*If no place for the area add the screen*/
            disp->inv_p = 0;
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	f8b2 3160 	ldrh.w	r3, [r2, #352]	@ 0x160
 8006ecc:	f36f 0309 	bfc	r3, #0, #10
 8006ed0:	f8a2 3160 	strh.w	r3, [r2, #352]	@ 0x160
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 8006eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f107 0214 	add.w	r2, r7, #20
 8006eec:	4611      	mov	r1, r2
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7ff ff28 	bl	8006d44 <lv_area_copy>
        }
        disp->inv_p++;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 8006efa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	3301      	adds	r3, #1
 8006f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f06:	b299      	uxth	r1, r3
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	f8b2 3160 	ldrh.w	r3, [r2, #352]	@ 0x160
 8006f0e:	f361 0309 	bfi	r3, r1, #0, #10
 8006f12:	f8a2 3160 	strh.w	r3, [r2, #352]	@ 0x160
 8006f16:	e002      	b.n	8006f1e <lv_inv_area+0x15a>
    if(!disp) return;
 8006f18:	bf00      	nop
 8006f1a:	e000      	b.n	8006f1e <lv_inv_area+0x15a>
            if(lv_area_is_in(&com_area, &disp->inv_areas[i]) != false) return;
 8006f1c:	bf00      	nop
    }
}
 8006f1e:	3720      	adds	r7, #32
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	200029d8 	.word	0x200029d8

08006f28 <lv_refr_get_disp_refreshing>:
/**
 * Get the display which is being refreshed
 * @return the display being refreshed
 */
lv_disp_t * lv_refr_get_disp_refreshing(void)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	af00      	add	r7, sp, #0
    return disp_refr;
 8006f2c:	4b02      	ldr	r3, [pc, #8]	@ (8006f38 <lv_refr_get_disp_refreshing+0x10>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr
 8006f38:	200029d8 	.word	0x200029d8

08006f3c <lv_disp_refr_task>:
/**
 * Called periodically to handle the refreshing
 * @param task pointer to the task itself
 */
void lv_disp_refr_task(lv_task_t * task)
{
 8006f3c:	b5b0      	push	{r4, r5, r7, lr}
 8006f3e:	b08a      	sub	sp, #40	@ 0x28
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("lv_refr_task: started");

    uint32_t start = lv_tick_get();
 8006f44:	f007 fffe 	bl	800ef44 <lv_tick_get>
 8006f48:	61f8      	str	r0, [r7, #28]

    disp_refr = task->user_data;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	4a6c      	ldr	r2, [pc, #432]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 8006f50:	6013      	str	r3, [r2, #0]

    lv_refr_join_area();
 8006f52:	f000 f8d9 	bl	8007108 <lv_refr_join_area>

    lv_refr_areas();
 8006f56:	f000 f975 	bl	8007244 <lv_refr_areas>

    /*If refresh happened ...*/
    if(disp_refr->inv_p != 0) {
 8006f5a:	4b69      	ldr	r3, [pc, #420]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 8006f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 80c2 	beq.w	80070f2 <lv_disp_refr_task+0x1b6>
        /*In true double buffered mode copy the refreshed areas to the new VDB to keep it up to
         * date*/
        if(lv_disp_is_true_double_buf(disp_refr)) {
 8006f6e:	4b64      	ldr	r3, [pc, #400]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f007 fef7 	bl	800ed66 <lv_disp_is_true_double_buf>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 808b 	beq.w	8007096 <lv_disp_refr_task+0x15a>
            lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8006f80:	4b5f      	ldr	r3, [pc, #380]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f007 fe8d 	bl	800eca4 <lv_disp_get_buf>
 8006f8a:	61b8      	str	r0, [r7, #24]

            /*Flush the content of the VDB*/
            lv_refr_vdb_flush();
 8006f8c:	f000 fc62 	bl	8007854 <lv_refr_vdb_flush>

            /* With true double buffering the flushing should be only the address change of the
             * current frame buffer. Wait until the address change is ready and copy the changed
             * content to the other frame buffer (new active VDB) to keep the buffers synchronized*/
            while(vdb->flushing)
 8006f90:	bf00      	nop
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1f8      	bne.n	8006f92 <lv_disp_refr_task+0x56>
                ;

            uint8_t * buf_act = (uint8_t *)vdb->buf_act;
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	617b      	str	r3, [r7, #20]
            uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	689a      	ldr	r2, [r3, #8]
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d102      	bne.n	8006fb8 <lv_disp_refr_task+0x7c>
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	e001      	b.n	8006fbc <lv_disp_refr_task+0x80>
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	613b      	str	r3, [r7, #16]

            lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
 8006fbe:	4b50      	ldr	r3, [pc, #320]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f007 fe00 	bl	800ebc8 <lv_disp_get_hor_res>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	81fb      	strh	r3, [r7, #14]
            uint16_t a;
            for(a = 0; a < disp_refr->inv_p; a++) {
 8006fcc:	2300      	movs	r3, #0
 8006fce:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006fd0:	e056      	b.n	8007080 <lv_disp_refr_task+0x144>
                if(disp_refr->inv_area_joined[a] == 0) {
 8006fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006fd8:	4413      	add	r3, r2
 8006fda:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d14b      	bne.n	800707a <lv_disp_refr_task+0x13e>
                    lv_coord_t y;
                    uint32_t start_offs =
                        (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
 8006fe2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006fe6:	4b46      	ldr	r3, [pc, #280]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 8006fe8:	6819      	ldr	r1, [r3, #0]
 8006fea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006fec:	3308      	adds	r3, #8
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	440b      	add	r3, r1
 8006ff2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006ff6:	fb02 f303 	mul.w	r3, r2, r3
 8006ffa:	4a41      	ldr	r2, [pc, #260]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 8006ffc:	6812      	ldr	r2, [r2, #0]
 8006ffe:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8007000:	3108      	adds	r1, #8
 8007002:	f932 2031 	ldrsh.w	r2, [r2, r1, lsl #3]
 8007006:	4413      	add	r3, r2
                    uint32_t start_offs =
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	623b      	str	r3, [r7, #32]
                    uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
 800700c:	4b3c      	ldr	r3, [pc, #240]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007012:	3308      	adds	r3, #8
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	4413      	add	r3, r2
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff fea1 	bl	8006d60 <lv_area_get_width>
 800701e:	4603      	mov	r3, r0
 8007020:	005b      	lsls	r3, r3, #1
 8007022:	60bb      	str	r3, [r7, #8]

                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 8007024:	4b36      	ldr	r3, [pc, #216]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800702a:	3308      	adds	r3, #8
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	4413      	add	r3, r2
 8007030:	885b      	ldrh	r3, [r3, #2]
 8007032:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007034:	e015      	b.n	8007062 <lv_disp_refr_task+0x126>
                        memcpy(buf_act + start_offs, buf_ina + start_offs, line_length);
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	6a3b      	ldr	r3, [r7, #32]
 800703a:	18d0      	adds	r0, r2, r3
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	6a3b      	ldr	r3, [r7, #32]
 8007040:	4413      	add	r3, r2
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	4619      	mov	r1, r3
 8007046:	f014 fcd0 	bl	801b9ea <memcpy>
                        start_offs += hres * sizeof(lv_color_t);
 800704a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800704e:	005b      	lsls	r3, r3, #1
 8007050:	6a3a      	ldr	r2, [r7, #32]
 8007052:	4413      	add	r3, r2
 8007054:	623b      	str	r3, [r7, #32]
                    for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
 8007056:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800705a:	b29b      	uxth	r3, r3
 800705c:	3301      	adds	r3, #1
 800705e:	b29b      	uxth	r3, r3
 8007060:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007062:	4b27      	ldr	r3, [pc, #156]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007068:	3308      	adds	r3, #8
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	4413      	add	r3, r2
 800706e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007072:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8007076:	429a      	cmp	r2, r3
 8007078:	dddd      	ble.n	8007036 <lv_disp_refr_task+0xfa>
            for(a = 0; a < disp_refr->inv_p; a++) {
 800707a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800707c:	3301      	adds	r3, #1
 800707e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007080:	4b1f      	ldr	r3, [pc, #124]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 8007088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800708c:	b29b      	uxth	r3, r3
 800708e:	461a      	mov	r2, r3
 8007090:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007092:	4293      	cmp	r3, r2
 8007094:	d39d      	bcc.n	8006fd2 <lv_disp_refr_task+0x96>
                }
            }
        } /*End of true double buffer handling*/

        /*Clean up*/
        memset(disp_refr->inv_areas, 0, sizeof(disp_refr->inv_areas));
 8007096:	4b1a      	ldr	r3, [pc, #104]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	3340      	adds	r3, #64	@ 0x40
 800709c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80070a0:	2100      	movs	r1, #0
 80070a2:	4618      	mov	r0, r3
 80070a4:	f014 fc1d 	bl	801b8e2 <memset>
        memset(disp_refr->inv_area_joined, 0, sizeof(disp_refr->inv_area_joined));
 80070a8:	4b15      	ldr	r3, [pc, #84]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80070b0:	2220      	movs	r2, #32
 80070b2:	2100      	movs	r1, #0
 80070b4:	4618      	mov	r0, r3
 80070b6:	f014 fc14 	bl	801b8e2 <memset>
        disp_refr->inv_p = 0;
 80070ba:	4b11      	ldr	r3, [pc, #68]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	f8b2 3160 	ldrh.w	r3, [r2, #352]	@ 0x160
 80070c2:	f36f 0309 	bfc	r3, #0, #10
 80070c6:	f8a2 3160 	strh.w	r3, [r2, #352]	@ 0x160

        /*Call monitor cb if present*/
        if(disp_refr->driver.monitor_cb) {
 80070ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00e      	beq.n	80070f2 <lv_disp_refr_task+0x1b6>
            disp_refr->driver.monitor_cb(&disp_refr->driver, lv_tick_elaps(start), px_num);
 80070d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699c      	ldr	r4, [r3, #24]
 80070da:	4b09      	ldr	r3, [pc, #36]	@ (8007100 <lv_disp_refr_task+0x1c4>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	461d      	mov	r5, r3
 80070e0:	69f8      	ldr	r0, [r7, #28]
 80070e2:	f007 ff36 	bl	800ef52 <lv_tick_elaps>
 80070e6:	4601      	mov	r1, r0
 80070e8:	4b06      	ldr	r3, [pc, #24]	@ (8007104 <lv_disp_refr_task+0x1c8>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	461a      	mov	r2, r3
 80070ee:	4628      	mov	r0, r5
 80070f0:	47a0      	blx	r4
        }
    }

    lv_draw_free_buf();
 80070f2:	f000 fecb 	bl	8007e8c <lv_draw_free_buf>

    LV_LOG_TRACE("lv_refr_task: ready");
}
 80070f6:	bf00      	nop
 80070f8:	3728      	adds	r7, #40	@ 0x28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bdb0      	pop	{r4, r5, r7, pc}
 80070fe:	bf00      	nop
 8007100:	200029d8 	.word	0x200029d8
 8007104:	200029d4 	.word	0x200029d4

08007108 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
 8007108:	b5b0      	push	{r4, r5, r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 800710e:	2300      	movs	r3, #0
 8007110:	60bb      	str	r3, [r7, #8]
 8007112:	e083      	b.n	800721c <lv_refr_join_area+0x114>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8007114:	4b4a      	ldr	r3, [pc, #296]	@ (8007240 <lv_refr_join_area+0x138>)
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	4413      	add	r3, r2
 800711c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d176      	bne.n	8007214 <lv_refr_join_area+0x10c>

        /*Check all areas to join them in 'join_in'*/
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 8007126:	2300      	movs	r3, #0
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	e067      	b.n	80071fc <lv_refr_join_area+0xf4>
            /*Handle only unjoined areas and ignore itself*/
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
 800712c:	4b44      	ldr	r3, [pc, #272]	@ (8007240 <lv_refr_join_area+0x138>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d158      	bne.n	80071f0 <lv_refr_join_area+0xe8>
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	429a      	cmp	r2, r3
 8007144:	d054      	beq.n	80071f0 <lv_refr_join_area+0xe8>
                continue;
            }

            /*Check if the areas are on each other*/
            if(lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
 8007146:	4b3e      	ldr	r3, [pc, #248]	@ (8007240 <lv_refr_join_area+0x138>)
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	3308      	adds	r3, #8
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	18d0      	adds	r0, r2, r3
 8007152:	4b3b      	ldr	r3, [pc, #236]	@ (8007240 <lv_refr_join_area+0x138>)
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3308      	adds	r3, #8
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	4413      	add	r3, r2
 800715e:	4619      	mov	r1, r3
 8007160:	f008 fab6 	bl	800f6d0 <lv_area_is_on>
 8007164:	4603      	mov	r3, r0
 8007166:	f083 0301 	eor.w	r3, r3, #1
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d141      	bne.n	80071f4 <lv_refr_join_area+0xec>
                continue;
            }

            lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
 8007170:	4b33      	ldr	r3, [pc, #204]	@ (8007240 <lv_refr_join_area+0x138>)
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	3308      	adds	r3, #8
 8007178:	00db      	lsls	r3, r3, #3
 800717a:	18d1      	adds	r1, r2, r3
 800717c:	4b30      	ldr	r3, [pc, #192]	@ (8007240 <lv_refr_join_area+0x138>)
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3308      	adds	r3, #8
 8007184:	00db      	lsls	r3, r3, #3
 8007186:	441a      	add	r2, r3
 8007188:	463b      	mov	r3, r7
 800718a:	4618      	mov	r0, r3
 800718c:	f008 fa36 	bl	800f5fc <lv_area_join>

            /*Join two area only if the joined area size is smaller*/
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 8007190:	463b      	mov	r3, r7
 8007192:	4618      	mov	r0, r3
 8007194:	f008 f9c2 	bl	800f51c <lv_area_get_size>
 8007198:	4604      	mov	r4, r0
 800719a:	4b29      	ldr	r3, [pc, #164]	@ (8007240 <lv_refr_join_area+0x138>)
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	3308      	adds	r3, #8
 80071a2:	00db      	lsls	r3, r3, #3
 80071a4:	4413      	add	r3, r2
 80071a6:	4618      	mov	r0, r3
 80071a8:	f008 f9b8 	bl	800f51c <lv_area_get_size>
 80071ac:	4605      	mov	r5, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
 80071ae:	4b24      	ldr	r3, [pc, #144]	@ (8007240 <lv_refr_join_area+0x138>)
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3308      	adds	r3, #8
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	4413      	add	r3, r2
 80071ba:	4618      	mov	r0, r3
 80071bc:	f008 f9ae 	bl	800f51c <lv_area_get_size>
 80071c0:	4603      	mov	r3, r0
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
 80071c2:	442b      	add	r3, r5
 80071c4:	429c      	cmp	r4, r3
 80071c6:	d216      	bcs.n	80071f6 <lv_refr_join_area+0xee>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
 80071c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007240 <lv_refr_join_area+0x138>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	3308      	adds	r3, #8
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	4413      	add	r3, r2
 80071d4:	463a      	mov	r2, r7
 80071d6:	4611      	mov	r1, r2
 80071d8:	4618      	mov	r0, r3
 80071da:	f7ff fdb3 	bl	8006d44 <lv_area_copy>

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
 80071de:	4b18      	ldr	r3, [pc, #96]	@ (8007240 <lv_refr_join_area+0x138>)
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4413      	add	r3, r2
 80071e6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80071ea:	2201      	movs	r2, #1
 80071ec:	701a      	strb	r2, [r3, #0]
 80071ee:	e002      	b.n	80071f6 <lv_refr_join_area+0xee>
                continue;
 80071f0:	bf00      	nop
 80071f2:	e000      	b.n	80071f6 <lv_refr_join_area+0xee>
                continue;
 80071f4:	bf00      	nop
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3301      	adds	r3, #1
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	4b10      	ldr	r3, [pc, #64]	@ (8007240 <lv_refr_join_area+0x138>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 8007204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007208:	b29b      	uxth	r3, r3
 800720a:	461a      	mov	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4293      	cmp	r3, r2
 8007210:	d38c      	bcc.n	800712c <lv_refr_join_area+0x24>
 8007212:	e000      	b.n	8007216 <lv_refr_join_area+0x10e>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
 8007214:	bf00      	nop
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	3301      	adds	r3, #1
 800721a:	60bb      	str	r3, [r7, #8]
 800721c:	4b08      	ldr	r3, [pc, #32]	@ (8007240 <lv_refr_join_area+0x138>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 8007224:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007228:	b29b      	uxth	r3, r3
 800722a:	461a      	mov	r2, r3
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	4293      	cmp	r3, r2
 8007230:	f4ff af70 	bcc.w	8007114 <lv_refr_join_area+0xc>
            }
        }
    }
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bdb0      	pop	{r4, r5, r7, pc}
 800723e:	bf00      	nop
 8007240:	200029d8 	.word	0x200029d8

08007244 <lv_refr_areas>:

/**
 * Refresh the joined areas
 */
static void lv_refr_areas(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
    px_num = 0;
 800724a:	4b1f      	ldr	r3, [pc, #124]	@ (80072c8 <lv_refr_areas+0x84>)
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < disp_refr->inv_p; i++) {
 8007250:	2300      	movs	r3, #0
 8007252:	607b      	str	r3, [r7, #4]
 8007254:	e028      	b.n	80072a8 <lv_refr_areas+0x64>
        /*Refresh the unjoined areas*/
        if(disp_refr->inv_area_joined[i] == 0) {
 8007256:	4b1d      	ldr	r3, [pc, #116]	@ (80072cc <lv_refr_areas+0x88>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4413      	add	r3, r2
 800725e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d11c      	bne.n	80072a2 <lv_refr_areas+0x5e>

            lv_refr_area(&disp_refr->inv_areas[i]);
 8007268:	4b18      	ldr	r3, [pc, #96]	@ (80072cc <lv_refr_areas+0x88>)
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	3308      	adds	r3, #8
 8007270:	00db      	lsls	r3, r3, #3
 8007272:	4413      	add	r3, r2
 8007274:	4618      	mov	r0, r3
 8007276:	f000 f82b 	bl	80072d0 <lv_refr_area>

            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
 800727a:	4b14      	ldr	r3, [pc, #80]	@ (80072cc <lv_refr_areas+0x88>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00e      	beq.n	80072a2 <lv_refr_areas+0x5e>
 8007284:	4b11      	ldr	r3, [pc, #68]	@ (80072cc <lv_refr_areas+0x88>)
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	3308      	adds	r3, #8
 800728c:	00db      	lsls	r3, r3, #3
 800728e:	4413      	add	r3, r2
 8007290:	4618      	mov	r0, r3
 8007292:	f008 f943 	bl	800f51c <lv_area_get_size>
 8007296:	4602      	mov	r2, r0
 8007298:	4b0b      	ldr	r3, [pc, #44]	@ (80072c8 <lv_refr_areas+0x84>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4413      	add	r3, r2
 800729e:	4a0a      	ldr	r2, [pc, #40]	@ (80072c8 <lv_refr_areas+0x84>)
 80072a0:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3301      	adds	r3, #1
 80072a6:	607b      	str	r3, [r7, #4]
 80072a8:	4b08      	ldr	r3, [pc, #32]	@ (80072cc <lv_refr_areas+0x88>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 80072b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	461a      	mov	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d3cb      	bcc.n	8007256 <lv_refr_areas+0x12>
        }
    }
}
 80072be:	bf00      	nop
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	200029d4 	.word	0x200029d4
 80072cc:	200029d8 	.word	0x200029d8

080072d0 <lv_refr_area>:
/**
 * Refresh an area if there is Virtual Display Buffer
 * @param area_p  pointer to an area to refresh
 */
static void lv_refr_area(const lv_area_t * area_p)
{
 80072d0:	b590      	push	{r4, r7, lr}
 80072d2:	b08d      	sub	sp, #52	@ 0x34
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
    /*True double buffering: there are two screen sized buffers. Just redraw directly into a
     * buffer*/
    if(lv_disp_is_true_double_buf(disp_refr)) {
 80072d8:	4b7f      	ldr	r3, [pc, #508]	@ (80074d8 <lv_refr_area+0x208>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4618      	mov	r0, r3
 80072de:	f007 fd42 	bl	800ed66 <lv_disp_is_true_double_buf>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d027      	beq.n	8007338 <lv_refr_area+0x68>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80072e8:	4b7b      	ldr	r3, [pc, #492]	@ (80074d8 <lv_refr_area+0x208>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f007 fcd9 	bl	800eca4 <lv_disp_get_buf>
 80072f2:	6178      	str	r0, [r7, #20]
        vdb->area.x1        = 0;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	2200      	movs	r2, #0
 80072f8:	821a      	strh	r2, [r3, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
 80072fa:	4b77      	ldr	r3, [pc, #476]	@ (80074d8 <lv_refr_area+0x208>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4618      	mov	r0, r3
 8007300:	f007 fc62 	bl	800ebc8 <lv_disp_get_hor_res>
 8007304:	4603      	mov	r3, r0
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	b29b      	uxth	r3, r3
 800730c:	b21a      	sxth	r2, r3
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	829a      	strh	r2, [r3, #20]
        vdb->area.y1        = 0;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2200      	movs	r2, #0
 8007316:	825a      	strh	r2, [r3, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
 8007318:	4b6f      	ldr	r3, [pc, #444]	@ (80074d8 <lv_refr_area+0x208>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4618      	mov	r0, r3
 800731e:	f007 fc75 	bl	800ec0c <lv_disp_get_ver_res>
 8007322:	4603      	mov	r3, r0
 8007324:	b29b      	uxth	r3, r3
 8007326:	3b01      	subs	r3, #1
 8007328:	b29b      	uxth	r3, r3
 800732a:	b21a      	sxth	r2, r3
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	82da      	strh	r2, [r3, #22]
        lv_refr_area_part(area_p);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f8d3 	bl	80074dc <lv_refr_area_part>
 8007336:	e0cb      	b.n	80074d0 <lv_refr_area+0x200>
    }
    /*The buffer is smaller: refresh the area in parts*/
    else {
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 8007338:	4b67      	ldr	r3, [pc, #412]	@ (80074d8 <lv_refr_area+0x208>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4618      	mov	r0, r3
 800733e:	f007 fcb1 	bl	800eca4 <lv_disp_get_buf>
 8007342:	6238      	str	r0, [r7, #32]
        /*Calculate the max row num*/
        lv_coord_t w = lv_area_get_width(area_p);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff fd0b 	bl	8006d60 <lv_area_get_width>
 800734a:	4603      	mov	r3, r0
 800734c:	83fb      	strh	r3, [r7, #30]
        lv_coord_t h = lv_area_get_height(area_p);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7ff fd1c 	bl	8006d8c <lv_area_get_height>
 8007354:	4603      	mov	r3, r0
 8007356:	83bb      	strh	r3, [r7, #28]
        lv_coord_t y2 =
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800735e:	4b5e      	ldr	r3, [pc, #376]	@ (80074d8 <lv_refr_area+0x208>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4618      	mov	r0, r3
 8007364:	f007 fc52 	bl	800ec0c <lv_disp_get_ver_res>
 8007368:	4603      	mov	r3, r0
        lv_coord_t y2 =
 800736a:	429c      	cmp	r4, r3
 800736c:	db0c      	blt.n	8007388 <lv_refr_area+0xb8>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? y2 = lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
 800736e:	4b5a      	ldr	r3, [pc, #360]	@ (80074d8 <lv_refr_area+0x208>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f007 fc4a 	bl	800ec0c <lv_disp_get_ver_res>
 8007378:	4603      	mov	r3, r0
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29b      	uxth	r3, r3
 8007380:	837b      	strh	r3, [r7, #26]
        lv_coord_t y2 =
 8007382:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007386:	e002      	b.n	800738e <lv_refr_area+0xbe>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800738e:	837b      	strh	r3, [r7, #26]

        int32_t max_row = (uint32_t)vdb->size / w;
 8007390:	6a3b      	ldr	r3, [r7, #32]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007398:	fbb2 f3f3 	udiv	r3, r2, r3
 800739c:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if(max_row > h) max_row = h;
 800739e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80073a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073a4:	429a      	cmp	r2, r3
 80073a6:	dd02      	ble.n	80073ae <lv_refr_area+0xde>
 80073a8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80073ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /*Round down the lines of VDB if rounding is added*/
        if(disp_refr->driver.rounder_cb) {
 80073ae:	4b4a      	ldr	r3, [pc, #296]	@ (80074d8 <lv_refr_area+0x208>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d034      	beq.n	8007422 <lv_refr_area+0x152>
            lv_area_t tmp;
            tmp.x1 = 0;
 80073b8:	2300      	movs	r3, #0
 80073ba:	81bb      	strh	r3, [r7, #12]
            tmp.x2 = 0;
 80073bc:	2300      	movs	r3, #0
 80073be:	823b      	strh	r3, [r7, #16]
            tmp.y1 = 0;
 80073c0:	2300      	movs	r3, #0
 80073c2:	81fb      	strh	r3, [r7, #14]

            lv_coord_t y_tmp = max_row - 1;
 80073c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
            do {
                tmp.y2 = y_tmp;
 80073ce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80073d0:	827b      	strh	r3, [r7, #18]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
 80073d2:	4b41      	ldr	r3, [pc, #260]	@ (80074d8 <lv_refr_area+0x208>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	4a3f      	ldr	r2, [pc, #252]	@ (80074d8 <lv_refr_area+0x208>)
 80073da:	6812      	ldr	r2, [r2, #0]
 80073dc:	4610      	mov	r0, r2
 80073de:	f107 020c 	add.w	r2, r7, #12
 80073e2:	4611      	mov	r1, r2
 80073e4:	4798      	blx	r3

                /*If this height fits into `max_row` then fine*/
                if(lv_area_get_height(&tmp) <= max_row) break;
 80073e6:	f107 030c 	add.w	r3, r7, #12
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff fcce 	bl	8006d8c <lv_area_get_height>
 80073f0:	4603      	mov	r3, r0
 80073f2:	461a      	mov	r2, r3
 80073f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f6:	4293      	cmp	r3, r2
 80073f8:	da0a      	bge.n	8007410 <lv_refr_area+0x140>

                /*Decrement the height of the area until it fits into `max_row` after rounding*/
                y_tmp--;
 80073fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80073fe:	b29b      	uxth	r3, r3
 8007400:	3b01      	subs	r3, #1
 8007402:	b29b      	uxth	r3, r3
 8007404:	857b      	strh	r3, [r7, #42]	@ 0x2a
            } while(y_tmp != 0);
 8007406:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1df      	bne.n	80073ce <lv_refr_area+0xfe>
 800740e:	e000      	b.n	8007412 <lv_refr_area+0x142>
                if(lv_area_get_height(&tmp) <= max_row) break;
 8007410:	bf00      	nop

            if(y_tmp == 0) {
 8007412:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8007416:	2b00      	cmp	r3, #0
 8007418:	d059      	beq.n	80074ce <lv_refr_area+0x1fe>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
                            "small VDB)");
                return;
            } else {
                max_row = tmp.y2 + 1;
 800741a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800741e:	3301      	adds	r3, #1
 8007420:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
        }

        /*Always use the full row*/
        lv_coord_t row;
        lv_coord_t row_last = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	84fb      	strh	r3, [r7, #38]	@ 0x26
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	885b      	ldrh	r3, [r3, #2]
 800742a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800742c:	e02c      	b.n	8007488 <lv_refr_area+0x1b8>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007446:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = row + max_row - 1;
 8007448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744a:	b29a      	uxth	r2, r3
 800744c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800744e:	4413      	add	r3, r2
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	b29b      	uxth	r3, r3
 8007456:	b21a      	sxth	r2, r3
 8007458:	6a3b      	ldr	r3, [r7, #32]
 800745a:	82da      	strh	r2, [r3, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8007462:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8007466:	429a      	cmp	r2, r3
 8007468:	da02      	bge.n	8007470 <lv_refr_area+0x1a0>
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	8b7a      	ldrh	r2, [r7, #26]
 800746e:	82da      	strh	r2, [r3, #22]
            row_last = vdb->area.y2;
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	8adb      	ldrh	r3, [r3, #22]
 8007474:	84fb      	strh	r3, [r7, #38]	@ 0x26
            lv_refr_area_part(area_p);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f830 	bl	80074dc <lv_refr_area_part>
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
 800747c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747e:	b29a      	uxth	r2, r3
 8007480:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007482:	4413      	add	r3, r2
 8007484:	b29b      	uxth	r3, r3
 8007486:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007488:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 800748c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748e:	4413      	add	r3, r2
 8007490:	1e5a      	subs	r2, r3, #1
 8007492:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007496:	429a      	cmp	r2, r3
 8007498:	ddc9      	ble.n	800742e <lv_refr_area+0x15e>
        }

        /*If the last y coordinates are not handled yet ...*/
        if(y2 != row_last) {
 800749a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800749e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d014      	beq.n	80074d0 <lv_refr_area+0x200>
            /*Calc. the next y coordinates of VDB*/
            vdb->area.x1 = area_p->x1;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	821a      	strh	r2, [r3, #16]
            vdb->area.x2 = area_p->x2;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	829a      	strh	r2, [r3, #20]
            vdb->area.y1 = row;
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80074be:	825a      	strh	r2, [r3, #18]
            vdb->area.y2 = y2;
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	8b7a      	ldrh	r2, [r7, #26]
 80074c4:	82da      	strh	r2, [r3, #22]

            /*Refresh this part too*/
            lv_refr_area_part(area_p);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f808 	bl	80074dc <lv_refr_area_part>
 80074cc:	e000      	b.n	80074d0 <lv_refr_area+0x200>
                return;
 80074ce:	bf00      	nop
        }
    }
}
 80074d0:	3734      	adds	r7, #52	@ 0x34
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd90      	pop	{r4, r7, pc}
 80074d6:	bf00      	nop
 80074d8:	200029d8 	.word	0x200029d8

080074dc <lv_refr_area_part>:
/**
 * Refresh a part of an area which is on the actual Virtual Display Buffer
 * @param area_p pointer to an area to refresh
 */
static void lv_refr_area_part(const lv_area_t * area_p)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]

    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 80074e4:	4b2e      	ldr	r3, [pc, #184]	@ (80075a0 <lv_refr_area_part+0xc4>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f007 fbdb 	bl	800eca4 <lv_disp_get_buf>
 80074ee:	6178      	str	r0, [r7, #20]

    /*In non double buffered mode, before rendering the next part wait until the previous image is
     * flushed*/
    if(lv_disp_is_double_buf(disp_refr) == false) {
 80074f0:	4b2b      	ldr	r3, [pc, #172]	@ (80075a0 <lv_refr_area_part+0xc4>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f007 fc20 	bl	800ed3a <lv_disp_is_double_buf>
 80074fa:	4603      	mov	r3, r0
 80074fc:	f083 0301 	eor.w	r3, r3, #1
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d007      	beq.n	8007516 <lv_refr_area_part+0x3a>
        while(vdb->flushing)
 8007506:	bf00      	nop
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1f8      	bne.n	8007508 <lv_refr_area_part+0x2c>
    lv_obj_t * top_p;

    /*Get the new mask from the original area and the act. VDB
     It will be a part of 'area_p'*/
    lv_area_t start_mask;
    lv_area_intersect(&start_mask, area_p, &vdb->area);
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f103 0210 	add.w	r2, r3, #16
 800751c:	f107 0308 	add.w	r3, r7, #8
 8007520:	6879      	ldr	r1, [r7, #4]
 8007522:	4618      	mov	r0, r3
 8007524:	f008 f81a 	bl	800f55c <lv_area_intersect>

    /*Get the most top object which is not covered by others*/
    top_p = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
 8007528:	4b1d      	ldr	r3, [pc, #116]	@ (80075a0 <lv_refr_area_part+0xc4>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4618      	mov	r0, r3
 800752e:	f7fb f968 	bl	8002802 <lv_disp_get_scr_act>
 8007532:	4602      	mov	r2, r0
 8007534:	f107 0308 	add.w	r3, r7, #8
 8007538:	4611      	mov	r1, r2
 800753a:	4618      	mov	r0, r3
 800753c:	f000 f832 	bl	80075a4 <lv_refr_get_top_obj>
 8007540:	6138      	str	r0, [r7, #16]

    /*Do the refreshing from the top object*/
    lv_refr_obj_and_children(top_p, &start_mask);
 8007542:	f107 0308 	add.w	r3, r7, #8
 8007546:	4619      	mov	r1, r3
 8007548:	6938      	ldr	r0, [r7, #16]
 800754a:	f000 f87f 	bl	800764c <lv_refr_obj_and_children>

    /*Also refresh top and sys layer unconditionally*/
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
 800754e:	4b14      	ldr	r3, [pc, #80]	@ (80075a0 <lv_refr_area_part+0xc4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4618      	mov	r0, r3
 8007554:	f7fb f96a 	bl	800282c <lv_disp_get_layer_top>
 8007558:	4602      	mov	r2, r0
 800755a:	f107 0308 	add.w	r3, r7, #8
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f000 f873 	bl	800764c <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
 8007566:	4b0e      	ldr	r3, [pc, #56]	@ (80075a0 <lv_refr_area_part+0xc4>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4618      	mov	r0, r3
 800756c:	f7fb f973 	bl	8002856 <lv_disp_get_layer_sys>
 8007570:	4602      	mov	r2, r0
 8007572:	f107 0308 	add.w	r3, r7, #8
 8007576:	4619      	mov	r1, r3
 8007578:	4610      	mov	r0, r2
 800757a:	f000 f867 	bl	800764c <lv_refr_obj_and_children>

    /* In true double buffered mode flush only once when all areas were rendered.
     * In normal mode flush after every area */
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
 800757e:	4b08      	ldr	r3, [pc, #32]	@ (80075a0 <lv_refr_area_part+0xc4>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4618      	mov	r0, r3
 8007584:	f007 fbef 	bl	800ed66 <lv_disp_is_true_double_buf>
 8007588:	4603      	mov	r3, r0
 800758a:	f083 0301 	eor.w	r3, r3, #1
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <lv_refr_area_part+0xbc>
        lv_refr_vdb_flush();
 8007594:	f000 f95e 	bl	8007854 <lv_refr_vdb_flush>
    }
}
 8007598:	bf00      	nop
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	200029d8 	.word	0x200029d8

080075a4 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
    lv_obj_t * found_p = NULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	617b      	str	r3, [r7, #20]

    /*If this object is fully cover the draw area check the children too */
    if(lv_area_is_in(area_p, &obj->coords) && obj->hidden == 0) {
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	3310      	adds	r3, #16
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f008 f8b6 	bl	800f72a <lv_area_is_in>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d03e      	beq.n	8007642 <lv_refr_get_top_obj+0x9e>
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80075ca:	f003 0310 	and.w	r3, r3, #16
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d136      	bne.n	8007642 <lv_refr_get_top_obj+0x9e>
        lv_obj_t * i;
        LV_LL_READ(obj->child_ll, i)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	3304      	adds	r3, #4
 80075d8:	4618      	mov	r0, r3
 80075da:	f008 fc50 	bl	800fe7e <lv_ll_get_head>
 80075de:	6138      	str	r0, [r7, #16]
 80075e0:	e00e      	b.n	8007600 <lv_refr_get_top_obj+0x5c>
        {
            found_p = lv_refr_get_top_obj(area_p, i);
 80075e2:	6939      	ldr	r1, [r7, #16]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff ffdd 	bl	80075a4 <lv_refr_get_top_obj>
 80075ea:	6178      	str	r0, [r7, #20]

            /*If a children is ok then break*/
            if(found_p != NULL) {
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10a      	bne.n	8007608 <lv_refr_get_top_obj+0x64>
        LV_LL_READ(obj->child_ll, i)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	3304      	adds	r3, #4
 80075f6:	6939      	ldr	r1, [r7, #16]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f008 fc64 	bl	800fec6 <lv_ll_get_next>
 80075fe:	6138      	str	r0, [r7, #16]
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1ed      	bne.n	80075e2 <lv_refr_get_top_obj+0x3e>
 8007606:	e000      	b.n	800760a <lv_refr_get_top_obj+0x66>
                break;
 8007608:	bf00      	nop
            }
        }

        /*If no better children check this object*/
        if(found_p == NULL) {
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d118      	bne.n	8007642 <lv_refr_get_top_obj+0x9e>
            const lv_style_t * style = lv_obj_get_style(obj);
 8007610:	6838      	ldr	r0, [r7, #0]
 8007612:	f7ff f86b 	bl	80066ec <lv_obj_get_style>
 8007616:	60f8      	str	r0, [r7, #12]
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	7a1b      	ldrb	r3, [r3, #8]
 800761c:	2bff      	cmp	r3, #255	@ 0xff
 800761e:	d110      	bne.n	8007642 <lv_refr_get_top_obj+0x9e>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	2202      	movs	r2, #2
 8007626:	6879      	ldr	r1, [r7, #4]
 8007628:	6838      	ldr	r0, [r7, #0]
 800762a:	4798      	blx	r3
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d007      	beq.n	8007642 <lv_refr_get_top_obj+0x9e>
               lv_obj_get_opa_scale(obj) == LV_OPA_COVER) {
 8007632:	6838      	ldr	r0, [r7, #0]
 8007634:	f7ff f925 	bl	8006882 <lv_obj_get_opa_scale>
 8007638:	4603      	mov	r3, r0
            if(style->body.opa == LV_OPA_COVER && obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK) != false &&
 800763a:	2bff      	cmp	r3, #255	@ 0xff
 800763c:	d101      	bne.n	8007642 <lv_refr_get_top_obj+0x9e>
                found_p = obj;
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	617b      	str	r3, [r7, #20]
            }
        }
    }

    return found_p;
 8007642:	697b      	ldr	r3, [r7, #20]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <lv_refr_obj_and_children>:
 * Make the refreshing from an object. Draw all its children and the youngers too.
 * @param top_p pointer to an objects. Start the drawing from it.
 * @param mask_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj_and_children(lv_obj_t * top_p, const lv_area_t * mask_p)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
    /* Normally always will be a top_obj (at least the screen)
     * but in special cases (e.g. if the screen has alpha) it won't.
     * In this case use the screen directly */
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d105      	bne.n	8007668 <lv_refr_obj_and_children+0x1c>
 800765c:	4b1d      	ldr	r3, [pc, #116]	@ (80076d4 <lv_refr_obj_and_children+0x88>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4618      	mov	r0, r3
 8007662:	f7fb f8ce 	bl	8002802 <lv_disp_get_scr_act>
 8007666:	6078      	str	r0, [r7, #4]

    /*Refresh the top object and its children*/
    lv_refr_obj(top_p, mask_p);
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f834 	bl	80076d8 <lv_refr_obj>

    /*Draw the 'younger' sibling objects because they can be on top_obj */
    lv_obj_t * par;
    lv_obj_t * border_p = top_p;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	613b      	str	r3, [r7, #16]

    par = lv_obj_get_parent(top_p);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7fe ff65 	bl	8006544 <lv_obj_get_parent>
 800767a:	6178      	str	r0, [r7, #20]

    /*Do until not reach the screen*/
    while(par != NULL) {
 800767c:	e021      	b.n	80076c2 <lv_refr_obj_and_children+0x76>
        /*object before border_p has to be redrawn*/
        lv_obj_t * i = lv_ll_get_prev(&(par->child_ll), border_p);
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	3304      	adds	r3, #4
 8007682:	6939      	ldr	r1, [r7, #16]
 8007684:	4618      	mov	r0, r3
 8007686:	f008 fc37 	bl	800fef8 <lv_ll_get_prev>
 800768a:	60f8      	str	r0, [r7, #12]

        while(i != NULL) {
 800768c:	e00a      	b.n	80076a4 <lv_refr_obj_and_children+0x58>
            /*Refresh the objects*/
            lv_refr_obj(i, mask_p);
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 f821 	bl	80076d8 <lv_refr_obj>
            i = lv_ll_get_prev(&(par->child_ll), i);
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	3304      	adds	r3, #4
 800769a:	68f9      	ldr	r1, [r7, #12]
 800769c:	4618      	mov	r0, r3
 800769e:	f008 fc2b 	bl	800fef8 <lv_ll_get_prev>
 80076a2:	60f8      	str	r0, [r7, #12]
        while(i != NULL) {
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1f1      	bne.n	800768e <lv_refr_obj_and_children+0x42>
        }

        /*Call the post draw design function of the parents of the to object*/
        par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	2201      	movs	r2, #1
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6978      	ldr	r0, [r7, #20]
 80076b4:	4798      	blx	r3

        /*The new border will be there last parents,
         *so the 'younger' brothers of parent will be refreshed*/
        border_p = par;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	613b      	str	r3, [r7, #16]
        /*Go a level deeper*/
        par = lv_obj_get_parent(par);
 80076ba:	6978      	ldr	r0, [r7, #20]
 80076bc:	f7fe ff42 	bl	8006544 <lv_obj_get_parent>
 80076c0:	6178      	str	r0, [r7, #20]
    while(par != NULL) {
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1da      	bne.n	800767e <lv_refr_obj_and_children+0x32>
    }
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop
 80076cc:	3718      	adds	r7, #24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	200029d8 	.word	0x200029d8

080076d8 <lv_refr_obj>:
 * Refresh an object an all of its children. (Called recursively)
 * @param obj pointer to an object to refresh
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08e      	sub	sp, #56	@ 0x38
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80076e8:	f003 0310 	and.w	r3, r3, #16
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f040 80ac 	bne.w	800784c <lv_refr_obj+0x174>
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80076f8:	867b      	strh	r3, [r7, #50]	@ 0x32
    lv_obj_get_coords(obj, &obj_area);
 80076fa:	f107 0318 	add.w	r3, r7, #24
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7fe ff47 	bl	8006594 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
 8007706:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800770a:	b29a      	uxth	r2, r3
 800770c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	b29b      	uxth	r3, r3
 8007712:	b21b      	sxth	r3, r3
 8007714:	833b      	strh	r3, [r7, #24]
    obj_area.y1 -= ext_size;
 8007716:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800771a:	b29a      	uxth	r2, r3
 800771c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	b29b      	uxth	r3, r3
 8007722:	b21b      	sxth	r3, r3
 8007724:	837b      	strh	r3, [r7, #26]
    obj_area.x2 += ext_size;
 8007726:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800772a:	b29a      	uxth	r2, r3
 800772c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800772e:	4413      	add	r3, r2
 8007730:	b29b      	uxth	r3, r3
 8007732:	b21b      	sxth	r3, r3
 8007734:	83bb      	strh	r3, [r7, #28]
    obj_area.y2 += ext_size;
 8007736:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800773a:	b29a      	uxth	r2, r3
 800773c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800773e:	4413      	add	r3, r2
 8007740:	b29b      	uxth	r3, r3
 8007742:	b21b      	sxth	r3, r3
 8007744:	83fb      	strh	r3, [r7, #30]
    union_ok = lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
 8007746:	f107 0218 	add.w	r2, r7, #24
 800774a:	f107 0320 	add.w	r3, r7, #32
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	4618      	mov	r0, r3
 8007752:	f007 ff03 	bl	800f55c <lv_area_intersect>
 8007756:	4603      	mov	r3, r0
 8007758:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
 800775c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8007760:	2b00      	cmp	r3, #0
 8007762:	d074      	beq.n	800784e <lv_refr_obj+0x176>

        /* Redraw the object */
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	f107 0120 	add.w	r1, r7, #32
 800776c:	2200      	movs	r2, #0
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	4798      	blx	r3
        lv_draw_fill(&obj_ext_mask, &obj_ext_mask, debug_color, LV_OPA_50);
        debug_color.full *= 17;
        debug_color.full += 0xA1;
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
 8007772:	f107 0318 	add.w	r3, r7, #24
 8007776:	4619      	mov	r1, r3
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7fe ff0b 	bl	8006594 <lv_obj_get_coords>
        union_ok = lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
 800777e:	f107 0218 	add.w	r2, r7, #24
 8007782:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f007 fee7 	bl	800f55c <lv_area_intersect>
 800778e:	4603      	mov	r3, r0
 8007790:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
        if(union_ok != false) {
 8007794:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8007798:	2b00      	cmp	r3, #0
 800779a:	d04f      	beq.n	800783c <lv_refr_obj+0x164>
            lv_area_t mask_child; /*Mask from obj and its child*/
            lv_obj_t * child_p;
            lv_area_t child_area;
            LV_LL_READ_BACK(obj->child_ll, child_p)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3304      	adds	r3, #4
 80077a0:	4618      	mov	r0, r3
 80077a2:	f008 fb7e 	bl	800fea2 <lv_ll_get_tail>
 80077a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80077a8:	e045      	b.n	8007836 <lv_refr_obj+0x15e>
            {
                lv_obj_get_coords(child_p, &child_area);
 80077aa:	f107 0308 	add.w	r3, r7, #8
 80077ae:	4619      	mov	r1, r3
 80077b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80077b2:	f7fe feef 	bl	8006594 <lv_obj_get_coords>
                ext_size = child_p->ext_draw_pad;
 80077b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077b8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80077ba:	867b      	strh	r3, [r7, #50]	@ 0x32
                child_area.x1 -= ext_size;
 80077bc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	b21b      	sxth	r3, r3
 80077ca:	813b      	strh	r3, [r7, #8]
                child_area.y1 -= ext_size;
 80077cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	b21b      	sxth	r3, r3
 80077da:	817b      	strh	r3, [r7, #10]
                child_area.x2 += ext_size;
 80077dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80077e4:	4413      	add	r3, r2
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	b21b      	sxth	r3, r3
 80077ea:	81bb      	strh	r3, [r7, #12]
                child_area.y2 += ext_size;
 80077ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80077f4:	4413      	add	r3, r2
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	b21b      	sxth	r3, r3
 80077fa:	81fb      	strh	r3, [r7, #14]
                /* Get the union (common parts) of original mask (from obj)
                 * and its child */
                union_ok = lv_area_intersect(&mask_child, &obj_mask, &child_area);
 80077fc:	f107 0208 	add.w	r2, r7, #8
 8007800:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007804:	f107 0310 	add.w	r3, r7, #16
 8007808:	4618      	mov	r0, r3
 800780a:	f007 fea7 	bl	800f55c <lv_area_intersect>
 800780e:	4603      	mov	r3, r0
 8007810:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

                /*If the parent and the child has common area then refresh the child */
                if(union_ok) {
 8007814:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <lv_refr_obj+0x150>
                    /*Refresh the next children*/
                    lv_refr_obj(child_p, &mask_child);
 800781c:	f107 0310 	add.w	r3, r7, #16
 8007820:	4619      	mov	r1, r3
 8007822:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007824:	f7ff ff58 	bl	80076d8 <lv_refr_obj>
            LV_LL_READ_BACK(obj->child_ll, child_p)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3304      	adds	r3, #4
 800782c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800782e:	4618      	mov	r0, r3
 8007830:	f008 fb62 	bl	800fef8 <lv_ll_get_prev>
 8007834:	6378      	str	r0, [r7, #52]	@ 0x34
 8007836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1b6      	bne.n	80077aa <lv_refr_obj+0xd2>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	f107 0120 	add.w	r1, r7, #32
 8007844:	2201      	movs	r2, #1
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4798      	blx	r3
 800784a:	e000      	b.n	800784e <lv_refr_obj+0x176>
    if(obj->hidden != 0) return;
 800784c:	bf00      	nop
    }
}
 800784e:	3738      	adds	r7, #56	@ 0x38
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
 800785a:	4b23      	ldr	r3, [pc, #140]	@ (80078e8 <lv_refr_vdb_flush+0x94>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4618      	mov	r0, r3
 8007860:	f007 fa20 	bl	800eca4 <lv_disp_get_buf>
 8007864:	6078      	str	r0, [r7, #4]

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
 8007866:	4b20      	ldr	r3, [pc, #128]	@ (80078e8 <lv_refr_vdb_flush+0x94>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4618      	mov	r0, r3
 800786c:	f007 fa65 	bl	800ed3a <lv_disp_is_double_buf>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d007      	beq.n	8007886 <lv_refr_vdb_flush+0x32>
        while(vdb->flushing)
 8007876:	bf00      	nop
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f8      	bne.n	8007878 <lv_refr_vdb_flush+0x24>
            ;
    }

    vdb->flushing = 1;
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	7e13      	ldrb	r3, [r2, #24]
 800788a:	f043 0301 	orr.w	r3, r3, #1
 800788e:	7613      	strb	r3, [r2, #24]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 8007890:	f7ff fb4a 	bl	8006f28 <lv_refr_get_disp_refreshing>
 8007894:	6038      	str	r0, [r7, #0]
    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d008      	beq.n	80078b0 <lv_refr_vdb_flush+0x5c>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	6838      	ldr	r0, [r7, #0]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	f102 0110 	add.w	r1, r2, #16
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	6892      	ldr	r2, [r2, #8]
 80078ae:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d012      	beq.n	80078de <lv_refr_vdb_flush+0x8a>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00e      	beq.n	80078de <lv_refr_vdb_flush+0x8a>
        if(vdb->buf_act == vdb->buf1)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d104      	bne.n	80078d6 <lv_refr_vdb_flush+0x82>
            vdb->buf_act = vdb->buf2;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	609a      	str	r2, [r3, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
 80078d4:	e003      	b.n	80078de <lv_refr_vdb_flush+0x8a>
            vdb->buf_act = vdb->buf1;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	609a      	str	r2, [r3, #8]
}
 80078de:	bf00      	nop
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	200029d8 	.word	0x200029d8

080078ec <lv_color_make>:
}
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8 >> 3, g8 >> 2, r8 >> 3}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	4603      	mov	r3, r0
 80078f4:	71fb      	strb	r3, [r7, #7]
 80078f6:	460b      	mov	r3, r1
 80078f8:	71bb      	strb	r3, [r7, #6]
 80078fa:	4613      	mov	r3, r2
 80078fc:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.blue  = (uint16_t)(b8 >> 3);
 80078fe:	797b      	ldrb	r3, [r7, #5]
 8007900:	08db      	lsrs	r3, r3, #3
 8007902:	b2db      	uxtb	r3, r3
 8007904:	f003 031f 	and.w	r3, r3, #31
 8007908:	b2da      	uxtb	r2, r3
 800790a:	7b3b      	ldrb	r3, [r7, #12]
 800790c:	f362 0304 	bfi	r3, r2, #0, #5
 8007910:	733b      	strb	r3, [r7, #12]
    color.ch.green = (uint16_t)(g8 >> 2);
 8007912:	79bb      	ldrb	r3, [r7, #6]
 8007914:	089b      	lsrs	r3, r3, #2
 8007916:	b2db      	uxtb	r3, r3
 8007918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800791c:	b2da      	uxtb	r2, r3
 800791e:	89bb      	ldrh	r3, [r7, #12]
 8007920:	f362 134a 	bfi	r3, r2, #5, #6
 8007924:	81bb      	strh	r3, [r7, #12]
    color.ch.red   = (uint16_t)(r8 >> 3);
 8007926:	79fb      	ldrb	r3, [r7, #7]
 8007928:	08db      	lsrs	r3, r3, #3
 800792a:	b2db      	uxtb	r3, r3
 800792c:	f003 031f 	and.w	r3, r3, #31
 8007930:	b2da      	uxtb	r2, r3
 8007932:	7b7b      	ldrb	r3, [r7, #13]
 8007934:	f362 03c7 	bfi	r3, r2, #3, #5
 8007938:	737b      	strb	r3, [r7, #13]
    return color;
 800793a:	89bb      	ldrh	r3, [r7, #12]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	bc80      	pop	{r7}
 8007944:	4770      	bx	lr
	...

08007948 <lv_style_init>:

/**
 *  Init the basic styles
 */
void lv_style_init(void)
{
 8007948:	b598      	push	{r3, r4, r7, lr}
 800794a:	af00      	add	r7, sp, #0
    /* Not White/Black/Gray colors are created by HSV model with
     * HUE = 210*/

    /*Screen style*/
    lv_style_scr.glass               = 0;
 800794c:	4aae      	ldr	r2, [pc, #696]	@ (8007c08 <lv_style_init+0x2c0>)
 800794e:	7813      	ldrb	r3, [r2, #0]
 8007950:	f36f 0300 	bfc	r3, #0, #1
 8007954:	7013      	strb	r3, [r2, #0]
    lv_style_scr.body.opa            = LV_OPA_COVER;
 8007956:	4bac      	ldr	r3, [pc, #688]	@ (8007c08 <lv_style_init+0x2c0>)
 8007958:	22ff      	movs	r2, #255	@ 0xff
 800795a:	721a      	strb	r2, [r3, #8]
    lv_style_scr.body.main_color     = LV_COLOR_WHITE;
 800795c:	4aaa      	ldr	r2, [pc, #680]	@ (8007c08 <lv_style_init+0x2c0>)
 800795e:	4bab      	ldr	r3, [pc, #684]	@ (8007c0c <lv_style_init+0x2c4>)
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	8053      	strh	r3, [r2, #2]
    lv_style_scr.body.grad_color     = LV_COLOR_WHITE;
 8007964:	4aa8      	ldr	r2, [pc, #672]	@ (8007c08 <lv_style_init+0x2c0>)
 8007966:	4ba9      	ldr	r3, [pc, #676]	@ (8007c0c <lv_style_init+0x2c4>)
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	8093      	strh	r3, [r2, #4]
    lv_style_scr.body.radius         = 0;
 800796c:	4ba6      	ldr	r3, [pc, #664]	@ (8007c08 <lv_style_init+0x2c0>)
 800796e:	2200      	movs	r2, #0
 8007970:	80da      	strh	r2, [r3, #6]
    lv_style_scr.body.padding.left   = 0;
 8007972:	4ba5      	ldr	r3, [pc, #660]	@ (8007c08 <lv_style_init+0x2c0>)
 8007974:	2200      	movs	r2, #0
 8007976:	835a      	strh	r2, [r3, #26]
    lv_style_scr.body.padding.right  = 0;
 8007978:	4ba3      	ldr	r3, [pc, #652]	@ (8007c08 <lv_style_init+0x2c0>)
 800797a:	2200      	movs	r2, #0
 800797c:	839a      	strh	r2, [r3, #28]
    lv_style_scr.body.padding.top    = 0;
 800797e:	4ba2      	ldr	r3, [pc, #648]	@ (8007c08 <lv_style_init+0x2c0>)
 8007980:	2200      	movs	r2, #0
 8007982:	82da      	strh	r2, [r3, #22]
    lv_style_scr.body.padding.bottom = 0;
 8007984:	4ba0      	ldr	r3, [pc, #640]	@ (8007c08 <lv_style_init+0x2c0>)
 8007986:	2200      	movs	r2, #0
 8007988:	831a      	strh	r2, [r3, #24]
    lv_style_scr.body.padding.inner  = LV_DPI / 20;
 800798a:	4b9f      	ldr	r3, [pc, #636]	@ (8007c08 <lv_style_init+0x2c0>)
 800798c:	2205      	movs	r2, #5
 800798e:	83da      	strh	r2, [r3, #30]

    lv_style_scr.body.border.color = LV_COLOR_BLACK;
 8007990:	4a9d      	ldr	r2, [pc, #628]	@ (8007c08 <lv_style_init+0x2c0>)
 8007992:	7a93      	ldrb	r3, [r2, #10]
 8007994:	f36f 0304 	bfc	r3, #0, #5
 8007998:	7293      	strb	r3, [r2, #10]
 800799a:	4a9b      	ldr	r2, [pc, #620]	@ (8007c08 <lv_style_init+0x2c0>)
 800799c:	8953      	ldrh	r3, [r2, #10]
 800799e:	f36f 134a 	bfc	r3, #5, #6
 80079a2:	8153      	strh	r3, [r2, #10]
 80079a4:	4a98      	ldr	r2, [pc, #608]	@ (8007c08 <lv_style_init+0x2c0>)
 80079a6:	7ad3      	ldrb	r3, [r2, #11]
 80079a8:	f36f 03c7 	bfc	r3, #3, #5
 80079ac:	72d3      	strb	r3, [r2, #11]
    lv_style_scr.body.border.opa   = LV_OPA_COVER;
 80079ae:	4b96      	ldr	r3, [pc, #600]	@ (8007c08 <lv_style_init+0x2c0>)
 80079b0:	22ff      	movs	r2, #255	@ 0xff
 80079b2:	73da      	strb	r2, [r3, #15]
    lv_style_scr.body.border.width = 0;
 80079b4:	4b94      	ldr	r3, [pc, #592]	@ (8007c08 <lv_style_init+0x2c0>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	819a      	strh	r2, [r3, #12]
    lv_style_scr.body.border.part  = LV_BORDER_FULL;
 80079ba:	4b93      	ldr	r3, [pc, #588]	@ (8007c08 <lv_style_init+0x2c0>)
 80079bc:	220f      	movs	r2, #15
 80079be:	739a      	strb	r2, [r3, #14]

    lv_style_scr.body.shadow.color = LV_COLOR_GRAY;
 80079c0:	4a91      	ldr	r2, [pc, #580]	@ (8007c08 <lv_style_init+0x2c0>)
 80079c2:	4b93      	ldr	r3, [pc, #588]	@ (8007c10 <lv_style_init+0x2c8>)
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	8213      	strh	r3, [r2, #16]
    lv_style_scr.body.shadow.type  = LV_SHADOW_FULL;
 80079c8:	4b8f      	ldr	r3, [pc, #572]	@ (8007c08 <lv_style_init+0x2c0>)
 80079ca:	2201      	movs	r2, #1
 80079cc:	751a      	strb	r2, [r3, #20]
    lv_style_scr.body.shadow.width = 0;
 80079ce:	4b8e      	ldr	r3, [pc, #568]	@ (8007c08 <lv_style_init+0x2c0>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	825a      	strh	r2, [r3, #18]

    lv_style_scr.text.opa          = LV_OPA_COVER;
 80079d4:	4b8c      	ldr	r3, [pc, #560]	@ (8007c08 <lv_style_init+0x2c0>)
 80079d6:	22ff      	movs	r2, #255	@ 0xff
 80079d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    lv_style_scr.text.color        = lv_color_make(0x30, 0x30, 0x30);
 80079dc:	4c8a      	ldr	r4, [pc, #552]	@ (8007c08 <lv_style_init+0x2c0>)
 80079de:	2230      	movs	r2, #48	@ 0x30
 80079e0:	2130      	movs	r1, #48	@ 0x30
 80079e2:	2030      	movs	r0, #48	@ 0x30
 80079e4:	f7ff ff82 	bl	80078ec <lv_color_make>
 80079e8:	8420      	strh	r0, [r4, #32]
    lv_style_scr.text.sel_color    = lv_color_make(0x55, 0x96, 0xd8);
 80079ea:	4c87      	ldr	r4, [pc, #540]	@ (8007c08 <lv_style_init+0x2c0>)
 80079ec:	22d8      	movs	r2, #216	@ 0xd8
 80079ee:	2196      	movs	r1, #150	@ 0x96
 80079f0:	2055      	movs	r0, #85	@ 0x55
 80079f2:	f7ff ff7b 	bl	80078ec <lv_color_make>
 80079f6:	8460      	strh	r0, [r4, #34]	@ 0x22
    lv_style_scr.text.font         = LV_FONT_DEFAULT;
 80079f8:	4b83      	ldr	r3, [pc, #524]	@ (8007c08 <lv_style_init+0x2c0>)
 80079fa:	4a86      	ldr	r2, [pc, #536]	@ (8007c14 <lv_style_init+0x2cc>)
 80079fc:	625a      	str	r2, [r3, #36]	@ 0x24
    lv_style_scr.text.letter_space = 0;
 80079fe:	4b82      	ldr	r3, [pc, #520]	@ (8007c08 <lv_style_init+0x2c0>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	851a      	strh	r2, [r3, #40]	@ 0x28
    lv_style_scr.text.line_space   = 2;
 8007a04:	4b80      	ldr	r3, [pc, #512]	@ (8007c08 <lv_style_init+0x2c0>)
 8007a06:	2202      	movs	r2, #2
 8007a08:	855a      	strh	r2, [r3, #42]	@ 0x2a

    lv_style_scr.image.opa     = LV_OPA_COVER;
 8007a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8007c08 <lv_style_init+0x2c0>)
 8007a0c:	22ff      	movs	r2, #255	@ 0xff
 8007a0e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    lv_style_scr.image.color   = lv_color_make(0x20, 0x20, 0x20);
 8007a12:	4c7d      	ldr	r4, [pc, #500]	@ (8007c08 <lv_style_init+0x2c0>)
 8007a14:	2220      	movs	r2, #32
 8007a16:	2120      	movs	r1, #32
 8007a18:	2020      	movs	r0, #32
 8007a1a:	f7ff ff67 	bl	80078ec <lv_color_make>
 8007a1e:	8620      	strh	r0, [r4, #48]	@ 0x30
    lv_style_scr.image.intense = LV_OPA_TRANSP;
 8007a20:	4b79      	ldr	r3, [pc, #484]	@ (8007c08 <lv_style_init+0x2c0>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

    lv_style_scr.line.opa     = LV_OPA_COVER;
 8007a28:	4b77      	ldr	r3, [pc, #476]	@ (8007c08 <lv_style_init+0x2c0>)
 8007a2a:	22ff      	movs	r2, #255	@ 0xff
 8007a2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    lv_style_scr.line.color   = lv_color_make(0x20, 0x20, 0x20);
 8007a30:	4c75      	ldr	r4, [pc, #468]	@ (8007c08 <lv_style_init+0x2c0>)
 8007a32:	2220      	movs	r2, #32
 8007a34:	2120      	movs	r1, #32
 8007a36:	2020      	movs	r0, #32
 8007a38:	f7ff ff58 	bl	80078ec <lv_color_make>
 8007a3c:	86a0      	strh	r0, [r4, #52]	@ 0x34
    lv_style_scr.line.width   = 2;
 8007a3e:	4b72      	ldr	r3, [pc, #456]	@ (8007c08 <lv_style_init+0x2c0>)
 8007a40:	2202      	movs	r2, #2
 8007a42:	86da      	strh	r2, [r3, #54]	@ 0x36
    lv_style_scr.line.rounded = 0;
 8007a44:	4a70      	ldr	r2, [pc, #448]	@ (8007c08 <lv_style_init+0x2c0>)
 8007a46:	f892 3039 	ldrb.w	r3, [r2, #57]	@ 0x39
 8007a4a:	f36f 0300 	bfc	r3, #0, #1
 8007a4e:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39

    /*Plain style (by default near the same as the screen style)*/
    lv_style_copy(&lv_style_plain, &lv_style_scr);
 8007a52:	496d      	ldr	r1, [pc, #436]	@ (8007c08 <lv_style_init+0x2c0>)
 8007a54:	4870      	ldr	r0, [pc, #448]	@ (8007c18 <lv_style_init+0x2d0>)
 8007a56:	f000 f9cf 	bl	8007df8 <lv_style_copy>
    lv_style_plain.body.padding.left   = LV_DPI / 20;
 8007a5a:	4b6f      	ldr	r3, [pc, #444]	@ (8007c18 <lv_style_init+0x2d0>)
 8007a5c:	2205      	movs	r2, #5
 8007a5e:	835a      	strh	r2, [r3, #26]
    lv_style_plain.body.padding.right  = LV_DPI / 20;
 8007a60:	4b6d      	ldr	r3, [pc, #436]	@ (8007c18 <lv_style_init+0x2d0>)
 8007a62:	2205      	movs	r2, #5
 8007a64:	839a      	strh	r2, [r3, #28]
    lv_style_plain.body.padding.top    = LV_DPI / 20;
 8007a66:	4b6c      	ldr	r3, [pc, #432]	@ (8007c18 <lv_style_init+0x2d0>)
 8007a68:	2205      	movs	r2, #5
 8007a6a:	82da      	strh	r2, [r3, #22]
    lv_style_plain.body.padding.bottom = LV_DPI / 20;
 8007a6c:	4b6a      	ldr	r3, [pc, #424]	@ (8007c18 <lv_style_init+0x2d0>)
 8007a6e:	2205      	movs	r2, #5
 8007a70:	831a      	strh	r2, [r3, #24]

    /*Plain color style*/
    lv_style_copy(&lv_style_plain_color, &lv_style_plain);
 8007a72:	4969      	ldr	r1, [pc, #420]	@ (8007c18 <lv_style_init+0x2d0>)
 8007a74:	4869      	ldr	r0, [pc, #420]	@ (8007c1c <lv_style_init+0x2d4>)
 8007a76:	f000 f9bf 	bl	8007df8 <lv_style_copy>
    lv_style_plain_color.text.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8007a7a:	4c68      	ldr	r4, [pc, #416]	@ (8007c1c <lv_style_init+0x2d4>)
 8007a7c:	22f0      	movs	r2, #240	@ 0xf0
 8007a7e:	21f0      	movs	r1, #240	@ 0xf0
 8007a80:	20f0      	movs	r0, #240	@ 0xf0
 8007a82:	f7ff ff33 	bl	80078ec <lv_color_make>
 8007a86:	8420      	strh	r0, [r4, #32]
    lv_style_plain_color.image.color     = lv_color_make(0xf0, 0xf0, 0xf0);
 8007a88:	4c64      	ldr	r4, [pc, #400]	@ (8007c1c <lv_style_init+0x2d4>)
 8007a8a:	22f0      	movs	r2, #240	@ 0xf0
 8007a8c:	21f0      	movs	r1, #240	@ 0xf0
 8007a8e:	20f0      	movs	r0, #240	@ 0xf0
 8007a90:	f7ff ff2c 	bl	80078ec <lv_color_make>
 8007a94:	8620      	strh	r0, [r4, #48]	@ 0x30
    lv_style_plain_color.line.color      = lv_color_make(0xf0, 0xf0, 0xf0);
 8007a96:	4c61      	ldr	r4, [pc, #388]	@ (8007c1c <lv_style_init+0x2d4>)
 8007a98:	22f0      	movs	r2, #240	@ 0xf0
 8007a9a:	21f0      	movs	r1, #240	@ 0xf0
 8007a9c:	20f0      	movs	r0, #240	@ 0xf0
 8007a9e:	f7ff ff25 	bl	80078ec <lv_color_make>
 8007aa2:	86a0      	strh	r0, [r4, #52]	@ 0x34
    lv_style_plain_color.body.main_color = lv_color_make(0x55, 0x96, 0xd8);
 8007aa4:	4c5d      	ldr	r4, [pc, #372]	@ (8007c1c <lv_style_init+0x2d4>)
 8007aa6:	22d8      	movs	r2, #216	@ 0xd8
 8007aa8:	2196      	movs	r1, #150	@ 0x96
 8007aaa:	2055      	movs	r0, #85	@ 0x55
 8007aac:	f7ff ff1e 	bl	80078ec <lv_color_make>
 8007ab0:	8060      	strh	r0, [r4, #2]
    lv_style_plain_color.body.grad_color = lv_style_plain_color.body.main_color;
 8007ab2:	4a5a      	ldr	r2, [pc, #360]	@ (8007c1c <lv_style_init+0x2d4>)
 8007ab4:	4b59      	ldr	r3, [pc, #356]	@ (8007c1c <lv_style_init+0x2d4>)
 8007ab6:	885b      	ldrh	r3, [r3, #2]
 8007ab8:	8093      	strh	r3, [r2, #4]

    /*Pretty style */
    lv_style_copy(&lv_style_pretty, &lv_style_plain);
 8007aba:	4957      	ldr	r1, [pc, #348]	@ (8007c18 <lv_style_init+0x2d0>)
 8007abc:	4858      	ldr	r0, [pc, #352]	@ (8007c20 <lv_style_init+0x2d8>)
 8007abe:	f000 f99b 	bl	8007df8 <lv_style_copy>
    lv_style_pretty.text.color        = lv_color_make(0x20, 0x20, 0x20);
 8007ac2:	4c57      	ldr	r4, [pc, #348]	@ (8007c20 <lv_style_init+0x2d8>)
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	2120      	movs	r1, #32
 8007ac8:	2020      	movs	r0, #32
 8007aca:	f7ff ff0f 	bl	80078ec <lv_color_make>
 8007ace:	8420      	strh	r0, [r4, #32]
    lv_style_pretty.image.color       = lv_color_make(0x20, 0x20, 0x20);
 8007ad0:	4c53      	ldr	r4, [pc, #332]	@ (8007c20 <lv_style_init+0x2d8>)
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	2120      	movs	r1, #32
 8007ad6:	2020      	movs	r0, #32
 8007ad8:	f7ff ff08 	bl	80078ec <lv_color_make>
 8007adc:	8620      	strh	r0, [r4, #48]	@ 0x30
    lv_style_pretty.line.color        = lv_color_make(0x20, 0x20, 0x20);
 8007ade:	4c50      	ldr	r4, [pc, #320]	@ (8007c20 <lv_style_init+0x2d8>)
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	2120      	movs	r1, #32
 8007ae4:	2020      	movs	r0, #32
 8007ae6:	f7ff ff01 	bl	80078ec <lv_color_make>
 8007aea:	86a0      	strh	r0, [r4, #52]	@ 0x34
    lv_style_pretty.body.main_color   = LV_COLOR_WHITE;
 8007aec:	4a4c      	ldr	r2, [pc, #304]	@ (8007c20 <lv_style_init+0x2d8>)
 8007aee:	4b47      	ldr	r3, [pc, #284]	@ (8007c0c <lv_style_init+0x2c4>)
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	8053      	strh	r3, [r2, #2]
    lv_style_pretty.body.grad_color   = LV_COLOR_SILVER;
 8007af4:	4a4a      	ldr	r2, [pc, #296]	@ (8007c20 <lv_style_init+0x2d8>)
 8007af6:	4b4b      	ldr	r3, [pc, #300]	@ (8007c24 <lv_style_init+0x2dc>)
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	8093      	strh	r3, [r2, #4]
    lv_style_pretty.body.radius       = LV_DPI / 15;
 8007afc:	4b48      	ldr	r3, [pc, #288]	@ (8007c20 <lv_style_init+0x2d8>)
 8007afe:	2206      	movs	r2, #6
 8007b00:	80da      	strh	r2, [r3, #6]
    lv_style_pretty.body.border.color = lv_color_make(0x40, 0x40, 0x40);
 8007b02:	4c47      	ldr	r4, [pc, #284]	@ (8007c20 <lv_style_init+0x2d8>)
 8007b04:	2240      	movs	r2, #64	@ 0x40
 8007b06:	2140      	movs	r1, #64	@ 0x40
 8007b08:	2040      	movs	r0, #64	@ 0x40
 8007b0a:	f7ff feef 	bl	80078ec <lv_color_make>
 8007b0e:	8160      	strh	r0, [r4, #10]
    lv_style_pretty.body.border.width = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8007b10:	4b43      	ldr	r3, [pc, #268]	@ (8007c20 <lv_style_init+0x2d8>)
 8007b12:	2202      	movs	r2, #2
 8007b14:	819a      	strh	r2, [r3, #12]
    lv_style_pretty.body.border.opa   = LV_OPA_30;
 8007b16:	4b42      	ldr	r3, [pc, #264]	@ (8007c20 <lv_style_init+0x2d8>)
 8007b18:	224c      	movs	r2, #76	@ 0x4c
 8007b1a:	73da      	strb	r2, [r3, #15]

    /*Pretty color style*/
    lv_style_copy(&lv_style_pretty_color, &lv_style_pretty);
 8007b1c:	4940      	ldr	r1, [pc, #256]	@ (8007c20 <lv_style_init+0x2d8>)
 8007b1e:	4842      	ldr	r0, [pc, #264]	@ (8007c28 <lv_style_init+0x2e0>)
 8007b20:	f000 f96a 	bl	8007df8 <lv_style_copy>
    lv_style_pretty_color.text.color        = lv_color_make(0xe0, 0xe0, 0xe0);
 8007b24:	4c40      	ldr	r4, [pc, #256]	@ (8007c28 <lv_style_init+0x2e0>)
 8007b26:	22e0      	movs	r2, #224	@ 0xe0
 8007b28:	21e0      	movs	r1, #224	@ 0xe0
 8007b2a:	20e0      	movs	r0, #224	@ 0xe0
 8007b2c:	f7ff fede 	bl	80078ec <lv_color_make>
 8007b30:	8420      	strh	r0, [r4, #32]
    lv_style_pretty_color.image.color       = lv_color_make(0xe0, 0xe0, 0xe0);
 8007b32:	4c3d      	ldr	r4, [pc, #244]	@ (8007c28 <lv_style_init+0x2e0>)
 8007b34:	22e0      	movs	r2, #224	@ 0xe0
 8007b36:	21e0      	movs	r1, #224	@ 0xe0
 8007b38:	20e0      	movs	r0, #224	@ 0xe0
 8007b3a:	f7ff fed7 	bl	80078ec <lv_color_make>
 8007b3e:	8620      	strh	r0, [r4, #48]	@ 0x30
    lv_style_pretty_color.line.color        = lv_color_make(0xc0, 0xc0, 0xc0);
 8007b40:	4c39      	ldr	r4, [pc, #228]	@ (8007c28 <lv_style_init+0x2e0>)
 8007b42:	22c0      	movs	r2, #192	@ 0xc0
 8007b44:	21c0      	movs	r1, #192	@ 0xc0
 8007b46:	20c0      	movs	r0, #192	@ 0xc0
 8007b48:	f7ff fed0 	bl	80078ec <lv_color_make>
 8007b4c:	86a0      	strh	r0, [r4, #52]	@ 0x34
    lv_style_pretty_color.body.main_color   = lv_color_make(0x6b, 0x9a, 0xc7);
 8007b4e:	4c36      	ldr	r4, [pc, #216]	@ (8007c28 <lv_style_init+0x2e0>)
 8007b50:	22c7      	movs	r2, #199	@ 0xc7
 8007b52:	219a      	movs	r1, #154	@ 0x9a
 8007b54:	206b      	movs	r0, #107	@ 0x6b
 8007b56:	f7ff fec9 	bl	80078ec <lv_color_make>
 8007b5a:	8060      	strh	r0, [r4, #2]
    lv_style_pretty_color.body.grad_color   = lv_color_make(0x2b, 0x59, 0x8b);
 8007b5c:	4c32      	ldr	r4, [pc, #200]	@ (8007c28 <lv_style_init+0x2e0>)
 8007b5e:	228b      	movs	r2, #139	@ 0x8b
 8007b60:	2159      	movs	r1, #89	@ 0x59
 8007b62:	202b      	movs	r0, #43	@ 0x2b
 8007b64:	f7ff fec2 	bl	80078ec <lv_color_make>
 8007b68:	80a0      	strh	r0, [r4, #4]
    lv_style_pretty_color.body.border.color = lv_color_make(0x15, 0x2c, 0x42);
 8007b6a:	4c2f      	ldr	r4, [pc, #188]	@ (8007c28 <lv_style_init+0x2e0>)
 8007b6c:	2242      	movs	r2, #66	@ 0x42
 8007b6e:	212c      	movs	r1, #44	@ 0x2c
 8007b70:	2015      	movs	r0, #21
 8007b72:	f7ff febb 	bl	80078ec <lv_color_make>
 8007b76:	8160      	strh	r0, [r4, #10]

    /*Transparent style*/
    lv_style_copy(&lv_style_transp, &lv_style_plain);
 8007b78:	4927      	ldr	r1, [pc, #156]	@ (8007c18 <lv_style_init+0x2d0>)
 8007b7a:	482c      	ldr	r0, [pc, #176]	@ (8007c2c <lv_style_init+0x2e4>)
 8007b7c:	f000 f93c 	bl	8007df8 <lv_style_copy>
    lv_style_transp.glass             = 1;
 8007b80:	4a2a      	ldr	r2, [pc, #168]	@ (8007c2c <lv_style_init+0x2e4>)
 8007b82:	7813      	ldrb	r3, [r2, #0]
 8007b84:	f043 0301 	orr.w	r3, r3, #1
 8007b88:	7013      	strb	r3, [r2, #0]
    lv_style_transp.body.border.width = 0;
 8007b8a:	4b28      	ldr	r3, [pc, #160]	@ (8007c2c <lv_style_init+0x2e4>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	819a      	strh	r2, [r3, #12]
    lv_style_transp.body.opa          = LV_OPA_TRANSP;
 8007b90:	4b26      	ldr	r3, [pc, #152]	@ (8007c2c <lv_style_init+0x2e4>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	721a      	strb	r2, [r3, #8]

    /*Transparent fitting size*/
    lv_style_copy(&lv_style_transp_fit, &lv_style_transp);
 8007b96:	4925      	ldr	r1, [pc, #148]	@ (8007c2c <lv_style_init+0x2e4>)
 8007b98:	4825      	ldr	r0, [pc, #148]	@ (8007c30 <lv_style_init+0x2e8>)
 8007b9a:	f000 f92d 	bl	8007df8 <lv_style_copy>
    lv_style_transp_fit.body.padding.left   = 0;
 8007b9e:	4b24      	ldr	r3, [pc, #144]	@ (8007c30 <lv_style_init+0x2e8>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	835a      	strh	r2, [r3, #26]
    lv_style_transp_fit.body.padding.right  = 0;
 8007ba4:	4b22      	ldr	r3, [pc, #136]	@ (8007c30 <lv_style_init+0x2e8>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	839a      	strh	r2, [r3, #28]
    lv_style_transp_fit.body.padding.top    = 0;
 8007baa:	4b21      	ldr	r3, [pc, #132]	@ (8007c30 <lv_style_init+0x2e8>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	82da      	strh	r2, [r3, #22]
    lv_style_transp_fit.body.padding.bottom = 0;
 8007bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8007c30 <lv_style_init+0x2e8>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	831a      	strh	r2, [r3, #24]

    /*Transparent tight style*/
    lv_style_copy(&lv_style_transp_tight, &lv_style_transp_fit);
 8007bb6:	491e      	ldr	r1, [pc, #120]	@ (8007c30 <lv_style_init+0x2e8>)
 8007bb8:	481e      	ldr	r0, [pc, #120]	@ (8007c34 <lv_style_init+0x2ec>)
 8007bba:	f000 f91d 	bl	8007df8 <lv_style_copy>
    lv_style_transp_tight.body.padding.inner = 0;
 8007bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8007c34 <lv_style_init+0x2ec>)
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	83da      	strh	r2, [r3, #30]

    /*Button released style*/
    lv_style_copy(&lv_style_btn_rel, &lv_style_plain);
 8007bc4:	4914      	ldr	r1, [pc, #80]	@ (8007c18 <lv_style_init+0x2d0>)
 8007bc6:	481c      	ldr	r0, [pc, #112]	@ (8007c38 <lv_style_init+0x2f0>)
 8007bc8:	f000 f916 	bl	8007df8 <lv_style_copy>
    lv_style_btn_rel.body.main_color     = lv_color_make(0x76, 0xa2, 0xd0);
 8007bcc:	4c1a      	ldr	r4, [pc, #104]	@ (8007c38 <lv_style_init+0x2f0>)
 8007bce:	22d0      	movs	r2, #208	@ 0xd0
 8007bd0:	21a2      	movs	r1, #162	@ 0xa2
 8007bd2:	2076      	movs	r0, #118	@ 0x76
 8007bd4:	f7ff fe8a 	bl	80078ec <lv_color_make>
 8007bd8:	8060      	strh	r0, [r4, #2]
    lv_style_btn_rel.body.grad_color     = lv_color_make(0x19, 0x3a, 0x5d);
 8007bda:	4c17      	ldr	r4, [pc, #92]	@ (8007c38 <lv_style_init+0x2f0>)
 8007bdc:	225d      	movs	r2, #93	@ 0x5d
 8007bde:	213a      	movs	r1, #58	@ 0x3a
 8007be0:	2019      	movs	r0, #25
 8007be2:	f7ff fe83 	bl	80078ec <lv_color_make>
 8007be6:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_rel.body.radius         = LV_DPI / 15;
 8007be8:	4b13      	ldr	r3, [pc, #76]	@ (8007c38 <lv_style_init+0x2f0>)
 8007bea:	2206      	movs	r2, #6
 8007bec:	80da      	strh	r2, [r3, #6]
    lv_style_btn_rel.body.padding.left   = LV_DPI / 4;
 8007bee:	4b12      	ldr	r3, [pc, #72]	@ (8007c38 <lv_style_init+0x2f0>)
 8007bf0:	2219      	movs	r2, #25
 8007bf2:	835a      	strh	r2, [r3, #26]
    lv_style_btn_rel.body.padding.right  = LV_DPI / 4;
 8007bf4:	4b10      	ldr	r3, [pc, #64]	@ (8007c38 <lv_style_init+0x2f0>)
 8007bf6:	2219      	movs	r2, #25
 8007bf8:	839a      	strh	r2, [r3, #28]
    lv_style_btn_rel.body.padding.top    = LV_DPI / 6;
 8007bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8007c38 <lv_style_init+0x2f0>)
 8007bfc:	2210      	movs	r2, #16
 8007bfe:	82da      	strh	r2, [r3, #22]
    lv_style_btn_rel.body.padding.bottom = LV_DPI / 6;
 8007c00:	4b0d      	ldr	r3, [pc, #52]	@ (8007c38 <lv_style_init+0x2f0>)
 8007c02:	2210      	movs	r2, #16
 8007c04:	831a      	strh	r2, [r3, #24]
 8007c06:	e019      	b.n	8007c3c <lv_style_init+0x2f4>
 8007c08:	200029dc 	.word	0x200029dc
 8007c0c:	0801c600 	.word	0x0801c600
 8007c10:	0801c604 	.word	0x0801c604
 8007c14:	20000c84 	.word	0x20000c84
 8007c18:	20002acc 	.word	0x20002acc
 8007c1c:	20002b08 	.word	0x20002b08
 8007c20:	20002b44 	.word	0x20002b44
 8007c24:	0801c608 	.word	0x0801c608
 8007c28:	20002b80 	.word	0x20002b80
 8007c2c:	20002a18 	.word	0x20002a18
 8007c30:	20002a54 	.word	0x20002a54
 8007c34:	20002a90 	.word	0x20002a90
 8007c38:	20002bbc 	.word	0x20002bbc
    lv_style_btn_rel.body.padding.inner  = LV_DPI / 10;
 8007c3c:	4b68      	ldr	r3, [pc, #416]	@ (8007de0 <lv_style_init+0x498>)
 8007c3e:	220a      	movs	r2, #10
 8007c40:	83da      	strh	r2, [r3, #30]
    lv_style_btn_rel.body.border.color   = lv_color_make(0x0b, 0x19, 0x28);
 8007c42:	4c67      	ldr	r4, [pc, #412]	@ (8007de0 <lv_style_init+0x498>)
 8007c44:	2228      	movs	r2, #40	@ 0x28
 8007c46:	2119      	movs	r1, #25
 8007c48:	200b      	movs	r0, #11
 8007c4a:	f7ff fe4f 	bl	80078ec <lv_color_make>
 8007c4e:	8160      	strh	r0, [r4, #10]
    lv_style_btn_rel.body.border.width   = LV_DPI / 50 >= 1 ? LV_DPI / 50 : 1;
 8007c50:	4b63      	ldr	r3, [pc, #396]	@ (8007de0 <lv_style_init+0x498>)
 8007c52:	2202      	movs	r2, #2
 8007c54:	819a      	strh	r2, [r3, #12]
    lv_style_btn_rel.body.border.opa     = LV_OPA_70;
 8007c56:	4b62      	ldr	r3, [pc, #392]	@ (8007de0 <lv_style_init+0x498>)
 8007c58:	22b2      	movs	r2, #178	@ 0xb2
 8007c5a:	73da      	strb	r2, [r3, #15]
    lv_style_btn_rel.body.shadow.color   = LV_COLOR_GRAY;
 8007c5c:	4a60      	ldr	r2, [pc, #384]	@ (8007de0 <lv_style_init+0x498>)
 8007c5e:	4b61      	ldr	r3, [pc, #388]	@ (8007de4 <lv_style_init+0x49c>)
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	8213      	strh	r3, [r2, #16]
    lv_style_btn_rel.body.shadow.width   = 0;
 8007c64:	4b5e      	ldr	r3, [pc, #376]	@ (8007de0 <lv_style_init+0x498>)
 8007c66:	2200      	movs	r2, #0
 8007c68:	825a      	strh	r2, [r3, #18]
    lv_style_btn_rel.text.color          = lv_color_make(0xff, 0xff, 0xff);
 8007c6a:	4c5d      	ldr	r4, [pc, #372]	@ (8007de0 <lv_style_init+0x498>)
 8007c6c:	22ff      	movs	r2, #255	@ 0xff
 8007c6e:	21ff      	movs	r1, #255	@ 0xff
 8007c70:	20ff      	movs	r0, #255	@ 0xff
 8007c72:	f7ff fe3b 	bl	80078ec <lv_color_make>
 8007c76:	8420      	strh	r0, [r4, #32]
    lv_style_btn_rel.image.color         = lv_color_make(0xff, 0xff, 0xff);
 8007c78:	4c59      	ldr	r4, [pc, #356]	@ (8007de0 <lv_style_init+0x498>)
 8007c7a:	22ff      	movs	r2, #255	@ 0xff
 8007c7c:	21ff      	movs	r1, #255	@ 0xff
 8007c7e:	20ff      	movs	r0, #255	@ 0xff
 8007c80:	f7ff fe34 	bl	80078ec <lv_color_make>
 8007c84:	8620      	strh	r0, [r4, #48]	@ 0x30

    /*Button pressed style*/
    lv_style_copy(&lv_style_btn_pr, &lv_style_btn_rel);
 8007c86:	4956      	ldr	r1, [pc, #344]	@ (8007de0 <lv_style_init+0x498>)
 8007c88:	4857      	ldr	r0, [pc, #348]	@ (8007de8 <lv_style_init+0x4a0>)
 8007c8a:	f000 f8b5 	bl	8007df8 <lv_style_copy>
    lv_style_btn_pr.body.main_color = lv_color_make(0x33, 0x62, 0x94);
 8007c8e:	4c56      	ldr	r4, [pc, #344]	@ (8007de8 <lv_style_init+0x4a0>)
 8007c90:	2294      	movs	r2, #148	@ 0x94
 8007c92:	2162      	movs	r1, #98	@ 0x62
 8007c94:	2033      	movs	r0, #51	@ 0x33
 8007c96:	f7ff fe29 	bl	80078ec <lv_color_make>
 8007c9a:	8060      	strh	r0, [r4, #2]
    lv_style_btn_pr.body.grad_color = lv_color_make(0x10, 0x26, 0x3c);
 8007c9c:	4c52      	ldr	r4, [pc, #328]	@ (8007de8 <lv_style_init+0x4a0>)
 8007c9e:	223c      	movs	r2, #60	@ 0x3c
 8007ca0:	2126      	movs	r1, #38	@ 0x26
 8007ca2:	2010      	movs	r0, #16
 8007ca4:	f7ff fe22 	bl	80078ec <lv_color_make>
 8007ca8:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8007caa:	4c4f      	ldr	r4, [pc, #316]	@ (8007de8 <lv_style_init+0x4a0>)
 8007cac:	22c6      	movs	r2, #198	@ 0xc6
 8007cae:	21b5      	movs	r1, #181	@ 0xb5
 8007cb0:	20a4      	movs	r0, #164	@ 0xa4
 8007cb2:	f7ff fe1b 	bl	80078ec <lv_color_make>
 8007cb6:	8420      	strh	r0, [r4, #32]
    lv_style_btn_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8007cb8:	4c4b      	ldr	r4, [pc, #300]	@ (8007de8 <lv_style_init+0x4a0>)
 8007cba:	22c6      	movs	r2, #198	@ 0xc6
 8007cbc:	21b5      	movs	r1, #181	@ 0xb5
 8007cbe:	20a4      	movs	r0, #164	@ 0xa4
 8007cc0:	f7ff fe14 	bl	80078ec <lv_color_make>
 8007cc4:	8620      	strh	r0, [r4, #48]	@ 0x30
    lv_style_btn_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8007cc6:	4c48      	ldr	r4, [pc, #288]	@ (8007de8 <lv_style_init+0x4a0>)
 8007cc8:	22c6      	movs	r2, #198	@ 0xc6
 8007cca:	21b5      	movs	r1, #181	@ 0xb5
 8007ccc:	20a4      	movs	r0, #164	@ 0xa4
 8007cce:	f7ff fe0d 	bl	80078ec <lv_color_make>
 8007cd2:	86a0      	strh	r0, [r4, #52]	@ 0x34

    /*Button toggle released style*/
    lv_style_copy(&lv_style_btn_tgl_rel, &lv_style_btn_rel);
 8007cd4:	4942      	ldr	r1, [pc, #264]	@ (8007de0 <lv_style_init+0x498>)
 8007cd6:	4845      	ldr	r0, [pc, #276]	@ (8007dec <lv_style_init+0x4a4>)
 8007cd8:	f000 f88e 	bl	8007df8 <lv_style_copy>
    lv_style_btn_tgl_rel.body.main_color   = lv_color_make(0x0a, 0x11, 0x22);
 8007cdc:	4c43      	ldr	r4, [pc, #268]	@ (8007dec <lv_style_init+0x4a4>)
 8007cde:	2222      	movs	r2, #34	@ 0x22
 8007ce0:	2111      	movs	r1, #17
 8007ce2:	200a      	movs	r0, #10
 8007ce4:	f7ff fe02 	bl	80078ec <lv_color_make>
 8007ce8:	8060      	strh	r0, [r4, #2]
    lv_style_btn_tgl_rel.body.grad_color   = lv_color_make(0x37, 0x62, 0x90);
 8007cea:	4c40      	ldr	r4, [pc, #256]	@ (8007dec <lv_style_init+0x4a4>)
 8007cec:	2290      	movs	r2, #144	@ 0x90
 8007cee:	2162      	movs	r1, #98	@ 0x62
 8007cf0:	2037      	movs	r0, #55	@ 0x37
 8007cf2:	f7ff fdfb 	bl	80078ec <lv_color_make>
 8007cf6:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_tgl_rel.body.border.color = lv_color_make(0x01, 0x07, 0x0d);
 8007cf8:	4c3c      	ldr	r4, [pc, #240]	@ (8007dec <lv_style_init+0x4a4>)
 8007cfa:	220d      	movs	r2, #13
 8007cfc:	2107      	movs	r1, #7
 8007cfe:	2001      	movs	r0, #1
 8007d00:	f7ff fdf4 	bl	80078ec <lv_color_make>
 8007d04:	8160      	strh	r0, [r4, #10]
    lv_style_btn_tgl_rel.text.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8007d06:	4c39      	ldr	r4, [pc, #228]	@ (8007dec <lv_style_init+0x4a4>)
 8007d08:	22f4      	movs	r2, #244	@ 0xf4
 8007d0a:	21dd      	movs	r1, #221	@ 0xdd
 8007d0c:	20c8      	movs	r0, #200	@ 0xc8
 8007d0e:	f7ff fded 	bl	80078ec <lv_color_make>
 8007d12:	8420      	strh	r0, [r4, #32]
    lv_style_btn_tgl_rel.image.color       = lv_color_make(0xc8, 0xdd, 0xf4);
 8007d14:	4c35      	ldr	r4, [pc, #212]	@ (8007dec <lv_style_init+0x4a4>)
 8007d16:	22f4      	movs	r2, #244	@ 0xf4
 8007d18:	21dd      	movs	r1, #221	@ 0xdd
 8007d1a:	20c8      	movs	r0, #200	@ 0xc8
 8007d1c:	f7ff fde6 	bl	80078ec <lv_color_make>
 8007d20:	8620      	strh	r0, [r4, #48]	@ 0x30
    lv_style_btn_tgl_rel.line.color        = lv_color_make(0xc8, 0xdd, 0xf4);
 8007d22:	4c32      	ldr	r4, [pc, #200]	@ (8007dec <lv_style_init+0x4a4>)
 8007d24:	22f4      	movs	r2, #244	@ 0xf4
 8007d26:	21dd      	movs	r1, #221	@ 0xdd
 8007d28:	20c8      	movs	r0, #200	@ 0xc8
 8007d2a:	f7ff fddf 	bl	80078ec <lv_color_make>
 8007d2e:	86a0      	strh	r0, [r4, #52]	@ 0x34

    /*Button toggle pressed style*/
    lv_style_copy(&lv_style_btn_tgl_pr, &lv_style_btn_tgl_rel);
 8007d30:	492e      	ldr	r1, [pc, #184]	@ (8007dec <lv_style_init+0x4a4>)
 8007d32:	482f      	ldr	r0, [pc, #188]	@ (8007df0 <lv_style_init+0x4a8>)
 8007d34:	f000 f860 	bl	8007df8 <lv_style_copy>
    lv_style_btn_tgl_pr.body.main_color = lv_color_make(0x02, 0x14, 0x27);
 8007d38:	4c2d      	ldr	r4, [pc, #180]	@ (8007df0 <lv_style_init+0x4a8>)
 8007d3a:	2227      	movs	r2, #39	@ 0x27
 8007d3c:	2114      	movs	r1, #20
 8007d3e:	2002      	movs	r0, #2
 8007d40:	f7ff fdd4 	bl	80078ec <lv_color_make>
 8007d44:	8060      	strh	r0, [r4, #2]
    lv_style_btn_tgl_pr.body.grad_color = lv_color_make(0x2b, 0x4c, 0x70);
 8007d46:	4c2a      	ldr	r4, [pc, #168]	@ (8007df0 <lv_style_init+0x4a8>)
 8007d48:	2270      	movs	r2, #112	@ 0x70
 8007d4a:	214c      	movs	r1, #76	@ 0x4c
 8007d4c:	202b      	movs	r0, #43	@ 0x2b
 8007d4e:	f7ff fdcd 	bl	80078ec <lv_color_make>
 8007d52:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_tgl_pr.text.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8007d54:	4c26      	ldr	r4, [pc, #152]	@ (8007df0 <lv_style_init+0x4a8>)
 8007d56:	22c6      	movs	r2, #198	@ 0xc6
 8007d58:	21b5      	movs	r1, #181	@ 0xb5
 8007d5a:	20a4      	movs	r0, #164	@ 0xa4
 8007d5c:	f7ff fdc6 	bl	80078ec <lv_color_make>
 8007d60:	8420      	strh	r0, [r4, #32]
    lv_style_btn_tgl_pr.image.color     = lv_color_make(0xa4, 0xb5, 0xc6);
 8007d62:	4c23      	ldr	r4, [pc, #140]	@ (8007df0 <lv_style_init+0x4a8>)
 8007d64:	22c6      	movs	r2, #198	@ 0xc6
 8007d66:	21b5      	movs	r1, #181	@ 0xb5
 8007d68:	20a4      	movs	r0, #164	@ 0xa4
 8007d6a:	f7ff fdbf 	bl	80078ec <lv_color_make>
 8007d6e:	8620      	strh	r0, [r4, #48]	@ 0x30
    lv_style_btn_tgl_pr.line.color      = lv_color_make(0xa4, 0xb5, 0xc6);
 8007d70:	4c1f      	ldr	r4, [pc, #124]	@ (8007df0 <lv_style_init+0x4a8>)
 8007d72:	22c6      	movs	r2, #198	@ 0xc6
 8007d74:	21b5      	movs	r1, #181	@ 0xb5
 8007d76:	20a4      	movs	r0, #164	@ 0xa4
 8007d78:	f7ff fdb8 	bl	80078ec <lv_color_make>
 8007d7c:	86a0      	strh	r0, [r4, #52]	@ 0x34

    /*Button inactive style*/
    lv_style_copy(&lv_style_btn_ina, &lv_style_btn_rel);
 8007d7e:	4918      	ldr	r1, [pc, #96]	@ (8007de0 <lv_style_init+0x498>)
 8007d80:	481c      	ldr	r0, [pc, #112]	@ (8007df4 <lv_style_init+0x4ac>)
 8007d82:	f000 f839 	bl	8007df8 <lv_style_copy>
    lv_style_btn_ina.body.main_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8007d86:	4c1b      	ldr	r4, [pc, #108]	@ (8007df4 <lv_style_init+0x4ac>)
 8007d88:	22d8      	movs	r2, #216	@ 0xd8
 8007d8a:	21d8      	movs	r1, #216	@ 0xd8
 8007d8c:	20d8      	movs	r0, #216	@ 0xd8
 8007d8e:	f7ff fdad 	bl	80078ec <lv_color_make>
 8007d92:	8060      	strh	r0, [r4, #2]
    lv_style_btn_ina.body.grad_color   = lv_color_make(0xd8, 0xd8, 0xd8);
 8007d94:	4c17      	ldr	r4, [pc, #92]	@ (8007df4 <lv_style_init+0x4ac>)
 8007d96:	22d8      	movs	r2, #216	@ 0xd8
 8007d98:	21d8      	movs	r1, #216	@ 0xd8
 8007d9a:	20d8      	movs	r0, #216	@ 0xd8
 8007d9c:	f7ff fda6 	bl	80078ec <lv_color_make>
 8007da0:	80a0      	strh	r0, [r4, #4]
    lv_style_btn_ina.body.border.color = lv_color_make(0x90, 0x90, 0x90);
 8007da2:	4c14      	ldr	r4, [pc, #80]	@ (8007df4 <lv_style_init+0x4ac>)
 8007da4:	2290      	movs	r2, #144	@ 0x90
 8007da6:	2190      	movs	r1, #144	@ 0x90
 8007da8:	2090      	movs	r0, #144	@ 0x90
 8007daa:	f7ff fd9f 	bl	80078ec <lv_color_make>
 8007dae:	8160      	strh	r0, [r4, #10]
    lv_style_btn_ina.text.color        = lv_color_make(0x70, 0x70, 0x70);
 8007db0:	4c10      	ldr	r4, [pc, #64]	@ (8007df4 <lv_style_init+0x4ac>)
 8007db2:	2270      	movs	r2, #112	@ 0x70
 8007db4:	2170      	movs	r1, #112	@ 0x70
 8007db6:	2070      	movs	r0, #112	@ 0x70
 8007db8:	f7ff fd98 	bl	80078ec <lv_color_make>
 8007dbc:	8420      	strh	r0, [r4, #32]
    lv_style_btn_ina.image.color       = lv_color_make(0x70, 0x70, 0x70);
 8007dbe:	4c0d      	ldr	r4, [pc, #52]	@ (8007df4 <lv_style_init+0x4ac>)
 8007dc0:	2270      	movs	r2, #112	@ 0x70
 8007dc2:	2170      	movs	r1, #112	@ 0x70
 8007dc4:	2070      	movs	r0, #112	@ 0x70
 8007dc6:	f7ff fd91 	bl	80078ec <lv_color_make>
 8007dca:	8620      	strh	r0, [r4, #48]	@ 0x30
    lv_style_btn_ina.line.color        = lv_color_make(0x70, 0x70, 0x70);
 8007dcc:	4c09      	ldr	r4, [pc, #36]	@ (8007df4 <lv_style_init+0x4ac>)
 8007dce:	2270      	movs	r2, #112	@ 0x70
 8007dd0:	2170      	movs	r1, #112	@ 0x70
 8007dd2:	2070      	movs	r0, #112	@ 0x70
 8007dd4:	f7ff fd8a 	bl	80078ec <lv_color_make>
 8007dd8:	86a0      	strh	r0, [r4, #52]	@ 0x34
}
 8007dda:	bf00      	nop
 8007ddc:	bd98      	pop	{r3, r4, r7, pc}
 8007dde:	bf00      	nop
 8007de0:	20002bbc 	.word	0x20002bbc
 8007de4:	0801c604 	.word	0x0801c604
 8007de8:	20002bf8 	.word	0x20002bf8
 8007dec:	20002c34 	.word	0x20002c34
 8007df0:	20002c70 	.word	0x20002c70
 8007df4:	20002cac 	.word	0x20002cac

08007df8 <lv_style_copy>:
 * Copy a style to an other
 * @param dest pointer to the destination style
 * @param src pointer to the source style
 */
void lv_style_copy(lv_style_t * dest, const lv_style_t * src)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_style_t));
 8007e02:	223c      	movs	r2, #60	@ 0x3c
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f013 fdef 	bl	801b9ea <memcpy>
}
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <lv_draw_get_buf>:
 * Give a buffer with the given to use during drawing.
 * Be careful to not use the buffer while other processes are using it.
 * @param size the required size
 */
void * lv_draw_get_buf(uint32_t size)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
    if(size <= draw_buf_size) return draw_buf;
 8007e1c:	4b19      	ldr	r3, [pc, #100]	@ (8007e84 <lv_draw_get_buf+0x70>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d802      	bhi.n	8007e2c <lv_draw_get_buf+0x18>
 8007e26:	4b18      	ldr	r3, [pc, #96]	@ (8007e88 <lv_draw_get_buf+0x74>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	e026      	b.n	8007e7a <lv_draw_get_buf+0x66>

    LV_LOG_TRACE("lv_draw_get_buf: allocate");

    draw_buf_size = size;
 8007e2c:	4a15      	ldr	r2, [pc, #84]	@ (8007e84 <lv_draw_get_buf+0x70>)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6013      	str	r3, [r2, #0]

    if(draw_buf == NULL) {
 8007e32:	4b15      	ldr	r3, [pc, #84]	@ (8007e88 <lv_draw_get_buf+0x74>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10e      	bne.n	8007e58 <lv_draw_get_buf+0x44>
        draw_buf = lv_mem_alloc(size);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f008 f940 	bl	80100c0 <lv_mem_alloc>
 8007e40:	4603      	mov	r3, r0
 8007e42:	4a11      	ldr	r2, [pc, #68]	@ (8007e88 <lv_draw_get_buf+0x74>)
 8007e44:	6013      	str	r3, [r2, #0]
        lv_mem_assert(draw_buf);
 8007e46:	4b10      	ldr	r3, [pc, #64]	@ (8007e88 <lv_draw_get_buf+0x74>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <lv_draw_get_buf+0x3e>
 8007e4e:	bf00      	nop
 8007e50:	e7fd      	b.n	8007e4e <lv_draw_get_buf+0x3a>
        return draw_buf;
 8007e52:	4b0d      	ldr	r3, [pc, #52]	@ (8007e88 <lv_draw_get_buf+0x74>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	e010      	b.n	8007e7a <lv_draw_get_buf+0x66>
    }

    draw_buf = lv_mem_realloc(draw_buf, size);
 8007e58:	4b0b      	ldr	r3, [pc, #44]	@ (8007e88 <lv_draw_get_buf+0x74>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6879      	ldr	r1, [r7, #4]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f008 f9b4 	bl	80101cc <lv_mem_realloc>
 8007e64:	4603      	mov	r3, r0
 8007e66:	4a08      	ldr	r2, [pc, #32]	@ (8007e88 <lv_draw_get_buf+0x74>)
 8007e68:	6013      	str	r3, [r2, #0]
    lv_mem_assert(draw_buf);
 8007e6a:	4b07      	ldr	r3, [pc, #28]	@ (8007e88 <lv_draw_get_buf+0x74>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <lv_draw_get_buf+0x62>
 8007e72:	bf00      	nop
 8007e74:	e7fd      	b.n	8007e72 <lv_draw_get_buf+0x5e>
    return draw_buf;
 8007e76:	4b04      	ldr	r3, [pc, #16]	@ (8007e88 <lv_draw_get_buf+0x74>)
 8007e78:	681b      	ldr	r3, [r3, #0]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	20002cec 	.word	0x20002cec
 8007e88:	20002ce8 	.word	0x20002ce8

08007e8c <lv_draw_free_buf>:

/**
 * Free the draw buffer
 */
void lv_draw_free_buf(void)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	af00      	add	r7, sp, #0
    if(draw_buf) {
 8007e90:	4b08      	ldr	r3, [pc, #32]	@ (8007eb4 <lv_draw_free_buf+0x28>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00a      	beq.n	8007eae <lv_draw_free_buf+0x22>
        lv_mem_free(draw_buf);
 8007e98:	4b06      	ldr	r3, [pc, #24]	@ (8007eb4 <lv_draw_free_buf+0x28>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f008 f949 	bl	8010134 <lv_mem_free>
        draw_buf = NULL;
 8007ea2:	4b04      	ldr	r3, [pc, #16]	@ (8007eb4 <lv_draw_free_buf+0x28>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	601a      	str	r2, [r3, #0]
        draw_buf_size = 0;
 8007ea8:	4b03      	ldr	r3, [pc, #12]	@ (8007eb8 <lv_draw_free_buf+0x2c>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	601a      	str	r2, [r3, #0]
    }
}
 8007eae:	bf00      	nop
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20002ce8 	.word	0x20002ce8
 8007eb8:	20002cec 	.word	0x20002cec

08007ebc <lv_draw_aa_get_opa>:
 * @param px_id position of  of a pixel which opacity should be get [0..seg-1]
 * @param base_opa the base opacity
 * @return the opacity of the given pixel
 */
lv_opa_t lv_draw_aa_get_opa(lv_coord_t seg, lv_coord_t px_id, lv_opa_t base_opa)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	80fb      	strh	r3, [r7, #6]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	80bb      	strh	r3, [r7, #4]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	70fb      	strb	r3, [r7, #3]
    static const lv_opa_t seg7[7] = {18, 55, 91, 128, 164, 200, 237};
    static const lv_opa_t seg8[8] = {16, 48, 80, 112, 143, 175, 207, 239};

    static const lv_opa_t * seg_map[] = {seg1, seg2, seg3, seg4, seg5, seg6, seg7, seg8};

    if(seg == 0)
 8007ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <lv_draw_aa_get_opa+0x1e>
        return LV_OPA_TRANSP;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e021      	b.n	8007f1e <lv_draw_aa_get_opa+0x62>
    else if(seg < 8)
 8007eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ede:	2b07      	cmp	r3, #7
 8007ee0:	dc10      	bgt.n	8007f04 <lv_draw_aa_get_opa+0x48>
        return (uint32_t)((uint32_t)seg_map[seg - 1][px_id] * base_opa) >> 8;
 8007ee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	4a0f      	ldr	r2, [pc, #60]	@ (8007f28 <lv_draw_aa_get_opa+0x6c>)
 8007eea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007eee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	78fb      	ldrb	r3, [r7, #3]
 8007efa:	fb02 f303 	mul.w	r3, r2, r3
 8007efe:	0a1b      	lsrs	r3, r3, #8
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	e00c      	b.n	8007f1e <lv_draw_aa_get_opa+0x62>
    else {
        return ((px_id * 2 + 1) * base_opa) / (2 * seg);
 8007f04:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	78fa      	ldrb	r2, [r7, #3]
 8007f0e:	fb03 f202 	mul.w	r2, r3, r2
 8007f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007f16:	005b      	lsls	r3, r3, #1
 8007f18:	fb92 f3f3 	sdiv	r3, r2, r3
 8007f1c:	b2db      	uxtb	r3, r3
    }
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bc80      	pop	{r7}
 8007f26:	4770      	bx	lr
 8007f28:	200000a4 	.word	0x200000a4

08007f2c <lv_color_mix>:
    return color.full;
#endif
}

static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	80b8      	strh	r0, [r7, #4]
 8007f34:	8039      	strh	r1, [r7, #0]
 8007f36:	4613      	mov	r3, r2
 8007f38:	70fb      	strb	r3, [r7, #3]
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8007f3a:	797b      	ldrb	r3, [r7, #5]
 8007f3c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	461a      	mov	r2, r3
 8007f44:	78fb      	ldrb	r3, [r7, #3]
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	fb02 f303 	mul.w	r3, r2, r3
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	787b      	ldrb	r3, [r7, #1]
 8007f50:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	4619      	mov	r1, r3
 8007f58:	78fb      	ldrb	r3, [r7, #3]
 8007f5a:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	fb01 f303 	mul.w	r3, r1, r3
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	4413      	add	r3, r2
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	0a1b      	lsrs	r3, r3, #8
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f003 031f 	and.w	r3, r3, #31
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	7b7b      	ldrb	r3, [r7, #13]
 8007f76:	f362 03c7 	bfi	r3, r2, #3, #5
 8007f7a:	737b      	strb	r3, [r7, #13]
    uint16_t g_2   = (c2.ch.green_h << 3) + c2.ch.green_l;
    uint16_t g_out = (uint16_t)((uint16_t)g_1 * mix + (g_2 * (255 - mix))) >> 8;
    ret.ch.green_h = g_out >> 3;
    ret.ch.green_l = g_out & 0x7;
#else
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8007f7c:	88bb      	ldrh	r3, [r7, #4]
 8007f7e:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	461a      	mov	r2, r3
 8007f86:	78fb      	ldrb	r3, [r7, #3]
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	fb02 f303 	mul.w	r3, r2, r3
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	883b      	ldrh	r3, [r7, #0]
 8007f92:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	4619      	mov	r1, r3
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	fb01 f303 	mul.w	r3, r1, r3
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	4413      	add	r3, r2
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	0a1b      	lsrs	r3, r3, #8
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	89bb      	ldrh	r3, [r7, #12]
 8007fb8:	f362 134a 	bfi	r3, r2, #5, #6
 8007fbc:	81bb      	strh	r3, [r7, #12]
#endif
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 8007fbe:	793b      	ldrb	r3, [r7, #4]
 8007fc0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	fb02 f303 	mul.w	r3, r2, r3
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	783b      	ldrb	r3, [r7, #0]
 8007fd4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	4619      	mov	r1, r3
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	fb01 f303 	mul.w	r3, r1, r3
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	4413      	add	r3, r2
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	0a1b      	lsrs	r3, r3, #8
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	f003 031f 	and.w	r3, r3, #31
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	7b3b      	ldrb	r3, [r7, #12]
 8007ffa:	f362 0304 	bfi	r3, r2, #0, #5
 8007ffe:	733b      	strb	r3, [r7, #12]
#else
    /*LV_COLOR_DEPTH == 1*/
    ret.full = mix > LV_OPA_50 ? c1.full : c2.full;
#endif

    return ret;
 8008000:	89bb      	ldrh	r3, [r7, #12]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	bc80      	pop	{r7}
 800800a:	4770      	bx	lr

0800800c <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800801a:	b29a      	uxth	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008022:	b29b      	uxth	r3, r3
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	b29b      	uxth	r3, r3
 8008028:	3301      	adds	r3, #1
 800802a:	b29b      	uxth	r3, r3
 800802c:	b21b      	sxth	r3, r3
}
 800802e:	4618      	mov	r0, r3
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	bc80      	pop	{r7}
 8008036:	4770      	bx	lr

08008038 <lv_draw_px>:
 * @param mask_p fill only on this mask (truncated to VDB area)
 * @param color pixel color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_px(lv_coord_t x, lv_coord_t y, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 8008038:	b5b0      	push	{r4, r5, r7, lr}
 800803a:	b08e      	sub	sp, #56	@ 0x38
 800803c:	af04      	add	r7, sp, #16
 800803e:	60ba      	str	r2, [r7, #8]
 8008040:	80bb      	strh	r3, [r7, #4]
 8008042:	4603      	mov	r3, r0
 8008044:	81fb      	strh	r3, [r7, #14]
 8008046:	460b      	mov	r3, r1
 8008048:	81bb      	strh	r3, [r7, #12]

    if(opa < LV_OPA_MIN) return;
 800804a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800804e:	2b0f      	cmp	r3, #15
 8008050:	f240 8084 	bls.w	800815c <lv_draw_px+0x124>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 8008054:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008058:	2bfb      	cmp	r3, #251	@ 0xfb
 800805a:	d902      	bls.n	8008062 <lv_draw_px+0x2a>
 800805c:	23ff      	movs	r3, #255	@ 0xff
 800805e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

    /*Pixel out of the mask*/
    if(x < mask_p->x1 || x > mask_p->x2 || y < mask_p->y1 || y > mask_p->y2) {
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008068:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800806c:	429a      	cmp	r2, r3
 800806e:	db77      	blt.n	8008160 <lv_draw_px+0x128>
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008076:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800807a:	429a      	cmp	r2, r3
 800807c:	dc70      	bgt.n	8008160 <lv_draw_px+0x128>
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008084:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008088:	429a      	cmp	r2, r3
 800808a:	db69      	blt.n	8008160 <lv_draw_px+0x128>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008092:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008096:	429a      	cmp	r2, r3
 8008098:	dc62      	bgt.n	8008160 <lv_draw_px+0x128>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 800809a:	f7fe ff45 	bl	8006f28 <lv_refr_get_disp_refreshing>
 800809e:	6278      	str	r0, [r7, #36]	@ 0x24
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80080a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80080a2:	f006 fdff 	bl	800eca4 <lv_disp_get_buf>
 80080a6:	6238      	str	r0, [r7, #32]
    uint32_t vdb_width  = lv_area_get_width(&vdb->area);
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	3310      	adds	r3, #16
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7ff ffad 	bl	800800c <lv_area_get_width>
 80080b2:	4603      	mov	r3, r0
 80080b4:	61fb      	str	r3, [r7, #28]

    /*Make the coordinates relative to VDB*/
    x -= vdb->area.x1;
 80080b6:	89fa      	ldrh	r2, [r7, #14]
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	81fb      	strh	r3, [r7, #14]
    y -= vdb->area.y1;
 80080c6:	89ba      	ldrh	r2, [r7, #12]
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	81bb      	strh	r3, [r7, #12]

    if(disp->driver.set_px_cb) {
 80080d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d014      	beq.n	8008108 <lv_draw_px+0xd0>
        disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width, x, y, color, opa);
 80080de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e0:	695c      	ldr	r4, [r3, #20]
 80080e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	6899      	ldr	r1, [r3, #8]
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	b21a      	sxth	r2, r3
 80080ec:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 80080f0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80080f4:	9302      	str	r3, [sp, #8]
 80080f6:	88bb      	ldrh	r3, [r7, #4]
 80080f8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80080fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	462b      	mov	r3, r5
 8008104:	47a0      	blx	r4
 8008106:	e02c      	b.n	8008162 <lv_draw_px+0x12a>
    } else {
        bool scr_transp = false;
 8008108:	2300      	movs	r3, #0
 800810a:	76fb      	strb	r3, [r7, #27]
#if LV_COLOR_SCREEN_TRANSP
        scr_transp = disp->driver.screen_transp;
#endif

        lv_color_t * vdb_px_p = vdb->buf_act;
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	617b      	str	r3, [r7, #20]
        vdb_px_p += y * vdb_width + x;
 8008112:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008116:	69fa      	ldr	r2, [r7, #28]
 8008118:	fb03 f202 	mul.w	r2, r3, r2
 800811c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008120:	4413      	add	r3, r2
 8008122:	005b      	lsls	r3, r3, #1
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	4413      	add	r3, r2
 8008128:	617b      	str	r3, [r7, #20]

        if(scr_transp == false) {
 800812a:	7efb      	ldrb	r3, [r7, #27]
 800812c:	f083 0301 	eor.w	r3, r3, #1
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d015      	beq.n	8008162 <lv_draw_px+0x12a>
            if(opa == LV_OPA_COVER) {
 8008136:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800813a:	2bff      	cmp	r3, #255	@ 0xff
 800813c:	d103      	bne.n	8008146 <lv_draw_px+0x10e>
                *vdb_px_p = color;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	88ba      	ldrh	r2, [r7, #4]
 8008142:	801a      	strh	r2, [r3, #0]
 8008144:	e00d      	b.n	8008162 <lv_draw_px+0x12a>
            } else {
                *vdb_px_p = lv_color_mix(color, *vdb_px_p, opa);
 8008146:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	8819      	ldrh	r1, [r3, #0]
 800814e:	88b8      	ldrh	r0, [r7, #4]
 8008150:	f7ff feec 	bl	8007f2c <lv_color_mix>
 8008154:	4602      	mov	r2, r0
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	801a      	strh	r2, [r3, #0]
 800815a:	e002      	b.n	8008162 <lv_draw_px+0x12a>
    if(opa < LV_OPA_MIN) return;
 800815c:	bf00      	nop
 800815e:	e000      	b.n	8008162 <lv_draw_px+0x12a>
        return;
 8008160:	bf00      	nop
#if LV_COLOR_DEPTH == 32
            *vdb_px_p = color_mix_2_alpha(*vdb_px_p, (*vdb_px_p).ch.alpha, color, opa);
#endif
        }
    }
}
 8008162:	3728      	adds	r7, #40	@ 0x28
 8008164:	46bd      	mov	sp, r7
 8008166:	bdb0      	pop	{r4, r5, r7, pc}

08008168 <lv_draw_fill>:
 * @param mask_p fill only o this mask  (truncated to VDB area)
 * @param color fill color
 * @param opa opacity of the area (0..255)
 */
void lv_draw_fill(const lv_area_t * cords_p, const lv_area_t * mask_p, lv_color_t color, lv_opa_t opa)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b090      	sub	sp, #64	@ 0x40
 800816c:	af02      	add	r7, sp, #8
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	80ba      	strh	r2, [r7, #4]
 8008174:	71fb      	strb	r3, [r7, #7]
    if(opa < LV_OPA_MIN) return;
 8008176:	79fb      	ldrb	r3, [r7, #7]
 8008178:	2b0f      	cmp	r3, #15
 800817a:	d968      	bls.n	800824e <lv_draw_fill+0xe6>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800817c:	79fb      	ldrb	r3, [r7, #7]
 800817e:	2bfb      	cmp	r3, #251	@ 0xfb
 8008180:	d901      	bls.n	8008186 <lv_draw_fill+0x1e>
 8008182:	23ff      	movs	r3, #255	@ 0xff
 8008184:	71fb      	strb	r3, [r7, #7]
    bool union_ok;

    /*Get the union of cord and mask*/
    /* The mask is already truncated to the vdb size
     * in 'lv_refr_area_with_vdb' function */
    union_ok = lv_area_intersect(&res_a, cords_p, mask_p);
 8008186:	f107 031c 	add.w	r3, r7, #28
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	68f9      	ldr	r1, [r7, #12]
 800818e:	4618      	mov	r0, r3
 8008190:	f007 f9e4 	bl	800f55c <lv_area_intersect>
 8008194:	4603      	mov	r3, r0
 8008196:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    /*If there are common part of the three area then draw to the vdb*/
    if(union_ok == false) {
 800819a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800819e:	f083 0301 	eor.w	r3, r3, #1
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d154      	bne.n	8008252 <lv_draw_fill+0xea>
        return;
    }

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 80081a8:	f7fe febe 	bl	8006f28 <lv_refr_get_disp_refreshing>
 80081ac:	6338      	str	r0, [r7, #48]	@ 0x30
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80081ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081b0:	f006 fd78 	bl	800eca4 <lv_disp_get_buf>
 80081b4:	62f8      	str	r0, [r7, #44]	@ 0x2c

    lv_area_t vdb_rel_a; /*Stores relative coordinates on vdb*/
    vdb_rel_a.x1 = res_a.x1 - vdb->area.x1;
 80081b6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081be:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	b21b      	sxth	r3, r3
 80081ca:	82bb      	strh	r3, [r7, #20]
    vdb_rel_a.y1 = res_a.y1 - vdb->area.y1;
 80081cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	b29b      	uxth	r3, r3
 80081de:	b21b      	sxth	r3, r3
 80081e0:	82fb      	strh	r3, [r7, #22]
    vdb_rel_a.x2 = res_a.x2 - vdb->area.x1;
 80081e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081ea:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	b21b      	sxth	r3, r3
 80081f6:	833b      	strh	r3, [r7, #24]
    vdb_rel_a.y2 = res_a.y2 - vdb->area.y1;
 80081f8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008200:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008204:	b29b      	uxth	r3, r3
 8008206:	1ad3      	subs	r3, r2, r3
 8008208:	b29b      	uxth	r3, r3
 800820a:	b21b      	sxth	r3, r3
 800820c:	837b      	strh	r3, [r7, #26]

    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 800820e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t vdb_width       = lv_area_get_width(&vdb->area);
 8008214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008216:	3310      	adds	r3, #16
 8008218:	4618      	mov	r0, r3
 800821a:	f7ff fef7 	bl	800800c <lv_area_get_width>
 800821e:	4603      	mov	r3, r0
 8008220:	627b      	str	r3, [r7, #36]	@ 0x24
    /*Move the vdb_tmp to the first row*/
    vdb_buf_tmp += vdb_width * vdb_rel_a.y1;
 8008222:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008226:	461a      	mov	r2, r3
 8008228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822a:	fb02 f303 	mul.w	r3, r2, r3
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008232:	4413      	add	r3, r2
 8008234:	62bb      	str	r3, [r7, #40]	@ 0x28
        else {
            sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
        }
    }
#else
    sw_color_fill(vdb->buf_act, vdb_width, &vdb_rel_a, color, opa);
 8008236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008238:	6898      	ldr	r0, [r3, #8]
 800823a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823c:	b219      	sxth	r1, r3
 800823e:	f107 0214 	add.w	r2, r7, #20
 8008242:	79fb      	ldrb	r3, [r7, #7]
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	88bb      	ldrh	r3, [r7, #4]
 8008248:	f000 faa6 	bl	8008798 <sw_color_fill>
 800824c:	e002      	b.n	8008254 <lv_draw_fill+0xec>
    if(opa < LV_OPA_MIN) return;
 800824e:	bf00      	nop
 8008250:	e000      	b.n	8008254 <lv_draw_fill+0xec>
        return;
 8008252:	bf00      	nop
#endif
}
 8008254:	3738      	adds	r7, #56	@ 0x38
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
	...

0800825c <lv_draw_letter>:
 * @param color color of letter
 * @param opa opacity of letter (0..255)
 */
void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * mask_p, const lv_font_t * font_p, uint32_t letter,
                    lv_color_t color, lv_opa_t opa)
{
 800825c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800825e:	b0a1      	sub	sp, #132	@ 0x84
 8008260:	af04      	add	r7, sp, #16
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	603b      	str	r3, [r7, #0]
    /*clang-format off*/
    const uint8_t bpp1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800826a:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800826e:	863b      	strh	r3, [r7, #48]	@ 0x30
    const uint8_t bpp2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 8008270:	4bbb      	ldr	r3, [pc, #748]	@ (8008560 <lv_draw_letter+0x304>)
 8008272:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint8_t bpp4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 8008274:	4bbb      	ldr	r3, [pc, #748]	@ (8008564 <lv_draw_letter+0x308>)
 8008276:	f107 041c 	add.w	r4, r7, #28
 800827a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800827c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                        68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};
    /*clang-format on*/

    if(opa < LV_OPA_MIN) return;
 8008280:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8008284:	2b0f      	cmp	r3, #15
 8008286:	f240 8279 	bls.w	800877c <lv_draw_letter+0x520>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
 800828a:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800828e:	2bfb      	cmp	r3, #251	@ 0xfb
 8008290:	d902      	bls.n	8008298 <lv_draw_letter+0x3c>
 8008292:	23ff      	movs	r3, #255	@ 0xff
 8008294:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

    if(font_p == NULL) {
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 8270 	beq.w	8008780 <lv_draw_letter+0x524>
        LV_LOG_WARN("Font: character's bitmap not found");
        return;
    }

    lv_font_glyph_dsc_t g;
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
 80082a0:	f107 0114 	add.w	r1, r7, #20
 80082a4:	2300      	movs	r3, #0
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f006 f8a2 	bl	800e3f2 <lv_font_get_glyph_dsc>
 80082ae:	4603      	mov	r3, r0
 80082b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if(g_ret == false) return;
 80082b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80082b8:	f083 0301 	eor.w	r3, r3, #1
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f040 8260 	bne.w	8008784 <lv_draw_letter+0x528>

    lv_coord_t pos_x = pos_p->x + g.ofs_x;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	4413      	add	r3, r2
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    lv_coord_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	7a1b      	ldrb	r3, [r3, #8]
 80082e6:	4619      	mov	r1, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	7a5b      	ldrb	r3, [r3, #9]
 80082ec:	1acb      	subs	r3, r1, r3
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	4413      	add	r3, r2
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	7dfa      	ldrb	r2, [r7, #23]
 80082f6:	1a9b      	subs	r3, r3, r2
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	b29b      	uxth	r3, r3
 8008304:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

    const uint8_t * bpp_opa_table;
    uint8_t bitmask_init;
    uint8_t bitmask;

    switch(g.bpp) {
 8008308:	7ebb      	ldrb	r3, [r7, #26]
 800830a:	3b01      	subs	r3, #1
 800830c:	2b07      	cmp	r3, #7
 800830e:	f200 823b 	bhi.w	8008788 <lv_draw_letter+0x52c>
 8008312:	a201      	add	r2, pc, #4	@ (adr r2, 8008318 <lv_draw_letter+0xbc>)
 8008314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008318:	08008339 	.word	0x08008339
 800831c:	08008347 	.word	0x08008347
 8008320:	08008789 	.word	0x08008789
 8008324:	08008355 	.word	0x08008355
 8008328:	08008789 	.word	0x08008789
 800832c:	08008789 	.word	0x08008789
 8008330:	08008789 	.word	0x08008789
 8008334:	08008363 	.word	0x08008363
        case 1:
            bpp_opa_table = bpp1_opa_table;
 8008338:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800833c:	66fb      	str	r3, [r7, #108]	@ 0x6c
            bitmask_init  = 0x80;
 800833e:	2380      	movs	r3, #128	@ 0x80
 8008340:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            break;
 8008344:	e013      	b.n	800836e <lv_draw_letter+0x112>
        case 2:
            bpp_opa_table = bpp2_opa_table;
 8008346:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800834a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            bitmask_init  = 0xC0;
 800834c:	23c0      	movs	r3, #192	@ 0xc0
 800834e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            break;
 8008352:	e00c      	b.n	800836e <lv_draw_letter+0x112>
        case 4:
            bpp_opa_table = bpp4_opa_table;
 8008354:	f107 031c 	add.w	r3, r7, #28
 8008358:	66fb      	str	r3, [r7, #108]	@ 0x6c
            bitmask_init  = 0xF0;
 800835a:	23f0      	movs	r3, #240	@ 0xf0
 800835c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            break;
 8008360:	e005      	b.n	800836e <lv_draw_letter+0x112>
        case 8:
            bpp_opa_table = NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	66fb      	str	r3, [r7, #108]	@ 0x6c
            bitmask_init  = 0xFF;
 8008366:	23ff      	movs	r3, #255	@ 0xff
 8008368:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            break;       /*No opa table, pixel value will be used directly*/
 800836c:	bf00      	nop
        default: return; /*Invalid bpp. Can't render the letter*/
    }

    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
 800836e:	6839      	ldr	r1, [r7, #0]
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f006 f82f 	bl	800e3d4 <lv_font_get_glyph_bitmap>
 8008376:	6678      	str	r0, [r7, #100]	@ 0x64

    if(map_p == NULL) return;
 8008378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800837a:	2b00      	cmp	r3, #0
 800837c:	f000 8206 	beq.w	800878c <lv_draw_letter+0x530>

    /*If the letter is completely out of mask don't draw it */
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8008380:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8008384:	7dba      	ldrb	r2, [r7, #22]
 8008386:	4413      	add	r3, r2
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800838e:	4293      	cmp	r3, r2
 8008390:	f2c0 81fe 	blt.w	8008790 <lv_draw_letter+0x534>
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800839a:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 800839e:	429a      	cmp	r2, r3
 80083a0:	f300 81f6 	bgt.w	8008790 <lv_draw_letter+0x534>
 80083a4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 80083a8:	7dfa      	ldrb	r2, [r7, #23]
 80083aa:	4413      	add	r3, r2
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80083b2:	4293      	cmp	r3, r2
 80083b4:	f2c0 81ec 	blt.w	8008790 <lv_draw_letter+0x534>
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80083be:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	@ 0x52
 80083c2:	429a      	cmp	r2, r3
 80083c4:	f300 81e4 	bgt.w	8008790 <lv_draw_letter+0x534>

    lv_disp_t * disp    = lv_refr_get_disp_refreshing();
 80083c8:	f7fe fdae 	bl	8006f28 <lv_refr_get_disp_refreshing>
 80083cc:	64f8      	str	r0, [r7, #76]	@ 0x4c
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
 80083ce:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80083d0:	f006 fc68 	bl	800eca4 <lv_disp_get_buf>
 80083d4:	64b8      	str	r0, [r7, #72]	@ 0x48

    lv_coord_t vdb_width     = lv_area_get_width(&vdb->area);
 80083d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083d8:	3310      	adds	r3, #16
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff fe16 	bl	800800c <lv_area_get_width>
 80083e0:	4603      	mov	r3, r0
 80083e2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
 80083e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	663b      	str	r3, [r7, #96]	@ 0x60
    lv_coord_t col, row;

    uint8_t width_byte_scr = g.box_w >> 3; /*Width in bytes (on the screen finally) (e.g. w = 11 -> 2 bytes wide)*/
 80083ec:	7dbb      	ldrb	r3, [r7, #22]
 80083ee:	08db      	lsrs	r3, r3, #3
 80083f0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    if(g.box_w & 0x7) width_byte_scr++;
 80083f4:	7dbb      	ldrb	r3, [r7, #22]
 80083f6:	f003 0307 	and.w	r3, r3, #7
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d004      	beq.n	8008408 <lv_draw_letter+0x1ac>
 80083fe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008402:	3301      	adds	r3, #1
 8008404:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint16_t width_bit = g.box_w * g.bpp; /*Letter width in bits*/
 8008408:	7dbb      	ldrb	r3, [r7, #22]
 800840a:	7eba      	ldrb	r2, [r7, #26]
 800840c:	fb02 f303 	mul.w	r3, r2, r3
 8008410:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    /* Calculate the col/row start/end on the map*/
    lv_coord_t col_start = pos_x >= mask_p->x1 ? 0 : mask_p->x1 - pos_x;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800841a:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 800841e:	429a      	cmp	r2, r3
 8008420:	da09      	bge.n	8008436 <lv_draw_letter+0x1da>
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008428:	b29a      	uxth	r2, r3
 800842a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	b29b      	uxth	r3, r3
 8008432:	b21b      	sxth	r3, r3
 8008434:	e000      	b.n	8008438 <lv_draw_letter+0x1dc>
 8008436:	2300      	movs	r3, #0
 8008438:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    lv_coord_t col_end   = pos_x + g.box_w <= mask_p->x2 ? g.box_w : mask_p->x2 - pos_x + 1;
 800843c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8008440:	7dba      	ldrb	r2, [r7, #22]
 8008442:	4413      	add	r3, r2
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800844a:	4293      	cmp	r3, r2
 800844c:	dc02      	bgt.n	8008454 <lv_draw_letter+0x1f8>
 800844e:	7dbb      	ldrb	r3, [r7, #22]
 8008450:	b21b      	sxth	r3, r3
 8008452:	e00a      	b.n	800846a <lv_draw_letter+0x20e>
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800845a:	b29a      	uxth	r2, r3
 800845c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	b29b      	uxth	r3, r3
 8008464:	3301      	adds	r3, #1
 8008466:	b29b      	uxth	r3, r3
 8008468:	b21b      	sxth	r3, r3
 800846a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    lv_coord_t row_start = pos_y >= mask_p->y1 ? 0 : mask_p->y1 - pos_y;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008472:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	@ 0x52
 8008476:	429a      	cmp	r2, r3
 8008478:	da09      	bge.n	800848e <lv_draw_letter+0x232>
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008480:	b29a      	uxth	r2, r3
 8008482:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	b29b      	uxth	r3, r3
 800848a:	b21b      	sxth	r3, r3
 800848c:	e000      	b.n	8008490 <lv_draw_letter+0x234>
 800848e:	2300      	movs	r3, #0
 8008490:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    lv_coord_t row_end   = pos_y + g.box_h <= mask_p->y2 ? g.box_h : mask_p->y2 - pos_y + 1;
 8008492:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 8008496:	7dfa      	ldrb	r2, [r7, #23]
 8008498:	4413      	add	r3, r2
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80084a0:	4293      	cmp	r3, r2
 80084a2:	dc02      	bgt.n	80084aa <lv_draw_letter+0x24e>
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	b21b      	sxth	r3, r3
 80084a8:	e00a      	b.n	80084c0 <lv_draw_letter+0x264>
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	3301      	adds	r3, #1
 80084bc:	b29b      	uxth	r3, r3
 80084be:	b21b      	sxth	r3, r3
 80084c0:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /*Set a pointer on VDB to the first pixel of the letter*/
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
 80084c2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 80084c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084c8:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80084cc:	1a9b      	subs	r3, r3, r2
 80084ce:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 80084d2:	fb03 f202 	mul.w	r2, r3, r2
 80084d6:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 80084da:	4413      	add	r3, r2
 80084dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084de:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80084e2:	1a9b      	subs	r3, r3, r2
 80084e4:	005b      	lsls	r3, r3, #1
 80084e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80084e8:	4413      	add	r3, r2
 80084ea:	663b      	str	r3, [r7, #96]	@ 0x60

    /*If the letter is partially out of mask the move there on VDB*/
    vdb_buf_tmp += (row_start * vdb_width) + col_start;
 80084ec:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 80084f0:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 80084f4:	fb03 f202 	mul.w	r2, r3, r2
 80084f8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 80084fc:	4413      	add	r3, r2
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008502:	4413      	add	r3, r2
 8008504:	663b      	str	r3, [r7, #96]	@ 0x60

    /*Move on the map too*/
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * g.bpp);
 8008506:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800850a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800850e:	fb03 f202 	mul.w	r2, r3, r2
 8008512:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8008516:	7eb9      	ldrb	r1, [r7, #26]
 8008518:	fb01 f303 	mul.w	r3, r1, r3
 800851c:	4413      	add	r3, r2
 800851e:	637b      	str	r3, [r7, #52]	@ 0x34
    map_p += bit_ofs >> 3;
 8008520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008522:	08db      	lsrs	r3, r3, #3
 8008524:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008526:	4413      	add	r3, r2
 8008528:	667b      	str	r3, [r7, #100]	@ 0x64

    uint8_t letter_px;
    lv_opa_t px_opa;
    uint16_t col_bit;
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
 800852a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800852c:	b29b      	uxth	r3, r3
 800852e:	f003 0307 	and.w	r3, r3, #7
 8008532:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

    bool scr_transp = false;
 8008536:	2300      	movs	r3, #0
 8008538:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
#if LV_COLOR_SCREEN_TRANSP
    scr_transp = disp->driver.screen_transp;
#endif

    for(row = row_start; row < row_end; row++) {
 800853c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800853e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8008542:	e113      	b.n	800876c <lv_draw_letter+0x510>
        bitmask = bitmask_init >> col_bit;
 8008544:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8008548:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800854c:	fa42 f303 	asr.w	r3, r2, r3
 8008550:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
        for(col = col_start; col < col_end; col++) {
 8008554:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008558:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800855c:	e0cc      	b.n	80086f8 <lv_draw_letter+0x49c>
 800855e:	bf00      	nop
 8008560:	ffaa5500 	.word	0xffaa5500
 8008564:	0801c60c 	.word	0x0801c60c
            letter_px = (*map_p & bitmask) >> (8 - col_bit - g.bpp);
 8008568:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800856a:	781a      	ldrb	r2, [r3, #0]
 800856c:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8008570:	4013      	ands	r3, r2
 8008572:	b2db      	uxtb	r3, r3
 8008574:	461a      	mov	r2, r3
 8008576:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800857a:	f1c3 0308 	rsb	r3, r3, #8
 800857e:	7eb9      	ldrb	r1, [r7, #26]
 8008580:	1a5b      	subs	r3, r3, r1
 8008582:	fa42 f303 	asr.w	r3, r2, r3
 8008586:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            if(letter_px != 0) {
 800858a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 8089 	beq.w	80086a6 <lv_draw_letter+0x44a>
                if(opa == LV_OPA_COVER) {
 8008594:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8008598:	2bff      	cmp	r3, #255	@ 0xff
 800859a:	d10d      	bne.n	80085b8 <lv_draw_letter+0x35c>
                    px_opa = g.bpp == 8 ? letter_px : bpp_opa_table[letter_px];
 800859c:	7ebb      	ldrb	r3, [r7, #26]
 800859e:	2b08      	cmp	r3, #8
 80085a0:	d005      	beq.n	80085ae <lv_draw_letter+0x352>
 80085a2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80085a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085a8:	4413      	add	r3, r2
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	e001      	b.n	80085b2 <lv_draw_letter+0x356>
 80085ae:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80085b2:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80085b6:	e020      	b.n	80085fa <lv_draw_letter+0x39e>
                } else {
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 80085b8:	7ebb      	ldrb	r3, [r7, #26]
 80085ba:	2b08      	cmp	r3, #8
 80085bc:	d10c      	bne.n	80085d8 <lv_draw_letter+0x37c>
 80085be:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	f897 208c 	ldrb.w	r2, [r7, #140]	@ 0x8c
 80085c8:	b292      	uxth	r2, r2
 80085ca:	fb02 f303 	mul.w	r3, r2, r3
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	0a1b      	lsrs	r3, r3, #8
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	e00e      	b.n	80085f6 <lv_draw_letter+0x39a>
                                        : (uint16_t)((uint16_t)bpp_opa_table[letter_px] * opa) >> 8;
 80085d8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80085dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085de:	4413      	add	r3, r2
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	fb02 f303 	mul.w	r3, r2, r3
 80085ee:	b29b      	uxth	r3, r3
                    px_opa = g.bpp == 8 ? (uint16_t)((uint16_t)letter_px * opa) >> 8
 80085f0:	0a1b      	lsrs	r3, r3, #8
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
                }

                if(disp->driver.set_px_cb) {
 80085fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085fc:	695b      	ldr	r3, [r3, #20]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d02c      	beq.n	800865c <lv_draw_letter+0x400>
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8008602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008604:	695c      	ldr	r4, [r3, #20]
 8008606:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8008608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800860a:	6899      	ldr	r1, [r3, #8]
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 800860c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8008610:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8008614:	4413      	add	r3, r2
 8008616:	b29a      	uxth	r2, r3
 8008618:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800861a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800861e:	b29b      	uxth	r3, r3
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	b29b      	uxth	r3, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 8008624:	b21e      	sxth	r6, r3
                                           (col + pos_x) - vdb->area.x1, (row + pos_y) - vdb->area.y1, color, px_opa);
 8008626:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800862a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800862e:	4413      	add	r3, r2
 8008630:	b29a      	uxth	r2, r3
 8008632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008634:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008638:	b29b      	uxth	r3, r3
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	b29b      	uxth	r3, r3
                    disp->driver.set_px_cb(&disp->driver, (uint8_t *)vdb->buf_act, vdb_width,
 800863e:	b21b      	sxth	r3, r3
 8008640:	f9b7 5046 	ldrsh.w	r5, [r7, #70]	@ 0x46
 8008644:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8008648:	9202      	str	r2, [sp, #8]
 800864a:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 800864e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	4633      	mov	r3, r6
 8008656:	462a      	mov	r2, r5
 8008658:	47a0      	blx	r4
 800865a:	e024      	b.n	80086a6 <lv_draw_letter+0x44a>
                } else if(vdb_buf_tmp->full != color.full) {
 800865c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800865e:	881a      	ldrh	r2, [r3, #0]
 8008660:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008664:	429a      	cmp	r2, r3
 8008666:	d01e      	beq.n	80086a6 <lv_draw_letter+0x44a>
                    if(px_opa > LV_OPA_MAX)
 8008668:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800866c:	2bfb      	cmp	r3, #251	@ 0xfb
 800866e:	d904      	bls.n	800867a <lv_draw_letter+0x41e>
                        *vdb_buf_tmp = color;
 8008670:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008672:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8008676:	801a      	strh	r2, [r3, #0]
 8008678:	e015      	b.n	80086a6 <lv_draw_letter+0x44a>
                    else if(px_opa > LV_OPA_MIN) {
 800867a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800867e:	2b10      	cmp	r3, #16
 8008680:	d911      	bls.n	80086a6 <lv_draw_letter+0x44a>
                        if(scr_transp == false) {
 8008682:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008686:	f083 0301 	eor.w	r3, r3, #1
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00a      	beq.n	80086a6 <lv_draw_letter+0x44a>
                            *vdb_buf_tmp = lv_color_mix(color, *vdb_buf_tmp, px_opa);
 8008690:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8008694:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008696:	8819      	ldrh	r1, [r3, #0]
 8008698:	f8b7 0088 	ldrh.w	r0, [r7, #136]	@ 0x88
 800869c:	f7ff fc46 	bl	8007f2c <lv_color_mix>
 80086a0:	4602      	mov	r2, r0
 80086a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086a4:	801a      	strh	r2, [r3, #0]
                        }
                    }
                }
            }

            vdb_buf_tmp++;
 80086a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086a8:	3302      	adds	r3, #2
 80086aa:	663b      	str	r3, [r7, #96]	@ 0x60

            if(col_bit < 8 - g.bpp) {
 80086ac:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80086b0:	7ebb      	ldrb	r3, [r7, #26]
 80086b2:	f1c3 0308 	rsb	r3, r3, #8
 80086b6:	429a      	cmp	r2, r3
 80086b8:	da0d      	bge.n	80086d6 <lv_draw_letter+0x47a>
                col_bit += g.bpp;
 80086ba:	7ebb      	ldrb	r3, [r7, #26]
 80086bc:	461a      	mov	r2, r3
 80086be:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80086c2:	4413      	add	r3, r2
 80086c4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
                bitmask = bitmask >> g.bpp;
 80086c8:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80086cc:	7eba      	ldrb	r2, [r7, #26]
 80086ce:	4113      	asrs	r3, r2
 80086d0:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 80086d4:	e009      	b.n	80086ea <lv_draw_letter+0x48e>
            } else {
                col_bit = 0;
 80086d6:	2300      	movs	r3, #0
 80086d8:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
                bitmask = bitmask_init;
 80086dc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80086e0:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
                map_p++;
 80086e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086e6:	3301      	adds	r3, #1
 80086e8:	667b      	str	r3, [r7, #100]	@ 0x64
        for(col = col_start; col < col_end; col++) {
 80086ea:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	3301      	adds	r3, #1
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 80086f8:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 80086fc:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8008700:	429a      	cmp	r2, r3
 8008702:	f6ff af31 	blt.w	8008568 <lv_draw_letter+0x30c>
            }
        }
        col_bit += ((g.box_w - col_end) + col_start) * g.bpp;
 8008706:	7dbb      	ldrb	r3, [r7, #22]
 8008708:	461a      	mov	r2, r3
 800870a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800870e:	1ad2      	subs	r2, r2, r3
 8008710:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8008714:	4413      	add	r3, r2
 8008716:	b29b      	uxth	r3, r3
 8008718:	7eba      	ldrb	r2, [r7, #26]
 800871a:	fb02 f303 	mul.w	r3, r2, r3
 800871e:	b29a      	uxth	r2, r3
 8008720:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8008724:	4413      	add	r3, r2
 8008726:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

        map_p += (col_bit >> 3);
 800872a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800872e:	08db      	lsrs	r3, r3, #3
 8008730:	b29b      	uxth	r3, r3
 8008732:	461a      	mov	r2, r3
 8008734:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008736:	4413      	add	r3, r2
 8008738:	667b      	str	r3, [r7, #100]	@ 0x64
        col_bit = col_bit & 0x7;
 800873a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800873e:	f003 0307 	and.w	r3, r3, #7
 8008742:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
        vdb_buf_tmp += vdb_width - (col_end - col_start); /*Next row in VDB*/
 8008746:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 800874a:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	@ 0x3e
 800874e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8008752:	1acb      	subs	r3, r1, r3
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800875a:	4413      	add	r3, r2
 800875c:	663b      	str	r3, [r7, #96]	@ 0x60
    for(row = row_start; row < row_end; row++) {
 800875e:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 8008762:	b29b      	uxth	r3, r3
 8008764:	3301      	adds	r3, #1
 8008766:	b29b      	uxth	r3, r3
 8008768:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800876c:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	@ 0x5c
 8008770:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8008774:	429a      	cmp	r2, r3
 8008776:	f6ff aee5 	blt.w	8008544 <lv_draw_letter+0x2e8>
 800877a:	e00a      	b.n	8008792 <lv_draw_letter+0x536>
    if(opa < LV_OPA_MIN) return;
 800877c:	bf00      	nop
 800877e:	e008      	b.n	8008792 <lv_draw_letter+0x536>
        return;
 8008780:	bf00      	nop
 8008782:	e006      	b.n	8008792 <lv_draw_letter+0x536>
    if(g_ret == false) return;
 8008784:	bf00      	nop
 8008786:	e004      	b.n	8008792 <lv_draw_letter+0x536>
        default: return; /*Invalid bpp. Can't render the letter*/
 8008788:	bf00      	nop
 800878a:	e002      	b.n	8008792 <lv_draw_letter+0x536>
    if(map_p == NULL) return;
 800878c:	bf00      	nop
 800878e:	e000      	b.n	8008792 <lv_draw_letter+0x536>
    if(pos_x + g.box_w < mask_p->x1 || pos_x > mask_p->x2 || pos_y + g.box_h < mask_p->y1 || pos_y > mask_p->y2) return;
 8008790:	bf00      	nop
    }
}
 8008792:	3774      	adds	r7, #116	@ 0x74
 8008794:	46bd      	mov	sp, r7
 8008796:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008798 <sw_color_fill>:
 * @param color fill color
 * @param opa opacity (0, LV_OPA_TRANSP: transparent ... 255, LV_OPA_COVER, fully cover)
 */
static void sw_color_fill(lv_color_t * mem, lv_coord_t mem_width, const lv_area_t * fill_area, lv_color_t color,
                          lv_opa_t opa)
{
 8008798:	b590      	push	{r4, r7, lr}
 800879a:	b08f      	sub	sp, #60	@ 0x3c
 800879c:	af04      	add	r7, sp, #16
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	607a      	str	r2, [r7, #4]
 80087a2:	813b      	strh	r3, [r7, #8]
 80087a4:	460b      	mov	r3, r1
 80087a6:	817b      	strh	r3, [r7, #10]
    /*Set all row in vdb to the given color*/
    lv_coord_t row;
    lv_coord_t col;

    lv_disp_t * disp = lv_refr_get_disp_refreshing();
 80087a8:	f7fe fbbe 	bl	8006f28 <lv_refr_get_disp_refreshing>
 80087ac:	6238      	str	r0, [r7, #32]
    if(disp->driver.set_px_cb) {
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d035      	beq.n	8008822 <sw_color_fill+0x8a>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80087bc:	e029      	b.n	8008812 <sw_color_fill+0x7a>
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	885b      	ldrh	r3, [r3, #2]
 80087c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80087c4:	e018      	b.n	80087f8 <sw_color_fill+0x60>
                disp->driver.set_px_cb(&disp->driver, (uint8_t *)mem, mem_width, col, row, color, opa);
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	695c      	ldr	r4, [r3, #20]
 80087ca:	6a38      	ldr	r0, [r7, #32]
 80087cc:	f9b7 1024 	ldrsh.w	r1, [r7, #36]	@ 0x24
 80087d0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80087d4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80087d8:	9302      	str	r3, [sp, #8]
 80087da:	893b      	ldrh	r3, [r7, #8]
 80087dc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80087e0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	460b      	mov	r3, r1
 80087e8:	68f9      	ldr	r1, [r7, #12]
 80087ea:	47a0      	blx	r4
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 80087ec:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	3301      	adds	r3, #1
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80087fe:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8008802:	429a      	cmp	r2, r3
 8008804:	dddf      	ble.n	80087c6 <sw_color_fill+0x2e>
        for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8008806:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800880a:	b29b      	uxth	r3, r3
 800880c:	3301      	adds	r3, #1
 800880e:	b29b      	uxth	r3, r3
 8008810:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008818:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800881c:	429a      	cmp	r2, r3
 800881e:	ddce      	ble.n	80087be <sw_color_fill+0x26>
                }
                mem += mem_width;
            }
        }
    }
}
 8008820:	e0ce      	b.n	80089c0 <sw_color_fill+0x228>
        mem += fill_area->y1 * mem_width; /*Go to the first row*/
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008828:	461a      	mov	r2, r3
 800882a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800882e:	fb02 f303 	mul.w	r3, r2, r3
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	4413      	add	r3, r2
 8008838:	60fb      	str	r3, [r7, #12]
        if(opa == LV_OPA_COVER) {
 800883a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800883e:	2bff      	cmp	r3, #255	@ 0xff
 8008840:	d159      	bne.n	80088f6 <sw_color_fill+0x15e>
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008848:	e00c      	b.n	8008864 <sw_color_fill+0xcc>
                mem[col] = color;
 800884a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	4413      	add	r3, r2
 8008854:	893a      	ldrh	r2, [r7, #8]
 8008856:	801a      	strh	r2, [r3, #0]
            for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8008858:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800885c:	b29b      	uxth	r3, r3
 800885e:	3301      	adds	r3, #1
 8008860:	b29b      	uxth	r3, r3
 8008862:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800886a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800886e:	429a      	cmp	r2, r3
 8008870:	ddeb      	ble.n	800884a <sw_color_fill+0xb2>
            lv_color_t * mem_first = &mem[fill_area->x1];
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008878:	005b      	lsls	r3, r3, #1
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	4413      	add	r3, r2
 800887e:	61bb      	str	r3, [r7, #24]
            lv_coord_t copy_size   = (fill_area->x2 - fill_area->x1 + 1) * sizeof(lv_color_t);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008886:	461a      	mov	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	3301      	adds	r3, #1
 8008892:	b29b      	uxth	r3, r3
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	b29b      	uxth	r3, r3
 8008898:	82fb      	strh	r3, [r7, #22]
            mem += mem_width;
 800889a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800889e:	005b      	lsls	r3, r3, #1
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	60fb      	str	r3, [r7, #12]
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	3301      	adds	r3, #1
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80088b4:	e017      	b.n	80088e6 <sw_color_fill+0x14e>
                memcpy(&mem[fill_area->x1], mem_first, copy_size);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088bc:	005b      	lsls	r3, r3, #1
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	4413      	add	r3, r2
 80088c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80088c6:	69b9      	ldr	r1, [r7, #24]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f013 f88e 	bl	801b9ea <memcpy>
                mem += mem_width;
 80088ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80088d2:	005b      	lsls	r3, r3, #1
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	4413      	add	r3, r2
 80088d8:	60fb      	str	r3, [r7, #12]
            for(row = fill_area->y1 + 1; row <= fill_area->y2; row++) {
 80088da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80088de:	b29b      	uxth	r3, r3
 80088e0:	3301      	adds	r3, #1
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80088ec:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80088f0:	429a      	cmp	r2, r3
 80088f2:	dde0      	ble.n	80088b6 <sw_color_fill+0x11e>
}
 80088f4:	e064      	b.n	80089c0 <sw_color_fill+0x228>
            bool scr_transp = false;
 80088f6:	2300      	movs	r3, #0
 80088f8:	77fb      	strb	r3, [r7, #31]
            lv_color_t bg_tmp  = LV_COLOR_BLACK;
 80088fa:	7d3b      	ldrb	r3, [r7, #20]
 80088fc:	f36f 0304 	bfc	r3, #0, #5
 8008900:	753b      	strb	r3, [r7, #20]
 8008902:	8abb      	ldrh	r3, [r7, #20]
 8008904:	f36f 134a 	bfc	r3, #5, #6
 8008908:	82bb      	strh	r3, [r7, #20]
 800890a:	7d7b      	ldrb	r3, [r7, #21]
 800890c:	f36f 03c7 	bfc	r3, #3, #5
 8008910:	757b      	strb	r3, [r7, #21]
            lv_color_t opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8008912:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008916:	461a      	mov	r2, r3
 8008918:	8ab9      	ldrh	r1, [r7, #20]
 800891a:	8938      	ldrh	r0, [r7, #8]
 800891c:	f7ff fb06 	bl	8007f2c <lv_color_mix>
 8008920:	4603      	mov	r3, r0
 8008922:	823b      	strh	r3, [r7, #16]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	885b      	ldrh	r3, [r3, #2]
 8008928:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800892a:	e042      	b.n	80089b2 <sw_color_fill+0x21a>
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	881b      	ldrh	r3, [r3, #0]
 8008930:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008932:	e02b      	b.n	800898c <sw_color_fill+0x1f4>
                    if(scr_transp == false) {
 8008934:	7ffb      	ldrb	r3, [r7, #31]
 8008936:	f083 0301 	eor.w	r3, r3, #1
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	d01f      	beq.n	8008980 <sw_color_fill+0x1e8>
                        if(mem[col].full != bg_tmp.full) {
 8008940:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	4413      	add	r3, r2
 800894a:	881a      	ldrh	r2, [r3, #0]
 800894c:	8abb      	ldrh	r3, [r7, #20]
 800894e:	429a      	cmp	r2, r3
 8008950:	d00f      	beq.n	8008972 <sw_color_fill+0x1da>
                            bg_tmp  = mem[col];
 8008952:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	4413      	add	r3, r2
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	82bb      	strh	r3, [r7, #20]
                            opa_tmp = lv_color_mix(color, bg_tmp, opa);
 8008960:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8008964:	461a      	mov	r2, r3
 8008966:	8ab9      	ldrh	r1, [r7, #20]
 8008968:	8938      	ldrh	r0, [r7, #8]
 800896a:	f7ff fadf 	bl	8007f2c <lv_color_mix>
 800896e:	4603      	mov	r3, r0
 8008970:	823b      	strh	r3, [r7, #16]
                        mem[col] = opa_tmp;
 8008972:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	4413      	add	r3, r2
 800897c:	8a3a      	ldrh	r2, [r7, #16]
 800897e:	801a      	strh	r2, [r3, #0]
                for(col = fill_area->x1; col <= fill_area->x2; col++) {
 8008980:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8008984:	b29b      	uxth	r3, r3
 8008986:	3301      	adds	r3, #1
 8008988:	b29b      	uxth	r3, r3
 800898a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008992:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8008996:	429a      	cmp	r2, r3
 8008998:	ddcc      	ble.n	8008934 <sw_color_fill+0x19c>
                mem += mem_width;
 800899a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4413      	add	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]
            for(row = fill_area->y1; row <= fill_area->y2; row++) {
 80089a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	3301      	adds	r3, #1
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80089b8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 80089bc:	429a      	cmp	r2, r3
 80089be:	ddb5      	ble.n	800892c <sw_color_fill+0x194>
}
 80089c0:	bf00      	nop
 80089c2:	372c      	adds	r7, #44	@ 0x2c
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd90      	pop	{r4, r7, pc}

080089c8 <lv_img_color_format_get_px_size>:
 * Get the pixel size of a color format in bits
 * @param cf a color format (`LV_IMG_CF_...`)
 * @return the pixel size in bits
 */
uint8_t lv_img_color_format_get_px_size(lv_img_cf_t cf)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	4603      	mov	r3, r0
 80089d0:	71fb      	strb	r3, [r7, #7]
    uint8_t px_size = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	73fb      	strb	r3, [r7, #15]

    switch(cf) {
 80089d6:	79fb      	ldrb	r3, [r7, #7]
 80089d8:	2b0e      	cmp	r3, #14
 80089da:	d836      	bhi.n	8008a4a <lv_img_color_format_get_px_size+0x82>
 80089dc:	a201      	add	r2, pc, #4	@ (adr r2, 80089e4 <lv_img_color_format_get_px_size+0x1c>)
 80089de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089e2:	bf00      	nop
 80089e4:	08008a21 	.word	0x08008a21
 80089e8:	08008a21 	.word	0x08008a21
 80089ec:	08008a4b 	.word	0x08008a4b
 80089f0:	08008a4b 	.word	0x08008a4b
 80089f4:	08008a27 	.word	0x08008a27
 80089f8:	08008a2d 	.word	0x08008a2d
 80089fc:	08008a27 	.word	0x08008a27
 8008a00:	08008a33 	.word	0x08008a33
 8008a04:	08008a39 	.word	0x08008a39
 8008a08:	08008a3f 	.word	0x08008a3f
 8008a0c:	08008a45 	.word	0x08008a45
 8008a10:	08008a33 	.word	0x08008a33
 8008a14:	08008a39 	.word	0x08008a39
 8008a18:	08008a3f 	.word	0x08008a3f
 8008a1c:	08008a45 	.word	0x08008a45
        case LV_IMG_CF_UNKNOWN:
        case LV_IMG_CF_RAW: px_size = 0; break;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73fb      	strb	r3, [r7, #15]
 8008a24:	e014      	b.n	8008a50 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR:
        case LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED: px_size = LV_COLOR_SIZE; break;
 8008a26:	2310      	movs	r3, #16
 8008a28:	73fb      	strb	r3, [r7, #15]
 8008a2a:	e011      	b.n	8008a50 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_TRUE_COLOR_ALPHA: px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3; break;
 8008a2c:	2318      	movs	r3, #24
 8008a2e:	73fb      	strb	r3, [r7, #15]
 8008a30:	e00e      	b.n	8008a50 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_1BIT:
        case LV_IMG_CF_ALPHA_1BIT: px_size = 1; break;
 8008a32:	2301      	movs	r3, #1
 8008a34:	73fb      	strb	r3, [r7, #15]
 8008a36:	e00b      	b.n	8008a50 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_2BIT:
        case LV_IMG_CF_ALPHA_2BIT: px_size = 2; break;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	73fb      	strb	r3, [r7, #15]
 8008a3c:	e008      	b.n	8008a50 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_4BIT:
        case LV_IMG_CF_ALPHA_4BIT: px_size = 4; break;
 8008a3e:	2304      	movs	r3, #4
 8008a40:	73fb      	strb	r3, [r7, #15]
 8008a42:	e005      	b.n	8008a50 <lv_img_color_format_get_px_size+0x88>
        case LV_IMG_CF_INDEXED_8BIT:
        case LV_IMG_CF_ALPHA_8BIT: px_size = 8; break;
 8008a44:	2308      	movs	r3, #8
 8008a46:	73fb      	strb	r3, [r7, #15]
 8008a48:	e002      	b.n	8008a50 <lv_img_color_format_get_px_size+0x88>
        default: px_size = 0; break;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73fb      	strb	r3, [r7, #15]
 8008a4e:	bf00      	nop
    }

    return px_size;
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bc80      	pop	{r7}
 8008a5a:	4770      	bx	lr

08008a5c <lv_img_src_get_type>:
 *  - a path to a file (e.g. "S:/folder/image.bin")
 *  - or a symbol (e.g. LV_SYMBOL_CLOSE)
 * @return type of the image source LV_IMG_SRC_VARIABLE/FILE/SYMBOL/UNKNOWN
 */
lv_img_src_t lv_img_src_get_type(const void * src)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
    lv_img_src_t img_src_type = LV_IMG_SRC_UNKNOWN;
 8008a64:	2303      	movs	r3, #3
 8008a66:	73fb      	strb	r3, [r7, #15]

    if(src == NULL) return img_src_type;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <lv_img_src_get_type+0x16>
 8008a6e:	7bfb      	ldrb	r3, [r7, #15]
 8008a70:	e018      	b.n	8008aa4 <lv_img_src_get_type+0x48>
    const uint8_t * u8_p = src;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	60bb      	str	r3, [r7, #8]

    /*The first byte shows the type of the image source*/
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	2b1f      	cmp	r3, #31
 8008a7c:	d907      	bls.n	8008a8e <lv_img_src_get_type+0x32>
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	b25b      	sxtb	r3, r3
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	db02      	blt.n	8008a8e <lv_img_src_get_type+0x32>
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
 8008a88:	2301      	movs	r3, #1
 8008a8a:	73fb      	strb	r3, [r7, #15]
 8008a8c:	e009      	b.n	8008aa2 <lv_img_src_get_type+0x46>
    } else if(u8_p[0] >= 0x80) {
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	b25b      	sxtb	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	da02      	bge.n	8008a9e <lv_img_src_get_type+0x42>
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
 8008a98:	2302      	movs	r3, #2
 8008a9a:	73fb      	strb	r3, [r7, #15]
 8008a9c:	e001      	b.n	8008aa2 <lv_img_src_get_type+0x46>
    } else {
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73fb      	strb	r3, [r7, #15]

    if(LV_IMG_SRC_UNKNOWN == img_src_type) {
        LV_LOG_WARN("lv_img_src_get_type: unknown image type");
    }

    return img_src_type;
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bc80      	pop	{r7}
 8008aac:	4770      	bx	lr

08008aae <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	7a1b      	ldrb	r3, [r3, #8]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bc80      	pop	{r7}
 8008ac2:	4770      	bx	lr

08008ac4 <lv_color_make>:
}
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8 >> 3, g8 >> 2, r8 >> 3}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	71fb      	strb	r3, [r7, #7]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	71bb      	strb	r3, [r7, #6]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.blue  = (uint16_t)(b8 >> 3);
 8008ad6:	797b      	ldrb	r3, [r7, #5]
 8008ad8:	08db      	lsrs	r3, r3, #3
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	f003 031f 	and.w	r3, r3, #31
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	7b3b      	ldrb	r3, [r7, #12]
 8008ae4:	f362 0304 	bfi	r3, r2, #0, #5
 8008ae8:	733b      	strb	r3, [r7, #12]
    color.ch.green = (uint16_t)(g8 >> 2);
 8008aea:	79bb      	ldrb	r3, [r7, #6]
 8008aec:	089b      	lsrs	r3, r3, #2
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	89bb      	ldrh	r3, [r7, #12]
 8008af8:	f362 134a 	bfi	r3, r2, #5, #6
 8008afc:	81bb      	strh	r3, [r7, #12]
    color.ch.red   = (uint16_t)(r8 >> 3);
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	08db      	lsrs	r3, r3, #3
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	f003 031f 	and.w	r3, r3, #31
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	7b7b      	ldrb	r3, [r7, #13]
 8008b0c:	f362 03c7 	bfi	r3, r2, #3, #5
 8008b10:	737b      	strb	r3, [r7, #13]
    return color;
 8008b12:	89bb      	ldrh	r3, [r7, #12]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bc80      	pop	{r7}
 8008b1c:	4770      	bx	lr

08008b1e <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	b21b      	sxth	r3, r3
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bc80      	pop	{r7}
 8008b48:	4770      	bx	lr
	...

08008b4c <lv_draw_label>:
 * @param sel_end end index of selected area (`LV_LABEL_TXT_SEL_OFF` if none)
 */
void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale,
                   const char * txt, lv_txt_flag_t flag, lv_point_t * offset, uint16_t sel_start, uint16_t sel_end,
                   lv_draw_label_hint_t * hint)
{
 8008b4c:	b590      	push	{r4, r7, lr}
 8008b4e:	b0b1      	sub	sp, #196	@ 0xc4
 8008b50:	af04      	add	r7, sp, #16
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	607a      	str	r2, [r7, #4]
 8008b58:	70fb      	strb	r3, [r7, #3]
    const lv_font_t * font = style->text.font;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    lv_coord_t w;
    if((flag & LV_TXT_FLAG_EXPAND) == 0) {
 8008b62:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8008b66:	f003 0302 	and.w	r3, r3, #2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d106      	bne.n	8008b7c <lv_draw_label+0x30>
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f7ff ffd5 	bl	8008b1e <lv_area_get_width>
 8008b74:	4603      	mov	r3, r0
 8008b76:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 8008b7a:	e019      	b.n	8008bb0 <lv_draw_label+0x64>
    } else {
        /*If EXAPND is enabled then not limit the text's width to the object's width*/
        lv_point_t p;
        lv_txt_get_size(&p, txt, style->text.font, style->text.letter_space, style->text.line_space, LV_COORD_MAX,
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	@ 0x28
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8008b8c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008b90:	f897 20c4 	ldrb.w	r2, [r7, #196]	@ 0xc4
 8008b94:	9202      	str	r2, [sp, #8]
 8008b96:	f647 4218 	movw	r2, #31768	@ 0x7c18
 8008b9a:	9201      	str	r2, [sp, #4]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	4623      	mov	r3, r4
 8008ba0:	460a      	mov	r2, r1
 8008ba2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 8008ba6:	f007 fea4 	bl	80108f2 <lv_txt_get_size>
                        flag);
        w = p.x;
 8008baa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008bac:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
    }

    lv_coord_t line_height = lv_font_get_line_height(font) + style->text.line_space;
 8008bb0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8008bb4:	f7ff ff7b 	bl	8008aae <lv_font_get_line_height>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	461a      	mov	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	4413      	add	r3, r2
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

    /*Init variables for the first line*/
    lv_coord_t line_width = 0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
    lv_point_t pos;
    pos.x = coords->x1;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bd8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    pos.y = coords->y1;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008be2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

    lv_coord_t x_ofs = 0;
 8008be6:	2300      	movs	r3, #0
 8008be8:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    lv_coord_t y_ofs = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
    if(offset != NULL) {
 8008bf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d013      	beq.n	8008c22 <lv_draw_label+0xd6>
        x_ofs = offset->x;
 8008bfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
        y_ofs = offset->y;
 8008c04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c08:	885b      	ldrh	r3, [r3, #2]
 8008c0a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
        pos.y += y_ofs;
 8008c0e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008c18:	4413      	add	r3, r2
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	b21b      	sxth	r3, r3
 8008c1e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    }

    uint32_t line_start     = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    int32_t last_line_start = -1;
 8008c28:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0) {
 8008c30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d01f      	beq.n	8008c78 <lv_draw_label+0x12c>
 8008c38:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d11b      	bne.n	8008c78 <lv_draw_label+0x12c>
        /*If the label changed too much recalculate the hint.*/
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
 8008c40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8008c4c:	1a9b      	subs	r3, r3, r2
 8008c4e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8008c52:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8008c56:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 8008c5a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8008c5e:	005b      	lsls	r3, r3, #1
 8008c60:	429a      	cmp	r2, r3
 8008c62:	dd04      	ble.n	8008c6e <lv_draw_label+0x122>
            hint->line_start = -1;
 8008c64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c68:	f04f 32ff 	mov.w	r2, #4294967295
 8008c6c:	601a      	str	r2, [r3, #0]
        }
        last_line_start = hint->line_start;
 8008c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
 8008c78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d013      	beq.n	8008ca8 <lv_draw_label+0x15c>
 8008c80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	db0f      	blt.n	8008ca8 <lv_draw_label+0x15c>
        line_start = last_line_start;
 8008c88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        pos.y += hint->y;
 8008c90:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	4413      	add	r3, r2
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	b21b      	sxth	r3, r3
 8008ca4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    }

    uint32_t line_end = line_start + lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8008ca8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008cac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008cb0:	18d0      	adds	r0, r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 8008cb8:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 8008cbc:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8008cc0:	9300      	str	r3, [sp, #0]
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8008cc8:	f007 fec4 	bl	8010a54 <lv_txt_get_next_line>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    /*Go the first visible line*/
    while(pos.y + line_height < mask->y1) {
 8008cda:	e053      	b.n	8008d84 <lv_draw_label+0x238>
        /*Go to next line*/
        line_start = line_end;
 8008cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 8008ce4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008ce8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008cec:	18d0      	adds	r0, r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 8008cf4:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 8008cf8:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	460b      	mov	r3, r1
 8008d00:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8008d04:	f007 fea6 	bl	8010a54 <lv_txt_get_next_line>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008d10:	4413      	add	r3, r2
 8008d12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        pos.y += line_height;
 8008d16:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008d20:	4413      	add	r3, r2
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	b21b      	sxth	r3, r3
 8008d26:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

        /*Save at the threshold coordinate*/
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
 8008d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d01f      	beq.n	8008d72 <lv_draw_label+0x226>
 8008d32:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8008d36:	f513 6f80 	cmn.w	r3, #1024	@ 0x400
 8008d3a:	db1a      	blt.n	8008d72 <lv_draw_label+0x226>
 8008d3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	da15      	bge.n	8008d72 <lv_draw_label+0x226>
            hint->line_start = line_start;
 8008d46:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8008d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d4e:	601a      	str	r2, [r3, #0]
            hint->y          = pos.y - coords->y1;
 8008d50:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8008d54:	461a      	mov	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008d5c:	1ad2      	subs	r2, r2, r3
 8008d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d62:	605a      	str	r2, [r3, #4]
            hint->coord_y    = coords->y1;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d70:	609a      	str	r2, [r3, #8]
        }

        if(txt[line_start] == '\0') return;
 8008d72:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008d76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008d7a:	4413      	add	r3, r2
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f000 827d 	beq.w	800927e <lv_draw_label+0x732>
    while(pos.y + line_height < mask->y1) {
 8008d84:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8008d88:	461a      	mov	r2, r3
 8008d8a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 8008d8e:	4413      	add	r3, r2
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8008d96:	4293      	cmp	r3, r2
 8008d98:	dba0      	blt.n	8008cdc <lv_draw_label+0x190>
    }

    /*Align to middle*/
    if(flag & LV_TXT_FLAG_CENTER) {
 8008d9a:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8008d9e:	f003 0304 	and.w	r3, r3, #4
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d030      	beq.n	8008e08 <lv_draw_label+0x2bc>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 8008da6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008daa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008dae:	18d0      	adds	r0, r2, r3
 8008db0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	b299      	uxth	r1, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 8008dc6:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008dd2:	f007 fef3 	bl	8010bbc <lv_txt_get_width>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f7ff fe9e 	bl	8008b1e <lv_area_get_width>
 8008de2:	4603      	mov	r3, r0
 8008de4:	461a      	mov	r2, r3
 8008de6:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	0fda      	lsrs	r2, r3, #31
 8008dee:	4413      	add	r3, r2
 8008df0:	105b      	asrs	r3, r3, #1
 8008df2:	4619      	mov	r1, r3
 8008df4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	b28b      	uxth	r3, r1
 8008dfc:	4413      	add	r3, r2
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	b21b      	sxth	r3, r3
 8008e02:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8008e06:	e031      	b.n	8008e6c <lv_draw_label+0x320>

    }
    /*Align to the right*/
    else if(flag & LV_TXT_FLAG_RIGHT) {
 8008e08:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8008e0c:	f003 0308 	and.w	r3, r3, #8
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d02b      	beq.n	8008e6c <lv_draw_label+0x320>
        line_width = lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 8008e14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008e18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e1c:	18d0      	adds	r0, r2, r3
 8008e1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	b299      	uxth	r1, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 8008e34:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e40:	f007 febc 	bl	8010bbc <lv_txt_get_width>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
        pos.x += lv_area_get_width(coords) - line_width;
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f7ff fe67 	bl	8008b1e <lv_area_get_width>
 8008e50:	4603      	mov	r3, r0
 8008e52:	461a      	mov	r2, r3
 8008e54:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 8008e58:	1ad3      	subs	r3, r2, r3
 8008e5a:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	@ 0x6c
 8008e5e:	b292      	uxth	r2, r2
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	4413      	add	r3, r2
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	b21b      	sxth	r3, r3
 8008e68:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    }

    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->text.opa : (uint16_t)((uint16_t)style->text.opa * opa_scale) >> 8;
 8008e6c:	78fb      	ldrb	r3, [r7, #3]
 8008e6e:	2bff      	cmp	r3, #255	@ 0xff
 8008e70:	d103      	bne.n	8008e7a <lv_draw_label+0x32e>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008e78:	e00b      	b.n	8008e92 <lv_draw_label+0x346>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008e80:	461a      	mov	r2, r3
 8008e82:	78fb      	ldrb	r3, [r7, #3]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	fb02 f303 	mul.w	r3, r2, r3
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	0a1b      	lsrs	r3, r3, #8
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

    cmd_state_t cmd_state = CMD_STATE_WAIT;
 8008e96:	2300      	movs	r3, #0
 8008e98:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    uint32_t i;
    uint16_t par_start = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
    lv_color_t recolor;
    lv_coord_t letter_w;
    lv_style_t sel_style;
    lv_style_copy(&sel_style, &lv_style_plain_color);
 8008ea2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008ea6:	499c      	ldr	r1, [pc, #624]	@ (8009118 <lv_draw_label+0x5cc>)
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fe ffa5 	bl	8007df8 <lv_style_copy>
    sel_style.body.main_color = sel_style.body.grad_color = style->text.sel_color;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8008eb2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008eb4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008eb6:	857b      	strh	r3, [r7, #42]	@ 0x2a

    /*Write out all lines*/
    while(txt[line_start] != '\0') {
 8008eb8:	e1d7      	b.n	800926a <lv_draw_label+0x71e>
        if(offset != NULL) {
 8008eba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d009      	beq.n	8008ed6 <lv_draw_label+0x38a>
            pos.x += x_ofs;
 8008ec2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8008ecc:	4413      	add	r3, r2
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	b21b      	sxth	r3, r3
 8008ed2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
        }
        /*Write all letter of a line*/
        cmd_state = CMD_STATE_WAIT;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
        i         = line_start;
 8008edc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008ee0:	66bb      	str	r3, [r7, #104]	@ 0x68
        uint32_t letter;
        uint32_t letter_next;
        while(i < line_end) {
 8008ee2:	e120      	b.n	8009126 <lv_draw_label+0x5da>
            letter      = lv_txt_encoded_next(txt, &i);
 8008ee4:	4b8d      	ldr	r3, [pc, #564]	@ (800911c <lv_draw_label+0x5d0>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8008eec:	4611      	mov	r1, r2
 8008eee:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8008ef2:	4798      	blx	r3
 8008ef4:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8008ef8:	4b88      	ldr	r3, [pc, #544]	@ (800911c <lv_draw_label+0x5d0>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008efe:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 8008f02:	440a      	add	r2, r1
 8008f04:	2100      	movs	r1, #0
 8008f06:	4610      	mov	r0, r2
 8008f08:	4798      	blx	r3
 8008f0a:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

            /*Handle the re-color command*/
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8008f0e:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d07a      	beq.n	8009010 <lv_draw_label+0x4c4>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8008f1a:	2323      	movs	r3, #35	@ 0x23
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d11a      	bne.n	8008f5c <lv_draw_label+0x410>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
 8008f26:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d106      	bne.n	8008f3c <lv_draw_label+0x3f0>
                        par_start = i;
 8008f2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f30:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
                        cmd_state = CMD_STATE_PAR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
                        continue;
 8008f3a:	e0f4      	b.n	8009126 <lv_draw_label+0x5da>
                    } else if(cmd_state == CMD_STATE_PAR) { /*Other start char in parameter escaped cmd. char */
 8008f3c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d103      	bne.n	8008f4c <lv_draw_label+0x400>
                        cmd_state = CMD_STATE_WAIT;
 8008f44:	2300      	movs	r3, #0
 8008f46:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
 8008f4a:	e007      	b.n	8008f5c <lv_draw_label+0x410>
                    } else if(cmd_state == CMD_STATE_IN) { /*Command end */
 8008f4c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d103      	bne.n	8008f5c <lv_draw_label+0x410>
                        cmd_state = CMD_STATE_WAIT;
 8008f54:	2300      	movs	r3, #0
 8008f56:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
                        continue;
 8008f5a:	e0e4      	b.n	8009126 <lv_draw_label+0x5da>
                    }
                }

                /*Skip the color parameter and wait the space after it*/
                if(cmd_state == CMD_STATE_PAR) {
 8008f5c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d155      	bne.n	8009010 <lv_draw_label+0x4c4>
                    if(letter == ' ') {
 8008f64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f68:	2b20      	cmp	r3, #32
 8008f6a:	f040 80db 	bne.w	8009124 <lv_draw_label+0x5d8>
                        /*Get the parameter*/
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
 8008f6e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f70:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	2b07      	cmp	r3, #7
 8008f78:	d142      	bne.n	8009000 <lv_draw_label+0x4b4>
                            char buf[LABEL_RECOLOR_PAR_LENGTH + 1];
                            memcpy(buf, &txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
 8008f7a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8008f7e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008f82:	18d1      	adds	r1, r2, r3
 8008f84:	f107 0318 	add.w	r3, r7, #24
 8008f88:	2206      	movs	r2, #6
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f012 fd2d 	bl	801b9ea <memcpy>
                            buf[LABEL_RECOLOR_PAR_LENGTH] = '\0';
 8008f90:	2300      	movs	r3, #0
 8008f92:	77bb      	strb	r3, [r7, #30]
                            int r, g, b;
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
 8008f94:	7e3b      	ldrb	r3, [r7, #24]
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 f978 	bl	800928c <hex_char_to_num>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	011c      	lsls	r4, r3, #4
 8008fa0:	7e7b      	ldrb	r3, [r7, #25]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 f972 	bl	800928c <hex_char_to_num>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	4423      	add	r3, r4
 8008fac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
 8008fb0:	7ebb      	ldrb	r3, [r7, #26]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 f96a 	bl	800928c <hex_char_to_num>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	011c      	lsls	r4, r3, #4
 8008fbc:	7efb      	ldrb	r3, [r7, #27]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 f964 	bl	800928c <hex_char_to_num>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	4423      	add	r3, r4
 8008fc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
 8008fca:	7f3b      	ldrb	r3, [r7, #28]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 f95d 	bl	800928c <hex_char_to_num>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	011c      	lsls	r4, r3, #4
 8008fd6:	7f7b      	ldrb	r3, [r7, #29]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 f957 	bl	800928c <hex_char_to_num>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	4423      	add	r3, r4
 8008fe2:	67bb      	str	r3, [r7, #120]	@ 0x78
                            recolor = lv_color_make(r, g, b);
 8008fe4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008fec:	b2d1      	uxtb	r1, r2
 8008fee:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008ff0:	b2d2      	uxtb	r2, r2
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7ff fd66 	bl	8008ac4 <lv_color_make>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008ffe:	e003      	b.n	8009008 <lv_draw_label+0x4bc>
                        } else {
                            recolor.full = style->text.color.full;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	8c1b      	ldrh	r3, [r3, #32]
 8009004:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
                        }
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
 8009008:	2302      	movs	r3, #2
 800900a:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
                    }
                    continue;
 800900e:	e089      	b.n	8009124 <lv_draw_label+0x5d8>
                }
            }

            lv_color_t color = style->text.color;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	8c1b      	ldrh	r3, [r3, #32]
 8009014:	843b      	strh	r3, [r7, #32]

            if(cmd_state == CMD_STATE_IN) color = recolor;
 8009016:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800901a:	2b02      	cmp	r3, #2
 800901c:	d102      	bne.n	8009024 <lv_draw_label+0x4d8>
 800901e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009022:	843b      	strh	r3, [r7, #32]

            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8009024:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009028:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800902c:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8009030:	f005 f9f2 	bl	800e418 <lv_font_get_glyph_width>
 8009034:	4603      	mov	r3, r0
 8009036:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
 800903a:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 800903e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009042:	4293      	cmp	r3, r2
 8009044:	d043      	beq.n	80090ce <lv_draw_label+0x582>
 8009046:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 800904a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800904e:	4293      	cmp	r3, r2
 8009050:	d03d      	beq.n	80090ce <lv_draw_label+0x582>
                int char_ind = lv_encoded_get_char_id(txt, i);
 8009052:	4b33      	ldr	r3, [pc, #204]	@ (8009120 <lv_draw_label+0x5d4>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009058:	4611      	mov	r1, r2
 800905a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800905e:	4798      	blx	r3
 8009060:	4603      	mov	r3, r0
 8009062:	673b      	str	r3, [r7, #112]	@ 0x70
                /*Do not draw the rectangle on the character at `sel_start`.*/
                if(char_ind > sel_start && char_ind <= sel_end) {
 8009064:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8009068:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800906a:	429a      	cmp	r2, r3
 800906c:	dd2f      	ble.n	80090ce <lv_draw_label+0x582>
 800906e:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 8009072:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009074:	429a      	cmp	r2, r3
 8009076:	dc2a      	bgt.n	80090ce <lv_draw_label+0x582>
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
 8009078:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800907c:	823b      	strh	r3, [r7, #16]
                    sel_coords.y1 = pos.y;
 800907e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8009082:	827b      	strh	r3, [r7, #18]
                    sel_coords.x2 = pos.x + letter_w + style->text.letter_space - 1;
 8009084:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 8009088:	b29a      	uxth	r2, r3
 800908a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800908e:	4413      	add	r3, r2
 8009090:	b29a      	uxth	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8009098:	b29b      	uxth	r3, r3
 800909a:	4413      	add	r3, r2
 800909c:	b29b      	uxth	r3, r3
 800909e:	3b01      	subs	r3, #1
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	b21b      	sxth	r3, r3
 80090a4:	82bb      	strh	r3, [r7, #20]
                    sel_coords.y2 = pos.y + line_height - 1;
 80090a6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80090b0:	4413      	add	r3, r2
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	3b01      	subs	r3, #1
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	b21b      	sxth	r3, r3
 80090ba:	82fb      	strh	r3, [r7, #22]
                    lv_draw_rect(&sel_coords, mask, &sel_style, opa);
 80090bc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80090c0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80090c4:	f107 0010 	add.w	r0, r7, #16
 80090c8:	68b9      	ldr	r1, [r7, #8]
 80090ca:	f000 f9cf 	bl	800946c <lv_draw_rect>
                }
            }
            lv_draw_letter(&pos, mask, font, letter, color, opa);
 80090ce:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80090d2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80090d6:	9301      	str	r3, [sp, #4]
 80090d8:	8c3b      	ldrh	r3, [r7, #32]
 80090da:	f8ad 3000 	strh.w	r3, [sp]
 80090de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090e6:	68b9      	ldr	r1, [r7, #8]
 80090e8:	f7ff f8b8 	bl	800825c <lv_draw_letter>

            if(letter_w > 0) {
 80090ec:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	dd18      	ble.n	8009126 <lv_draw_label+0x5da>
                pos.x += letter_w + style->text.letter_space;
 80090f4:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8009100:	b299      	uxth	r1, r3
 8009102:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8009106:	440b      	add	r3, r1
 8009108:	b29b      	uxth	r3, r3
 800910a:	4413      	add	r3, r2
 800910c:	b29b      	uxth	r3, r3
 800910e:	b21b      	sxth	r3, r3
 8009110:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8009114:	e007      	b.n	8009126 <lv_draw_label+0x5da>
 8009116:	bf00      	nop
 8009118:	20002b08 	.word	0x20002b08
 800911c:	20000ca0 	.word	0x20000ca0
 8009120:	20000cac 	.word	0x20000cac
                    continue;
 8009124:	bf00      	nop
        while(i < line_end) {
 8009126:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009128:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800912c:	429a      	cmp	r2, r3
 800912e:	f63f aed9 	bhi.w	8008ee4 <lv_draw_label+0x398>
            }
        }
        /*Go to next line*/
        line_start = line_end;
 8009132:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009136:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        line_end += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, w, flag);
 800913a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800913e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009142:	18d0      	adds	r0, r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 800914a:	f9b7 10ae 	ldrsh.w	r1, [r7, #174]	@ 0xae
 800914e:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	460b      	mov	r3, r1
 8009156:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800915a:	f007 fc7b 	bl	8010a54 <lv_txt_get_next_line>
 800915e:	4603      	mov	r3, r0
 8009160:	461a      	mov	r2, r3
 8009162:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009166:	4413      	add	r3, r2
 8009168:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

        pos.x = coords->x1;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009172:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
        /*Align to middle*/
        if(flag & LV_TXT_FLAG_CENTER) {
 8009176:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 800917a:	f003 0304 	and.w	r3, r3, #4
 800917e:	2b00      	cmp	r3, #0
 8009180:	d030      	beq.n	80091e4 <lv_draw_label+0x698>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 8009182:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009186:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800918a:	18d0      	adds	r0, r2, r3
 800918c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009190:	b29a      	uxth	r2, r3
 8009192:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009196:	b29b      	uxth	r3, r3
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	b299      	uxth	r1, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 80091a2:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	4613      	mov	r3, r2
 80091aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80091ae:	f007 fd05 	bl	8010bbc <lv_txt_get_width>
 80091b2:	4603      	mov	r3, r0
 80091b4:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90

            pos.x += (lv_area_get_width(coords) - line_width) / 2;
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f7ff fcb0 	bl	8008b1e <lv_area_get_width>
 80091be:	4603      	mov	r3, r0
 80091c0:	461a      	mov	r2, r3
 80091c2:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	0fda      	lsrs	r2, r3, #31
 80091ca:	4413      	add	r3, r2
 80091cc:	105b      	asrs	r3, r3, #1
 80091ce:	4619      	mov	r1, r3
 80091d0:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	b28b      	uxth	r3, r1
 80091d8:	4413      	add	r3, r2
 80091da:	b29b      	uxth	r3, r3
 80091dc:	b21b      	sxth	r3, r3
 80091de:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80091e2:	e031      	b.n	8009248 <lv_draw_label+0x6fc>

        }
        /*Align to the right*/
        else if(flag & LV_TXT_FLAG_RIGHT) {
 80091e4:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 80091e8:	f003 0308 	and.w	r3, r3, #8
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d02b      	beq.n	8009248 <lv_draw_label+0x6fc>
            line_width =
                lv_txt_get_width(&txt[line_start], line_end - line_start, font, style->text.letter_space, flag);
 80091f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80091f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80091f8:	18d0      	adds	r0, r2, r3
 80091fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80091fe:	b29a      	uxth	r2, r3
 8009200:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009204:	b29b      	uxth	r3, r3
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	b299      	uxth	r1, r3
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 8009210:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	4613      	mov	r3, r2
 8009218:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800921c:	f007 fcce 	bl	8010bbc <lv_txt_get_width>
 8009220:	4603      	mov	r3, r0
 8009222:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
            pos.x += lv_area_get_width(coords) - line_width;
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f7ff fc79 	bl	8008b1e <lv_area_get_width>
 800922c:	4603      	mov	r3, r0
 800922e:	461a      	mov	r2, r3
 8009230:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	@ 0x6c
 800923a:	b292      	uxth	r2, r2
 800923c:	b29b      	uxth	r3, r3
 800923e:	4413      	add	r3, r2
 8009240:	b29b      	uxth	r3, r3
 8009242:	b21b      	sxth	r3, r3
 8009244:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
        }

        /*Go the next line position*/
        pos.y += line_height;
 8009248:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800924c:	b29a      	uxth	r2, r3
 800924e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009252:	4413      	add	r3, r2
 8009254:	b29b      	uxth	r3, r3
 8009256:	b21b      	sxth	r3, r3
 8009258:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

        if(pos.y > mask->y2) return;
 800925c:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009266:	429a      	cmp	r2, r3
 8009268:	dc0b      	bgt.n	8009282 <lv_draw_label+0x736>
    while(txt[line_start] != '\0') {
 800926a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800926e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009272:	4413      	add	r3, r2
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f47f ae1f 	bne.w	8008eba <lv_draw_label+0x36e>
 800927c:	e002      	b.n	8009284 <lv_draw_label+0x738>
        if(txt[line_start] == '\0') return;
 800927e:	bf00      	nop
 8009280:	e000      	b.n	8009284 <lv_draw_label+0x738>
        if(pos.y > mask->y2) return;
 8009282:	bf00      	nop
    }
}
 8009284:	37b4      	adds	r7, #180	@ 0xb4
 8009286:	46bd      	mov	sp, r7
 8009288:	bd90      	pop	{r4, r7, pc}
 800928a:	bf00      	nop

0800928c <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	71fb      	strb	r3, [r7, #7]
    uint8_t result = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]

    if(hex >= '0' && hex <= '9') {
 800929a:	79fb      	ldrb	r3, [r7, #7]
 800929c:	2b2f      	cmp	r3, #47	@ 0x2f
 800929e:	d906      	bls.n	80092ae <hex_char_to_num+0x22>
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	2b39      	cmp	r3, #57	@ 0x39
 80092a4:	d803      	bhi.n	80092ae <hex_char_to_num+0x22>
        result = hex - '0';
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	3b30      	subs	r3, #48	@ 0x30
 80092aa:	73fb      	strb	r3, [r7, #15]
 80092ac:	e02d      	b.n	800930a <hex_char_to_num+0x7e>
    } else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
 80092ae:	79fb      	ldrb	r3, [r7, #7]
 80092b0:	2b60      	cmp	r3, #96	@ 0x60
 80092b2:	d902      	bls.n	80092ba <hex_char_to_num+0x2e>
 80092b4:	79fb      	ldrb	r3, [r7, #7]
 80092b6:	3b20      	subs	r3, #32
 80092b8:	71fb      	strb	r3, [r7, #7]

        switch(hex) {
 80092ba:	79fb      	ldrb	r3, [r7, #7]
 80092bc:	3b41      	subs	r3, #65	@ 0x41
 80092be:	2b05      	cmp	r3, #5
 80092c0:	d820      	bhi.n	8009304 <hex_char_to_num+0x78>
 80092c2:	a201      	add	r2, pc, #4	@ (adr r2, 80092c8 <hex_char_to_num+0x3c>)
 80092c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c8:	080092e1 	.word	0x080092e1
 80092cc:	080092e7 	.word	0x080092e7
 80092d0:	080092ed 	.word	0x080092ed
 80092d4:	080092f3 	.word	0x080092f3
 80092d8:	080092f9 	.word	0x080092f9
 80092dc:	080092ff 	.word	0x080092ff
            case 'A': result = 10; break;
 80092e0:	230a      	movs	r3, #10
 80092e2:	73fb      	strb	r3, [r7, #15]
 80092e4:	e011      	b.n	800930a <hex_char_to_num+0x7e>
            case 'B': result = 11; break;
 80092e6:	230b      	movs	r3, #11
 80092e8:	73fb      	strb	r3, [r7, #15]
 80092ea:	e00e      	b.n	800930a <hex_char_to_num+0x7e>
            case 'C': result = 12; break;
 80092ec:	230c      	movs	r3, #12
 80092ee:	73fb      	strb	r3, [r7, #15]
 80092f0:	e00b      	b.n	800930a <hex_char_to_num+0x7e>
            case 'D': result = 13; break;
 80092f2:	230d      	movs	r3, #13
 80092f4:	73fb      	strb	r3, [r7, #15]
 80092f6:	e008      	b.n	800930a <hex_char_to_num+0x7e>
            case 'E': result = 14; break;
 80092f8:	230e      	movs	r3, #14
 80092fa:	73fb      	strb	r3, [r7, #15]
 80092fc:	e005      	b.n	800930a <hex_char_to_num+0x7e>
            case 'F': result = 15; break;
 80092fe:	230f      	movs	r3, #15
 8009300:	73fb      	strb	r3, [r7, #15]
 8009302:	e002      	b.n	800930a <hex_char_to_num+0x7e>
            default: result = 0; break;
 8009304:	2300      	movs	r3, #0
 8009306:	73fb      	strb	r3, [r7, #15]
 8009308:	bf00      	nop
        }
    }

    return result;
 800930a:	7bfb      	ldrb	r3, [r7, #15]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	bc80      	pop	{r7}
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop

08009318 <lv_color_mix>:
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	80b8      	strh	r0, [r7, #4]
 8009320:	8039      	strh	r1, [r7, #0]
 8009322:	4613      	mov	r3, r2
 8009324:	70fb      	strb	r3, [r7, #3]
    ret.ch.red = (uint16_t)((uint16_t)c1.ch.red * mix + (c2.ch.red * (255 - mix))) >> 8;
 8009326:	797b      	ldrb	r3, [r7, #5]
 8009328:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 800932c:	b2db      	uxtb	r3, r3
 800932e:	461a      	mov	r2, r3
 8009330:	78fb      	ldrb	r3, [r7, #3]
 8009332:	b29b      	uxth	r3, r3
 8009334:	fb02 f303 	mul.w	r3, r2, r3
 8009338:	b29a      	uxth	r2, r3
 800933a:	787b      	ldrb	r3, [r7, #1]
 800933c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8009340:	b2db      	uxtb	r3, r3
 8009342:	4619      	mov	r1, r3
 8009344:	78fb      	ldrb	r3, [r7, #3]
 8009346:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800934a:	b29b      	uxth	r3, r3
 800934c:	fb01 f303 	mul.w	r3, r1, r3
 8009350:	b29b      	uxth	r3, r3
 8009352:	4413      	add	r3, r2
 8009354:	b29b      	uxth	r3, r3
 8009356:	0a1b      	lsrs	r3, r3, #8
 8009358:	b29b      	uxth	r3, r3
 800935a:	f003 031f 	and.w	r3, r3, #31
 800935e:	b2da      	uxtb	r2, r3
 8009360:	7b7b      	ldrb	r3, [r7, #13]
 8009362:	f362 03c7 	bfi	r3, r2, #3, #5
 8009366:	737b      	strb	r3, [r7, #13]
    ret.ch.green = (uint16_t)((uint16_t)c1.ch.green * mix + (c2.ch.green * (255 - mix))) >> 8;
 8009368:	88bb      	ldrh	r3, [r7, #4]
 800936a:	f3c3 1345 	ubfx	r3, r3, #5, #6
 800936e:	b2db      	uxtb	r3, r3
 8009370:	461a      	mov	r2, r3
 8009372:	78fb      	ldrb	r3, [r7, #3]
 8009374:	b29b      	uxth	r3, r3
 8009376:	fb02 f303 	mul.w	r3, r2, r3
 800937a:	b29a      	uxth	r2, r3
 800937c:	883b      	ldrh	r3, [r7, #0]
 800937e:	f3c3 1345 	ubfx	r3, r3, #5, #6
 8009382:	b2db      	uxtb	r3, r3
 8009384:	4619      	mov	r1, r3
 8009386:	78fb      	ldrb	r3, [r7, #3]
 8009388:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800938c:	b29b      	uxth	r3, r3
 800938e:	fb01 f303 	mul.w	r3, r1, r3
 8009392:	b29b      	uxth	r3, r3
 8009394:	4413      	add	r3, r2
 8009396:	b29b      	uxth	r3, r3
 8009398:	0a1b      	lsrs	r3, r3, #8
 800939a:	b29b      	uxth	r3, r3
 800939c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	89bb      	ldrh	r3, [r7, #12]
 80093a4:	f362 134a 	bfi	r3, r2, #5, #6
 80093a8:	81bb      	strh	r3, [r7, #12]
    ret.ch.blue = (uint16_t)((uint16_t)c1.ch.blue * mix + (c2.ch.blue * (255 - mix))) >> 8;
 80093aa:	793b      	ldrb	r3, [r7, #4]
 80093ac:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	461a      	mov	r2, r3
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	fb02 f303 	mul.w	r3, r2, r3
 80093bc:	b29a      	uxth	r2, r3
 80093be:	783b      	ldrb	r3, [r7, #0]
 80093c0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	4619      	mov	r1, r3
 80093c8:	78fb      	ldrb	r3, [r7, #3]
 80093ca:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	fb01 f303 	mul.w	r3, r1, r3
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	4413      	add	r3, r2
 80093d8:	b29b      	uxth	r3, r3
 80093da:	0a1b      	lsrs	r3, r3, #8
 80093dc:	b29b      	uxth	r3, r3
 80093de:	f003 031f 	and.w	r3, r3, #31
 80093e2:	b2da      	uxtb	r2, r3
 80093e4:	7b3b      	ldrb	r3, [r7, #12]
 80093e6:	f362 0304 	bfi	r3, r2, #0, #5
 80093ea:	733b      	strb	r3, [r7, #12]
    return ret;
 80093ec:	89bb      	ldrh	r3, [r7, #12]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3714      	adds	r7, #20
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bc80      	pop	{r7}
 80093f6:	4770      	bx	lr

080093f8 <lv_area_copy>:
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8009402:	2208      	movs	r2, #8
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f012 faef 	bl	801b9ea <memcpy>
}
 800940c:	bf00      	nop
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <lv_area_get_width>:
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009422:	b29a      	uxth	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800942a:	b29b      	uxth	r3, r3
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	b29b      	uxth	r3, r3
 8009430:	3301      	adds	r3, #1
 8009432:	b29b      	uxth	r3, r3
 8009434:	b21b      	sxth	r3, r3
}
 8009436:	4618      	mov	r0, r3
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	bc80      	pop	{r7}
 800943e:	4770      	bx	lr

08009440 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800944e:	b29a      	uxth	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009456:	b29b      	uxth	r3, r3
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	b29b      	uxth	r3, r3
 800945c:	3301      	adds	r3, #1
 800945e:	b29b      	uxth	r3, r3
 8009460:	b21b      	sxth	r3, r3
}
 8009462:	4618      	mov	r0, r3
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	bc80      	pop	{r7}
 800946a:	4770      	bx	lr

0800946c <lv_draw_rect>:
 * @param mask the rectangle will be drawn only in this mask
 * @param style pointer to a style
 * @param opa_scale scale down all opacities by the factor
 */
void lv_draw_rect(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style, lv_opa_t opa_scale)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
 8009478:	70fb      	strb	r3, [r7, #3]
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f7ff ffe0 	bl	8009440 <lv_area_get_height>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	dd4e      	ble.n	8009524 <lv_draw_rect+0xb8>
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f7ff ffc4 	bl	8009414 <lv_area_get_width>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	dd48      	ble.n	8009524 <lv_draw_rect+0xb8>

#if LV_USE_SHADOW
    if(style->body.shadow.width != 0) {
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d005      	beq.n	80094a8 <lv_draw_rect+0x3c>
        lv_draw_shadow(coords, mask, style, opa_scale);
 800949c:	78fb      	ldrb	r3, [r7, #3]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	68b9      	ldr	r1, [r7, #8]
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f002 ff63 	bl	800c36e <lv_draw_shadow>
    }
#endif

    /* If the object is out of the mask there is nothing to draw.
     * Draw shadow before it because the shadow is out of `coords`*/
    if(lv_area_is_on(coords, mask) == false) return;
 80094a8:	68b9      	ldr	r1, [r7, #8]
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f006 f910 	bl	800f6d0 <lv_area_is_on>
 80094b0:	4603      	mov	r3, r0
 80094b2:	f083 0301 	eor.w	r3, r3, #1
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d135      	bne.n	8009528 <lv_draw_rect+0xbc>

    if(style->body.opa > LV_OPA_MIN) {
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	7a1b      	ldrb	r3, [r3, #8]
 80094c0:	2b10      	cmp	r3, #16
 80094c2:	d910      	bls.n	80094e6 <lv_draw_rect+0x7a>
        lv_draw_rect_main_mid(coords, mask, style, opa_scale);
 80094c4:	78fb      	ldrb	r3, [r7, #3]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	68b9      	ldr	r1, [r7, #8]
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f000 f830 	bl	8009530 <lv_draw_rect_main_mid>

        if(style->body.radius != 0) {
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d005      	beq.n	80094e6 <lv_draw_rect+0x7a>
            lv_draw_rect_main_corner(coords, mask, style, opa_scale);
 80094da:	78fb      	ldrb	r3, [r7, #3]
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	68b9      	ldr	r1, [r7, #8]
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 f927 	bl	8009734 <lv_draw_rect_main_corner>
        }
    }

    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d01c      	beq.n	800952a <lv_draw_rect+0xbe>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	7b9b      	ldrb	r3, [r3, #14]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d018      	beq.n	800952a <lv_draw_rect+0xbe>
       style->body.border.opa >= LV_OPA_MIN) {
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	7bdb      	ldrb	r3, [r3, #15]
    if(style->body.border.width != 0 && style->body.border.part != LV_BORDER_NONE &&
 80094fc:	2b0f      	cmp	r3, #15
 80094fe:	d914      	bls.n	800952a <lv_draw_rect+0xbe>
        lv_draw_rect_border_straight(coords, mask, style, opa_scale);
 8009500:	78fb      	ldrb	r3, [r7, #3]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	68b9      	ldr	r1, [r7, #8]
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f001 f93d 	bl	800a786 <lv_draw_rect_border_straight>

        if(style->body.radius != 0) {
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d009      	beq.n	800952a <lv_draw_rect+0xbe>
            lv_draw_rect_border_corner(coords, mask, style, opa_scale);
 8009516:	78fb      	ldrb	r3, [r7, #3]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	68b9      	ldr	r1, [r7, #8]
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f001 fcdf 	bl	800aee0 <lv_draw_rect_border_corner>
 8009522:	e002      	b.n	800952a <lv_draw_rect+0xbe>
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
 8009524:	bf00      	nop
 8009526:	e000      	b.n	800952a <lv_draw_rect+0xbe>
    if(lv_area_is_on(coords, mask) == false) return;
 8009528:	bf00      	nop
        }
    }
}
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <lv_draw_rect_main_mid>:
 * @param rects_p pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_main_mid(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                  lv_opa_t opa_scale)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b08e      	sub	sp, #56	@ 0x38
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
 800953c:	70fb      	strb	r3, [r7, #3]
    uint16_t radius = style->body.radius;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009544:	863b      	strh	r3, [r7, #48]	@ 0x30
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 8009546:	f7fd fcef 	bl	8006f28 <lv_refr_get_disp_refreshing>
 800954a:	4603      	mov	r3, r0
 800954c:	4618      	mov	r0, r3
 800954e:	f005 fb7e 	bl	800ec4e <lv_disp_get_antialiasing>
 8009552:	4603      	mov	r3, r0
 8009554:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    lv_color_t mcolor = style->body.main_color;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	885b      	ldrh	r3, [r3, #2]
 800955c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    lv_color_t gcolor = style->body.grad_color;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	889b      	ldrh	r3, [r3, #4]
 8009562:	843b      	strh	r3, [r7, #32]
    uint8_t mix;
    lv_coord_t height = lv_area_get_height(coords);
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f7ff ff6b 	bl	8009440 <lv_area_get_height>
 800956a:	4603      	mov	r3, r0
 800956c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    lv_coord_t width  = lv_area_get_width(coords);
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f7ff ff50 	bl	8009414 <lv_area_get_width>
 8009574:	4603      	mov	r3, r0
 8009576:	857b      	strh	r3, [r7, #42]	@ 0x2a
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 8009578:	78fb      	ldrb	r3, [r7, #3]
 800957a:	2bff      	cmp	r3, #255	@ 0xff
 800957c:	d102      	bne.n	8009584 <lv_draw_rect_main_mid+0x54>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	7a1b      	ldrb	r3, [r3, #8]
 8009582:	e00a      	b.n	800959a <lv_draw_rect_main_mid+0x6a>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	7a1b      	ldrb	r3, [r3, #8]
 8009588:	461a      	mov	r2, r3
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	b29b      	uxth	r3, r3
 800958e:	fb02 f303 	mul.w	r3, r2, r3
 8009592:	b29b      	uxth	r3, r3
 8009594:	0a1b      	lsrs	r3, r3, #8
 8009596:	b29b      	uxth	r3, r3
 8009598:	b2db      	uxtb	r3, r3
 800959a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800959e:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 80095a2:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	@ 0x2a
 80095a6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80095a8:	4618      	mov	r0, r3
 80095aa:	f003 fdda 	bl	800d162 <lv_draw_cont_radius_corr>
 80095ae:	4603      	mov	r3, r0
 80095b0:	863b      	strh	r3, [r7, #48]	@ 0x30

    /*If the radius is too big then there is no body*/
    if(radius > height / 2) return;
 80095b2:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80095b4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80095b8:	0fd9      	lsrs	r1, r3, #31
 80095ba:	440b      	add	r3, r1
 80095bc:	105b      	asrs	r3, r3, #1
 80095be:	b21b      	sxth	r3, r3
 80095c0:	429a      	cmp	r2, r3
 80095c2:	f300 80b3 	bgt.w	800972c <lv_draw_rect_main_mid+0x1fc>

    lv_area_t work_area;
    work_area.x1 = coords->x1;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095cc:	833b      	strh	r3, [r7, #24]
    work_area.x2 = coords->x2;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80095d4:	83bb      	strh	r3, [r7, #28]

    if(mcolor.full == gcolor.full) {
 80095d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80095d8:	8c3b      	ldrh	r3, [r7, #32]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d140      	bne.n	8009660 <lv_draw_rect_main_mid+0x130>
        work_area.y1 = coords->y1 + radius;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80095e8:	4413      	add	r3, r2
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	b21b      	sxth	r3, r3
 80095ee:	837b      	strh	r3, [r7, #26]
        work_area.y2 = coords->y2 - radius;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	b21b      	sxth	r3, r3
 8009600:	83fb      	strh	r3, [r7, #30]

        if(style->body.radius != 0) {
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d020      	beq.n	800964e <lv_draw_rect_main_mid+0x11e>

            if(aa) {
 800960c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00e      	beq.n	8009632 <lv_draw_rect_main_mid+0x102>
                work_area.y1 += 2;
 8009614:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009618:	b29b      	uxth	r3, r3
 800961a:	3302      	adds	r3, #2
 800961c:	b29b      	uxth	r3, r3
 800961e:	b21b      	sxth	r3, r3
 8009620:	837b      	strh	r3, [r7, #26]
                work_area.y2 -= 2;
 8009622:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009626:	b29b      	uxth	r3, r3
 8009628:	3b02      	subs	r3, #2
 800962a:	b29b      	uxth	r3, r3
 800962c:	b21b      	sxth	r3, r3
 800962e:	83fb      	strh	r3, [r7, #30]
 8009630:	e00d      	b.n	800964e <lv_draw_rect_main_mid+0x11e>
            } else {
                work_area.y1 += 1;
 8009632:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009636:	b29b      	uxth	r3, r3
 8009638:	3301      	adds	r3, #1
 800963a:	b29b      	uxth	r3, r3
 800963c:	b21b      	sxth	r3, r3
 800963e:	837b      	strh	r3, [r7, #26]
                work_area.y2 -= 1;
 8009640:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009644:	b29b      	uxth	r3, r3
 8009646:	3b01      	subs	r3, #1
 8009648:	b29b      	uxth	r3, r3
 800964a:	b21b      	sxth	r3, r3
 800964c:	83fb      	strh	r3, [r7, #30]
            }
        }

        lv_draw_fill(&work_area, mask, mcolor, opa);
 800964e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009652:	f107 0018 	add.w	r0, r7, #24
 8009656:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009658:	68b9      	ldr	r1, [r7, #8]
 800965a:	f7fe fd85 	bl	8008168 <lv_draw_fill>
 800965e:	e066      	b.n	800972e <lv_draw_rect_main_mid+0x1fe>
    } else {
        lv_coord_t row;
        lv_coord_t row_start = coords->y1 + radius;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009666:	b29a      	uxth	r2, r3
 8009668:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800966a:	4413      	add	r3, r2
 800966c:	b29b      	uxth	r3, r3
 800966e:	86bb      	strh	r3, [r7, #52]	@ 0x34
        lv_coord_t row_end   = coords->y2 - radius;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009676:	b29a      	uxth	r2, r3
 8009678:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	b29b      	uxth	r3, r3
 800967e:	867b      	strh	r3, [r7, #50]	@ 0x32
        lv_color_t act_color;

        if(style->body.radius != 0) {
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d014      	beq.n	80096b4 <lv_draw_rect_main_mid+0x184>
            if(aa) {
 800968a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800968e:	2b00      	cmp	r3, #0
 8009690:	d008      	beq.n	80096a4 <lv_draw_rect_main_mid+0x174>
                row_start += 2;
 8009692:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009694:	3302      	adds	r3, #2
 8009696:	b29b      	uxth	r3, r3
 8009698:	86bb      	strh	r3, [r7, #52]	@ 0x34
                row_end -= 2;
 800969a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800969c:	3b02      	subs	r3, #2
 800969e:	b29b      	uxth	r3, r3
 80096a0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80096a2:	e007      	b.n	80096b4 <lv_draw_rect_main_mid+0x184>
            } else {
                row_start += 1;
 80096a4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80096a6:	3301      	adds	r3, #1
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	86bb      	strh	r3, [r7, #52]	@ 0x34
                row_end -= 1;
 80096ac:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80096ae:	3b01      	subs	r3, #1
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	867b      	strh	r3, [r7, #50]	@ 0x32
            }
        }
        if(row_start < 0) row_start = 0;
 80096b4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	da01      	bge.n	80096c0 <lv_draw_rect_main_mid+0x190>
 80096bc:	2300      	movs	r3, #0
 80096be:	86bb      	strh	r3, [r7, #52]	@ 0x34

        for(row = row_start; row <= row_end; row++) {
 80096c0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80096c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80096c4:	e02b      	b.n	800971e <lv_draw_rect_main_mid+0x1ee>
            work_area.y1 = row;
 80096c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80096c8:	837b      	strh	r3, [r7, #26]
            work_area.y2 = row;
 80096ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80096cc:	83fb      	strh	r3, [r7, #30]
            mix          = (uint32_t)((uint32_t)(coords->y2 - work_area.y1) * 255) / height;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80096d4:	461a      	mov	r2, r3
 80096d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	461a      	mov	r2, r3
 80096de:	4613      	mov	r3, r2
 80096e0:	021b      	lsls	r3, r3, #8
 80096e2:	1a9a      	subs	r2, r3, r2
 80096e4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80096e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            act_color    = lv_color_mix(mcolor, gcolor, mix);
 80096f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80096f4:	461a      	mov	r2, r3
 80096f6:	8c39      	ldrh	r1, [r7, #32]
 80096f8:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 80096fa:	f7ff fe0d 	bl	8009318 <lv_color_mix>
 80096fe:	4603      	mov	r3, r0
 8009700:	82bb      	strh	r3, [r7, #20]

            lv_draw_fill(&work_area, mask, act_color, opa);
 8009702:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009706:	f107 0018 	add.w	r0, r7, #24
 800970a:	8aba      	ldrh	r2, [r7, #20]
 800970c:	68b9      	ldr	r1, [r7, #8]
 800970e:	f7fe fd2b 	bl	8008168 <lv_draw_fill>
        for(row = row_start; row <= row_end; row++) {
 8009712:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009716:	b29b      	uxth	r3, r3
 8009718:	3301      	adds	r3, #1
 800971a:	b29b      	uxth	r3, r3
 800971c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800971e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8009722:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8009726:	429a      	cmp	r2, r3
 8009728:	ddcd      	ble.n	80096c6 <lv_draw_rect_main_mid+0x196>
 800972a:	e000      	b.n	800972e <lv_draw_rect_main_mid+0x1fe>
    if(radius > height / 2) return;
 800972c:	bf00      	nop
        }
    }
}
 800972e:	3738      	adds	r7, #56	@ 0x38
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <lv_draw_rect_main_corner>:
 * @param rects_p pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_main_corner(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                     lv_opa_t opa_scale)
{
 8009734:	b5b0      	push	{r4, r5, r7, lr}
 8009736:	b0a4      	sub	sp, #144	@ 0x90
 8009738:	af02      	add	r7, sp, #8
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
 8009740:	70fb      	strb	r3, [r7, #3]
    uint16_t radius = style->body.radius;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009748:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800974c:	f7fd fbec 	bl	8006f28 <lv_refr_get_disp_refreshing>
 8009750:	4603      	mov	r3, r0
 8009752:	4618      	mov	r0, r3
 8009754:	f005 fa7b 	bl	800ec4e <lv_disp_get_antialiasing>
 8009758:	4603      	mov	r3, r0
 800975a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

    lv_color_t mcolor = style->body.main_color;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	885b      	ldrh	r3, [r3, #2]
 8009762:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    lv_color_t gcolor = style->body.grad_color;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	889b      	ldrh	r3, [r3, #4]
 800976a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
    lv_color_t act_color;
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	2bff      	cmp	r3, #255	@ 0xff
 8009772:	d102      	bne.n	800977a <lv_draw_rect_main_corner+0x46>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	7a1b      	ldrb	r3, [r3, #8]
 8009778:	e00a      	b.n	8009790 <lv_draw_rect_main_corner+0x5c>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	7a1b      	ldrb	r3, [r3, #8]
 800977e:	461a      	mov	r2, r3
 8009780:	78fb      	ldrb	r3, [r7, #3]
 8009782:	b29b      	uxth	r3, r3
 8009784:	fb02 f303 	mul.w	r3, r2, r3
 8009788:	b29b      	uxth	r3, r3
 800978a:	0a1b      	lsrs	r3, r3, #8
 800978c:	b29b      	uxth	r3, r3
 800978e:	b2db      	uxtb	r3, r3
 8009790:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    uint8_t mix;
    lv_coord_t height = lv_area_get_height(coords);
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f7ff fe53 	bl	8009440 <lv_area_get_height>
 800979a:	4603      	mov	r3, r0
 800979c:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
    lv_coord_t width  = lv_area_get_width(coords);
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f7ff fe37 	bl	8009414 <lv_area_get_width>
 80097a6:	4603      	mov	r3, r0
 80097a8:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72

    radius = lv_draw_cont_radius_corr(radius, width, height);
 80097ac:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	@ 0x74
 80097b0:	f9b7 1072 	ldrsh.w	r1, [r7, #114]	@ 0x72
 80097b4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80097b8:	4618      	mov	r0, r3
 80097ba:	f003 fcd2 	bl	800d162 <lv_draw_cont_radius_corr>
 80097be:	4603      	mov	r3, r0
 80097c0:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
    lv_point_t lt_origo; /*Left  Top    origo*/
    lv_point_t lb_origo; /*Left  Bottom origo*/
    lv_point_t rt_origo; /*Right Top    origo*/
    lv_point_t rb_origo; /*Left  Bottom origo*/

    lt_origo.x = coords->x1 + radius + aa;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80097d0:	4413      	add	r3, r2
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80097d8:	b29b      	uxth	r3, r3
 80097da:	4413      	add	r3, r2
 80097dc:	b29b      	uxth	r3, r3
 80097de:	b21b      	sxth	r3, r3
 80097e0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
    lt_origo.y = coords->y1 + radius + aa;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80097f0:	4413      	add	r3, r2
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	4413      	add	r3, r2
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	b21b      	sxth	r3, r3
 8009800:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

    lb_origo.x = coords->x1 + radius + aa;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800980a:	b29a      	uxth	r2, r3
 800980c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8009810:	4413      	add	r3, r2
 8009812:	b29a      	uxth	r2, r3
 8009814:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009818:	b29b      	uxth	r3, r3
 800981a:	4413      	add	r3, r2
 800981c:	b29b      	uxth	r3, r3
 800981e:	b21b      	sxth	r3, r3
 8009820:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    lb_origo.y = coords->y2 - radius - aa;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800982a:	b29a      	uxth	r2, r3
 800982c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	b29a      	uxth	r2, r3
 8009834:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009838:	b29b      	uxth	r3, r3
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	b29b      	uxth	r3, r3
 800983e:	b21b      	sxth	r3, r3
 8009840:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

    rt_origo.x = coords->x2 - radius - aa;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800984a:	b29a      	uxth	r2, r3
 800984c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	b29a      	uxth	r2, r3
 8009854:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009858:	b29b      	uxth	r3, r3
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	b29b      	uxth	r3, r3
 800985e:	b21b      	sxth	r3, r3
 8009860:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    rt_origo.y = coords->y1 + radius + aa;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800986a:	b29a      	uxth	r2, r3
 800986c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8009870:	4413      	add	r3, r2
 8009872:	b29a      	uxth	r2, r3
 8009874:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009878:	b29b      	uxth	r3, r3
 800987a:	4413      	add	r3, r2
 800987c:	b29b      	uxth	r3, r3
 800987e:	b21b      	sxth	r3, r3
 8009880:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

    rb_origo.x = coords->x2 - radius - aa;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800988a:	b29a      	uxth	r2, r3
 800988c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	b29a      	uxth	r2, r3
 8009894:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009898:	b29b      	uxth	r3, r3
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	b29b      	uxth	r3, r3
 800989e:	b21b      	sxth	r3, r3
 80098a0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    rb_origo.y = coords->y2 - radius - aa;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	1ad3      	subs	r3, r2, r3
 80098bc:	b29b      	uxth	r3, r3
 80098be:	b21b      	sxth	r3, r3
 80098c0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    lv_area_t mid_bot_area;
    lv_area_t edge_bot_area;

    lv_point_t cir;
    lv_coord_t cir_tmp;
    lv_circ_init(&cir, &cir_tmp, radius);
 80098c4:	f9b7 2078 	ldrsh.w	r2, [r7, #120]	@ 0x78
 80098c8:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 80098cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80098d0:	4618      	mov	r0, r3
 80098d2:	f005 ff59 	bl	800f788 <lv_circ_init>

    /*Init the areas*/
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 80098d6:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 80098da:	b29a      	uxth	r2, r3
 80098dc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	b219      	sxth	r1, r3
 80098e8:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 80098ec:	b29a      	uxth	r2, r3
 80098ee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	4413      	add	r3, r2
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	b21c      	sxth	r4, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 80098fa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80098fe:	b29a      	uxth	r2, r3
 8009900:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8009904:	b29b      	uxth	r3, r3
 8009906:	4413      	add	r3, r2
 8009908:	b29b      	uxth	r3, r3
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800990a:	b21d      	sxth	r5, r3
                rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 800990c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009910:	b29a      	uxth	r2, r3
 8009912:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8009916:	b29b      	uxth	r3, r3
 8009918:	4413      	add	r3, r2
 800991a:	b29b      	uxth	r3, r3
    lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 800991c:	b21b      	sxth	r3, r3
 800991e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	462b      	mov	r3, r5
 8009926:	4622      	mov	r2, r4
 8009928:	f005 fd84 	bl	800f434 <lv_area_set>

    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800992c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8009930:	b29a      	uxth	r2, r3
 8009932:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8009936:	b29b      	uxth	r3, r3
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	b29b      	uxth	r3, r3
 800993c:	b219      	sxth	r1, r3
 800993e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8009942:	b29a      	uxth	r2, r3
 8009944:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8009948:	b29b      	uxth	r3, r3
 800994a:	4413      	add	r3, r2
 800994c:	b29b      	uxth	r3, r3
 800994e:	b21c      	sxth	r4, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8009950:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8009954:	b29a      	uxth	r2, r3
 8009956:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800995a:	b29b      	uxth	r3, r3
 800995c:	4413      	add	r3, r2
 800995e:	b29b      	uxth	r3, r3
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8009960:	b21d      	sxth	r5, r3
                rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 8009962:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009966:	b29a      	uxth	r2, r3
 8009968:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800996c:	b29b      	uxth	r3, r3
 800996e:	4413      	add	r3, r2
 8009970:	b29b      	uxth	r3, r3
    lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 8009972:	b21b      	sxth	r3, r3
 8009974:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	462b      	mov	r3, r5
 800997c:	4622      	mov	r2, r4
 800997e:	f005 fd59 	bl	800f434 <lv_area_set>

    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 8009982:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8009986:	b29a      	uxth	r2, r3
 8009988:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800998c:	b29b      	uxth	r3, r3
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	b29b      	uxth	r3, r3
 8009992:	b219      	sxth	r1, r3
 8009994:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8009998:	b29a      	uxth	r2, r3
 800999a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800999e:	b29b      	uxth	r3, r3
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	b21c      	sxth	r4, r3
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 80099a6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	4413      	add	r3, r2
 80099b4:	b29b      	uxth	r3, r3
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 80099b6:	b21d      	sxth	r5, r3
                rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 80099b8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 80099bc:	b29a      	uxth	r2, r3
 80099be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	b29b      	uxth	r3, r3
    lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 80099c8:	b21b      	sxth	r3, r3
 80099ca:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	462b      	mov	r3, r5
 80099d2:	4622      	mov	r2, r4
 80099d4:	f005 fd2e 	bl	800f434 <lv_area_set>

    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 80099d8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 80099dc:	b29a      	uxth	r2, r3
 80099de:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	b219      	sxth	r1, r3
 80099ea:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	b21c      	sxth	r4, r3
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 80099fc:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	4413      	add	r3, r2
 8009a0a:	b29b      	uxth	r3, r3
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8009a0c:	b21d      	sxth	r5, r3
                rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 8009a0e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	b29b      	uxth	r3, r3
    lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 8009a1e:	b21b      	sxth	r3, r3
 8009a20:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8009a24:	9300      	str	r3, [sp, #0]
 8009a26:	462b      	mov	r3, r5
 8009a28:	4622      	mov	r2, r4
 8009a2a:	f005 fd03 	bl	800f434 <lv_area_set>
#if LV_ANTIALIAS
    /*Store some internal states for anti-aliasing*/
    lv_coord_t out_y_seg_start = 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    lv_coord_t out_y_seg_end   = 0;
 8009a34:	2300      	movs	r3, #0
 8009a36:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
    lv_coord_t out_x_last      = radius;
 8009a3a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8009a3e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
    lv_color_t aa_color_hor_top;
    lv_color_t aa_color_hor_bottom;
    lv_color_t aa_color_ver;
#endif

    while(lv_circ_cont(&cir)) {
 8009a42:	e367      	b.n	800a114 <lv_draw_rect_main_corner+0x9e0>
#if LV_ANTIALIAS
        if(aa) {
 8009a44:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 8197 	beq.w	8009d7c <lv_draw_rect_main_corner+0x648>
            /*New step in y on the outter circle*/
            if(out_x_last != cir.x) {
 8009a4e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8009a52:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	@ 0x84
 8009a56:	429a      	cmp	r2, r3
 8009a58:	f000 8190 	beq.w	8009d7c <lv_draw_rect_main_corner+0x648>
                out_y_seg_end       = cir.y;
 8009a5c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009a5e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 8009a62:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 8009a66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
                lv_point_t aa_p;

                aa_p.x = out_x_last;
 8009a72:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009a76:	833b      	strh	r3, [r7, #24]
                aa_p.y = out_y_seg_start;
 8009a78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a7c:	837b      	strh	r3, [r7, #26]

                mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 8009a7e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8009a82:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	461a      	mov	r2, r3
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	021b      	lsls	r3, r3, #8
 8009a8e:	1a9a      	subs	r2, r3, r2
 8009a90:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 8009a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a98:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 8009a9c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	f8b7 1064 	ldrh.w	r1, [r7, #100]	@ 0x64
 8009aa6:	f8b7 0060 	ldrh.w	r0, [r7, #96]	@ 0x60
 8009aaa:	f7ff fc35 	bl	8009318 <lv_color_mix>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	84bb      	strh	r3, [r7, #36]	@ 0x24
                aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 8009ab2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 8009abc:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 8009ac0:	f7ff fc2a 	bl	8009318 <lv_color_mix>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	843b      	strh	r3, [r7, #32]

                lv_coord_t i;
                for(i = 0; i < seg_size; i++) {
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8009ace:	e147      	b.n	8009d60 <lv_draw_rect_main_corner+0x62c>
                    lv_opa_t aa_opa;
                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 8009ad0:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	dd0c      	ble.n	8009af2 <lv_draw_rect_main_corner+0x3be>
                                                                           on the first segment*/
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 8009ad8:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8009adc:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	@ 0x82
 8009ae0:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f003 fb7f 	bl	800d1e8 <antialias_get_opa_circ>
 8009aea:	4603      	mov	r3, r0
 8009aec:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
 8009af0:	e00f      	b.n	8009b12 <lv_draw_rect_main_corner+0x3de>
                    } else {
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 8009af2:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8009af6:	f9b7 1082 	ldrsh.w	r1, [r7, #130]	@ 0x82
 8009afa:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fe f9dc 	bl	8007ebc <lv_draw_aa_get_opa>
 8009b04:	4603      	mov	r3, r0
 8009b06:	461a      	mov	r2, r3
 8009b08:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8009b0c:	1a9b      	subs	r3, r3, r2
 8009b0e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
                    }

                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 8009b12:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	4413      	add	r3, r2
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8009b26:	4413      	add	r3, r2
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	b218      	sxth	r0, r3
 8009b2c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	4413      	add	r3, r2
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	b219      	sxth	r1, r3
 8009b42:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	8c3b      	ldrh	r3, [r7, #32]
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	f7fe fa74 	bl	8008038 <lv_draw_px>
                               aa_color_hor_bottom, aa_opa);
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 8009b50:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	b218      	sxth	r0, r3
 8009b6a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	4413      	add	r3, r2
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	b219      	sxth	r1, r3
 8009b80:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	8c3b      	ldrh	r3, [r7, #32]
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	f7fe fa55 	bl	8008038 <lv_draw_px>
                               aa_color_hor_bottom, aa_opa);
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 8009b8e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	b218      	sxth	r0, r3
 8009ba8:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	1ad3      	subs	r3, r2, r3
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	b219      	sxth	r1, r3
 8009bbe:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	f7fe fa36 	bl	8008038 <lv_draw_px>
                               aa_color_hor_top, aa_opa);
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 8009bcc:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	4413      	add	r3, r2
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8009be0:	4413      	add	r3, r2
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	b218      	sxth	r0, r3
 8009be6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	b219      	sxth	r1, r3
 8009bfc:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	f7fe fa17 	bl	8008038 <lv_draw_px>
                               aa_color_hor_top, aa_opa);

                    mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 8009c0a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8009c0e:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8009c12:	1ad2      	subs	r2, r2, r3
 8009c14:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 8009c18:	4413      	add	r3, r2
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	021b      	lsls	r3, r3, #8
 8009c20:	1a9a      	subs	r2, r3, r2
 8009c22:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 8009c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c2a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                    aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 8009c2e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009c32:	461a      	mov	r2, r3
 8009c34:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 8009c38:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 8009c3c:	f7ff fb6c 	bl	8009318 <lv_color_mix>
 8009c40:	4603      	mov	r3, r0
 8009c42:	83bb      	strh	r3, [r7, #28]
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 8009c44:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	4413      	add	r3, r2
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	3301      	adds	r3, #1
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	b218      	sxth	r0, r3
 8009c5a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	4413      	add	r3, r2
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8009c6e:	4413      	add	r3, r2
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	b219      	sxth	r1, r3
 8009c74:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	8bbb      	ldrh	r3, [r7, #28]
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	f7fe f9db 	bl	8008038 <lv_draw_px>
                               aa_color_ver, aa_opa);
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 8009c82:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	3b01      	subs	r3, #1
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	b218      	sxth	r0, r3
 8009c98:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	4413      	add	r3, r2
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8009cac:	4413      	add	r3, r2
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	b219      	sxth	r1, r3
 8009cb2:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	8bbb      	ldrh	r3, [r7, #28]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	f7fe f9bc 	bl	8008038 <lv_draw_px>
                               aa_color_ver, aa_opa);

                    aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 8009cc0:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	f8b7 1064 	ldrh.w	r1, [r7, #100]	@ 0x64
 8009cca:	f8b7 0060 	ldrh.w	r0, [r7, #96]	@ 0x60
 8009cce:	f7ff fb23 	bl	8009318 <lv_color_mix>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	83bb      	strh	r3, [r7, #28]
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 8009cd6:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	b218      	sxth	r0, r3
 8009cec:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	b219      	sxth	r1, r3
 8009d06:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	8bbb      	ldrh	r3, [r7, #28]
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	f7fe f992 	bl	8008038 <lv_draw_px>
                               aa_color_ver, aa_opa);
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 8009d14:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	4413      	add	r3, r2
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	3301      	adds	r3, #1
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	b218      	sxth	r0, r3
 8009d2a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	b219      	sxth	r1, r3
 8009d44:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	8bbb      	ldrh	r3, [r7, #28]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	f7fe f973 	bl	8008038 <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
 8009d52:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	3301      	adds	r3, #1
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8009d60:	f9b7 2082 	ldrsh.w	r2, [r7, #130]	@ 0x82
 8009d64:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	f6ff aeb1 	blt.w	8009ad0 <lv_draw_rect_main_corner+0x39c>
                               aa_color_ver, aa_opa);
                }

                out_x_last      = cir.x;
 8009d6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009d70:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
                out_y_seg_start = out_y_seg_end;
 8009d74:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8009d78:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
            }
        }
#endif
        uint8_t edge_top_refr = 0;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        uint8_t mid_top_refr  = 0;
 8009d82:	2300      	movs	r3, #0
 8009d84:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        uint8_t mid_bot_refr  = 0;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
        uint8_t edge_bot_refr = 0;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

        /* If a new row coming draw the previous
         * The y coordinate can remain the same so wait for a new*/
        if(mid_bot_area.y1 != LV_CIRC_OCT4_Y(cir) + lb_origo.y) mid_bot_refr = 1;
 8009d94:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009d98:	461a      	mov	r2, r3
 8009d9a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8009d9e:	4619      	mov	r1, r3
 8009da0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8009da4:	440b      	add	r3, r1
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d002      	beq.n	8009db0 <lv_draw_rect_main_corner+0x67c>
 8009daa:	2301      	movs	r3, #1
 8009dac:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

        if(edge_bot_area.y1 != LV_CIRC_OCT2_Y(cir) + lb_origo.y) edge_bot_refr = 1;
 8009db0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8009db4:	461a      	mov	r2, r3
 8009db6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8009dba:	4619      	mov	r1, r3
 8009dbc:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8009dc0:	440b      	add	r3, r1
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d002      	beq.n	8009dcc <lv_draw_rect_main_corner+0x698>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

        if(mid_top_area.y1 != LV_CIRC_OCT8_Y(cir) + lt_origo.y) mid_top_refr = 1;
 8009dcc:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8009ddc:	1acb      	subs	r3, r1, r3
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d002      	beq.n	8009de8 <lv_draw_rect_main_corner+0x6b4>
 8009de2:	2301      	movs	r3, #1
 8009de4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

        if(edge_top_area.y1 != LV_CIRC_OCT7_Y(cir) + lt_origo.y) edge_top_refr = 1;
 8009de8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009dec:	461a      	mov	r2, r3
 8009dee:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8009df2:	4619      	mov	r1, r3
 8009df4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8009df8:	1acb      	subs	r3, r1, r3
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d002      	beq.n	8009e04 <lv_draw_rect_main_corner+0x6d0>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80

        /*Draw the areas which are not disabled*/
        if(edge_top_refr != 0) {
 8009e04:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d030      	beq.n	8009e6e <lv_draw_rect_main_corner+0x73a>
            if(mcolor.full == gcolor.full)
 8009e0c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8009e10:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d104      	bne.n	8009e22 <lv_draw_rect_main_corner+0x6ee>
                act_color = mcolor;
 8009e18:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009e1c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8009e20:	e01c      	b.n	8009e5c <lv_draw_rect_main_corner+0x728>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8009e2e:	1ad3      	subs	r3, r2, r3
 8009e30:	461a      	mov	r2, r3
 8009e32:	4613      	mov	r3, r2
 8009e34:	021b      	lsls	r3, r3, #8
 8009e36:	1a9a      	subs	r2, r3, r2
 8009e38:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 8009e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e40:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8009e44:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009e48:	461a      	mov	r2, r3
 8009e4a:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 8009e4e:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 8009e52:	f7ff fa61 	bl	8009318 <lv_color_mix>
 8009e56:	4603      	mov	r3, r0
 8009e58:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }
            lv_draw_fill(&edge_top_area, mask, act_color, opa);
 8009e5c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8009e60:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8009e64:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8009e68:	68b9      	ldr	r1, [r7, #8]
 8009e6a:	f7fe f97d 	bl	8008168 <lv_draw_fill>
        }

        if(mid_top_refr != 0) {
 8009e6e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d030      	beq.n	8009ed8 <lv_draw_rect_main_corner+0x7a4>
            if(mcolor.full == gcolor.full)
 8009e76:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8009e7a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d104      	bne.n	8009e8c <lv_draw_rect_main_corner+0x758>
                act_color = mcolor;
 8009e82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009e86:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8009e8a:	e01c      	b.n	8009ec6 <lv_draw_rect_main_corner+0x792>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009e92:	461a      	mov	r2, r3
 8009e94:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	021b      	lsls	r3, r3, #8
 8009ea0:	1a9a      	subs	r2, r3, r2
 8009ea2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 8009ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eaa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8009eae:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 8009eb8:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 8009ebc:	f7ff fa2c 	bl	8009318 <lv_color_mix>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }
            lv_draw_fill(&mid_top_area, mask, act_color, opa);
 8009ec6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8009eca:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8009ece:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8009ed2:	68b9      	ldr	r1, [r7, #8]
 8009ed4:	f7fe f948 	bl	8008168 <lv_draw_fill>
        }

        if(mid_bot_refr != 0) {
 8009ed8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d030      	beq.n	8009f42 <lv_draw_rect_main_corner+0x80e>
            if(mcolor.full == gcolor.full)
 8009ee0:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8009ee4:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d104      	bne.n	8009ef6 <lv_draw_rect_main_corner+0x7c2>
                act_color = mcolor;
 8009eec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009ef0:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8009ef4:	e01c      	b.n	8009f30 <lv_draw_rect_main_corner+0x7fc>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009efc:	461a      	mov	r2, r3
 8009efe:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	461a      	mov	r2, r3
 8009f06:	4613      	mov	r3, r2
 8009f08:	021b      	lsls	r3, r3, #8
 8009f0a:	1a9a      	subs	r2, r3, r2
 8009f0c:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 8009f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f14:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8009f18:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 8009f22:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 8009f26:	f7ff f9f7 	bl	8009318 <lv_color_mix>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }
            lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 8009f30:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8009f34:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8009f38:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8009f3c:	68b9      	ldr	r1, [r7, #8]
 8009f3e:	f7fe f913 	bl	8008168 <lv_draw_fill>
        }

        if(edge_bot_refr != 0) {
 8009f42:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d030      	beq.n	8009fac <lv_draw_rect_main_corner+0x878>

            if(mcolor.full == gcolor.full)
 8009f4a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8009f4e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d104      	bne.n	8009f60 <lv_draw_rect_main_corner+0x82c>
                act_color = mcolor;
 8009f56:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009f5a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8009f5e:	e01c      	b.n	8009f9a <lv_draw_rect_main_corner+0x866>
            else {
                mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009f66:	461a      	mov	r2, r3
 8009f68:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	461a      	mov	r2, r3
 8009f70:	4613      	mov	r3, r2
 8009f72:	021b      	lsls	r3, r3, #8
 8009f74:	1a9a      	subs	r2, r3, r2
 8009f76:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 8009f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f7e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                act_color = lv_color_mix(mcolor, gcolor, mix);
 8009f82:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009f86:	461a      	mov	r2, r3
 8009f88:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 8009f8c:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 8009f90:	f7ff f9c2 	bl	8009318 <lv_color_mix>
 8009f94:	4603      	mov	r3, r0
 8009f96:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
            }
            lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 8009f9a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8009f9e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8009fa2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 8009fa6:	68b9      	ldr	r1, [r7, #8]
 8009fa8:	f7fe f8de 	bl	8008168 <lv_draw_fill>
        }

        /*Save the current coordinates*/
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8009fac:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	b219      	sxth	r1, r3
 8009fbe:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	4413      	add	r3, r2
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	b21c      	sxth	r4, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8009fd0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	4413      	add	r3, r2
 8009fde:	b29b      	uxth	r3, r3
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8009fe0:	b21d      	sxth	r5, r3
                    rb_origo.x + LV_CIRC_OCT1_X(cir), rb_origo.y + LV_CIRC_OCT1_Y(cir));
 8009fe2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8009fe6:	b29a      	uxth	r2, r3
 8009fe8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	4413      	add	r3, r2
 8009ff0:	b29b      	uxth	r3, r3
        lv_area_set(&mid_bot_area, lb_origo.x + LV_CIRC_OCT4_X(cir), lb_origo.y + LV_CIRC_OCT4_Y(cir),
 8009ff2:	b21b      	sxth	r3, r3
 8009ff4:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	462b      	mov	r3, r5
 8009ffc:	4622      	mov	r2, r4
 8009ffe:	f005 fa19 	bl	800f434 <lv_area_set>

        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a002:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 800a006:	b29a      	uxth	r2, r3
 800a008:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	b29b      	uxth	r3, r3
 800a012:	b219      	sxth	r1, r3
 800a014:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 800a018:	b29a      	uxth	r2, r3
 800a01a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800a01e:	b29b      	uxth	r3, r3
 800a020:	4413      	add	r3, r2
 800a022:	b29b      	uxth	r3, r3
 800a024:	b21c      	sxth	r4, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800a026:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800a030:	b29b      	uxth	r3, r3
 800a032:	4413      	add	r3, r2
 800a034:	b29b      	uxth	r3, r3
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a036:	b21d      	sxth	r5, r3
                    rb_origo.x + LV_CIRC_OCT2_X(cir), rb_origo.y + LV_CIRC_OCT2_Y(cir));
 800a038:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800a042:	b29b      	uxth	r3, r3
 800a044:	4413      	add	r3, r2
 800a046:	b29b      	uxth	r3, r3
        lv_area_set(&edge_bot_area, lb_origo.x + LV_CIRC_OCT3_X(cir), lb_origo.y + LV_CIRC_OCT3_Y(cir),
 800a048:	b21b      	sxth	r3, r3
 800a04a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	462b      	mov	r3, r5
 800a052:	4622      	mov	r2, r4
 800a054:	f005 f9ee 	bl	800f434 <lv_area_set>

        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a058:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800a062:	b29b      	uxth	r3, r3
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	b29b      	uxth	r3, r3
 800a068:	b219      	sxth	r1, r3
 800a06a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 800a06e:	b29a      	uxth	r2, r3
 800a070:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800a074:	b29b      	uxth	r3, r3
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	b29b      	uxth	r3, r3
 800a07a:	b21c      	sxth	r4, r3
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800a07c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 800a080:	b29a      	uxth	r2, r3
 800a082:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800a086:	b29b      	uxth	r3, r3
 800a088:	4413      	add	r3, r2
 800a08a:	b29b      	uxth	r3, r3
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a08c:	b21d      	sxth	r5, r3
                    rt_origo.x + LV_CIRC_OCT8_X(cir), rt_origo.y + LV_CIRC_OCT8_Y(cir));
 800a08e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 800a092:	b29a      	uxth	r2, r3
 800a094:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800a098:	b29b      	uxth	r3, r3
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	b29b      	uxth	r3, r3
        lv_area_set(&mid_top_area, lt_origo.x + LV_CIRC_OCT5_X(cir), lt_origo.y + LV_CIRC_OCT5_Y(cir),
 800a09e:	b21b      	sxth	r3, r3
 800a0a0:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	462b      	mov	r3, r5
 800a0a8:	4622      	mov	r2, r4
 800a0aa:	f005 f9c3 	bl	800f434 <lv_area_set>

        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a0ae:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800a0b8:	b29b      	uxth	r3, r3
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	b219      	sxth	r1, r3
 800a0c0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	b21c      	sxth	r4, r3
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800a0d2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	4413      	add	r3, r2
 800a0e0:	b29b      	uxth	r3, r3
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a0e2:	b21d      	sxth	r5, r3
                    rt_origo.x + LV_CIRC_OCT7_X(cir), rt_origo.y + LV_CIRC_OCT7_Y(cir));
 800a0e4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	b29b      	uxth	r3, r3
        lv_area_set(&edge_top_area, lt_origo.x + LV_CIRC_OCT6_X(cir), lt_origo.y + LV_CIRC_OCT6_Y(cir),
 800a0f4:	b21b      	sxth	r3, r3
 800a0f6:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	462b      	mov	r3, r5
 800a0fe:	4622      	mov	r2, r4
 800a100:	f005 f998 	bl	800f434 <lv_area_set>

        lv_circ_next(&cir, &cir_tmp);
 800a104:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 800a108:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a10c:	4611      	mov	r1, r2
 800a10e:	4618      	mov	r0, r3
 800a110:	f005 fb67 	bl	800f7e2 <lv_circ_next>
    while(lv_circ_cont(&cir)) {
 800a114:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a118:	4618      	mov	r0, r3
 800a11a:	f005 fb4e 	bl	800f7ba <lv_circ_cont>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	f47f ac8f 	bne.w	8009a44 <lv_draw_rect_main_corner+0x310>
    }

    if(mcolor.full == gcolor.full)
 800a126:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 800a12a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800a12e:	429a      	cmp	r2, r3
 800a130:	d104      	bne.n	800a13c <lv_draw_rect_main_corner+0xa08>
        act_color = mcolor;
 800a132:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a136:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800a13a:	e01c      	b.n	800a176 <lv_draw_rect_main_corner+0xa42>
    else {
        mix       = (uint32_t)((uint32_t)(coords->y2 - edge_top_area.y1) * 255) / height;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a142:	461a      	mov	r2, r3
 800a144:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	461a      	mov	r2, r3
 800a14c:	4613      	mov	r3, r2
 800a14e:	021b      	lsls	r3, r3, #8
 800a150:	1a9a      	subs	r2, r3, r2
 800a152:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 800a156:	fbb2 f3f3 	udiv	r3, r2, r3
 800a15a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800a15e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a162:	461a      	mov	r2, r3
 800a164:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 800a168:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 800a16c:	f7ff f8d4 	bl	8009318 <lv_color_mix>
 800a170:	4603      	mov	r3, r0
 800a172:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    lv_draw_fill(&edge_top_area, mask, act_color, opa);
 800a176:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800a17a:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800a17e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800a182:	68b9      	ldr	r1, [r7, #8]
 800a184:	f7fd fff0 	bl	8008168 <lv_draw_fill>

    if(edge_top_area.y1 != mid_top_area.y1) {
 800a188:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 800a18c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800a190:	429a      	cmp	r2, r3
 800a192:	d030      	beq.n	800a1f6 <lv_draw_rect_main_corner+0xac2>

        if(mcolor.full == gcolor.full)
 800a194:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 800a198:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d104      	bne.n	800a1aa <lv_draw_rect_main_corner+0xa76>
            act_color = mcolor;
 800a1a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a1a4:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800a1a8:	e01c      	b.n	800a1e4 <lv_draw_rect_main_corner+0xab0>
        else {
            mix       = (uint32_t)((uint32_t)(coords->y2 - mid_top_area.y1) * 255) / height;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	021b      	lsls	r3, r3, #8
 800a1be:	1a9a      	subs	r2, r3, r2
 800a1c0:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 800a1c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800a1cc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 800a1d6:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 800a1da:	f7ff f89d 	bl	8009318 <lv_color_mix>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
        }
        lv_draw_fill(&mid_top_area, mask, act_color, opa);
 800a1e4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800a1e8:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800a1ec:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800a1f0:	68b9      	ldr	r1, [r7, #8]
 800a1f2:	f7fd ffb9 	bl	8008168 <lv_draw_fill>
    }

    if(mcolor.full == gcolor.full)
 800a1f6:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 800a1fa:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d104      	bne.n	800a20c <lv_draw_rect_main_corner+0xad8>
        act_color = mcolor;
 800a202:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a206:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800a20a:	e01c      	b.n	800a246 <lv_draw_rect_main_corner+0xb12>
    else {
        mix       = (uint32_t)((uint32_t)(coords->y2 - mid_bot_area.y1) * 255) / height;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a212:	461a      	mov	r2, r3
 800a214:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	461a      	mov	r2, r3
 800a21c:	4613      	mov	r3, r2
 800a21e:	021b      	lsls	r3, r3, #8
 800a220:	1a9a      	subs	r2, r3, r2
 800a222:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 800a226:	fbb2 f3f3 	udiv	r3, r2, r3
 800a22a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        act_color = lv_color_mix(mcolor, gcolor, mix);
 800a22e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a232:	461a      	mov	r2, r3
 800a234:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 800a238:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 800a23c:	f7ff f86c 	bl	8009318 <lv_color_mix>
 800a240:	4603      	mov	r3, r0
 800a242:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    lv_draw_fill(&mid_bot_area, mask, act_color, opa);
 800a246:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800a24a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800a24e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800a252:	68b9      	ldr	r1, [r7, #8]
 800a254:	f7fd ff88 	bl	8008168 <lv_draw_fill>

    if(edge_bot_area.y1 != mid_bot_area.y1) {
 800a258:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 800a25c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a260:	429a      	cmp	r2, r3
 800a262:	d030      	beq.n	800a2c6 <lv_draw_rect_main_corner+0xb92>

        if(mcolor.full == gcolor.full)
 800a264:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 800a268:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d104      	bne.n	800a27a <lv_draw_rect_main_corner+0xb46>
            act_color = mcolor;
 800a270:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a274:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800a278:	e01c      	b.n	800a2b4 <lv_draw_rect_main_corner+0xb80>
        else {
            mix       = (uint32_t)((uint32_t)(coords->y2 - edge_bot_area.y1) * 255) / height;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a280:	461a      	mov	r2, r3
 800a282:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	461a      	mov	r2, r3
 800a28a:	4613      	mov	r3, r2
 800a28c:	021b      	lsls	r3, r3, #8
 800a28e:	1a9a      	subs	r2, r3, r2
 800a290:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 800a294:	fbb2 f3f3 	udiv	r3, r2, r3
 800a298:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
            act_color = lv_color_mix(mcolor, gcolor, mix);
 800a29c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 800a2a6:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 800a2aa:	f7ff f835 	bl	8009318 <lv_color_mix>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
        }
        lv_draw_fill(&edge_bot_area, mask, act_color, opa);
 800a2b4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800a2b8:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800a2bc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800a2c0:	68b9      	ldr	r1, [r7, #8]
 800a2c2:	f7fd ff51 	bl	8008168 <lv_draw_fill>
    }

#if LV_ANTIALIAS
    if(aa) {
 800a2c6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f000 8257 	beq.w	800a77e <lv_draw_rect_main_corner+0x104a>
        /*The first and the last line is not drawn*/
        edge_top_area.x1 = coords->x1 + radius + 2;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800a2dc:	4413      	add	r3, r2
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	3302      	adds	r3, #2
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	b21b      	sxth	r3, r3
 800a2e6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
        edge_top_area.x2 = coords->x2 - radius - 2;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	3b02      	subs	r3, #2
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	b21b      	sxth	r3, r3
 800a300:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
        edge_top_area.y1 = coords->y1;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a30a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        edge_top_area.y2 = coords->y1;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a314:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        lv_draw_fill(&edge_top_area, mask, style->body.main_color, opa);
 800a318:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800a322:	8852      	ldrh	r2, [r2, #2]
 800a324:	68b9      	ldr	r1, [r7, #8]
 800a326:	f7fd ff1f 	bl	8008168 <lv_draw_fill>

        edge_top_area.y1 = coords->y2;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a330:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        edge_top_area.y2 = coords->y2;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a33a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
        lv_draw_fill(&edge_top_area, mask, style->body.grad_color, opa);
 800a33e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800a348:	8892      	ldrh	r2, [r2, #4]
 800a34a:	68b9      	ldr	r1, [r7, #8]
 800a34c:	f7fd ff0c 	bl	8008168 <lv_draw_fill>

        /*Last parts of the anti-alias*/
        out_y_seg_end       = cir.y;
 800a350:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a352:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800a356:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 800a35a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	b29b      	uxth	r3, r3
 800a362:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
        lv_point_t aa_p;

        aa_p.x = out_x_last;
 800a366:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800a36a:	82bb      	strh	r3, [r7, #20]
        aa_p.y = out_y_seg_start;
 800a36c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a370:	82fb      	strh	r3, [r7, #22]

        mix                 = (uint32_t)((uint32_t)(radius - out_x_last) * 255) / height;
 800a372:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 800a376:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	@ 0x84
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	461a      	mov	r2, r3
 800a37e:	4613      	mov	r3, r2
 800a380:	021b      	lsls	r3, r3, #8
 800a382:	1a9a      	subs	r2, r3, r2
 800a384:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 800a388:	fbb2 f3f3 	udiv	r3, r2, r3
 800a38c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
        aa_color_hor_bottom = lv_color_mix(gcolor, mcolor, mix);
 800a390:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a394:	461a      	mov	r2, r3
 800a396:	f8b7 1064 	ldrh.w	r1, [r7, #100]	@ 0x64
 800a39a:	f8b7 0060 	ldrh.w	r0, [r7, #96]	@ 0x60
 800a39e:	f7fe ffbb 	bl	8009318 <lv_color_mix>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	843b      	strh	r3, [r7, #32]
        aa_color_hor_top    = lv_color_mix(mcolor, gcolor, mix);
 800a3a6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 800a3b0:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 800a3b4:	f7fe ffb0 	bl	8009318 <lv_color_mix>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	84bb      	strh	r3, [r7, #36]	@ 0x24

        lv_coord_t i;
        for(i = 0; i < seg_size; i++) {
 800a3bc:	2300      	movs	r3, #0
 800a3be:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 800a3c2:	e136      	b.n	800a632 <lv_draw_rect_main_corner+0xefe>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800a3c4:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 800a3c8:	f9b7 107a 	ldrsh.w	r1, [r7, #122]	@ 0x7a
 800a3cc:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7fd fd73 	bl	8007ebc <lv_draw_aa_get_opa>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	461a      	mov	r2, r3
 800a3da:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800a3de:	1a9b      	subs	r3, r3, r2
 800a3e0:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800a3e4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	4413      	add	r3, r2
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a3f8:	4413      	add	r3, r2
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	b218      	sxth	r0, r3
 800a3fe:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a402:	b29a      	uxth	r2, r3
 800a404:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a408:	b29b      	uxth	r3, r3
 800a40a:	4413      	add	r3, r2
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	3301      	adds	r3, #1
 800a410:	b29b      	uxth	r3, r3
 800a412:	b219      	sxth	r1, r3
 800a414:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	f7fd fe0b 	bl	8008038 <lv_draw_px>
                       aa_color_hor_top, aa_opa);
            lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800a422:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 800a426:	b29a      	uxth	r2, r3
 800a428:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	1ad3      	subs	r3, r2, r3
 800a430:	b29a      	uxth	r2, r3
 800a432:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a436:	1ad3      	subs	r3, r2, r3
 800a438:	b29b      	uxth	r3, r3
 800a43a:	b218      	sxth	r0, r3
 800a43c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 800a440:	b29a      	uxth	r2, r3
 800a442:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a446:	b29b      	uxth	r3, r3
 800a448:	4413      	add	r3, r2
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	3301      	adds	r3, #1
 800a44e:	b29b      	uxth	r3, r3
 800a450:	b219      	sxth	r1, r3
 800a452:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	f7fd fdec 	bl	8008038 <lv_draw_px>
                       aa_color_hor_top, aa_opa);
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800a460:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 800a464:	b29a      	uxth	r2, r3
 800a466:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	b29a      	uxth	r2, r3
 800a470:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	b29b      	uxth	r3, r3
 800a478:	b218      	sxth	r0, r3
 800a47a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 800a47e:	b29a      	uxth	r2, r3
 800a480:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a484:	b29b      	uxth	r3, r3
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	b29b      	uxth	r3, r3
 800a48a:	3b01      	subs	r3, #1
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	b219      	sxth	r1, r3
 800a490:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	8c3b      	ldrh	r3, [r7, #32]
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	f7fd fdcd 	bl	8008038 <lv_draw_px>
                       aa_color_hor_bottom, aa_opa);
            lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800a49e:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	4413      	add	r3, r2
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a4b2:	4413      	add	r3, r2
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	b218      	sxth	r0, r3
 800a4b8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	b219      	sxth	r1, r3
 800a4ce:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	8c3b      	ldrh	r3, [r7, #32]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	f7fd fdae 	bl	8008038 <lv_draw_px>
                       aa_color_hor_bottom, aa_opa);

            mix          = (uint32_t)((uint32_t)(radius - out_y_seg_start + i) * 255) / height;
 800a4dc:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 800a4e0:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 800a4e4:	1ad2      	subs	r2, r2, r3
 800a4e6:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
 800a4ea:	4413      	add	r3, r2
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	021b      	lsls	r3, r3, #8
 800a4f2:	1a9a      	subs	r2, r3, r2
 800a4f4:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 800a4f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4fc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
            aa_color_ver = lv_color_mix(mcolor, gcolor, mix);
 800a500:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a504:	461a      	mov	r2, r3
 800a506:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 800a50a:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 800a50e:	f7fe ff03 	bl	8009318 <lv_color_mix>
 800a512:	4603      	mov	r3, r0
 800a514:	83bb      	strh	r3, [r7, #28]
            lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask, aa_color_ver,
 800a516:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a520:	b29b      	uxth	r3, r3
 800a522:	4413      	add	r3, r2
 800a524:	b29b      	uxth	r3, r3
 800a526:	3301      	adds	r3, #1
 800a528:	b29b      	uxth	r3, r3
 800a52a:	b218      	sxth	r0, r3
 800a52c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a530:	b29a      	uxth	r2, r3
 800a532:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a536:	b29b      	uxth	r3, r3
 800a538:	4413      	add	r3, r2
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a540:	4413      	add	r3, r2
 800a542:	b29b      	uxth	r3, r3
 800a544:	b219      	sxth	r1, r3
 800a546:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	8bbb      	ldrh	r3, [r7, #28]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	f7fd fd72 	bl	8008038 <lv_draw_px>
                       aa_opa);
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask, aa_color_ver,
 800a554:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 800a558:	b29a      	uxth	r2, r3
 800a55a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a55e:	b29b      	uxth	r3, r3
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	b29b      	uxth	r3, r3
 800a564:	3b01      	subs	r3, #1
 800a566:	b29b      	uxth	r3, r3
 800a568:	b218      	sxth	r0, r3
 800a56a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 800a56e:	b29a      	uxth	r2, r3
 800a570:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a574:	b29b      	uxth	r3, r3
 800a576:	4413      	add	r3, r2
 800a578:	b29a      	uxth	r2, r3
 800a57a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a57e:	4413      	add	r3, r2
 800a580:	b29b      	uxth	r3, r3
 800a582:	b219      	sxth	r1, r3
 800a584:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	8bbb      	ldrh	r3, [r7, #28]
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	f7fd fd53 	bl	8008038 <lv_draw_px>
                       aa_opa);

            aa_color_ver = lv_color_mix(gcolor, mcolor, mix);
 800a592:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a596:	461a      	mov	r2, r3
 800a598:	f8b7 1064 	ldrh.w	r1, [r7, #100]	@ 0x64
 800a59c:	f8b7 0060 	ldrh.w	r0, [r7, #96]	@ 0x60
 800a5a0:	f7fe feba 	bl	8009318 <lv_color_mix>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	83bb      	strh	r3, [r7, #28]
            lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask, aa_color_ver,
 800a5a8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	b218      	sxth	r0, r3
 800a5be:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	1ad3      	subs	r3, r2, r3
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a5d2:	1ad3      	subs	r3, r2, r3
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	b219      	sxth	r1, r3
 800a5d8:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800a5dc:	9300      	str	r3, [sp, #0]
 800a5de:	8bbb      	ldrh	r3, [r7, #28]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	f7fd fd29 	bl	8008038 <lv_draw_px>
                       aa_opa);
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask, aa_color_ver,
 800a5e6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 800a5ea:	b29a      	uxth	r2, r3
 800a5ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	4413      	add	r3, r2
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	b218      	sxth	r0, r3
 800a5fc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 800a600:	b29a      	uxth	r2, r3
 800a602:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a606:	b29b      	uxth	r3, r3
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	b29b      	uxth	r3, r3
 800a614:	b219      	sxth	r1, r3
 800a616:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	8bbb      	ldrh	r3, [r7, #28]
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	f7fd fd0a 	bl	8008038 <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
 800a624:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
 800a628:	b29b      	uxth	r3, r3
 800a62a:	3301      	adds	r3, #1
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 800a632:	f9b7 207a 	ldrsh.w	r2, [r7, #122]	@ 0x7a
 800a636:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800a63a:	429a      	cmp	r2, r3
 800a63c:	f6ff aec2 	blt.w	800a3c4 <lv_draw_rect_main_corner+0xc90>
                       aa_opa);
        }

        /*In some cases the last pixel is not drawn*/
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800a640:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a644:	461a      	mov	r2, r3
 800a646:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800a650:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800a654:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 800a658:	429a      	cmp	r2, r3
 800a65a:	f040 8090 	bne.w	800a77e <lv_draw_rect_main_corner+0x104a>
            aa_p.x = out_x_last;
 800a65e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800a662:	82bb      	strh	r3, [r7, #20]
            aa_p.y = out_x_last;
 800a664:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800a668:	82fb      	strh	r3, [r7, #22]

            mix                 = (uint32_t)((uint32_t)(out_x_last)*255) / height;
 800a66a:	f9b7 2084 	ldrsh.w	r2, [r7, #132]	@ 0x84
 800a66e:	4613      	mov	r3, r2
 800a670:	021b      	lsls	r3, r3, #8
 800a672:	1a9a      	subs	r2, r3, r2
 800a674:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 800a678:	fbb2 f3f3 	udiv	r3, r2, r3
 800a67c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
            aa_color_hor_top    = lv_color_mix(gcolor, mcolor, mix);
 800a680:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a684:	461a      	mov	r2, r3
 800a686:	f8b7 1064 	ldrh.w	r1, [r7, #100]	@ 0x64
 800a68a:	f8b7 0060 	ldrh.w	r0, [r7, #96]	@ 0x60
 800a68e:	f7fe fe43 	bl	8009318 <lv_color_mix>
 800a692:	4603      	mov	r3, r0
 800a694:	84bb      	strh	r3, [r7, #36]	@ 0x24
            aa_color_hor_bottom = lv_color_mix(mcolor, gcolor, mix);
 800a696:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800a69a:	461a      	mov	r2, r3
 800a69c:	f8b7 1060 	ldrh.w	r1, [r7, #96]	@ 0x60
 800a6a0:	f8b7 0064 	ldrh.w	r0, [r7, #100]	@ 0x64
 800a6a4:	f7fe fe38 	bl	8009318 <lv_color_mix>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	843b      	strh	r3, [r7, #32]

            lv_opa_t aa_opa = opa >> 1;
 800a6ac:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800a6b0:	085b      	lsrs	r3, r3, #1
 800a6b2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask, aa_color_hor_bottom,
 800a6b6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	4413      	add	r3, r2
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	b218      	sxth	r0, r3
 800a6c8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800a6cc:	b29a      	uxth	r2, r3
 800a6ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	4413      	add	r3, r2
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	b219      	sxth	r1, r3
 800a6da:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	8c3b      	ldrh	r3, [r7, #32]
 800a6e2:	68ba      	ldr	r2, [r7, #8]
 800a6e4:	f7fd fca8 	bl	8008038 <lv_draw_px>
                       aa_opa);
            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask, aa_color_hor_bottom,
 800a6e8:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	b218      	sxth	r0, r3
 800a6fa:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a704:	b29b      	uxth	r3, r3
 800a706:	4413      	add	r3, r2
 800a708:	b29b      	uxth	r3, r3
 800a70a:	b219      	sxth	r1, r3
 800a70c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	8c3b      	ldrh	r3, [r7, #32]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	f7fd fc8f 	bl	8008038 <lv_draw_px>
                       aa_opa);
            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask, aa_color_hor_top,
 800a71a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 800a71e:	b29a      	uxth	r2, r3
 800a720:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a724:	b29b      	uxth	r3, r3
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	b29b      	uxth	r3, r3
 800a72a:	b218      	sxth	r0, r3
 800a72c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 800a730:	b29a      	uxth	r2, r3
 800a732:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a736:	b29b      	uxth	r3, r3
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	b219      	sxth	r1, r3
 800a73e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	f7fd fc76 	bl	8008038 <lv_draw_px>
                       aa_opa);
            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask, aa_color_hor_top,
 800a74c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 800a750:	b29a      	uxth	r2, r3
 800a752:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a756:	b29b      	uxth	r3, r3
 800a758:	4413      	add	r3, r2
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	b218      	sxth	r0, r3
 800a75e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 800a762:	b29a      	uxth	r2, r3
 800a764:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a768:	b29b      	uxth	r3, r3
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	b219      	sxth	r1, r3
 800a770:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	f7fd fc5d 	bl	8008038 <lv_draw_px>
                       aa_opa);
        }
    }
#endif
}
 800a77e:	bf00      	nop
 800a780:	3788      	adds	r7, #136	@ 0x88
 800a782:	46bd      	mov	sp, r7
 800a784:	bdb0      	pop	{r4, r5, r7, pc}

0800a786 <lv_draw_rect_border_straight>:
 * @param rstyle pointer to a rectangle style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_border_straight(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                         lv_opa_t opa_scale)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b08c      	sub	sp, #48	@ 0x30
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	60f8      	str	r0, [r7, #12]
 800a78e:	60b9      	str	r1, [r7, #8]
 800a790:	607a      	str	r2, [r7, #4]
 800a792:	70fb      	strb	r3, [r7, #3]
    uint16_t radius = style->body.radius;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a79a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    bool aa         = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800a79c:	f7fc fbc4 	bl	8006f28 <lv_refr_get_disp_refreshing>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f004 fa53 	bl	800ec4e <lv_disp_get_antialiasing>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

    lv_coord_t width  = lv_area_get_width(coords);
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f7fe fe30 	bl	8009414 <lv_area_get_width>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    lv_coord_t height = lv_area_get_height(coords);
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f7fe fe41 	bl	8009440 <lv_area_get_height>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    lv_coord_t bwidth = style->body.border.width;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	899b      	ldrh	r3, [r3, #12]
 800a7c6:	847b      	strh	r3, [r7, #34]	@ 0x22
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a7c8:	78fb      	ldrb	r3, [r7, #3]
 800a7ca:	2bff      	cmp	r3, #255	@ 0xff
 800a7cc:	d102      	bne.n	800a7d4 <lv_draw_rect_border_straight+0x4e>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	7bdb      	ldrb	r3, [r3, #15]
 800a7d2:	e00a      	b.n	800a7ea <lv_draw_rect_border_straight+0x64>
                                             : (uint16_t)((uint16_t)style->body.border.opa * opa_scale) >> 8;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	7bdb      	ldrb	r3, [r3, #15]
 800a7d8:	461a      	mov	r2, r3
 800a7da:	78fb      	ldrb	r3, [r7, #3]
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	fb02 f303 	mul.w	r3, r2, r3
 800a7e2:	b29b      	uxth	r3, r3
    lv_opa_t opa      = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800a7e4:	0a1b      	lsrs	r3, r3, #8
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    lv_border_part_t part = style->body.border.part;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	7b9b      	ldrb	r3, [r3, #14]
 800a7f2:	f887 3020 	strb.w	r3, [r7, #32]
    lv_color_t color      = style->body.border.color;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	895b      	ldrh	r3, [r3, #10]
 800a7fa:	83bb      	strh	r3, [r7, #28]
    lv_area_t work_area;
    lv_coord_t length_corr = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    lv_coord_t corner_size = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /*the 0 px border width drawn as 1 px, so decrement the b_width*/
    bwidth--;
 800a804:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800a808:	b29b      	uxth	r3, r3
 800a80a:	3b01      	subs	r3, #1
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	847b      	strh	r3, [r7, #34]	@ 0x22

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800a810:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800a814:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	@ 0x26
 800a818:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a81a:	4618      	mov	r0, r3
 800a81c:	f002 fca1 	bl	800d162 <lv_draw_cont_radius_corr>
 800a820:	4603      	mov	r3, r0
 800a822:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if(radius < bwidth) {
 800a824:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800a826:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800a82a:	429a      	cmp	r2, r3
 800a82c:	da0c      	bge.n	800a848 <lv_draw_rect_border_straight+0xc2>
        length_corr = bwidth - radius - aa;
 800a82e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a830:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	b29a      	uxth	r2, r3
 800a836:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	b29b      	uxth	r3, r3
 800a840:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        corner_size = bwidth;
 800a842:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a844:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a846:	e006      	b.n	800a856 <lv_draw_rect_border_straight+0xd0>
    } else {
        corner_size = radius + aa;
 800a848:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a850:	4413      	add	r3, r2
 800a852:	b29b      	uxth	r3, r3
 800a854:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }

    /*If radius == 0 is a special case*/
    if(style->body.radius == 0) {
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	f040 80ca 	bne.w	800a9f6 <lv_draw_rect_border_straight+0x270>
        /*Left top corner*/
        if(part & LV_BORDER_TOP) {
 800a862:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a866:	f003 0302 	and.w	r3, r3, #2
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d01c      	beq.n	800a8a8 <lv_draw_rect_border_straight+0x122>
            work_area.x1 = coords->x1;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a874:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a87c:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a884:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + bwidth;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a88c:	b29a      	uxth	r2, r3
 800a88e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a890:	4413      	add	r3, r2
 800a892:	b29b      	uxth	r3, r3
 800a894:	b21b      	sxth	r3, r3
 800a896:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800a898:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a89c:	f107 0014 	add.w	r0, r7, #20
 800a8a0:	8bba      	ldrh	r2, [r7, #28]
 800a8a2:	68b9      	ldr	r1, [r7, #8]
 800a8a4:	f7fd fc60 	bl	8008168 <lv_draw_fill>
        }

        /*Right top corner*/
        if(part & LV_BORDER_RIGHT) {
 800a8a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a8ac:	f003 0308 	and.w	r3, r3, #8
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d03a      	beq.n	800a92a <lv_draw_rect_border_straight+0x1a4>
            work_area.x1 = coords->x2 - bwidth;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	b21b      	sxth	r3, r3
 800a8c4:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a8cc:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a8da:	f003 0302 	and.w	r3, r3, #2
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d003      	beq.n	800a8ea <lv_draw_rect_border_straight+0x164>
 800a8e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	e000      	b.n	800a8ec <lv_draw_rect_border_straight+0x166>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	4413      	add	r3, r2
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	b21b      	sxth	r3, r3
 800a8f2:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a900:	f003 0301 	and.w	r3, r3, #1
 800a904:	2b00      	cmp	r3, #0
 800a906:	d003      	beq.n	800a910 <lv_draw_rect_border_straight+0x18a>
 800a908:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a90a:	3301      	adds	r3, #1
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	e000      	b.n	800a912 <lv_draw_rect_border_straight+0x18c>
 800a910:	2300      	movs	r3, #0
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	b29b      	uxth	r3, r3
 800a916:	b21b      	sxth	r3, r3
 800a918:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800a91a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a91e:	f107 0014 	add.w	r0, r7, #20
 800a922:	8bba      	ldrh	r2, [r7, #28]
 800a924:	68b9      	ldr	r1, [r7, #8]
 800a926:	f7fd fc1f 	bl	8008168 <lv_draw_fill>
        }

        /*Left bottom corner*/
        if(part & LV_BORDER_LEFT) {
 800a92a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a92e:	f003 0304 	and.w	r3, r3, #4
 800a932:	2b00      	cmp	r3, #0
 800a934:	d03a      	beq.n	800a9ac <lv_draw_rect_border_straight+0x226>
            work_area.x1 = coords->x1;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a93c:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + bwidth;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a944:	b29a      	uxth	r2, r3
 800a946:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a948:	4413      	add	r3, r2
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	b21b      	sxth	r3, r3
 800a94e:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + (part & LV_BORDER_TOP ? bwidth + 1 : 0);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a956:	b29a      	uxth	r2, r3
 800a958:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a95c:	f003 0302 	and.w	r3, r3, #2
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <lv_draw_rect_border_straight+0x1e6>
 800a964:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a966:	3301      	adds	r3, #1
 800a968:	b29b      	uxth	r3, r3
 800a96a:	e000      	b.n	800a96e <lv_draw_rect_border_straight+0x1e8>
 800a96c:	2300      	movs	r3, #0
 800a96e:	4413      	add	r3, r2
 800a970:	b29b      	uxth	r3, r3
 800a972:	b21b      	sxth	r3, r3
 800a974:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - (part & LV_BORDER_BOTTOM ? bwidth + 1 : 0);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	2b00      	cmp	r3, #0
 800a988:	d003      	beq.n	800a992 <lv_draw_rect_border_straight+0x20c>
 800a98a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a98c:	3301      	adds	r3, #1
 800a98e:	b29b      	uxth	r3, r3
 800a990:	e000      	b.n	800a994 <lv_draw_rect_border_straight+0x20e>
 800a992:	2300      	movs	r3, #0
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	b29b      	uxth	r3, r3
 800a998:	b21b      	sxth	r3, r3
 800a99a:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800a99c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a9a0:	f107 0014 	add.w	r0, r7, #20
 800a9a4:	8bba      	ldrh	r2, [r7, #28]
 800a9a6:	68b9      	ldr	r1, [r7, #8]
 800a9a8:	f7fd fbde 	bl	8008168 <lv_draw_fill>
        }

        /*Right bottom corner*/
        if(part & LV_BORDER_BOTTOM) {
 800a9ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a9b0:	f003 0301 	and.w	r3, r3, #1
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f000 828f 	beq.w	800aed8 <lv_draw_rect_border_straight+0x752>
            work_area.x1 = coords->x1;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9c0:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a9c8:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - bwidth;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a9d4:	1ad3      	subs	r3, r2, r3
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	b21b      	sxth	r3, r3
 800a9da:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800a9e2:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800a9e4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a9e8:	f107 0014 	add.w	r0, r7, #20
 800a9ec:	8bba      	ldrh	r2, [r7, #28]
 800a9ee:	68b9      	ldr	r1, [r7, #8]
 800a9f0:	f7fd fbba 	bl	8008168 <lv_draw_fill>
 800a9f4:	e271      	b.n	800aeda <lv_draw_rect_border_straight+0x754>
        }
        return;
    }

    /* Modify the corner_size if corner is drawn */
    corner_size++;
 800a9f6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    /*Depending one which part's are drawn modify the area lengths */
    if(part & LV_BORDER_TOP)
 800aa02:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa06:	f003 0302 	and.w	r3, r3, #2
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d009      	beq.n	800aa22 <lv_draw_rect_border_straight+0x29c>
        work_area.y1 = coords->y1 + corner_size;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800aa18:	4413      	add	r3, r2
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	b21b      	sxth	r3, r3
 800aa1e:	82fb      	strh	r3, [r7, #22]
 800aa20:	e008      	b.n	800aa34 <lv_draw_rect_border_straight+0x2ae>
    else
        work_area.y1 = coords->y1 + radius;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800aa2c:	4413      	add	r3, r2
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	b21b      	sxth	r3, r3
 800aa32:	82fb      	strh	r3, [r7, #22]

    if(part & LV_BORDER_BOTTOM)
 800aa34:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa38:	f003 0301 	and.w	r3, r3, #1
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d009      	beq.n	800aa54 <lv_draw_rect_border_straight+0x2ce>
        work_area.y2 = coords->y2 - corner_size;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	b21b      	sxth	r3, r3
 800aa50:	837b      	strh	r3, [r7, #26]
 800aa52:	e008      	b.n	800aa66 <lv_draw_rect_border_straight+0x2e0>
    else
        work_area.y2 = coords->y2 - radius;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800aa5a:	b29a      	uxth	r2, r3
 800aa5c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	b21b      	sxth	r3, r3
 800aa64:	837b      	strh	r3, [r7, #26]

    /*Left border*/
    if(part & LV_BORDER_LEFT) {
 800aa66:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa6a:	f003 0304 	and.w	r3, r3, #4
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d013      	beq.n	800aa9a <lv_draw_rect_border_straight+0x314>
        work_area.x1 = coords->x1;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aa78:	82bb      	strh	r3, [r7, #20]
        work_area.x2 = work_area.x1 + bwidth;
 800aa7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800aa82:	4413      	add	r3, r2
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	b21b      	sxth	r3, r3
 800aa88:	833b      	strh	r3, [r7, #24]
        lv_draw_fill(&work_area, mask, color, opa);
 800aa8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aa8e:	f107 0014 	add.w	r0, r7, #20
 800aa92:	8bba      	ldrh	r2, [r7, #28]
 800aa94:	68b9      	ldr	r1, [r7, #8]
 800aa96:	f7fd fb67 	bl	8008168 <lv_draw_fill>
    }

    /*Right border*/
    if(part & LV_BORDER_RIGHT) {
 800aa9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa9e:	f003 0308 	and.w	r3, r3, #8
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d013      	beq.n	800aace <lv_draw_rect_border_straight+0x348>
        work_area.x2 = coords->x2;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800aaac:	833b      	strh	r3, [r7, #24]
        work_area.x1 = work_area.x2 - bwidth;
 800aaae:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800aab6:	1ad3      	subs	r3, r2, r3
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	b21b      	sxth	r3, r3
 800aabc:	82bb      	strh	r3, [r7, #20]
        lv_draw_fill(&work_area, mask, color, opa);
 800aabe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aac2:	f107 0014 	add.w	r0, r7, #20
 800aac6:	8bba      	ldrh	r2, [r7, #28]
 800aac8:	68b9      	ldr	r1, [r7, #8]
 800aaca:	f7fd fb4d 	bl	8008168 <lv_draw_fill>
    }

    work_area.x1 = coords->x1 + corner_size - length_corr;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aad4:	b29a      	uxth	r2, r3
 800aad6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800aad8:	4413      	add	r3, r2
 800aada:	b29a      	uxth	r2, r3
 800aadc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800aade:	1ad3      	subs	r3, r2, r3
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	b21b      	sxth	r3, r3
 800aae4:	82bb      	strh	r3, [r7, #20]
    work_area.x2 = coords->x2 - corner_size + length_corr;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800aaf0:	1ad3      	subs	r3, r2, r3
 800aaf2:	b29a      	uxth	r2, r3
 800aaf4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800aaf6:	4413      	add	r3, r2
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	b21b      	sxth	r3, r3
 800aafc:	833b      	strh	r3, [r7, #24]

    /*Upper border*/
    if(part & LV_BORDER_TOP) {
 800aafe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab02:	f003 0302 	and.w	r3, r3, #2
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d014      	beq.n	800ab34 <lv_draw_rect_border_straight+0x3ae>
        work_area.y1 = coords->y1;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ab10:	82fb      	strh	r3, [r7, #22]
        work_area.y2 = coords->y1 + bwidth;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ab1c:	4413      	add	r3, r2
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	b21b      	sxth	r3, r3
 800ab22:	837b      	strh	r3, [r7, #26]
        lv_draw_fill(&work_area, mask, color, opa);
 800ab24:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ab28:	f107 0014 	add.w	r0, r7, #20
 800ab2c:	8bba      	ldrh	r2, [r7, #28]
 800ab2e:	68b9      	ldr	r1, [r7, #8]
 800ab30:	f7fd fb1a 	bl	8008168 <lv_draw_fill>
    }

    /*Lower border*/
    if(part & LV_BORDER_BOTTOM) {
 800ab34:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab38:	f003 0301 	and.w	r3, r3, #1
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d013      	beq.n	800ab68 <lv_draw_rect_border_straight+0x3e2>
        work_area.y2 = coords->y2;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ab46:	837b      	strh	r3, [r7, #26]
        work_area.y1 = work_area.y2 - bwidth;
 800ab48:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	b21b      	sxth	r3, r3
 800ab56:	82fb      	strh	r3, [r7, #22]
        lv_draw_fill(&work_area, mask, color, opa);
 800ab58:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ab5c:	f107 0014 	add.w	r0, r7, #20
 800ab60:	8bba      	ldrh	r2, [r7, #28]
 800ab62:	68b9      	ldr	r1, [r7, #8]
 800ab64:	f7fd fb00 	bl	8008168 <lv_draw_fill>
    }

    /*Draw the a remaining rectangles if the radius is smaller then bwidth */
    if(length_corr != 0) {
 800ab68:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f000 80fc 	beq.w	800ad6a <lv_draw_rect_border_straight+0x5e4>
        /*Left top correction*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800ab72:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab76:	f003 0302 	and.w	r3, r3, #2
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d038      	beq.n	800abf0 <lv_draw_rect_border_straight+0x46a>
 800ab7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab82:	f003 0304 	and.w	r3, r3, #4
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d032      	beq.n	800abf0 <lv_draw_rect_border_straight+0x46a>
            work_area.x1 = coords->x1;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab90:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + radius + aa;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ab9c:	4413      	add	r3, r2
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	4413      	add	r3, r2
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	b21b      	sxth	r3, r3
 800abac:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800abb8:	4413      	add	r3, r2
 800abba:	b29a      	uxth	r2, r3
 800abbc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	4413      	add	r3, r2
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	3301      	adds	r3, #1
 800abc8:	b29b      	uxth	r3, r3
 800abca:	b21b      	sxth	r3, r3
 800abcc:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + bwidth;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800abd4:	b29a      	uxth	r2, r3
 800abd6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800abd8:	4413      	add	r3, r2
 800abda:	b29b      	uxth	r3, r3
 800abdc:	b21b      	sxth	r3, r3
 800abde:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800abe0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800abe4:	f107 0014 	add.w	r0, r7, #20
 800abe8:	8bba      	ldrh	r2, [r7, #28]
 800abea:	68b9      	ldr	r1, [r7, #8]
 800abec:	f7fd fabc 	bl	8008168 <lv_draw_fill>
        }

        /*Right top correction*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800abf0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800abf4:	f003 0302 	and.w	r3, r3, #2
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d038      	beq.n	800ac6e <lv_draw_rect_border_straight+0x4e8>
 800abfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac00:	f003 0308 	and.w	r3, r3, #8
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d032      	beq.n	800ac6e <lv_draw_rect_border_straight+0x4e8>
            work_area.x1 = coords->x2 - radius - aa;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	b29a      	uxth	r2, r3
 800ac16:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	b21b      	sxth	r3, r3
 800ac22:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ac2a:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1 + radius + 1 + aa;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ac32:	b29a      	uxth	r2, r3
 800ac34:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ac36:	4413      	add	r3, r2
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	4413      	add	r3, r2
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	3301      	adds	r3, #1
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	b21b      	sxth	r3, r3
 800ac4a:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + bwidth;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ac56:	4413      	add	r3, r2
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	b21b      	sxth	r3, r3
 800ac5c:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800ac5e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ac62:	f107 0014 	add.w	r0, r7, #20
 800ac66:	8bba      	ldrh	r2, [r7, #28]
 800ac68:	68b9      	ldr	r1, [r7, #8]
 800ac6a:	f7fd fa7d 	bl	8008168 <lv_draw_fill>
        }

        /*Left bottom correction*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800ac6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d038      	beq.n	800acec <lv_draw_rect_border_straight+0x566>
 800ac7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac7e:	f003 0304 	and.w	r3, r3, #4
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d032      	beq.n	800acec <lv_draw_rect_border_straight+0x566>
            work_area.x1 = coords->x1;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac8c:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + radius + aa;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ac98:	4413      	add	r3, r2
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	4413      	add	r3, r2
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	b21b      	sxth	r3, r3
 800aca8:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - bwidth;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	b21b      	sxth	r3, r3
 800acba:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	b29a      	uxth	r2, r3
 800acca:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800acce:	b29b      	uxth	r3, r3
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	3b01      	subs	r3, #1
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	b21b      	sxth	r3, r3
 800acda:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800acdc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ace0:	f107 0014 	add.w	r0, r7, #20
 800ace4:	8bba      	ldrh	r2, [r7, #28]
 800ace6:	68b9      	ldr	r1, [r7, #8]
 800ace8:	f7fd fa3e 	bl	8008168 <lv_draw_fill>
        }

        /*Right bottom correction*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800acec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800acf0:	f003 0301 	and.w	r3, r3, #1
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d038      	beq.n	800ad6a <lv_draw_rect_border_straight+0x5e4>
 800acf8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800acfc:	f003 0308 	and.w	r3, r3, #8
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d032      	beq.n	800ad6a <lv_draw_rect_border_straight+0x5e4>
            work_area.x1 = coords->x2 - radius - aa;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	b29a      	uxth	r2, r3
 800ad12:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	b21b      	sxth	r3, r3
 800ad1e:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ad26:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - bwidth;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ad2e:	b29a      	uxth	r2, r3
 800ad30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	b21b      	sxth	r3, r3
 800ad38:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2 - radius - 1 - aa;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ad44:	1ad3      	subs	r3, r2, r3
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	3b01      	subs	r3, #1
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	b21b      	sxth	r3, r3
 800ad58:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800ad5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ad5e:	f107 0014 	add.w	r0, r7, #20
 800ad62:	8bba      	ldrh	r2, [r7, #28]
 800ad64:	68b9      	ldr	r1, [r7, #8]
 800ad66:	f7fd f9ff 	bl	8008168 <lv_draw_fill>
        }
    }

    /*If radius == 0 one px on the corners are not drawn by main drawer*/
    if(style->body.radius == 0) {
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f040 80b2 	bne.w	800aeda <lv_draw_rect_border_straight+0x754>
        /*Left top corner*/
        if(part & (LV_BORDER_TOP | LV_BORDER_LEFT)) {
 800ad76:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad7a:	f003 0306 	and.w	r3, r3, #6
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d025      	beq.n	800adce <lv_draw_rect_border_straight+0x648>
            work_area.x1 = coords->x1;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad88:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + aa;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	4413      	add	r3, r2
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	b21b      	sxth	r3, r3
 800ad9e:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ada6:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + aa;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800adae:	b29a      	uxth	r2, r3
 800adb0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	4413      	add	r3, r2
 800adb8:	b29b      	uxth	r3, r3
 800adba:	b21b      	sxth	r3, r3
 800adbc:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800adbe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800adc2:	f107 0014 	add.w	r0, r7, #20
 800adc6:	8bba      	ldrh	r2, [r7, #28]
 800adc8:	68b9      	ldr	r1, [r7, #8]
 800adca:	f7fd f9cd 	bl	8008168 <lv_draw_fill>
        }

        /*Right top corner*/
        if(part & (LV_BORDER_TOP | LV_BORDER_RIGHT)) {
 800adce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800add2:	f003 030a 	and.w	r3, r3, #10
 800add6:	2b00      	cmp	r3, #0
 800add8:	d025      	beq.n	800ae26 <lv_draw_rect_border_straight+0x6a0>
            work_area.x1 = coords->x2 - aa;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	b29b      	uxth	r3, r3
 800adec:	b21b      	sxth	r3, r3
 800adee:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800adf6:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y1;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800adfe:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y1 + aa;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	4413      	add	r3, r2
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	b21b      	sxth	r3, r3
 800ae14:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800ae16:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ae1a:	f107 0014 	add.w	r0, r7, #20
 800ae1e:	8bba      	ldrh	r2, [r7, #28]
 800ae20:	68b9      	ldr	r1, [r7, #8]
 800ae22:	f7fd f9a1 	bl	8008168 <lv_draw_fill>
        }

        /*Left bottom corner*/
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_LEFT)) {
 800ae26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae2a:	f003 0305 	and.w	r3, r3, #5
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d025      	beq.n	800ae7e <lv_draw_rect_border_straight+0x6f8>
            work_area.x1 = coords->x1;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae38:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x1 + aa;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	4413      	add	r3, r2
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	b21b      	sxth	r3, r3
 800ae4e:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - aa;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	b21b      	sxth	r3, r3
 800ae64:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800ae6c:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800ae6e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ae72:	f107 0014 	add.w	r0, r7, #20
 800ae76:	8bba      	ldrh	r2, [r7, #28]
 800ae78:	68b9      	ldr	r1, [r7, #8]
 800ae7a:	f7fd f975 	bl	8008168 <lv_draw_fill>
        }

        /*Right bottom corner*/
        if(part & (LV_BORDER_BOTTOM | LV_BORDER_RIGHT)) {
 800ae7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae82:	f003 0309 	and.w	r3, r3, #9
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d027      	beq.n	800aeda <lv_draw_rect_border_straight+0x754>
            work_area.x1 = coords->x2 - aa;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	b21b      	sxth	r3, r3
 800ae9e:	82bb      	strh	r3, [r7, #20]
            work_area.x2 = coords->x2;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800aea6:	833b      	strh	r3, [r7, #24]
            work_area.y1 = coords->y2 - aa;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	1ad3      	subs	r3, r2, r3
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	b21b      	sxth	r3, r3
 800aebc:	82fb      	strh	r3, [r7, #22]
            work_area.y2 = coords->y2;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800aec4:	837b      	strh	r3, [r7, #26]
            lv_draw_fill(&work_area, mask, color, opa);
 800aec6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aeca:	f107 0014 	add.w	r0, r7, #20
 800aece:	8bba      	ldrh	r2, [r7, #28]
 800aed0:	68b9      	ldr	r1, [r7, #8]
 800aed2:	f7fd f949 	bl	8008168 <lv_draw_fill>
 800aed6:	e000      	b.n	800aeda <lv_draw_rect_border_straight+0x754>
        return;
 800aed8:	bf00      	nop
        }
    }
}
 800aeda:	3730      	adds	r7, #48	@ 0x30
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <lv_draw_rect_border_corner>:
 * @param style pointer to a style
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_rect_border_corner(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                       lv_opa_t opa_scale)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b0a0      	sub	sp, #128	@ 0x80
 800aee4:	af02      	add	r7, sp, #8
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
 800aeec:	70fb      	strb	r3, [r7, #3]
    uint16_t radius       = style->body.radius;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800aef4:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    bool aa               = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800aef8:	f7fc f816 	bl	8006f28 <lv_refr_get_disp_refreshing>
 800aefc:	4603      	mov	r3, r0
 800aefe:	4618      	mov	r0, r3
 800af00:	f003 fea5 	bl	800ec4e <lv_disp_get_antialiasing>
 800af04:	4603      	mov	r3, r0
 800af06:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    lv_coord_t bwidth     = style->body.border.width;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	899b      	ldrh	r3, [r3, #12]
 800af0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    lv_color_t color      = style->body.border.color;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	895b      	ldrh	r3, [r3, #10]
 800af16:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    lv_border_part_t part = style->body.border.part;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	7b9b      	ldrb	r3, [r3, #14]
 800af1e:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800af22:	78fb      	ldrb	r3, [r7, #3]
 800af24:	2bff      	cmp	r3, #255	@ 0xff
 800af26:	d102      	bne.n	800af2e <lv_draw_rect_border_corner+0x4e>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	7bdb      	ldrb	r3, [r3, #15]
 800af2c:	e00a      	b.n	800af44 <lv_draw_rect_border_corner+0x64>
                                             : (uint16_t)((uint16_t)style->body.border.opa * opa_scale) >> 8;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	7bdb      	ldrb	r3, [r3, #15]
 800af32:	461a      	mov	r2, r3
 800af34:	78fb      	ldrb	r3, [r7, #3]
 800af36:	b29b      	uxth	r3, r3
 800af38:	fb02 f303 	mul.w	r3, r2, r3
 800af3c:	b29b      	uxth	r3, r3
    lv_opa_t opa          = opa_scale == LV_OPA_COVER ? style->body.border.opa
 800af3e:	0a1b      	lsrs	r3, r3, #8
 800af40:	b29b      	uxth	r3, r3
 800af42:	b2db      	uxtb	r3, r3
 800af44:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
    /*0 px border width drawn as 1 px, so decrement the bwidth*/
    bwidth--;
 800af48:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	3b01      	subs	r3, #1
 800af50:	b29b      	uxth	r3, r3
 800af52:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

#if LV_ANTIALIAS
    if(aa) bwidth--; /*Because of anti-aliasing the border seems one pixel ticker*/
 800af56:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d006      	beq.n	800af6c <lv_draw_rect_border_corner+0x8c>
 800af5e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 800af62:	b29b      	uxth	r3, r3
 800af64:	3b01      	subs	r3, #1
 800af66:	b29b      	uxth	r3, r3
 800af68:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
#endif

    lv_coord_t width  = lv_area_get_width(coords);
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f7fe fa51 	bl	8009414 <lv_area_get_width>
 800af72:	4603      	mov	r3, r0
 800af74:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    lv_coord_t height = lv_area_get_height(coords);
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f7fe fa61 	bl	8009440 <lv_area_get_height>
 800af7e:	4603      	mov	r3, r0
 800af80:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800af84:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 800af88:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	@ 0x56
 800af8c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800af90:	4618      	mov	r0, r3
 800af92:	f002 f8e6 	bl	800d162 <lv_draw_cont_radius_corr>
 800af96:	4603      	mov	r3, r0
 800af98:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    lv_point_t lt_origo; /*Left  Top    origo*/
    lv_point_t lb_origo; /*Left  Bottom origo*/
    lv_point_t rt_origo; /*Right Top    origo*/
    lv_point_t rb_origo; /*Left  Bottom origo*/

    lt_origo.x = coords->x1 + radius + aa;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800afa8:	4413      	add	r3, r2
 800afaa:	b29a      	uxth	r2, r3
 800afac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	4413      	add	r3, r2
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	b21b      	sxth	r3, r3
 800afb8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    lt_origo.y = coords->y1 + radius + aa;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800afc2:	b29a      	uxth	r2, r3
 800afc4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800afc8:	4413      	add	r3, r2
 800afca:	b29a      	uxth	r2, r3
 800afcc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	4413      	add	r3, r2
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	b21b      	sxth	r3, r3
 800afd8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

    lb_origo.x = coords->x1 + radius + aa;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f9b3 3000 	ldrsh.w	r3, [r3]
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800afe8:	4413      	add	r3, r2
 800afea:	b29a      	uxth	r2, r3
 800afec:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	4413      	add	r3, r2
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	b21b      	sxth	r3, r3
 800aff8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    lb_origo.y = coords->y2 - radius - aa;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b000:	b29a      	uxth	r2, r3
 800b002:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800b006:	1ad3      	subs	r3, r2, r3
 800b008:	b29a      	uxth	r2, r3
 800b00a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b00e:	b29b      	uxth	r3, r3
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	b29b      	uxth	r3, r3
 800b014:	b21b      	sxth	r3, r3
 800b016:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    rt_origo.x = coords->x2 - radius - aa;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b01e:	b29a      	uxth	r2, r3
 800b020:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	b29a      	uxth	r2, r3
 800b028:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	1ad3      	subs	r3, r2, r3
 800b030:	b29b      	uxth	r3, r3
 800b032:	b21b      	sxth	r3, r3
 800b034:	873b      	strh	r3, [r7, #56]	@ 0x38
    rt_origo.y = coords->y1 + radius + aa;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800b042:	4413      	add	r3, r2
 800b044:	b29a      	uxth	r2, r3
 800b046:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	4413      	add	r3, r2
 800b04e:	b29b      	uxth	r3, r3
 800b050:	b21b      	sxth	r3, r3
 800b052:	877b      	strh	r3, [r7, #58]	@ 0x3a

    rb_origo.x = coords->x2 - radius - aa;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800b060:	1ad3      	subs	r3, r2, r3
 800b062:	b29a      	uxth	r2, r3
 800b064:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b068:	b29b      	uxth	r3, r3
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	b21b      	sxth	r3, r3
 800b070:	86bb      	strh	r3, [r7, #52]	@ 0x34
    rb_origo.y = coords->y2 - radius - aa;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b078:	b29a      	uxth	r2, r3
 800b07a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800b07e:	1ad3      	subs	r3, r2, r3
 800b080:	b29a      	uxth	r2, r3
 800b082:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b086:	b29b      	uxth	r3, r3
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	b21b      	sxth	r3, r3
 800b08e:	86fb      	strh	r3, [r7, #54]	@ 0x36

    lv_point_t cir_out;
    lv_coord_t tmp_out;
    lv_circ_init(&cir_out, &tmp_out, radius);
 800b090:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	@ 0x5c
 800b094:	f107 012e 	add.w	r1, r7, #46	@ 0x2e
 800b098:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b09c:	4618      	mov	r0, r3
 800b09e:	f004 fb73 	bl	800f788 <lv_circ_init>

    lv_point_t cir_in;
    lv_coord_t tmp_in;
    lv_coord_t radius_in = radius - bwidth;
 800b0a2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800b0a6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74

    if(radius_in < 0) {
 800b0b2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	@ 0x74
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	da02      	bge.n	800b0c0 <lv_draw_rect_border_corner+0x1e0>
        radius_in = 0;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
    }

    lv_circ_init(&cir_in, &tmp_in, radius_in);
 800b0c0:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	@ 0x74
 800b0c4:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 800b0c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f004 fb5b 	bl	800f788 <lv_circ_init>
    lv_coord_t act_w1;
    lv_coord_t act_w2;

#if LV_ANTIALIAS
    /*Store some internal states for anti-aliasing*/
    lv_coord_t out_y_seg_start = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    lv_coord_t out_y_seg_end   = 0;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    lv_coord_t out_x_last      = radius;
 800b0de:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800b0e2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

    lv_coord_t in_y_seg_start = 0;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    lv_coord_t in_y_seg_end   = 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    lv_coord_t in_x_last      = radius - bwidth;
 800b0f2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800b0f6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#endif

    while(cir_out.y <= cir_out.x) {
 800b102:	f000 bd74 	b.w	800bbee <lv_draw_rect_border_corner+0xd0e>

        /*Calculate the actual width to avoid overwriting pixels*/
        if(cir_in.y < cir_in.x) {
 800b106:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800b10a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800b10e:	429a      	cmp	r2, r3
 800b110:	da0e      	bge.n	800b130 <lv_draw_rect_border_corner+0x250>
            act_w1 = cir_out.x - cir_in.x;
 800b112:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800b116:	b29a      	uxth	r2, r3
 800b118:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	1ad3      	subs	r3, r2, r3
 800b120:	b29b      	uxth	r3, r3
 800b122:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
            act_w2 = act_w1;
 800b126:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800b12a:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
 800b12e:	e00f      	b.n	800b150 <lv_draw_rect_border_corner+0x270>
        } else {
            act_w1 = cir_out.x - cir_out.y;
 800b130:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800b134:	b29a      	uxth	r2, r3
 800b136:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	1ad3      	subs	r3, r2, r3
 800b13e:	b29b      	uxth	r3, r3
 800b140:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
            act_w2 = act_w1 - 1;
 800b144:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800b148:	3b01      	subs	r3, #1
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
        }

#if LV_ANTIALIAS
        if(aa) {
 800b150:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800b154:	2b00      	cmp	r3, #0
 800b156:	f000 8340 	beq.w	800b7da <lv_draw_rect_border_corner+0x8fa>
            /*New step in y on the outter circle*/
            if(out_x_last != cir_out.x) {
 800b15a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800b15e:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	@ 0x6c
 800b162:	429a      	cmp	r2, r3
 800b164:	f000 817b 	beq.w	800b45e <lv_draw_rect_border_corner+0x57e>
                out_y_seg_end       = cir_out.y;
 800b168:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b16a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
                lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800b16e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 800b172:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	b29b      	uxth	r3, r3
 800b17a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                lv_point_t aa_p;

                aa_p.x = out_x_last;
 800b17e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b182:	833b      	strh	r3, [r7, #24]
                aa_p.y = out_y_seg_start;
 800b184:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b188:	837b      	strh	r3, [r7, #26]

                lv_coord_t i;
                for(i = 0; i < seg_size; i++) {
 800b18a:	2300      	movs	r3, #0
 800b18c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800b190:	e157      	b.n	800b442 <lv_draw_rect_border_corner+0x562>
                    lv_opa_t aa_opa;

                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b192:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800b196:	2b01      	cmp	r3, #1
 800b198:	dd0c      	ble.n	800b1b4 <lv_draw_rect_border_corner+0x2d4>
                                                                           on the first segment*/
                        aa_opa = antialias_get_opa_circ(seg_size, i, opa);
 800b19a:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 800b19e:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	@ 0x66
 800b1a2:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f002 f81e 	bl	800d1e8 <antialias_get_opa_circ>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 800b1b2:	e00f      	b.n	800b1d4 <lv_draw_rect_border_corner+0x2f4>
                    } else {
                        aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800b1b4:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 800b1b8:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	@ 0x66
 800b1bc:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fc fe7b 	bl	8007ebc <lv_draw_aa_get_opa>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800b1ce:	1a9b      	subs	r3, r3, r2
 800b1d0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b1d4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b1d8:	f003 0301 	and.w	r3, r3, #1
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d045      	beq.n	800b26c <lv_draw_rect_border_corner+0x38c>
 800b1e0:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b1e4:	f003 0308 	and.w	r3, r3, #8
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d03f      	beq.n	800b26c <lv_draw_rect_border_corner+0x38c>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b1ec:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	4413      	add	r3, r2
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	b218      	sxth	r0, r3
 800b202:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b206:	b29a      	uxth	r2, r3
 800b208:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	4413      	add	r3, r2
 800b210:	b29a      	uxth	r2, r3
 800b212:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b216:	4413      	add	r3, r2
 800b218:	b29b      	uxth	r3, r3
 800b21a:	b219      	sxth	r1, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800b222:	9200      	str	r2, [sp, #0]
 800b224:	895b      	ldrh	r3, [r3, #10]
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	f7fc ff06 	bl	8008038 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800b22c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800b230:	b29a      	uxth	r2, r3
 800b232:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b236:	b29b      	uxth	r3, r3
 800b238:	4413      	add	r3, r2
 800b23a:	b29a      	uxth	r2, r3
 800b23c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b240:	4413      	add	r3, r2
 800b242:	b29b      	uxth	r3, r3
 800b244:	b218      	sxth	r0, r3
 800b246:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b24a:	b29a      	uxth	r2, r3
 800b24c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b250:	b29b      	uxth	r3, r3
 800b252:	4413      	add	r3, r2
 800b254:	b29b      	uxth	r3, r3
 800b256:	3301      	adds	r3, #1
 800b258:	b29b      	uxth	r3, r3
 800b25a:	b219      	sxth	r1, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800b262:	9200      	str	r2, [sp, #0]
 800b264:	895b      	ldrh	r3, [r3, #10]
 800b266:	68ba      	ldr	r2, [r7, #8]
 800b268:	f7fc fee6 	bl	8008038 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b26c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b270:	f003 0301 	and.w	r3, r3, #1
 800b274:	2b00      	cmp	r3, #0
 800b276:	d045      	beq.n	800b304 <lv_draw_rect_border_corner+0x424>
 800b278:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b27c:	f003 0304 	and.w	r3, r3, #4
 800b280:	2b00      	cmp	r3, #0
 800b282:	d03f      	beq.n	800b304 <lv_draw_rect_border_corner+0x424>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800b284:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800b288:	b29a      	uxth	r2, r3
 800b28a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b28e:	b29b      	uxth	r3, r3
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	b29a      	uxth	r2, r3
 800b294:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b298:	1ad3      	subs	r3, r2, r3
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	b218      	sxth	r0, r3
 800b29e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	4413      	add	r3, r2
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	b219      	sxth	r1, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800b2ba:	9200      	str	r2, [sp, #0]
 800b2bc:	895b      	ldrh	r3, [r3, #10]
 800b2be:	68ba      	ldr	r2, [r7, #8]
 800b2c0:	f7fc feba 	bl	8008038 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800b2c4:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	1ad3      	subs	r3, r2, r3
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	b218      	sxth	r0, r3
 800b2da:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	4413      	add	r3, r2
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b2ee:	4413      	add	r3, r2
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	b219      	sxth	r1, r3
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800b2fa:	9200      	str	r2, [sp, #0]
 800b2fc:	895b      	ldrh	r3, [r3, #10]
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	f7fc fe9a 	bl	8008038 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b304:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b308:	f003 0302 	and.w	r3, r3, #2
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d045      	beq.n	800b39c <lv_draw_rect_border_corner+0x4bc>
 800b310:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b314:	f003 0304 	and.w	r3, r3, #4
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d03f      	beq.n	800b39c <lv_draw_rect_border_corner+0x4bc>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b31c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800b320:	b29a      	uxth	r2, r3
 800b322:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b326:	b29b      	uxth	r3, r3
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	3b01      	subs	r3, #1
 800b32e:	b29b      	uxth	r3, r3
 800b330:	b218      	sxth	r0, r3
 800b332:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800b336:	b29a      	uxth	r2, r3
 800b338:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	b29a      	uxth	r2, r3
 800b342:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b346:	1ad3      	subs	r3, r2, r3
 800b348:	b29b      	uxth	r3, r3
 800b34a:	b219      	sxth	r1, r3
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800b352:	9200      	str	r2, [sp, #0]
 800b354:	895b      	ldrh	r3, [r3, #10]
 800b356:	68ba      	ldr	r2, [r7, #8]
 800b358:	f7fc fe6e 	bl	8008038 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800b35c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800b360:	b29a      	uxth	r2, r3
 800b362:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b366:	b29b      	uxth	r3, r3
 800b368:	1ad3      	subs	r3, r2, r3
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b370:	1ad3      	subs	r3, r2, r3
 800b372:	b29b      	uxth	r3, r3
 800b374:	b218      	sxth	r0, r3
 800b376:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b380:	b29b      	uxth	r3, r3
 800b382:	1ad3      	subs	r3, r2, r3
 800b384:	b29b      	uxth	r3, r3
 800b386:	3b01      	subs	r3, #1
 800b388:	b29b      	uxth	r3, r3
 800b38a:	b219      	sxth	r1, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800b392:	9200      	str	r2, [sp, #0]
 800b394:	895b      	ldrh	r3, [r3, #10]
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	f7fc fe4e 	bl	8008038 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b39c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b3a0:	f003 0302 	and.w	r3, r3, #2
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d045      	beq.n	800b434 <lv_draw_rect_border_corner+0x554>
 800b3a8:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b3ac:	f003 0308 	and.w	r3, r3, #8
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d03f      	beq.n	800b434 <lv_draw_rect_border_corner+0x554>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800b3b4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	4413      	add	r3, r2
 800b3c2:	b29a      	uxth	r2, r3
 800b3c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b3c8:	4413      	add	r3, r2
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	b218      	sxth	r0, r3
 800b3ce:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	b219      	sxth	r1, r3
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800b3ea:	9200      	str	r2, [sp, #0]
 800b3ec:	895b      	ldrh	r3, [r3, #10]
 800b3ee:	68ba      	ldr	r2, [r7, #8]
 800b3f0:	f7fc fe22 	bl	8008038 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800b3f4:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	4413      	add	r3, r2
 800b402:	b29b      	uxth	r3, r3
 800b404:	3301      	adds	r3, #1
 800b406:	b29b      	uxth	r3, r3
 800b408:	b218      	sxth	r0, r3
 800b40a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800b40e:	b29a      	uxth	r2, r3
 800b410:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b414:	b29b      	uxth	r3, r3
 800b416:	1ad3      	subs	r3, r2, r3
 800b418:	b29a      	uxth	r2, r3
 800b41a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b41e:	1ad3      	subs	r3, r2, r3
 800b420:	b29b      	uxth	r3, r3
 800b422:	b219      	sxth	r1, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 800b42a:	9200      	str	r2, [sp, #0]
 800b42c:	895b      	ldrh	r3, [r3, #10]
 800b42e:	68ba      	ldr	r2, [r7, #8]
 800b430:	f7fc fe02 	bl	8008038 <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
 800b434:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 800b438:	b29b      	uxth	r3, r3
 800b43a:	3301      	adds	r3, #1
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800b442:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	@ 0x66
 800b446:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800b44a:	429a      	cmp	r2, r3
 800b44c:	f6ff aea1 	blt.w	800b192 <lv_draw_rect_border_corner+0x2b2>
                                   style->body.border.color, aa_opa);
                    }
                }

                out_x_last      = cir_out.x;
 800b450:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b452:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
                out_y_seg_start = out_y_seg_end;
 800b456:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800b45a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
            }

            /*New step in y on the inner circle*/
            if(in_x_last != cir_in.x) {
 800b45e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800b462:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	@ 0x68
 800b466:	429a      	cmp	r2, r3
 800b468:	f000 81b7 	beq.w	800b7da <lv_draw_rect_border_corner+0x8fa>
                in_y_seg_end        = cir_out.y;
 800b46c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800b46e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
                lv_coord_t seg_size = in_y_seg_end - in_y_seg_start;
 800b472:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800b476:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800b47a:	1ad3      	subs	r3, r2, r3
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
                lv_point_t aa_p;

                aa_p.x = in_x_last;
 800b482:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800b486:	82bb      	strh	r3, [r7, #20]
                aa_p.y = in_y_seg_start;
 800b488:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800b48c:	82fb      	strh	r3, [r7, #22]

                lv_coord_t i;
                for(i = 0; i < seg_size; i++) {
 800b48e:	2300      	movs	r3, #0
 800b490:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b494:	e193      	b.n	800b7be <lv_draw_rect_border_corner+0x8de>
                    lv_opa_t aa_opa;

                    if(seg_size > CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD) { /*Use non-linear opa mapping
 800b496:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	dd10      	ble.n	800b4c0 <lv_draw_rect_border_corner+0x5e0>
                                                                           on the first segment*/
                        aa_opa = opa - antialias_get_opa_circ(seg_size, i, opa);
 800b49e:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 800b4a2:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	@ 0x62
 800b4a6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f001 fe9c 	bl	800d1e8 <antialias_get_opa_circ>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800b4b8:	1a9b      	subs	r3, r3, r2
 800b4ba:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 800b4be:	e00b      	b.n	800b4d8 <lv_draw_rect_border_corner+0x5f8>
                    } else {
                        aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800b4c0:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 800b4c4:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	@ 0x62
 800b4c8:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f7fc fcf5 	bl	8007ebc <lv_draw_aa_get_opa>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b4d8:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d025      	beq.n	800b530 <lv_draw_rect_border_corner+0x650>
 800b4e4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b4e8:	f003 0308 	and.w	r3, r3, #8
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d01f      	beq.n	800b530 <lv_draw_rect_border_corner+0x650>
                        lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800b4f0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	4413      	add	r3, r2
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	3b01      	subs	r3, #1
 800b502:	b29b      	uxth	r3, r3
 800b504:	b218      	sxth	r0, r3
 800b506:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b510:	b29b      	uxth	r3, r3
 800b512:	4413      	add	r3, r2
 800b514:	b29a      	uxth	r2, r3
 800b516:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b51a:	4413      	add	r3, r2
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	b219      	sxth	r1, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 800b526:	9200      	str	r2, [sp, #0]
 800b528:	895b      	ldrh	r3, [r3, #10]
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	f7fc fd84 	bl	8008038 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b530:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b534:	f003 0301 	and.w	r3, r3, #1
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d025      	beq.n	800b588 <lv_draw_rect_border_corner+0x6a8>
 800b53c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b540:	f003 0304 	and.w	r3, r3, #4
 800b544:	2b00      	cmp	r3, #0
 800b546:	d01f      	beq.n	800b588 <lv_draw_rect_border_corner+0x6a8>
                        lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800b548:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b552:	b29b      	uxth	r3, r3
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	b29a      	uxth	r2, r3
 800b558:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b55c:	1ad3      	subs	r3, r2, r3
 800b55e:	b29b      	uxth	r3, r3
 800b560:	b218      	sxth	r0, r3
 800b562:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800b566:	b29a      	uxth	r2, r3
 800b568:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	4413      	add	r3, r2
 800b570:	b29b      	uxth	r3, r3
 800b572:	3b01      	subs	r3, #1
 800b574:	b29b      	uxth	r3, r3
 800b576:	b219      	sxth	r1, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 800b57e:	9200      	str	r2, [sp, #0]
 800b580:	895b      	ldrh	r3, [r3, #10]
 800b582:	68ba      	ldr	r2, [r7, #8]
 800b584:	f7fc fd58 	bl	8008038 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b588:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b58c:	f003 0302 	and.w	r3, r3, #2
 800b590:	2b00      	cmp	r3, #0
 800b592:	d025      	beq.n	800b5e0 <lv_draw_rect_border_corner+0x700>
 800b594:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b598:	f003 0304 	and.w	r3, r3, #4
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d01f      	beq.n	800b5e0 <lv_draw_rect_border_corner+0x700>
                        lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800b5a0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	1ad3      	subs	r3, r2, r3
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	b29b      	uxth	r3, r3
 800b5b4:	b218      	sxth	r0, r3
 800b5b6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	b29a      	uxth	r2, r3
 800b5c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	b219      	sxth	r1, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 800b5d6:	9200      	str	r2, [sp, #0]
 800b5d8:	895b      	ldrh	r3, [r3, #10]
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	f7fc fd2c 	bl	8008038 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b5e0:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b5e4:	f003 0302 	and.w	r3, r3, #2
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d025      	beq.n	800b638 <lv_draw_rect_border_corner+0x758>
 800b5ec:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b5f0:	f003 0308 	and.w	r3, r3, #8
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d01f      	beq.n	800b638 <lv_draw_rect_border_corner+0x758>
                        lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800b5f8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b602:	b29b      	uxth	r3, r3
 800b604:	4413      	add	r3, r2
 800b606:	b29a      	uxth	r2, r3
 800b608:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b60c:	4413      	add	r3, r2
 800b60e:	b29b      	uxth	r3, r3
 800b610:	b218      	sxth	r0, r3
 800b612:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800b616:	b29a      	uxth	r2, r3
 800b618:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	b29b      	uxth	r3, r3
 800b622:	3301      	adds	r3, #1
 800b624:	b29b      	uxth	r3, r3
 800b626:	b219      	sxth	r1, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 800b62e:	9200      	str	r2, [sp, #0]
 800b630:	895b      	ldrh	r3, [r3, #10]
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	f7fc fd00 	bl	8008038 <lv_draw_px>
                                   style->body.border.color, aa_opa);
                    }

                    /*Be sure the pixels on the middle are not drawn twice*/
                    if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800b638:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b63c:	1e5a      	subs	r2, r3, #1
 800b63e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b642:	4619      	mov	r1, r3
 800b644:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 800b648:	440b      	add	r3, r1
 800b64a:	429a      	cmp	r2, r3
 800b64c:	f000 80b0 	beq.w	800b7b0 <lv_draw_rect_border_corner+0x8d0>
                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b650:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b654:	f003 0301 	and.w	r3, r3, #1
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d025      	beq.n	800b6a8 <lv_draw_rect_border_corner+0x7c8>
 800b65c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b660:	f003 0308 	and.w	r3, r3, #8
 800b664:	2b00      	cmp	r3, #0
 800b666:	d01f      	beq.n	800b6a8 <lv_draw_rect_border_corner+0x7c8>
                            lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1,
 800b668:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b672:	b29b      	uxth	r3, r3
 800b674:	4413      	add	r3, r2
 800b676:	b29a      	uxth	r2, r3
 800b678:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b67c:	4413      	add	r3, r2
 800b67e:	b29b      	uxth	r3, r3
 800b680:	b218      	sxth	r0, r3
 800b682:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b686:	b29a      	uxth	r2, r3
 800b688:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	4413      	add	r3, r2
 800b690:	b29b      	uxth	r3, r3
 800b692:	3b01      	subs	r3, #1
 800b694:	b29b      	uxth	r3, r3
 800b696:	b219      	sxth	r1, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 800b69e:	9200      	str	r2, [sp, #0]
 800b6a0:	895b      	ldrh	r3, [r3, #10]
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	f7fc fcc8 	bl	8008038 <lv_draw_px>
                                       mask, style->body.border.color, aa_opa);
                        }

                        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b6a8:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b6ac:	f003 0301 	and.w	r3, r3, #1
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d025      	beq.n	800b700 <lv_draw_rect_border_corner+0x820>
 800b6b4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b6b8:	f003 0304 	and.w	r3, r3, #4
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d01f      	beq.n	800b700 <lv_draw_rect_border_corner+0x820>
                            lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i,
 800b6c0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	1ad3      	subs	r3, r2, r3
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	b218      	sxth	r0, r3
 800b6d6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b6e0:	b29b      	uxth	r3, r3
 800b6e2:	4413      	add	r3, r2
 800b6e4:	b29a      	uxth	r2, r3
 800b6e6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b6ea:	4413      	add	r3, r2
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	b219      	sxth	r1, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 800b6f6:	9200      	str	r2, [sp, #0]
 800b6f8:	895b      	ldrh	r3, [r3, #10]
 800b6fa:	68ba      	ldr	r2, [r7, #8]
 800b6fc:	f7fc fc9c 	bl	8008038 <lv_draw_px>
                                       mask, style->body.border.color, aa_opa);
                        }

                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b700:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b704:	f003 0302 	and.w	r3, r3, #2
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d025      	beq.n	800b758 <lv_draw_rect_border_corner+0x878>
 800b70c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b710:	f003 0304 	and.w	r3, r3, #4
 800b714:	2b00      	cmp	r3, #0
 800b716:	d01f      	beq.n	800b758 <lv_draw_rect_border_corner+0x878>
                            lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1,
 800b718:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b722:	b29b      	uxth	r3, r3
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	b29a      	uxth	r2, r3
 800b728:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	b29b      	uxth	r3, r3
 800b730:	b218      	sxth	r0, r3
 800b732:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800b736:	b29a      	uxth	r2, r3
 800b738:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	b29b      	uxth	r3, r3
 800b742:	3301      	adds	r3, #1
 800b744:	b29b      	uxth	r3, r3
 800b746:	b219      	sxth	r1, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 800b74e:	9200      	str	r2, [sp, #0]
 800b750:	895b      	ldrh	r3, [r3, #10]
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	f7fc fc70 	bl	8008038 <lv_draw_px>
                                       mask, style->body.border.color, aa_opa);
                        }

                        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800b758:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b75c:	f003 0302 	and.w	r3, r3, #2
 800b760:	2b00      	cmp	r3, #0
 800b762:	d025      	beq.n	800b7b0 <lv_draw_rect_border_corner+0x8d0>
 800b764:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b768:	f003 0308 	and.w	r3, r3, #8
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d01f      	beq.n	800b7b0 <lv_draw_rect_border_corner+0x8d0>
                            lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i,
 800b770:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800b774:	b29a      	uxth	r2, r3
 800b776:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	4413      	add	r3, r2
 800b77e:	b29b      	uxth	r3, r3
 800b780:	3b01      	subs	r3, #1
 800b782:	b29b      	uxth	r3, r3
 800b784:	b218      	sxth	r0, r3
 800b786:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800b78a:	b29a      	uxth	r2, r3
 800b78c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b790:	b29b      	uxth	r3, r3
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	b29a      	uxth	r2, r3
 800b796:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	b219      	sxth	r1, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 800b7a6:	9200      	str	r2, [sp, #0]
 800b7a8:	895b      	ldrh	r3, [r3, #10]
 800b7aa:	68ba      	ldr	r2, [r7, #8]
 800b7ac:	f7fc fc44 	bl	8008038 <lv_draw_px>
                for(i = 0; i < seg_size; i++) {
 800b7b0:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b7be:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	@ 0x62
 800b7c2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	f6ff ae65 	blt.w	800b496 <lv_draw_rect_border_corner+0x5b6>
                                       mask, style->body.border.color, aa_opa);
                        }
                    }
                }

                in_x_last      = cir_in.x;
 800b7cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b7ce:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
                in_y_seg_start = in_y_seg_end;
 800b7d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800b7d6:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
            }
        }
#endif

        /*Draw the octets to the right bottom corner*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800b7da:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b7de:	f003 0301 	and.w	r3, r3, #1
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d06f      	beq.n	800b8c6 <lv_draw_rect_border_corner+0x9e6>
 800b7e6:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b7ea:	f003 0308 	and.w	r3, r3, #8
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d069      	beq.n	800b8c6 <lv_draw_rect_border_corner+0x9e6>
            circ_area.x1 = rb_origo.x + LV_CIRC_OCT1_X(cir_out) - act_w2;
 800b7f2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	4413      	add	r3, r2
 800b800:	b29a      	uxth	r2, r3
 800b802:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	b29b      	uxth	r3, r3
 800b80a:	b21b      	sxth	r3, r3
 800b80c:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT1_X(cir_out);
 800b80e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800b812:	b29a      	uxth	r2, r3
 800b814:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800b818:	b29b      	uxth	r3, r3
 800b81a:	4413      	add	r3, r2
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	b21b      	sxth	r3, r3
 800b820:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800b822:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b826:	b29a      	uxth	r2, r3
 800b828:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	4413      	add	r3, r2
 800b830:	b29b      	uxth	r3, r3
 800b832:	b21b      	sxth	r3, r3
 800b834:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT1_Y(cir_out);
 800b836:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800b840:	b29b      	uxth	r3, r3
 800b842:	4413      	add	r3, r2
 800b844:	b29b      	uxth	r3, r3
 800b846:	b21b      	sxth	r3, r3
 800b848:	847b      	strh	r3, [r7, #34]	@ 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800b84a:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800b84e:	f107 001c 	add.w	r0, r7, #28
 800b852:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800b856:	68b9      	ldr	r1, [r7, #8]
 800b858:	f7fc fc86 	bl	8008168 <lv_draw_fill>

            circ_area.x1 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800b85c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800b860:	b29a      	uxth	r2, r3
 800b862:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800b866:	b29b      	uxth	r3, r3
 800b868:	4413      	add	r3, r2
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	b21b      	sxth	r3, r3
 800b86e:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = rb_origo.x + LV_CIRC_OCT2_X(cir_out);
 800b870:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800b874:	b29a      	uxth	r2, r3
 800b876:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	4413      	add	r3, r2
 800b87e:	b29b      	uxth	r3, r3
 800b880:	b21b      	sxth	r3, r3
 800b882:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out) - act_w1;
 800b884:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b888:	b29a      	uxth	r2, r3
 800b88a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800b88e:	b29b      	uxth	r3, r3
 800b890:	4413      	add	r3, r2
 800b892:	b29a      	uxth	r2, r3
 800b894:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	b21b      	sxth	r3, r3
 800b89e:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = rb_origo.y + LV_CIRC_OCT2_Y(cir_out);
 800b8a0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	4413      	add	r3, r2
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	b21b      	sxth	r3, r3
 800b8b2:	847b      	strh	r3, [r7, #34]	@ 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800b8b4:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800b8b8:	f107 001c 	add.w	r0, r7, #28
 800b8bc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800b8c0:	68b9      	ldr	r1, [r7, #8]
 800b8c2:	f7fc fc51 	bl	8008168 <lv_draw_fill>
        }

        /*Draw the octets to the left bottom corner*/
        if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800b8c6:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b8ca:	f003 0301 	and.w	r3, r3, #1
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d06f      	beq.n	800b9b2 <lv_draw_rect_border_corner+0xad2>
 800b8d2:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b8d6:	f003 0304 	and.w	r3, r3, #4
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d069      	beq.n	800b9b2 <lv_draw_rect_border_corner+0xad2>
            circ_area.x1 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800b8de:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	b21b      	sxth	r3, r3
 800b8f0:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT3_X(cir_out);
 800b8f2:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	b29b      	uxth	r3, r3
 800b902:	b21b      	sxth	r3, r3
 800b904:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out) - act_w2;
 800b906:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800b90a:	b29a      	uxth	r2, r3
 800b90c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800b910:	b29b      	uxth	r3, r3
 800b912:	4413      	add	r3, r2
 800b914:	b29a      	uxth	r2, r3
 800b916:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	b21b      	sxth	r3, r3
 800b920:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT3_Y(cir_out);
 800b922:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800b926:	b29a      	uxth	r2, r3
 800b928:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	4413      	add	r3, r2
 800b930:	b29b      	uxth	r3, r3
 800b932:	b21b      	sxth	r3, r3
 800b934:	847b      	strh	r3, [r7, #34]	@ 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800b936:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800b93a:	f107 001c 	add.w	r0, r7, #28
 800b93e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800b942:	68b9      	ldr	r1, [r7, #8]
 800b944:	f7fc fc10 	bl	8008168 <lv_draw_fill>

            circ_area.x1 = lb_origo.x + LV_CIRC_OCT4_X(cir_out);
 800b948:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800b952:	b29b      	uxth	r3, r3
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	b29b      	uxth	r3, r3
 800b958:	b21b      	sxth	r3, r3
 800b95a:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = lb_origo.x + LV_CIRC_OCT4_X(cir_out) + act_w1;
 800b95c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800b960:	b29a      	uxth	r2, r3
 800b962:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800b966:	b29b      	uxth	r3, r3
 800b968:	1ad3      	subs	r3, r2, r3
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800b970:	4413      	add	r3, r2
 800b972:	b29b      	uxth	r3, r3
 800b974:	b21b      	sxth	r3, r3
 800b976:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800b978:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800b982:	b29b      	uxth	r3, r3
 800b984:	4413      	add	r3, r2
 800b986:	b29b      	uxth	r3, r3
 800b988:	b21b      	sxth	r3, r3
 800b98a:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = lb_origo.y + LV_CIRC_OCT4_Y(cir_out);
 800b98c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800b990:	b29a      	uxth	r2, r3
 800b992:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800b996:	b29b      	uxth	r3, r3
 800b998:	4413      	add	r3, r2
 800b99a:	b29b      	uxth	r3, r3
 800b99c:	b21b      	sxth	r3, r3
 800b99e:	847b      	strh	r3, [r7, #34]	@ 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800b9a0:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800b9a4:	f107 001c 	add.w	r0, r7, #28
 800b9a8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800b9ac:	68b9      	ldr	r1, [r7, #8]
 800b9ae:	f7fc fbdb 	bl	8008168 <lv_draw_fill>
        }

        /*Draw the octets to the left top corner*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800b9b2:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b9b6:	f003 0302 	and.w	r3, r3, #2
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d07d      	beq.n	800baba <lv_draw_rect_border_corner+0xbda>
 800b9be:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800b9c2:	f003 0304 	and.w	r3, r3, #4
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d077      	beq.n	800baba <lv_draw_rect_border_corner+0xbda>
            if(lb_origo.y + LV_CIRC_OCT4_Y(cir_out) > lt_origo.y + LV_CIRC_OCT5_Y(cir_out)) {
 800b9ca:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800b9d4:	441a      	add	r2, r3
 800b9d6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800b9da:	4619      	mov	r1, r3
 800b9dc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800b9e0:	1acb      	subs	r3, r1, r3
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	dd34      	ble.n	800ba50 <lv_draw_rect_border_corner+0xb70>
                /*Don't draw if the lines are common in the middle*/
                circ_area.x1 = lt_origo.x + LV_CIRC_OCT5_X(cir_out);
 800b9e6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	b21b      	sxth	r3, r3
 800b9f8:	83bb      	strh	r3, [r7, #28]
                circ_area.x2 = lt_origo.x + LV_CIRC_OCT5_X(cir_out) + act_w2;
 800b9fa:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800b9fe:	b29a      	uxth	r2, r3
 800ba00:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	1ad3      	subs	r3, r2, r3
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 800ba0e:	4413      	add	r3, r2
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	b21b      	sxth	r3, r3
 800ba14:	843b      	strh	r3, [r7, #32]
                circ_area.y1 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800ba16:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	1ad3      	subs	r3, r2, r3
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	b21b      	sxth	r3, r3
 800ba28:	83fb      	strh	r3, [r7, #30]
                circ_area.y2 = lt_origo.y + LV_CIRC_OCT5_Y(cir_out);
 800ba2a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800ba2e:	b29a      	uxth	r2, r3
 800ba30:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	b21b      	sxth	r3, r3
 800ba3c:	847b      	strh	r3, [r7, #34]	@ 0x22
                lv_draw_fill(&circ_area, mask, color, opa);
 800ba3e:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800ba42:	f107 001c 	add.w	r0, r7, #28
 800ba46:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800ba4a:	68b9      	ldr	r1, [r7, #8]
 800ba4c:	f7fc fb8c 	bl	8008168 <lv_draw_fill>
            }

            circ_area.x1 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800ba50:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800ba54:	b29a      	uxth	r2, r3
 800ba56:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	b21b      	sxth	r3, r3
 800ba62:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = lt_origo.x + LV_CIRC_OCT6_X(cir_out);
 800ba64:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	b21b      	sxth	r3, r3
 800ba76:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out);
 800ba78:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800ba82:	b29b      	uxth	r3, r3
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	b21b      	sxth	r3, r3
 800ba8a:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = lt_origo.y + LV_CIRC_OCT6_Y(cir_out) + act_w1;
 800ba8c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	1ad3      	subs	r3, r2, r3
 800ba9a:	b29a      	uxth	r2, r3
 800ba9c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800baa0:	4413      	add	r3, r2
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	b21b      	sxth	r3, r3
 800baa6:	847b      	strh	r3, [r7, #34]	@ 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800baa8:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800baac:	f107 001c 	add.w	r0, r7, #28
 800bab0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800bab4:	68b9      	ldr	r1, [r7, #8]
 800bab6:	f7fc fb57 	bl	8008168 <lv_draw_fill>
        }

        /*Draw the octets to the right top corner*/
        if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800baba:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800babe:	f003 0302 	and.w	r3, r3, #2
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d07d      	beq.n	800bbc2 <lv_draw_rect_border_corner+0xce2>
 800bac6:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800baca:	f003 0308 	and.w	r3, r3, #8
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d077      	beq.n	800bbc2 <lv_draw_rect_border_corner+0xce2>
            circ_area.x1 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800bad2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800badc:	b29b      	uxth	r3, r3
 800bade:	4413      	add	r3, r2
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	b21b      	sxth	r3, r3
 800bae4:	83bb      	strh	r3, [r7, #28]
            circ_area.x2 = rt_origo.x + LV_CIRC_OCT7_X(cir_out);
 800bae6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800baea:	b29a      	uxth	r2, r3
 800baec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	4413      	add	r3, r2
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	b21b      	sxth	r3, r3
 800baf8:	843b      	strh	r3, [r7, #32]
            circ_area.y1 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out);
 800bafa:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	1ad3      	subs	r3, r2, r3
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	b21b      	sxth	r3, r3
 800bb0c:	83fb      	strh	r3, [r7, #30]
            circ_area.y2 = rt_origo.y + LV_CIRC_OCT7_Y(cir_out) + act_w2;
 800bb0e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800bb12:	b29a      	uxth	r2, r3
 800bb14:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	b29a      	uxth	r2, r3
 800bb1e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 800bb22:	4413      	add	r3, r2
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	b21b      	sxth	r3, r3
 800bb28:	847b      	strh	r3, [r7, #34]	@ 0x22
            lv_draw_fill(&circ_area, mask, color, opa);
 800bb2a:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800bb2e:	f107 001c 	add.w	r0, r7, #28
 800bb32:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800bb36:	68b9      	ldr	r1, [r7, #8]
 800bb38:	f7fc fb16 	bl	8008168 <lv_draw_fill>

            /*Don't draw if the lines are common in the middle*/
            if(rb_origo.y + LV_CIRC_OCT1_Y(cir_out) > rt_origo.y + LV_CIRC_OCT8_Y(cir_out)) {
 800bb3c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800bb40:	461a      	mov	r2, r3
 800bb42:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800bb46:	441a      	add	r2, r3
 800bb48:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800bb52:	1acb      	subs	r3, r1, r3
 800bb54:	429a      	cmp	r2, r3
 800bb56:	dd34      	ble.n	800bbc2 <lv_draw_rect_border_corner+0xce2>
                circ_area.x1 = rt_origo.x + LV_CIRC_OCT8_X(cir_out) - act_w1;
 800bb58:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	4413      	add	r3, r2
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800bb6c:	1ad3      	subs	r3, r2, r3
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	b21b      	sxth	r3, r3
 800bb72:	83bb      	strh	r3, [r7, #28]
                circ_area.x2 = rt_origo.x + LV_CIRC_OCT8_X(cir_out);
 800bb74:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	4413      	add	r3, r2
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	b21b      	sxth	r3, r3
 800bb86:	843b      	strh	r3, [r7, #32]
                circ_area.y1 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800bb88:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	1ad3      	subs	r3, r2, r3
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	b21b      	sxth	r3, r3
 800bb9a:	83fb      	strh	r3, [r7, #30]
                circ_area.y2 = rt_origo.y + LV_CIRC_OCT8_Y(cir_out);
 800bb9c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	1ad3      	subs	r3, r2, r3
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	b21b      	sxth	r3, r3
 800bbae:	847b      	strh	r3, [r7, #34]	@ 0x22
                lv_draw_fill(&circ_area, mask, color, opa);
 800bbb0:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800bbb4:	f107 001c 	add.w	r0, r7, #28
 800bbb8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800bbbc:	68b9      	ldr	r1, [r7, #8]
 800bbbe:	f7fc fad3 	bl	8008168 <lv_draw_fill>
            }
        }
        lv_circ_next(&cir_out, &tmp_out);
 800bbc2:	f107 022e 	add.w	r2, r7, #46	@ 0x2e
 800bbc6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bbca:	4611      	mov	r1, r2
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f003 fe08 	bl	800f7e2 <lv_circ_next>

        /*The internal circle will be ready faster
         * so check it! */
        if(cir_in.y < cir_in.x) {
 800bbd2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800bbd6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	da07      	bge.n	800bbee <lv_draw_rect_border_corner+0xd0e>
            lv_circ_next(&cir_in, &tmp_in);
 800bbde:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 800bbe2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800bbe6:	4611      	mov	r1, r2
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f003 fdfa 	bl	800f7e2 <lv_circ_next>
    while(cir_out.y <= cir_out.x) {
 800bbee:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 800bbf2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	f77f aa85 	ble.w	800b106 <lv_draw_rect_border_corner+0x226>
        }
    }

#if LV_ANTIALIAS
    if(aa) {
 800bbfc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	f000 83b0 	beq.w	800c366 <lv_draw_rect_border_corner+0x1486>
        /*Last parts of the outer anti-alias*/
        out_y_seg_end       = cir_out.y;
 800bc06:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800bc08:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
        lv_coord_t seg_size = out_y_seg_end - out_y_seg_start;
 800bc0c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 800bc10:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
        lv_point_t aa_p;

        aa_p.x = out_x_last;
 800bc1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bc20:	823b      	strh	r3, [r7, #16]
        aa_p.y = out_y_seg_start;
 800bc22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800bc26:	827b      	strh	r3, [r7, #18]

        lv_coord_t i;
        for(i = 0; i < seg_size; i++) {
 800bc28:	2300      	movs	r3, #0
 800bc2a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800bc2e:	e146      	b.n	800bebe <lv_draw_rect_border_corner+0xfde>
            lv_opa_t aa_opa = opa - lv_draw_aa_get_opa(seg_size, i, opa);
 800bc30:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 800bc34:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	@ 0x5e
 800bc38:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7fc f93d 	bl	8007ebc <lv_draw_aa_get_opa>
 800bc42:	4603      	mov	r3, r0
 800bc44:	461a      	mov	r2, r3
 800bc46:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800bc4a:	1a9b      	subs	r3, r3, r2
 800bc4c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800bc50:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800bc54:	f003 0301 	and.w	r3, r3, #1
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d045      	beq.n	800bce8 <lv_draw_rect_border_corner+0xe08>
 800bc5c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800bc60:	f003 0308 	and.w	r3, r3, #8
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d03f      	beq.n	800bce8 <lv_draw_rect_border_corner+0xe08>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) + 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800bc68:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	4413      	add	r3, r2
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	3301      	adds	r3, #1
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	b218      	sxth	r0, r3
 800bc7e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	4413      	add	r3, r2
 800bc8c:	b29a      	uxth	r2, r3
 800bc8e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800bc92:	4413      	add	r3, r2
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	b219      	sxth	r1, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800bc9e:	9200      	str	r2, [sp, #0]
 800bca0:	895b      	ldrh	r3, [r3, #10]
 800bca2:	68ba      	ldr	r2, [r7, #8]
 800bca4:	f7fc f9c8 	bl	8008038 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) + 1, mask,
 800bca8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800bcac:	b29a      	uxth	r2, r3
 800bcae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	4413      	add	r3, r2
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800bcbc:	4413      	add	r3, r2
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	b218      	sxth	r0, r3
 800bcc2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	4413      	add	r3, r2
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	b219      	sxth	r1, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800bcde:	9200      	str	r2, [sp, #0]
 800bce0:	895b      	ldrh	r3, [r3, #10]
 800bce2:	68ba      	ldr	r2, [r7, #8]
 800bce4:	f7fc f9a8 	bl	8008038 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800bce8:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800bcec:	f003 0301 	and.w	r3, r3, #1
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d045      	beq.n	800bd80 <lv_draw_rect_border_corner+0xea0>
 800bcf4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800bcf8:	f003 0304 	and.w	r3, r3, #4
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d03f      	beq.n	800bd80 <lv_draw_rect_border_corner+0xea0>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) + 1, mask,
 800bd00:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800bd04:	b29a      	uxth	r2, r3
 800bd06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	1ad3      	subs	r3, r2, r3
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	b218      	sxth	r0, r3
 800bd1a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800bd1e:	b29a      	uxth	r2, r3
 800bd20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	4413      	add	r3, r2
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	b219      	sxth	r1, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800bd36:	9200      	str	r2, [sp, #0]
 800bd38:	895b      	ldrh	r3, [r3, #10]
 800bd3a:	68ba      	ldr	r2, [r7, #8]
 800bd3c:	f7fc f97c 	bl	8008038 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) - 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800bd40:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	1ad3      	subs	r3, r2, r3
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	3b01      	subs	r3, #1
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	b218      	sxth	r0, r3
 800bd56:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	4413      	add	r3, r2
 800bd64:	b29a      	uxth	r2, r3
 800bd66:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800bd6a:	4413      	add	r3, r2
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	b219      	sxth	r1, r3
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800bd76:	9200      	str	r2, [sp, #0]
 800bd78:	895b      	ldrh	r3, [r3, #10]
 800bd7a:	68ba      	ldr	r2, [r7, #8]
 800bd7c:	f7fc f95c 	bl	8008038 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800bd80:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800bd84:	f003 0302 	and.w	r3, r3, #2
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d045      	beq.n	800be18 <lv_draw_rect_border_corner+0xf38>
 800bd8c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800bd90:	f003 0304 	and.w	r3, r3, #4
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d03f      	beq.n	800be18 <lv_draw_rect_border_corner+0xf38>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) - 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800bd98:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800bd9c:	b29a      	uxth	r2, r3
 800bd9e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	1ad3      	subs	r3, r2, r3
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	b218      	sxth	r0, r3
 800bdae:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800bdb2:	b29a      	uxth	r2, r3
 800bdb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	1ad3      	subs	r3, r2, r3
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800bdc2:	1ad3      	subs	r3, r2, r3
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	b219      	sxth	r1, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800bdce:	9200      	str	r2, [sp, #0]
 800bdd0:	895b      	ldrh	r3, [r3, #10]
 800bdd2:	68ba      	ldr	r2, [r7, #8]
 800bdd4:	f7fc f930 	bl	8008038 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) - 1, mask,
 800bdd8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	1ad3      	subs	r3, r2, r3
 800bde6:	b29a      	uxth	r2, r3
 800bde8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	b218      	sxth	r0, r3
 800bdf2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800bdf6:	b29a      	uxth	r2, r3
 800bdf8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	1ad3      	subs	r3, r2, r3
 800be00:	b29b      	uxth	r3, r3
 800be02:	3b01      	subs	r3, #1
 800be04:	b29b      	uxth	r3, r3
 800be06:	b219      	sxth	r1, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800be0e:	9200      	str	r2, [sp, #0]
 800be10:	895b      	ldrh	r3, [r3, #10]
 800be12:	68ba      	ldr	r2, [r7, #8]
 800be14:	f7fc f910 	bl	8008038 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800be18:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800be1c:	f003 0302 	and.w	r3, r3, #2
 800be20:	2b00      	cmp	r3, #0
 800be22:	d045      	beq.n	800beb0 <lv_draw_rect_border_corner+0xfd0>
 800be24:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800be28:	f003 0308 	and.w	r3, r3, #8
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d03f      	beq.n	800beb0 <lv_draw_rect_border_corner+0xfd0>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) - 1, mask,
 800be30:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800be34:	b29a      	uxth	r2, r3
 800be36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	4413      	add	r3, r2
 800be3e:	b29a      	uxth	r2, r3
 800be40:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800be44:	4413      	add	r3, r2
 800be46:	b29b      	uxth	r3, r3
 800be48:	b218      	sxth	r0, r3
 800be4a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800be4e:	b29a      	uxth	r2, r3
 800be50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800be54:	b29b      	uxth	r3, r3
 800be56:	1ad3      	subs	r3, r2, r3
 800be58:	b29b      	uxth	r3, r3
 800be5a:	3b01      	subs	r3, #1
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	b219      	sxth	r1, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800be66:	9200      	str	r2, [sp, #0]
 800be68:	895b      	ldrh	r3, [r3, #10]
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	f7fc f8e4 	bl	8008038 <lv_draw_px>
                           style->body.border.color, aa_opa);
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) + 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800be70:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800be74:	b29a      	uxth	r2, r3
 800be76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	4413      	add	r3, r2
 800be7e:	b29b      	uxth	r3, r3
 800be80:	3301      	adds	r3, #1
 800be82:	b29b      	uxth	r3, r3
 800be84:	b218      	sxth	r0, r3
 800be86:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be90:	b29b      	uxth	r3, r3
 800be92:	1ad3      	subs	r3, r2, r3
 800be94:	b29a      	uxth	r2, r3
 800be96:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	b219      	sxth	r1, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800bea6:	9200      	str	r2, [sp, #0]
 800bea8:	895b      	ldrh	r3, [r3, #10]
 800beaa:	68ba      	ldr	r2, [r7, #8]
 800beac:	f7fc f8c4 	bl	8008038 <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
 800beb0:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	3301      	adds	r3, #1
 800beb8:	b29b      	uxth	r3, r3
 800beba:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800bebe:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 800bec2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800bec6:	429a      	cmp	r2, r3
 800bec8:	f6ff aeb2 	blt.w	800bc30 <lv_draw_rect_border_corner+0xd50>
                           style->body.border.color, aa_opa);
            }
        }

        /*In some cases the last pixel in the outer middle is not drawn*/
        if(LV_MATH_ABS(aa_p.x - aa_p.y) == seg_size) {
 800becc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bed0:	461a      	mov	r2, r3
 800bed2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800bedc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800bee0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800bee4:	429a      	cmp	r2, r3
 800bee6:	f040 80a3 	bne.w	800c030 <lv_draw_rect_border_corner+0x1150>
            aa_p.x = out_x_last;
 800beea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800beee:	823b      	strh	r3, [r7, #16]
            aa_p.y = out_x_last;
 800bef0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bef4:	827b      	strh	r3, [r7, #18]

            lv_opa_t aa_opa = opa >> 1;
 800bef6:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800befa:	085b      	lsrs	r3, r3, #1
 800befc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800bf00:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800bf04:	f003 0301 	and.w	r3, r3, #1
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d01f      	beq.n	800bf4c <lv_draw_rect_border_corner+0x106c>
 800bf0c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800bf10:	f003 0308 	and.w	r3, r3, #8
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d019      	beq.n	800bf4c <lv_draw_rect_border_corner+0x106c>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p), rb_origo.y + LV_CIRC_OCT2_Y(aa_p), mask,
 800bf18:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800bf1c:	b29a      	uxth	r2, r3
 800bf1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	4413      	add	r3, r2
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	b218      	sxth	r0, r3
 800bf2a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	4413      	add	r3, r2
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	b219      	sxth	r1, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800bf42:	9200      	str	r2, [sp, #0]
 800bf44:	895b      	ldrh	r3, [r3, #10]
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	f7fc f876 	bl	8008038 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800bf4c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800bf50:	f003 0301 	and.w	r3, r3, #1
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d01f      	beq.n	800bf98 <lv_draw_rect_border_corner+0x10b8>
 800bf58:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800bf5c:	f003 0304 	and.w	r3, r3, #4
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d019      	beq.n	800bf98 <lv_draw_rect_border_corner+0x10b8>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p), lb_origo.y + LV_CIRC_OCT4_Y(aa_p), mask,
 800bf64:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800bf68:	b29a      	uxth	r2, r3
 800bf6a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	b218      	sxth	r0, r3
 800bf76:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	4413      	add	r3, r2
 800bf84:	b29b      	uxth	r3, r3
 800bf86:	b219      	sxth	r1, r3
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800bf8e:	9200      	str	r2, [sp, #0]
 800bf90:	895b      	ldrh	r3, [r3, #10]
 800bf92:	68ba      	ldr	r2, [r7, #8]
 800bf94:	f7fc f850 	bl	8008038 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800bf98:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800bf9c:	f003 0302 	and.w	r3, r3, #2
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d01f      	beq.n	800bfe4 <lv_draw_rect_border_corner+0x1104>
 800bfa4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800bfa8:	f003 0304 	and.w	r3, r3, #4
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d019      	beq.n	800bfe4 <lv_draw_rect_border_corner+0x1104>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p), lt_origo.y + LV_CIRC_OCT6_Y(aa_p), mask,
 800bfb0:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	b29b      	uxth	r3, r3
 800bfc0:	b218      	sxth	r0, r3
 800bfc2:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	b219      	sxth	r1, r3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800bfda:	9200      	str	r2, [sp, #0]
 800bfdc:	895b      	ldrh	r3, [r3, #10]
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	f7fc f82a 	bl	8008038 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800bfe4:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800bfe8:	f003 0302 	and.w	r3, r3, #2
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d01f      	beq.n	800c030 <lv_draw_rect_border_corner+0x1150>
 800bff0:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800bff4:	f003 0308 	and.w	r3, r3, #8
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d019      	beq.n	800c030 <lv_draw_rect_border_corner+0x1150>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p), rt_origo.y + LV_CIRC_OCT8_Y(aa_p), mask,
 800bffc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800c000:	b29a      	uxth	r2, r3
 800c002:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c006:	b29b      	uxth	r3, r3
 800c008:	4413      	add	r3, r2
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	b218      	sxth	r0, r3
 800c00e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800c012:	b29a      	uxth	r2, r3
 800c014:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c018:	b29b      	uxth	r3, r3
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	b219      	sxth	r1, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800c026:	9200      	str	r2, [sp, #0]
 800c028:	895b      	ldrh	r3, [r3, #10]
 800c02a:	68ba      	ldr	r2, [r7, #8]
 800c02c:	f7fc f804 	bl	8008038 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }
        }

        /*Last parts of the inner anti-alias*/
        in_y_seg_end = cir_in.y;
 800c030:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c032:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
        aa_p.x       = in_x_last;
 800c036:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800c03a:	823b      	strh	r3, [r7, #16]
        aa_p.y       = in_y_seg_start;
 800c03c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800c040:	827b      	strh	r3, [r7, #18]
        seg_size     = in_y_seg_end - in_y_seg_start;
 800c042:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800c046:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800c04a:	1ad3      	subs	r3, r2, r3
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

        for(i = 0; i < seg_size; i++) {
 800c052:	2300      	movs	r3, #0
 800c054:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800c058:	e17e      	b.n	800c358 <lv_draw_rect_border_corner+0x1478>
            lv_opa_t aa_opa = lv_draw_aa_get_opa(seg_size, i, opa);
 800c05a:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 800c05e:	f9b7 105e 	ldrsh.w	r1, [r7, #94]	@ 0x5e
 800c062:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800c066:	4618      	mov	r0, r3
 800c068:	f7fb ff28 	bl	8007ebc <lv_draw_aa_get_opa>
 800c06c:	4603      	mov	r3, r0
 800c06e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c072:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c076:	f003 0301 	and.w	r3, r3, #1
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d025      	beq.n	800c0ca <lv_draw_rect_border_corner+0x11ea>
 800c07e:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c082:	f003 0308 	and.w	r3, r3, #8
 800c086:	2b00      	cmp	r3, #0
 800c088:	d01f      	beq.n	800c0ca <lv_draw_rect_border_corner+0x11ea>
                lv_draw_px(rb_origo.x + LV_CIRC_OCT1_X(aa_p) - 1, rb_origo.y + LV_CIRC_OCT1_Y(aa_p) + i, mask,
 800c08a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800c08e:	b29a      	uxth	r2, r3
 800c090:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c094:	b29b      	uxth	r3, r3
 800c096:	4413      	add	r3, r2
 800c098:	b29b      	uxth	r3, r3
 800c09a:	3b01      	subs	r3, #1
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	b218      	sxth	r0, r3
 800c0a0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	4413      	add	r3, r2
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c0b4:	4413      	add	r3, r2
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	b219      	sxth	r1, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800c0c0:	9200      	str	r2, [sp, #0]
 800c0c2:	895b      	ldrh	r3, [r3, #10]
 800c0c4:	68ba      	ldr	r2, [r7, #8]
 800c0c6:	f7fb ffb7 	bl	8008038 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c0ca:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c0ce:	f003 0301 	and.w	r3, r3, #1
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d025      	beq.n	800c122 <lv_draw_rect_border_corner+0x1242>
 800c0d6:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c0da:	f003 0304 	and.w	r3, r3, #4
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d01f      	beq.n	800c122 <lv_draw_rect_border_corner+0x1242>
                lv_draw_px(lb_origo.x + LV_CIRC_OCT3_X(aa_p) - i, lb_origo.y + LV_CIRC_OCT3_Y(aa_p) - 1, mask,
 800c0e2:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	1ad3      	subs	r3, r2, r3
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c0f6:	1ad3      	subs	r3, r2, r3
 800c0f8:	b29b      	uxth	r3, r3
 800c0fa:	b218      	sxth	r0, r3
 800c0fc:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800c100:	b29a      	uxth	r2, r3
 800c102:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c106:	b29b      	uxth	r3, r3
 800c108:	4413      	add	r3, r2
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	3b01      	subs	r3, #1
 800c10e:	b29b      	uxth	r3, r3
 800c110:	b219      	sxth	r1, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800c118:	9200      	str	r2, [sp, #0]
 800c11a:	895b      	ldrh	r3, [r3, #10]
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	f7fb ff8b 	bl	8008038 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c122:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c126:	f003 0302 	and.w	r3, r3, #2
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d025      	beq.n	800c17a <lv_draw_rect_border_corner+0x129a>
 800c12e:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c132:	f003 0304 	and.w	r3, r3, #4
 800c136:	2b00      	cmp	r3, #0
 800c138:	d01f      	beq.n	800c17a <lv_draw_rect_border_corner+0x129a>
                lv_draw_px(lt_origo.x + LV_CIRC_OCT5_X(aa_p) + 1, lt_origo.y + LV_CIRC_OCT5_Y(aa_p) - i, mask,
 800c13a:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800c13e:	b29a      	uxth	r2, r3
 800c140:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c144:	b29b      	uxth	r3, r3
 800c146:	1ad3      	subs	r3, r2, r3
 800c148:	b29b      	uxth	r3, r3
 800c14a:	3301      	adds	r3, #1
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	b218      	sxth	r0, r3
 800c150:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800c154:	b29a      	uxth	r2, r3
 800c156:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	1ad3      	subs	r3, r2, r3
 800c15e:	b29a      	uxth	r2, r3
 800c160:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c164:	1ad3      	subs	r3, r2, r3
 800c166:	b29b      	uxth	r3, r3
 800c168:	b219      	sxth	r1, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800c170:	9200      	str	r2, [sp, #0]
 800c172:	895b      	ldrh	r3, [r3, #10]
 800c174:	68ba      	ldr	r2, [r7, #8]
 800c176:	f7fb ff5f 	bl	8008038 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c17a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c17e:	f003 0302 	and.w	r3, r3, #2
 800c182:	2b00      	cmp	r3, #0
 800c184:	d025      	beq.n	800c1d2 <lv_draw_rect_border_corner+0x12f2>
 800c186:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c18a:	f003 0308 	and.w	r3, r3, #8
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d01f      	beq.n	800c1d2 <lv_draw_rect_border_corner+0x12f2>
                lv_draw_px(rt_origo.x + LV_CIRC_OCT7_X(aa_p) + i, rt_origo.y + LV_CIRC_OCT7_Y(aa_p) + 1, mask,
 800c192:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800c196:	b29a      	uxth	r2, r3
 800c198:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	4413      	add	r3, r2
 800c1a0:	b29a      	uxth	r2, r3
 800c1a2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c1a6:	4413      	add	r3, r2
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	b218      	sxth	r0, r3
 800c1ac:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	1ad3      	subs	r3, r2, r3
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	3301      	adds	r3, #1
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	b219      	sxth	r1, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800c1c8:	9200      	str	r2, [sp, #0]
 800c1ca:	895b      	ldrh	r3, [r3, #10]
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	f7fb ff33 	bl	8008038 <lv_draw_px>
                           style->body.border.color, aa_opa);
            }

            if(LV_CIRC_OCT1_X(aa_p) - 1 != LV_CIRC_OCT2_X(aa_p) + i) {
 800c1d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c1d6:	1e5a      	subs	r2, r3, #1
 800c1d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c1dc:	4619      	mov	r1, r3
 800c1de:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800c1e2:	440b      	add	r3, r1
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	f000 80b0 	beq.w	800c34a <lv_draw_rect_border_corner+0x146a>
                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_RIGHT)) {
 800c1ea:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c1ee:	f003 0301 	and.w	r3, r3, #1
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d025      	beq.n	800c242 <lv_draw_rect_border_corner+0x1362>
 800c1f6:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c1fa:	f003 0308 	and.w	r3, r3, #8
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d01f      	beq.n	800c242 <lv_draw_rect_border_corner+0x1362>
                    lv_draw_px(rb_origo.x + LV_CIRC_OCT2_X(aa_p) + i, rb_origo.y + LV_CIRC_OCT2_Y(aa_p) - 1, mask,
 800c202:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800c206:	b29a      	uxth	r2, r3
 800c208:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	4413      	add	r3, r2
 800c210:	b29a      	uxth	r2, r3
 800c212:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c216:	4413      	add	r3, r2
 800c218:	b29b      	uxth	r3, r3
 800c21a:	b218      	sxth	r0, r3
 800c21c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800c220:	b29a      	uxth	r2, r3
 800c222:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c226:	b29b      	uxth	r3, r3
 800c228:	4413      	add	r3, r2
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	3b01      	subs	r3, #1
 800c22e:	b29b      	uxth	r3, r3
 800c230:	b219      	sxth	r1, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800c238:	9200      	str	r2, [sp, #0]
 800c23a:	895b      	ldrh	r3, [r3, #10]
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	f7fb fefb 	bl	8008038 <lv_draw_px>
                               style->body.border.color, aa_opa);
                }

                if((part & LV_BORDER_BOTTOM) && (part & LV_BORDER_LEFT)) {
 800c242:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c246:	f003 0301 	and.w	r3, r3, #1
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d025      	beq.n	800c29a <lv_draw_rect_border_corner+0x13ba>
 800c24e:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c252:	f003 0304 	and.w	r3, r3, #4
 800c256:	2b00      	cmp	r3, #0
 800c258:	d01f      	beq.n	800c29a <lv_draw_rect_border_corner+0x13ba>
                    lv_draw_px(lb_origo.x + LV_CIRC_OCT4_X(aa_p) + 1, lb_origo.y + LV_CIRC_OCT4_Y(aa_p) + i, mask,
 800c25a:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800c25e:	b29a      	uxth	r2, r3
 800c260:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c264:	b29b      	uxth	r3, r3
 800c266:	1ad3      	subs	r3, r2, r3
 800c268:	b29b      	uxth	r3, r3
 800c26a:	3301      	adds	r3, #1
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	b218      	sxth	r0, r3
 800c270:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800c274:	b29a      	uxth	r2, r3
 800c276:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	4413      	add	r3, r2
 800c27e:	b29a      	uxth	r2, r3
 800c280:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c284:	4413      	add	r3, r2
 800c286:	b29b      	uxth	r3, r3
 800c288:	b219      	sxth	r1, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800c290:	9200      	str	r2, [sp, #0]
 800c292:	895b      	ldrh	r3, [r3, #10]
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	f7fb fecf 	bl	8008038 <lv_draw_px>
                               style->body.border.color, aa_opa);
                }

                if((part & LV_BORDER_TOP) && (part & LV_BORDER_LEFT)) {
 800c29a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c29e:	f003 0302 	and.w	r3, r3, #2
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d025      	beq.n	800c2f2 <lv_draw_rect_border_corner+0x1412>
 800c2a6:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c2aa:	f003 0304 	and.w	r3, r3, #4
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d01f      	beq.n	800c2f2 <lv_draw_rect_border_corner+0x1412>
                    lv_draw_px(lt_origo.x + LV_CIRC_OCT6_X(aa_p) - i, lt_origo.y + LV_CIRC_OCT6_Y(aa_p) + 1, mask,
 800c2b2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800c2b6:	b29a      	uxth	r2, r3
 800c2b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	1ad3      	subs	r3, r2, r3
 800c2c0:	b29a      	uxth	r2, r3
 800c2c2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	b218      	sxth	r0, r3
 800c2cc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	1ad3      	subs	r3, r2, r3
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	3301      	adds	r3, #1
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	b219      	sxth	r1, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800c2e8:	9200      	str	r2, [sp, #0]
 800c2ea:	895b      	ldrh	r3, [r3, #10]
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	f7fb fea3 	bl	8008038 <lv_draw_px>
                               style->body.border.color, aa_opa);
                }

                if((part & LV_BORDER_TOP) && (part & LV_BORDER_RIGHT)) {
 800c2f2:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c2f6:	f003 0302 	and.w	r3, r3, #2
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d025      	beq.n	800c34a <lv_draw_rect_border_corner+0x146a>
 800c2fe:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800c302:	f003 0308 	and.w	r3, r3, #8
 800c306:	2b00      	cmp	r3, #0
 800c308:	d01f      	beq.n	800c34a <lv_draw_rect_border_corner+0x146a>
                    lv_draw_px(rt_origo.x + LV_CIRC_OCT8_X(aa_p) - 1, rt_origo.y + LV_CIRC_OCT8_Y(aa_p) - i, mask,
 800c30a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800c30e:	b29a      	uxth	r2, r3
 800c310:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c314:	b29b      	uxth	r3, r3
 800c316:	4413      	add	r3, r2
 800c318:	b29b      	uxth	r3, r3
 800c31a:	3b01      	subs	r3, #1
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	b218      	sxth	r0, r3
 800c320:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800c324:	b29a      	uxth	r2, r3
 800c326:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	1ad3      	subs	r3, r2, r3
 800c32e:	b29a      	uxth	r2, r3
 800c330:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	b29b      	uxth	r3, r3
 800c338:	b219      	sxth	r1, r3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800c340:	9200      	str	r2, [sp, #0]
 800c342:	895b      	ldrh	r3, [r3, #10]
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	f7fb fe77 	bl	8008038 <lv_draw_px>
        for(i = 0; i < seg_size; i++) {
 800c34a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800c34e:	b29b      	uxth	r3, r3
 800c350:	3301      	adds	r3, #1
 800c352:	b29b      	uxth	r3, r3
 800c354:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800c358:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 800c35c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800c360:	429a      	cmp	r2, r3
 800c362:	f6ff ae7a 	blt.w	800c05a <lv_draw_rect_border_corner+0x117a>
                }
            }
        }
    }
#endif
}
 800c366:	bf00      	nop
 800c368:	3778      	adds	r7, #120	@ 0x78
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}

0800c36e <lv_draw_shadow>:
 * @param mask pointer to a mask area (from the design functions)
 * @param opa_scale scale down all opacities by the factor
 */
static void lv_draw_shadow(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                           lv_opa_t opa_scale)
{
 800c36e:	b580      	push	{r7, lr}
 800c370:	b088      	sub	sp, #32
 800c372:	af00      	add	r7, sp, #0
 800c374:	60f8      	str	r0, [r7, #12]
 800c376:	60b9      	str	r1, [r7, #8]
 800c378:	607a      	str	r2, [r7, #4]
 800c37a:	70fb      	strb	r3, [r7, #3]
    /* If mask is in the middle of cords do not draw shadow*/
    lv_coord_t radius = style->body.radius;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	88db      	ldrh	r3, [r3, #6]
 800c380:	83fb      	strh	r3, [r7, #30]
    lv_coord_t width  = lv_area_get_width(coords);
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f7fd f846 	bl	8009414 <lv_area_get_width>
 800c388:	4603      	mov	r3, r0
 800c38a:	83bb      	strh	r3, [r7, #28]
    lv_coord_t height = lv_area_get_height(coords);
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f7fd f857 	bl	8009440 <lv_area_get_height>
 800c392:	4603      	mov	r3, r0
 800c394:	837b      	strh	r3, [r7, #26]
    radius            = lv_draw_cont_radius_corr(radius, width, height);
 800c396:	8bfb      	ldrh	r3, [r7, #30]
 800c398:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800c39c:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f000 fede 	bl	800d162 <lv_draw_cont_radius_corr>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	83fb      	strh	r3, [r7, #30]
    lv_area_t area_tmp;

    /*Check horizontally without radius*/
    lv_area_copy(&area_tmp, coords);
 800c3aa:	f107 0310 	add.w	r3, r7, #16
 800c3ae:	68f9      	ldr	r1, [r7, #12]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fd f821 	bl	80093f8 <lv_area_copy>
    area_tmp.x1 += radius;
 800c3b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c3ba:	b29a      	uxth	r2, r3
 800c3bc:	8bfb      	ldrh	r3, [r7, #30]
 800c3be:	4413      	add	r3, r2
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	b21b      	sxth	r3, r3
 800c3c4:	823b      	strh	r3, [r7, #16]
    area_tmp.x2 -= radius;
 800c3c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c3ca:	b29a      	uxth	r2, r3
 800c3cc:	8bfb      	ldrh	r3, [r7, #30]
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	b21b      	sxth	r3, r3
 800c3d4:	82bb      	strh	r3, [r7, #20]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800c3d6:	f107 0310 	add.w	r3, r7, #16
 800c3da:	4619      	mov	r1, r3
 800c3dc:	68b8      	ldr	r0, [r7, #8]
 800c3de:	f003 f9a4 	bl	800f72a <lv_area_is_in>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d134      	bne.n	800c452 <lv_draw_shadow+0xe4>

    /*Check vertically without radius*/
    lv_area_copy(&area_tmp, coords);
 800c3e8:	f107 0310 	add.w	r3, r7, #16
 800c3ec:	68f9      	ldr	r1, [r7, #12]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7fd f802 	bl	80093f8 <lv_area_copy>
    area_tmp.y1 += radius;
 800c3f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	8bfb      	ldrh	r3, [r7, #30]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	b21b      	sxth	r3, r3
 800c402:	827b      	strh	r3, [r7, #18]
    area_tmp.y2 -= radius;
 800c404:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c408:	b29a      	uxth	r2, r3
 800c40a:	8bfb      	ldrh	r3, [r7, #30]
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	b29b      	uxth	r3, r3
 800c410:	b21b      	sxth	r3, r3
 800c412:	82fb      	strh	r3, [r7, #22]
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800c414:	f107 0310 	add.w	r3, r7, #16
 800c418:	4619      	mov	r1, r3
 800c41a:	68b8      	ldr	r0, [r7, #8]
 800c41c:	f003 f985 	bl	800f72a <lv_area_is_in>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d117      	bne.n	800c456 <lv_draw_shadow+0xe8>

    if(style->body.shadow.type == LV_SHADOW_FULL) {
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	7d1b      	ldrb	r3, [r3, #20]
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d106      	bne.n	800c43c <lv_draw_shadow+0xce>
        lv_draw_shadow_full(coords, mask, style, opa_scale);
 800c42e:	78fb      	ldrb	r3, [r7, #3]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	68b9      	ldr	r1, [r7, #8]
 800c434:	68f8      	ldr	r0, [r7, #12]
 800c436:	f000 f812 	bl	800c45e <lv_draw_shadow_full>
 800c43a:	e00d      	b.n	800c458 <lv_draw_shadow+0xea>
    } else if(style->body.shadow.type == LV_SHADOW_BOTTOM) {
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	7d1b      	ldrb	r3, [r3, #20]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d109      	bne.n	800c458 <lv_draw_shadow+0xea>
        lv_draw_shadow_bottom(coords, mask, style, opa_scale);
 800c444:	78fb      	ldrb	r3, [r7, #3]
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	68b9      	ldr	r1, [r7, #8]
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	f000 fb2f 	bl	800caae <lv_draw_shadow_bottom>
 800c450:	e002      	b.n	800c458 <lv_draw_shadow+0xea>
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800c452:	bf00      	nop
 800c454:	e000      	b.n	800c458 <lv_draw_shadow+0xea>
    if(lv_area_is_in(mask, &area_tmp) != false) return;
 800c456:	bf00      	nop
    }
}
 800c458:	3720      	adds	r7, #32
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <lv_draw_shadow_full>:

static void lv_draw_shadow_full(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                lv_opa_t opa_scale)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b0a0      	sub	sp, #128	@ 0x80
 800c462:	af02      	add	r7, sp, #8
 800c464:	60f8      	str	r0, [r7, #12]
 800c466:	60b9      	str	r1, [r7, #8]
 800c468:	607a      	str	r2, [r7, #4]
 800c46a:	70fb      	strb	r3, [r7, #3]
     * radius means smaller average shadow opacity. The solution should be to start `line` from `-
     * swidth` and handle if the straight part is short (or zero) and the value is taken from the
     * other corner. `col` also should start from `- swidth`
     */

    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800c46c:	f7fa fd5c 	bl	8006f28 <lv_refr_get_disp_refreshing>
 800c470:	4603      	mov	r3, r0
 800c472:	4618      	mov	r0, r3
 800c474:	f002 fbeb 	bl	800ec4e <lv_disp_get_antialiasing>
 800c478:	4603      	mov	r3, r0
 800c47a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

    lv_coord_t radius = style->body.radius;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	88db      	ldrh	r3, [r3, #6]
 800c482:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    lv_coord_t swidth = style->body.shadow.width;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	8a5b      	ldrh	r3, [r3, #18]
 800c48a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

    lv_coord_t width  = lv_area_get_width(coords);
 800c48e:	68f8      	ldr	r0, [r7, #12]
 800c490:	f7fc ffc0 	bl	8009414 <lv_area_get_width>
 800c494:	4603      	mov	r3, r0
 800c496:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
    lv_coord_t height = lv_area_get_height(coords);
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f7fc ffd0 	bl	8009440 <lv_area_get_height>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800c4a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c4aa:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 800c4ae:	f9b7 1060 	ldrsh.w	r1, [r7, #96]	@ 0x60
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 fe55 	bl	800d162 <lv_draw_cont_radius_corr>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

    radius += aa;
 800c4be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c4c8:	4413      	add	r3, r2
 800c4ca:	b29b      	uxth	r3, r3
 800c4cc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

    /*Allocate a draw buffer the buffer required to draw the shadow*/
    int16_t filter_width = 2 * swidth + 1;
 800c4d0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c4d4:	005b      	lsls	r3, r3, #1
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	3301      	adds	r3, #1
 800c4da:	b29b      	uxth	r3, r3
 800c4dc:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    uint32_t curve_x_size = ((radius + swidth + 1) + 3) & ~0x3; /*Round to 4*/
 800c4e0:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 800c4e4:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 800c4e8:	4413      	add	r3, r2
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	f023 0303 	bic.w	r3, r3, #3
 800c4f0:	65bb      	str	r3, [r7, #88]	@ 0x58
    curve_x_size *= sizeof(lv_coord_t);
 800c4f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c4f4:	005b      	lsls	r3, r3, #1
 800c4f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t line_1d_blur_size = (filter_width + 3) & ~0x3;     /*Round to 4*/
 800c4f8:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 800c4fc:	3303      	adds	r3, #3
 800c4fe:	f023 0303 	bic.w	r3, r3, #3
 800c502:	657b      	str	r3, [r7, #84]	@ 0x54
    line_1d_blur_size *= sizeof(uint32_t);
 800c504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t line_2d_blur_size = ((radius + swidth + 1) + 3) & ~0x3;     /*Round to 4*/
 800c50a:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 800c50e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 800c512:	4413      	add	r3, r2
 800c514:	3304      	adds	r3, #4
 800c516:	f023 0303 	bic.w	r3, r3, #3
 800c51a:	653b      	str	r3, [r7, #80]	@ 0x50
    line_2d_blur_size *= sizeof(lv_opa_t);

    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size + line_2d_blur_size);
 800c51c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c51e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c520:	441a      	add	r2, r3
 800c522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c524:	4413      	add	r3, r2
 800c526:	4618      	mov	r0, r3
 800c528:	f7fb fc74 	bl	8007e14 <lv_draw_get_buf>
 800c52c:	64f8      	str	r0, [r7, #76]	@ 0x4c

    /*Divide the draw buffer*/
    lv_coord_t  * curve_x = (lv_coord_t *)&draw_buf[0]; /*Stores the 'x' coordinates of a quarter circle.*/
 800c52e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c530:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t * line_1d_blur = (uint32_t *)&draw_buf[curve_x_size];
 800c532:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c534:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c536:	4413      	add	r3, r2
 800c538:	647b      	str	r3, [r7, #68]	@ 0x44
    lv_opa_t * line_2d_blur = (lv_opa_t *)&draw_buf[curve_x_size + line_1d_blur_size];
 800c53a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c53c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c53e:	4413      	add	r3, r2
 800c540:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c542:	4413      	add	r3, r2
 800c544:	643b      	str	r3, [r7, #64]	@ 0x40

    memset(curve_x, 0, curve_x_size);
 800c546:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c548:	2100      	movs	r1, #0
 800c54a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800c54c:	f00f f9c9 	bl	801b8e2 <memset>
    lv_point_t circ;
    lv_coord_t circ_tmp;
    lv_circ_init(&circ, &circ_tmp, radius);
 800c550:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 800c554:	f107 0136 	add.w	r1, r7, #54	@ 0x36
 800c558:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800c55c:	4618      	mov	r0, r3
 800c55e:	f003 f913 	bl	800f788 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 800c562:	e017      	b.n	800c594 <lv_draw_shadow_full+0x136>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800c564:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800c568:	005b      	lsls	r3, r3, #1
 800c56a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c56c:	4413      	add	r3, r2
 800c56e:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 800c572:	801a      	strh	r2, [r3, #0]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800c574:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800c578:	005b      	lsls	r3, r3, #1
 800c57a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c57c:	4413      	add	r3, r2
 800c57e:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 800c582:	801a      	strh	r2, [r3, #0]
        lv_circ_next(&circ, &circ_tmp);
 800c584:	f107 0236 	add.w	r2, r7, #54	@ 0x36
 800c588:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800c58c:	4611      	mov	r1, r2
 800c58e:	4618      	mov	r0, r3
 800c590:	f003 f927 	bl	800f7e2 <lv_circ_next>
    while(lv_circ_cont(&circ)) {
 800c594:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800c598:	4618      	mov	r0, r3
 800c59a:	f003 f90e 	bl	800f7ba <lv_circ_cont>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1df      	bne.n	800c564 <lv_draw_shadow_full+0x106>
    }
    int16_t line;
    /*1D Blur horizontally*/
    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800c5a4:	78fb      	ldrb	r3, [r7, #3]
 800c5a6:	2bff      	cmp	r3, #255	@ 0xff
 800c5a8:	d102      	bne.n	800c5b0 <lv_draw_shadow_full+0x152>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	7a1b      	ldrb	r3, [r3, #8]
 800c5ae:	e00a      	b.n	800c5c6 <lv_draw_shadow_full+0x168>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	7a1b      	ldrb	r3, [r3, #8]
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	78fb      	ldrb	r3, [r7, #3]
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	fb02 f303 	mul.w	r3, r2, r3
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	0a1b      	lsrs	r3, r3, #8
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    for(line = 0; line < filter_width; line++) {
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 800c5d0:	e021      	b.n	800c616 <lv_draw_shadow_full+0x1b8>
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 800c5d2:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	@ 0x5c
 800c5d6:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	461a      	mov	r2, r3
 800c5de:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c5e2:	fb02 f303 	mul.w	r3, r2, r3
 800c5e6:	005b      	lsls	r3, r3, #1
 800c5e8:	021a      	lsls	r2, r3, #8
                             (filter_width * filter_width);
 800c5ea:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 800c5ee:	f9b7 105c 	ldrsh.w	r1, [r7, #92]	@ 0x5c
 800c5f2:	fb01 f303 	mul.w	r3, r1, r3
 800c5f6:	4618      	mov	r0, r3
        line_1d_blur[line] = (uint32_t)((uint32_t)(filter_width - line) * (opa * 2) << SHADOW_OPA_EXTRA_PRECISION) /
 800c5f8:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 800c5fc:	009b      	lsls	r3, r3, #2
 800c5fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c600:	440b      	add	r3, r1
 800c602:	fbb2 f2f0 	udiv	r2, r2, r0
 800c606:	601a      	str	r2, [r3, #0]
    for(line = 0; line < filter_width; line++) {
 800c608:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	3301      	adds	r3, #1
 800c610:	b29b      	uxth	r3, r3
 800c612:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 800c616:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	@ 0x76
 800c61a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 800c61e:	429a      	cmp	r2, r3
 800c620:	dbd7      	blt.n	800c5d2 <lv_draw_shadow_full+0x174>
    lv_point_t point_lb;
    lv_point_t ofs_rb;
    lv_point_t ofs_rt;
    lv_point_t ofs_lb;
    lv_point_t ofs_lt;
    ofs_rb.x = coords->x2 - radius - aa;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c628:	b29a      	uxth	r2, r3
 800c62a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c62e:	1ad3      	subs	r3, r2, r3
 800c630:	b29a      	uxth	r2, r3
 800c632:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c636:	b29b      	uxth	r3, r3
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	b21b      	sxth	r3, r3
 800c63e:	843b      	strh	r3, [r7, #32]
    ofs_rb.y = coords->y2 - radius - aa;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c646:	b29a      	uxth	r2, r3
 800c648:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c64c:	1ad3      	subs	r3, r2, r3
 800c64e:	b29a      	uxth	r2, r3
 800c650:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c654:	b29b      	uxth	r3, r3
 800c656:	1ad3      	subs	r3, r2, r3
 800c658:	b29b      	uxth	r3, r3
 800c65a:	b21b      	sxth	r3, r3
 800c65c:	847b      	strh	r3, [r7, #34]	@ 0x22

    ofs_rt.x = coords->x2 - radius - aa;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c664:	b29a      	uxth	r2, r3
 800c666:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c66a:	1ad3      	subs	r3, r2, r3
 800c66c:	b29a      	uxth	r2, r3
 800c66e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c672:	b29b      	uxth	r3, r3
 800c674:	1ad3      	subs	r3, r2, r3
 800c676:	b29b      	uxth	r3, r3
 800c678:	b21b      	sxth	r3, r3
 800c67a:	83bb      	strh	r3, [r7, #28]
    ofs_rt.y = coords->y1 + radius + aa;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c682:	b29a      	uxth	r2, r3
 800c684:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c688:	4413      	add	r3, r2
 800c68a:	b29a      	uxth	r2, r3
 800c68c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c690:	b29b      	uxth	r3, r3
 800c692:	4413      	add	r3, r2
 800c694:	b29b      	uxth	r3, r3
 800c696:	b21b      	sxth	r3, r3
 800c698:	83fb      	strh	r3, [r7, #30]

    ofs_lb.x = coords->x1 + radius + aa;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c6a0:	b29a      	uxth	r2, r3
 800c6a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c6a6:	4413      	add	r3, r2
 800c6a8:	b29a      	uxth	r2, r3
 800c6aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	4413      	add	r3, r2
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	b21b      	sxth	r3, r3
 800c6b6:	833b      	strh	r3, [r7, #24]
    ofs_lb.y = coords->y2 - radius - aa;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c6c4:	1ad3      	subs	r3, r2, r3
 800c6c6:	b29a      	uxth	r2, r3
 800c6c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	1ad3      	subs	r3, r2, r3
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	b21b      	sxth	r3, r3
 800c6d4:	837b      	strh	r3, [r7, #26]

    ofs_lt.x = coords->x1 + radius + aa;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c6e2:	4413      	add	r3, r2
 800c6e4:	b29a      	uxth	r2, r3
 800c6e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	4413      	add	r3, r2
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	b21b      	sxth	r3, r3
 800c6f2:	82bb      	strh	r3, [r7, #20]
    ofs_lt.y = coords->y1 + radius + aa;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c6fa:	b29a      	uxth	r2, r3
 800c6fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c700:	4413      	add	r3, r2
 800c702:	b29a      	uxth	r2, r3
 800c704:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c708:	b29b      	uxth	r3, r3
 800c70a:	4413      	add	r3, r2
 800c70c:	b29b      	uxth	r3, r3
 800c70e:	b21b      	sxth	r3, r3
 800c710:	82fb      	strh	r3, [r7, #22]
    bool line_ready;
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 800c712:	2300      	movs	r3, #0
 800c714:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 800c718:	e1ba      	b.n	800ca90 <lv_draw_shadow_full+0x632>
        line_ready = false;
 800c71a:	2300      	movs	r3, #0
 800c71c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 800c720:	2300      	movs	r3, #0
 800c722:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 800c726:	e098      	b.n	800c85a <lv_draw_shadow_full+0x3fc>
                                                         shadow pixel (radius + swidth))*/

            /*Sum the opacities from the lines above and below this 'row'*/
            int16_t line_rel;
            uint32_t px_opa_sum = 0;
 800c728:	2300      	movs	r3, #0
 800c72a:	66fb      	str	r3, [r7, #108]	@ 0x6c
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800c72c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c730:	425b      	negs	r3, r3
 800c732:	b29b      	uxth	r3, r3
 800c734:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
 800c738:	e06e      	b.n	800c818 <lv_draw_shadow_full+0x3ba>
                /*Get the relative x position of the 'line_rel' to 'line'*/
                int16_t col_rel;
                if(line + line_rel < 0) { /*Below the radius, here is the blur of the edge */
 800c73a:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	@ 0x76
 800c73e:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
 800c742:	4413      	add	r3, r2
 800c744:	2b00      	cmp	r3, #0
 800c746:	da12      	bge.n	800c76e <lv_draw_shadow_full+0x310>
                    col_rel = radius - curve_x[line] - col;
 800c748:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 800c74c:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 800c750:	005b      	lsls	r3, r3, #1
 800c752:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c754:	440b      	add	r3, r1
 800c756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	1ad3      	subs	r3, r2, r3
 800c75e:	b29a      	uxth	r2, r3
 800c760:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800c764:	1ad3      	subs	r3, r2, r3
 800c766:	b29b      	uxth	r3, r3
 800c768:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800c76c:	e023      	b.n	800c7b6 <lv_draw_shadow_full+0x358>
                } else if(line + line_rel > radius) { /*Above the radius, here won't be more 1D blur*/
 800c76e:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	@ 0x76
 800c772:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
 800c776:	441a      	add	r2, r3
 800c778:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 800c77c:	429a      	cmp	r2, r3
 800c77e:	dc52      	bgt.n	800c826 <lv_draw_shadow_full+0x3c8>
                    break;
                } else { /*Blur from the curve*/
                    col_rel = curve_x[line + line_rel] - curve_x[line] - col;
 800c780:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	@ 0x76
 800c784:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
 800c788:	4413      	add	r3, r2
 800c78a:	005b      	lsls	r3, r3, #1
 800c78c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c78e:	4413      	add	r3, r2
 800c790:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c794:	b29a      	uxth	r2, r3
 800c796:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 800c79a:	005b      	lsls	r3, r3, #1
 800c79c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c79e:	440b      	add	r3, r1
 800c7a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	1ad3      	subs	r3, r2, r3
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
                }

                /*Add the value of the 1D blur on 'col_rel' position*/
                if(col_rel < -swidth) { /*Outside of the blurred area. */
 800c7b6:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	@ 0x6a
 800c7ba:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 800c7be:	425b      	negs	r3, r3
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	da0a      	bge.n	800c7da <lv_draw_shadow_full+0x37c>
                    if(line_rel == -swidth)
 800c7c4:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	@ 0x70
 800c7c8:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 800c7cc:	425b      	negs	r3, r3
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d12b      	bne.n	800c82a <lv_draw_shadow_full+0x3cc>
                        line_ready = true; /*If no data even on the very first line then it wont't
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
                                              be anything else in this line*/
                    break;                 /*Break anyway because only smaller 'col_rel' values will come */
 800c7d8:	e027      	b.n	800c82a <lv_draw_shadow_full+0x3cc>
                } else if(col_rel > swidth)
 800c7da:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	@ 0x6a
 800c7de:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	dd05      	ble.n	800c7f2 <lv_draw_shadow_full+0x394>
                    px_opa_sum += line_1d_blur[0]; /*Inside the not blurred area*/
 800c7e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7ec:	4413      	add	r3, r2
 800c7ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c7f0:	e00b      	b.n	800c80a <lv_draw_shadow_full+0x3ac>
                else
                    px_opa_sum += line_1d_blur[swidth - col_rel]; /*On the 1D blur (+ swidth to align to the center)*/
 800c7f2:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	@ 0x62
 800c7f6:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c800:	4413      	add	r3, r2
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c806:	4413      	add	r3, r2
 800c808:	66fb      	str	r3, [r7, #108]	@ 0x6c
            for(line_rel = -swidth; line_rel <= swidth; line_rel++) {
 800c80a:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
 800c80e:	b29b      	uxth	r3, r3
 800c810:	3301      	adds	r3, #1
 800c812:	b29b      	uxth	r3, r3
 800c814:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
 800c818:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	@ 0x70
 800c81c:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 800c820:	429a      	cmp	r2, r3
 800c822:	dd8a      	ble.n	800c73a <lv_draw_shadow_full+0x2dc>
 800c824:	e002      	b.n	800c82c <lv_draw_shadow_full+0x3ce>
                    break;
 800c826:	bf00      	nop
 800c828:	e000      	b.n	800c82c <lv_draw_shadow_full+0x3ce>
                    break;                 /*Break anyway because only smaller 'col_rel' values will come */
 800c82a:	bf00      	nop
            }

            line_2d_blur[col] = px_opa_sum >> SHADOW_OPA_EXTRA_PRECISION;
 800c82c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c82e:	0a19      	lsrs	r1, r3, #8
 800c830:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800c834:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c836:	4413      	add	r3, r2
 800c838:	b2ca      	uxtb	r2, r1
 800c83a:	701a      	strb	r2, [r3, #0]
            if(line_ready) {
 800c83c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800c840:	2b00      	cmp	r3, #0
 800c842:	d005      	beq.n	800c850 <lv_draw_shadow_full+0x3f2>
                col++; /*To make this line to the last one ( drawing will go to '< col')*/
 800c844:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800c848:	3301      	adds	r3, #1
 800c84a:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
                break;
 800c84e:	e00e      	b.n	800c86e <lv_draw_shadow_full+0x410>
        for(col = 0; col <= radius + swidth; col++) { /*Check all pixels in a 1D blur line (from the origo to last
 800c850:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800c854:	3301      	adds	r3, #1
 800c856:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 800c85a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 800c85e:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	@ 0x64
 800c862:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 800c866:	440b      	add	r3, r1
 800c868:	429a      	cmp	r2, r3
 800c86a:	f77f af5d 	ble.w	800c728 <lv_draw_shadow_full+0x2ca>
            }
        }

        /*Flush the line*/
        point_rt.x = curve_x[line] + ofs_rt.x + 1;
 800c86e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 800c872:	005b      	lsls	r3, r3, #1
 800c874:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c876:	4413      	add	r3, r2
 800c878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c87c:	b29a      	uxth	r2, r3
 800c87e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c882:	b29b      	uxth	r3, r3
 800c884:	4413      	add	r3, r2
 800c886:	b29b      	uxth	r3, r3
 800c888:	3301      	adds	r3, #1
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	b21b      	sxth	r3, r3
 800c88e:	863b      	strh	r3, [r7, #48]	@ 0x30
        point_rt.y = ofs_rt.y - line;
 800c890:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c894:	b29a      	uxth	r2, r3
 800c896:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800c89a:	1ad3      	subs	r3, r2, r3
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	b21b      	sxth	r3, r3
 800c8a0:	867b      	strh	r3, [r7, #50]	@ 0x32

        point_rb.x = curve_x[line] + ofs_rb.x + 1;
 800c8a2:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 800c8a6:	005b      	lsls	r3, r3, #1
 800c8a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8aa:	4413      	add	r3, r2
 800c8ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8b0:	b29a      	uxth	r2, r3
 800c8b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	4413      	add	r3, r2
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	3301      	adds	r3, #1
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	b21b      	sxth	r3, r3
 800c8c2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        point_rb.y = ofs_rb.y + line;
 800c8c4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800c8ce:	4413      	add	r3, r2
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	b21b      	sxth	r3, r3
 800c8d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        point_lt.x = ofs_lt.x - curve_x[line] - 1;
 800c8d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 800c8e0:	005b      	lsls	r3, r3, #1
 800c8e2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c8e4:	440b      	add	r3, r1
 800c8e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	1ad3      	subs	r3, r2, r3
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	b21b      	sxth	r3, r3
 800c8f6:	853b      	strh	r3, [r7, #40]	@ 0x28
        point_lt.y = ofs_lt.y - line;
 800c8f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c8fc:	b29a      	uxth	r2, r3
 800c8fe:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800c902:	1ad3      	subs	r3, r2, r3
 800c904:	b29b      	uxth	r3, r3
 800c906:	b21b      	sxth	r3, r3
 800c908:	857b      	strh	r3, [r7, #42]	@ 0x2a

        point_lb.x = ofs_lb.x - curve_x[line] - 1;
 800c90a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c90e:	b29a      	uxth	r2, r3
 800c910:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 800c914:	005b      	lsls	r3, r3, #1
 800c916:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c918:	440b      	add	r3, r1
 800c91a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c91e:	b29b      	uxth	r3, r3
 800c920:	1ad3      	subs	r3, r2, r3
 800c922:	b29b      	uxth	r3, r3
 800c924:	3b01      	subs	r3, #1
 800c926:	b29b      	uxth	r3, r3
 800c928:	b21b      	sxth	r3, r3
 800c92a:	84bb      	strh	r3, [r7, #36]	@ 0x24
        point_lb.y = ofs_lb.y + line;
 800c92c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c930:	b29a      	uxth	r2, r3
 800c932:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800c936:	4413      	add	r3, r2
 800c938:	b29b      	uxth	r3, r3
 800c93a:	b21b      	sxth	r3, r3
 800c93c:	84fb      	strh	r3, [r7, #38]	@ 0x26

        uint16_t d;
        for(d = 1; d < col; d++) {
 800c93e:	2301      	movs	r3, #1
 800c940:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800c944:	e08c      	b.n	800ca60 <lv_draw_shadow_full+0x602>

            if(point_lt.x < ofs_lt.x && point_lt.y < ofs_lt.y) {
 800c946:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 800c94a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c94e:	429a      	cmp	r2, r3
 800c950:	da14      	bge.n	800c97c <lv_draw_shadow_full+0x51e>
 800c952:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800c956:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	da0e      	bge.n	800c97c <lv_draw_shadow_full+0x51e>
                lv_draw_px(point_lt.x, point_lt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800c95e:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	@ 0x28
 800c962:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	@ 0x2a
 800c966:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800c96a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c96c:	4413      	add	r3, r2
 800c96e:	781a      	ldrb	r2, [r3, #0]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	9200      	str	r2, [sp, #0]
 800c974:	8a1b      	ldrh	r3, [r3, #16]
 800c976:	68ba      	ldr	r2, [r7, #8]
 800c978:	f7fb fb5e 	bl	8008038 <lv_draw_px>
            }

            if(point_lb.x < ofs_lb.x && point_lb.y > ofs_lb.y) {
 800c97c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800c980:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c984:	429a      	cmp	r2, r3
 800c986:	da14      	bge.n	800c9b2 <lv_draw_shadow_full+0x554>
 800c988:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800c98c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c990:	429a      	cmp	r2, r3
 800c992:	dd0e      	ble.n	800c9b2 <lv_draw_shadow_full+0x554>
                lv_draw_px(point_lb.x, point_lb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800c994:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
 800c998:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	@ 0x26
 800c99c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800c9a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c9a2:	4413      	add	r3, r2
 800c9a4:	781a      	ldrb	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	9200      	str	r2, [sp, #0]
 800c9aa:	8a1b      	ldrh	r3, [r3, #16]
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	f7fb fb43 	bl	8008038 <lv_draw_px>
            }

            if(point_rt.x > ofs_rt.x && point_rt.y < ofs_rt.y) {
 800c9b2:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 800c9b6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	dd14      	ble.n	800c9e8 <lv_draw_shadow_full+0x58a>
 800c9be:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 800c9c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	da0e      	bge.n	800c9e8 <lv_draw_shadow_full+0x58a>
                lv_draw_px(point_rt.x, point_rt.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800c9ca:	f9b7 0030 	ldrsh.w	r0, [r7, #48]	@ 0x30
 800c9ce:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	@ 0x32
 800c9d2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800c9d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c9d8:	4413      	add	r3, r2
 800c9da:	781a      	ldrb	r2, [r3, #0]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	9200      	str	r2, [sp, #0]
 800c9e0:	8a1b      	ldrh	r3, [r3, #16]
 800c9e2:	68ba      	ldr	r2, [r7, #8]
 800c9e4:	f7fb fb28 	bl	8008038 <lv_draw_px>
            }

            if(point_rb.x > ofs_rb.x && point_rb.y > ofs_rb.y) {
 800c9e8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 800c9ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	dd14      	ble.n	800ca1e <lv_draw_shadow_full+0x5c0>
 800c9f4:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 800c9f8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	dd0e      	ble.n	800ca1e <lv_draw_shadow_full+0x5c0>
                lv_draw_px(point_rb.x, point_rb.y, mask, style->body.shadow.color, line_2d_blur[d]);
 800ca00:	f9b7 002c 	ldrsh.w	r0, [r7, #44]	@ 0x2c
 800ca04:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	@ 0x2e
 800ca08:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800ca0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ca0e:	4413      	add	r3, r2
 800ca10:	781a      	ldrb	r2, [r3, #0]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	9200      	str	r2, [sp, #0]
 800ca16:	8a1b      	ldrh	r3, [r3, #16]
 800ca18:	68ba      	ldr	r2, [r7, #8]
 800ca1a:	f7fb fb0d 	bl	8008038 <lv_draw_px>
            }

            point_rb.x++;
 800ca1e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	3301      	adds	r3, #1
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	b21b      	sxth	r3, r3
 800ca2a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            point_lb.x--;
 800ca2c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	3b01      	subs	r3, #1
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	b21b      	sxth	r3, r3
 800ca38:	84bb      	strh	r3, [r7, #36]	@ 0x24

            point_rt.x++;
 800ca3a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	3301      	adds	r3, #1
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	b21b      	sxth	r3, r3
 800ca46:	863b      	strh	r3, [r7, #48]	@ 0x30
            point_lt.x--;
 800ca48:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	3b01      	subs	r3, #1
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	b21b      	sxth	r3, r3
 800ca54:	853b      	strh	r3, [r7, #40]	@ 0x28
        for(d = 1; d < col; d++) {
 800ca56:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800ca60:	f8b7 2068 	ldrh.w	r2, [r7, #104]	@ 0x68
 800ca64:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	f4ff af6c 	bcc.w	800c946 <lv_draw_shadow_full+0x4e8>
        }

        /* Put the first line to the edges too.
         * It is not correct because blur should be done below the corner too
         * but is is simple, fast and gives a good enough result*/
        if(line == 0) lv_draw_shadow_full_straight(coords, mask, style, line_2d_blur);
 800ca6e:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d105      	bne.n	800ca82 <lv_draw_shadow_full+0x624>
 800ca76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	68b9      	ldr	r1, [r7, #8]
 800ca7c:	68f8      	ldr	r0, [r7, #12]
 800ca7e:	f000 fa18 	bl	800ceb2 <lv_draw_shadow_full_straight>
    for(line = 0; line <= radius + swidth; line++) { /*Check all rows and make the 1D blur to 2D*/
 800ca82:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	3301      	adds	r3, #1
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 800ca90:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	@ 0x76
 800ca94:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	@ 0x64
 800ca98:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 800ca9c:	440b      	add	r3, r1
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	f77f ae3b 	ble.w	800c71a <lv_draw_shadow_full+0x2bc>
    }
}
 800caa4:	bf00      	nop
 800caa6:	bf00      	nop
 800caa8:	3778      	adds	r7, #120	@ 0x78
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <lv_draw_shadow_bottom>:

static void lv_draw_shadow_bottom(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                  lv_opa_t opa_scale)
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b09a      	sub	sp, #104	@ 0x68
 800cab2:	af02      	add	r7, sp, #8
 800cab4:	60f8      	str	r0, [r7, #12]
 800cab6:	60b9      	str	r1, [r7, #8]
 800cab8:	607a      	str	r2, [r7, #4]
 800caba:	70fb      	strb	r3, [r7, #3]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800cabc:	f7fa fa34 	bl	8006f28 <lv_refr_get_disp_refreshing>
 800cac0:	4603      	mov	r3, r0
 800cac2:	4618      	mov	r0, r3
 800cac4:	f002 f8c3 	bl	800ec4e <lv_disp_get_antialiasing>
 800cac8:	4603      	mov	r3, r0
 800caca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    lv_coord_t radius = style->body.radius;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	88db      	ldrh	r3, [r3, #6]
 800cad2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    lv_coord_t swidth = style->body.shadow.width;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	8a5b      	ldrh	r3, [r3, #18]
 800cada:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    lv_coord_t width  = lv_area_get_width(coords);
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f7fc fc98 	bl	8009414 <lv_area_get_width>
 800cae4:	4603      	mov	r3, r0
 800cae6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    lv_coord_t height = lv_area_get_height(coords);
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	f7fc fca8 	bl	8009440 <lv_area_get_height>
 800caf0:	4603      	mov	r3, r0
 800caf2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800caf6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800cafa:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 800cafe:	f9b7 1050 	ldrsh.w	r1, [r7, #80]	@ 0x50
 800cb02:	4618      	mov	r0, r3
 800cb04:	f000 fb2d 	bl	800d162 <lv_draw_cont_radius_corr>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    radius += aa * SHADOW_BOTTOM_AA_EXTRA_RADIUS;
 800cb0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	461a      	mov	r2, r3
 800cb16:	0052      	lsls	r2, r2, #1
 800cb18:	4413      	add	r3, r2
 800cb1a:	b29a      	uxth	r2, r3
 800cb1c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800cb20:	4413      	add	r3, r2
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    swidth += aa;
 800cb28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800cb32:	4413      	add	r3, r2
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

    uint32_t curve_x_size = ((radius + 1) + 3) & ~0x3; /*Round to 4*/
 800cb3a:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 800cb3e:	3304      	adds	r3, #4
 800cb40:	f023 0303 	bic.w	r3, r3, #3
 800cb44:	64bb      	str	r3, [r7, #72]	@ 0x48
    curve_x_size *= sizeof(lv_coord_t);
 800cb46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb48:	005b      	lsls	r3, r3, #1
 800cb4a:	64bb      	str	r3, [r7, #72]	@ 0x48
    lv_opa_t line_1d_blur_size = (swidth + 3) & ~0x3;     /*Round to 4*/
 800cb4c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	3303      	adds	r3, #3
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	f023 0303 	bic.w	r3, r3, #3
 800cb5a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    line_1d_blur_size *= sizeof(lv_opa_t);

    uint8_t * draw_buf = lv_draw_get_buf(curve_x_size + line_1d_blur_size);
 800cb5e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800cb62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb64:	4413      	add	r3, r2
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7fb f954 	bl	8007e14 <lv_draw_get_buf>
 800cb6c:	6438      	str	r0, [r7, #64]	@ 0x40

    /*Divide the draw buffer*/
    lv_coord_t  * curve_x = (lv_coord_t *)&draw_buf[0]; /*Stores the 'x' coordinates of a quarter circle.*/
 800cb6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    lv_opa_t * line_1d_blur = (lv_opa_t *)&draw_buf[curve_x_size];
 800cb72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cb76:	4413      	add	r3, r2
 800cb78:	63bb      	str	r3, [r7, #56]	@ 0x38

    lv_point_t circ;
    lv_coord_t circ_tmp;
    lv_circ_init(&circ, &circ_tmp, radius);
 800cb7a:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 800cb7e:	f107 012e 	add.w	r1, r7, #46	@ 0x2e
 800cb82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800cb86:	4618      	mov	r0, r3
 800cb88:	f002 fdfe 	bl	800f788 <lv_circ_init>
    while(lv_circ_cont(&circ)) {
 800cb8c:	e017      	b.n	800cbbe <lv_draw_shadow_bottom+0x110>
        curve_x[LV_CIRC_OCT1_Y(circ)] = LV_CIRC_OCT1_X(circ);
 800cb8e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800cb92:	005b      	lsls	r3, r3, #1
 800cb94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cb96:	4413      	add	r3, r2
 800cb98:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 800cb9c:	801a      	strh	r2, [r3, #0]
        curve_x[LV_CIRC_OCT2_Y(circ)] = LV_CIRC_OCT2_X(circ);
 800cb9e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800cba2:	005b      	lsls	r3, r3, #1
 800cba4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cba6:	4413      	add	r3, r2
 800cba8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 800cbac:	801a      	strh	r2, [r3, #0]
        lv_circ_next(&circ, &circ_tmp);
 800cbae:	f107 022e 	add.w	r2, r7, #46	@ 0x2e
 800cbb2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800cbb6:	4611      	mov	r1, r2
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f002 fe12 	bl	800f7e2 <lv_circ_next>
    while(lv_circ_cont(&circ)) {
 800cbbe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f002 fdf9 	bl	800f7ba <lv_circ_cont>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1df      	bne.n	800cb8e <lv_draw_shadow_bottom+0xe0>
    }

    int16_t col;

    lv_opa_t opa = opa_scale == LV_OPA_COVER ? style->body.opa : (uint16_t)((uint16_t)style->body.opa * opa_scale) >> 8;
 800cbce:	78fb      	ldrb	r3, [r7, #3]
 800cbd0:	2bff      	cmp	r3, #255	@ 0xff
 800cbd2:	d102      	bne.n	800cbda <lv_draw_shadow_bottom+0x12c>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	7a1b      	ldrb	r3, [r3, #8]
 800cbd8:	e00a      	b.n	800cbf0 <lv_draw_shadow_bottom+0x142>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	7a1b      	ldrb	r3, [r3, #8]
 800cbde:	461a      	mov	r2, r3
 800cbe0:	78fb      	ldrb	r3, [r7, #3]
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	fb02 f303 	mul.w	r3, r2, r3
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	0a1b      	lsrs	r3, r3, #8
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    for(col = 0; col < swidth; col++) {
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800cbfa:	e01b      	b.n	800cc34 <lv_draw_shadow_bottom+0x186>
        line_1d_blur[col] = (uint32_t)((uint32_t)(swidth - col) * opa / 2) / (swidth);
 800cbfc:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	@ 0x52
 800cc00:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800cc04:	1ad3      	subs	r3, r2, r3
 800cc06:	461a      	mov	r2, r3
 800cc08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cc0c:	fb02 f303 	mul.w	r3, r2, r3
 800cc10:	085a      	lsrs	r2, r3, #1
 800cc12:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 800cc16:	fbb2 f1f3 	udiv	r1, r2, r3
 800cc1a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800cc1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc20:	4413      	add	r3, r2
 800cc22:	b2ca      	uxtb	r2, r1
 800cc24:	701a      	strb	r2, [r3, #0]
    for(col = 0; col < swidth; col++) {
 800cc26:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800cc34:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 800cc38:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	dbdd      	blt.n	800cbfc <lv_draw_shadow_bottom+0x14e>
    lv_point_t point_r;
    lv_area_t area_mid;
    lv_point_t ofs_l;
    lv_point_t ofs_r;

    ofs_l.x = coords->x1 + radius;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cc46:	b29a      	uxth	r2, r3
 800cc48:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800cc4c:	4413      	add	r3, r2
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	b21b      	sxth	r3, r3
 800cc52:	833b      	strh	r3, [r7, #24]
    ofs_l.y = coords->y2 - radius + 1 - aa;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cc5a:	b29a      	uxth	r2, r3
 800cc5c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	3301      	adds	r3, #1
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	b21b      	sxth	r3, r3
 800cc74:	837b      	strh	r3, [r7, #26]

    ofs_r.x = coords->x2 - radius;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800cc82:	1ad3      	subs	r3, r2, r3
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	b21b      	sxth	r3, r3
 800cc88:	82bb      	strh	r3, [r7, #20]
    ofs_r.y = coords->y2 - radius + 1 - aa;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	b29a      	uxth	r2, r3
 800cc9a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	3301      	adds	r3, #1
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	b21b      	sxth	r3, r3
 800ccaa:	82fb      	strh	r3, [r7, #22]

    for(col = 0; col <= radius; col++) {
 800ccac:	2300      	movs	r3, #0
 800ccae:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800ccb2:	e0af      	b.n	800ce14 <lv_draw_shadow_bottom+0x366>
        point_l.x = ofs_l.x - col;
 800ccb4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ccb8:	b29a      	uxth	r2, r3
 800ccba:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	b21b      	sxth	r3, r3
 800ccc4:	853b      	strh	r3, [r7, #40]	@ 0x28
        point_l.y = ofs_l.y + curve_x[col];
 800ccc6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800ccd0:	005b      	lsls	r3, r3, #1
 800ccd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ccd4:	440b      	add	r3, r1
 800ccd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ccda:	b29b      	uxth	r3, r3
 800ccdc:	4413      	add	r3, r2
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	b21b      	sxth	r3, r3
 800cce2:	857b      	strh	r3, [r7, #42]	@ 0x2a

        point_r.x = ofs_r.x + col;
 800cce4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800ccee:	4413      	add	r3, r2
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	b21b      	sxth	r3, r3
 800ccf4:	84bb      	strh	r3, [r7, #36]	@ 0x24
        point_r.y = ofs_r.y + curve_x[col];
 800ccf6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800cd00:	005b      	lsls	r3, r3, #1
 800cd02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cd04:	440b      	add	r3, r1
 800cd06:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	4413      	add	r3, r2
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	b21b      	sxth	r3, r3
 800cd12:	84fb      	strh	r3, [r7, #38]	@ 0x26

        lv_opa_t px_opa;
        int16_t diff = col == 0 ? 0 : curve_x[col - 1] - curve_x[col];
 800cd14:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d016      	beq.n	800cd4a <lv_draw_shadow_bottom+0x29c>
 800cd1c:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800cd20:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cd24:	3b01      	subs	r3, #1
 800cd26:	005b      	lsls	r3, r3, #1
 800cd28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800cd36:	005b      	lsls	r3, r3, #1
 800cd38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cd3a:	440b      	add	r3, r1
 800cd3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	b21b      	sxth	r3, r3
 800cd48:	e000      	b.n	800cd4c <lv_draw_shadow_bottom+0x29e>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	86bb      	strh	r3, [r7, #52]	@ 0x34
        uint16_t d;
        for(d = 0; d < swidth; d++) {
 800cd4e:	2300      	movs	r3, #0
 800cd50:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800cd54:	e051      	b.n	800cdfa <lv_draw_shadow_bottom+0x34c>
            /*When stepping a pixel in y calculate the average with the pixel from the prev. column
             * to make a blur */
            if(diff == 0) {
 800cd56:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d107      	bne.n	800cd6e <lv_draw_shadow_bottom+0x2c0>
                px_opa = line_1d_blur[d];
 800cd5e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800cd62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd64:	4413      	add	r3, r2
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 800cd6c:	e014      	b.n	800cd98 <lv_draw_shadow_bottom+0x2ea>
            } else {
                px_opa = (uint16_t)((uint16_t)line_1d_blur[d] + line_1d_blur[d - diff]) >> 1;
 800cd6e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800cd72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd74:	4413      	add	r3, r2
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	4619      	mov	r1, r3
 800cd7a:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800cd7e:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	461a      	mov	r2, r3
 800cd86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd88:	4413      	add	r3, r2
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	440b      	add	r3, r1
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	085b      	lsrs	r3, r3, #1
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            }
            lv_draw_px(point_l.x, point_l.y, mask, style->body.shadow.color, px_opa);
 800cd98:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	@ 0x28
 800cd9c:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	@ 0x2a
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800cda6:	9200      	str	r2, [sp, #0]
 800cda8:	8a1b      	ldrh	r3, [r3, #16]
 800cdaa:	68ba      	ldr	r2, [r7, #8]
 800cdac:	f7fb f944 	bl	8008038 <lv_draw_px>
            point_l.y++;
 800cdb0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	b21b      	sxth	r3, r3
 800cdbc:	857b      	strh	r3, [r7, #42]	@ 0x2a

            /*Don't overdraw the pixel on the middle*/
            if(point_r.x > ofs_l.x) {
 800cdbe:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800cdc2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	dd0b      	ble.n	800cde2 <lv_draw_shadow_bottom+0x334>
                lv_draw_px(point_r.x, point_r.y, mask, style->body.shadow.color, px_opa);
 800cdca:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	@ 0x24
 800cdce:	f9b7 1026 	ldrsh.w	r1, [r7, #38]	@ 0x26
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800cdd8:	9200      	str	r2, [sp, #0]
 800cdda:	8a1b      	ldrh	r3, [r3, #16]
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	f7fb f92b 	bl	8008038 <lv_draw_px>
            }
            point_r.y++;
 800cde2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	3301      	adds	r3, #1
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	b21b      	sxth	r3, r3
 800cdee:	84fb      	strh	r3, [r7, #38]	@ 0x26
        for(d = 0; d < swidth; d++) {
 800cdf0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800cdfa:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800cdfe:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 800ce02:	429a      	cmp	r2, r3
 800ce04:	dba7      	blt.n	800cd56 <lv_draw_shadow_bottom+0x2a8>
    for(col = 0; col <= radius; col++) {
 800ce06:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	b29b      	uxth	r3, r3
 800ce10:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800ce14:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 800ce18:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	f77f af49 	ble.w	800ccb4 <lv_draw_shadow_bottom+0x206>
        }
    }

    area_mid.x1 = ofs_l.x + 1;
 800ce22:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800ce26:	b29b      	uxth	r3, r3
 800ce28:	3301      	adds	r3, #1
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	b21b      	sxth	r3, r3
 800ce2e:	83bb      	strh	r3, [r7, #28]
    area_mid.y1 = ofs_l.y + radius;
 800ce30:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ce34:	b29a      	uxth	r2, r3
 800ce36:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800ce3a:	4413      	add	r3, r2
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	b21b      	sxth	r3, r3
 800ce40:	83fb      	strh	r3, [r7, #30]
    area_mid.x2 = ofs_r.x - 1;
 800ce42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	3b01      	subs	r3, #1
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	b21b      	sxth	r3, r3
 800ce4e:	843b      	strh	r3, [r7, #32]
    area_mid.y2 = area_mid.y1;
 800ce50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ce54:	847b      	strh	r3, [r7, #34]	@ 0x22

    uint16_t d;
    for(d = 0; d < swidth; d++) {
 800ce56:	2300      	movs	r3, #0
 800ce58:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800ce5c:	e01e      	b.n	800ce9c <lv_draw_shadow_bottom+0x3ee>
        lv_draw_fill(&area_mid, mask, style->body.shadow.color, line_1d_blur[d]);
 800ce5e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800ce62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce64:	4413      	add	r3, r2
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	f107 001c 	add.w	r0, r7, #28
 800ce6e:	8a12      	ldrh	r2, [r2, #16]
 800ce70:	68b9      	ldr	r1, [r7, #8]
 800ce72:	f7fb f979 	bl	8008168 <lv_draw_fill>
        area_mid.y1++;
 800ce76:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	3301      	adds	r3, #1
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	b21b      	sxth	r3, r3
 800ce82:	83fb      	strh	r3, [r7, #30]
        area_mid.y2++;
 800ce84:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	b21b      	sxth	r3, r3
 800ce90:	847b      	strh	r3, [r7, #34]	@ 0x22
    for(d = 0; d < swidth; d++) {
 800ce92:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 800ce96:	3301      	adds	r3, #1
 800ce98:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800ce9c:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 800cea0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 800cea4:	429a      	cmp	r2, r3
 800cea6:	dbda      	blt.n	800ce5e <lv_draw_shadow_bottom+0x3b0>
    }
}
 800cea8:	bf00      	nop
 800ceaa:	bf00      	nop
 800ceac:	3760      	adds	r7, #96	@ 0x60
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}

0800ceb2 <lv_draw_shadow_full_straight>:

static void lv_draw_shadow_full_straight(const lv_area_t * coords, const lv_area_t * mask, const lv_style_t * style,
                                         const lv_opa_t * map)
{
 800ceb2:	b580      	push	{r7, lr}
 800ceb4:	b090      	sub	sp, #64	@ 0x40
 800ceb6:	af00      	add	r7, sp, #0
 800ceb8:	60f8      	str	r0, [r7, #12]
 800ceba:	60b9      	str	r1, [r7, #8]
 800cebc:	607a      	str	r2, [r7, #4]
 800cebe:	603b      	str	r3, [r7, #0]
    bool aa           = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800cec0:	f7fa f832 	bl	8006f28 <lv_refr_get_disp_refreshing>
 800cec4:	4603      	mov	r3, r0
 800cec6:	4618      	mov	r0, r3
 800cec8:	f001 fec1 	bl	800ec4e <lv_disp_get_antialiasing>
 800cecc:	4603      	mov	r3, r0
 800cece:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
    lv_coord_t radius = style->body.radius;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	88db      	ldrh	r3, [r3, #6]
 800ced6:	877b      	strh	r3, [r7, #58]	@ 0x3a
    lv_coord_t swidth = style->body.shadow.width;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	8a5b      	ldrh	r3, [r3, #18]
 800cedc:	873b      	strh	r3, [r7, #56]	@ 0x38
    lv_coord_t width  = lv_area_get_width(coords);
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f7fc fa98 	bl	8009414 <lv_area_get_width>
 800cee4:	4603      	mov	r3, r0
 800cee6:	86fb      	strh	r3, [r7, #54]	@ 0x36
    lv_coord_t height = lv_area_get_height(coords);
 800cee8:	68f8      	ldr	r0, [r7, #12]
 800ceea:	f7fc faa9 	bl	8009440 <lv_area_get_height>
 800ceee:	4603      	mov	r3, r0
 800cef0:	86bb      	strh	r3, [r7, #52]	@ 0x34

    radius = lv_draw_cont_radius_corr(radius, width, height);
 800cef2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cef4:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	@ 0x34
 800cef8:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	@ 0x36
 800cefc:	4618      	mov	r0, r3
 800cefe:	f000 f930 	bl	800d162 <lv_draw_cont_radius_corr>
 800cf02:	4603      	mov	r3, r0
 800cf04:	877b      	strh	r3, [r7, #58]	@ 0x3a
    radius += aa;
 800cf06:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800cf0a:	b29a      	uxth	r2, r3
 800cf0c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cf0e:	4413      	add	r3, r2
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	877b      	strh	r3, [r7, #58]	@ 0x3a

    lv_area_t right_area;
    right_area.x1 = coords->x2 + 1 - aa;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800cf1a:	b29a      	uxth	r2, r3
 800cf1c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	3301      	adds	r3, #1
 800cf28:	b29b      	uxth	r3, r3
 800cf2a:	b21b      	sxth	r3, r3
 800cf2c:	853b      	strh	r3, [r7, #40]	@ 0x28
    right_area.y1 = coords->y1 + radius + aa;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cf34:	b29a      	uxth	r2, r3
 800cf36:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cf38:	4413      	add	r3, r2
 800cf3a:	b29a      	uxth	r2, r3
 800cf3c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	4413      	add	r3, r2
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	b21b      	sxth	r3, r3
 800cf48:	857b      	strh	r3, [r7, #42]	@ 0x2a
    right_area.x2 = right_area.x1;
 800cf4a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800cf4e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    right_area.y2 = coords->y2 - radius - aa;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cf56:	b29a      	uxth	r2, r3
 800cf58:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cf5a:	1ad3      	subs	r3, r2, r3
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	1ad3      	subs	r3, r2, r3
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	b21b      	sxth	r3, r3
 800cf6a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    lv_area_t left_area;
    left_area.x1 = coords->x1 - 1 + aa;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf72:	b29a      	uxth	r2, r3
 800cf74:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	4413      	add	r3, r2
 800cf7c:	b29b      	uxth	r3, r3
 800cf7e:	3b01      	subs	r3, #1
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	b21b      	sxth	r3, r3
 800cf84:	843b      	strh	r3, [r7, #32]
    left_area.y1 = coords->y1 + radius + aa;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cf8c:	b29a      	uxth	r2, r3
 800cf8e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cf90:	4413      	add	r3, r2
 800cf92:	b29a      	uxth	r2, r3
 800cf94:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800cf98:	b29b      	uxth	r3, r3
 800cf9a:	4413      	add	r3, r2
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	b21b      	sxth	r3, r3
 800cfa0:	847b      	strh	r3, [r7, #34]	@ 0x22
    left_area.x2 = left_area.x1;
 800cfa2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cfa6:	84bb      	strh	r3, [r7, #36]	@ 0x24
    left_area.y2 = coords->y2 - radius - aa;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cfb2:	1ad3      	subs	r3, r2, r3
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	b21b      	sxth	r3, r3
 800cfc2:	84fb      	strh	r3, [r7, #38]	@ 0x26

    lv_area_t top_area;
    top_area.x1 = coords->x1 + radius + aa;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfca:	b29a      	uxth	r2, r3
 800cfcc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cfce:	4413      	add	r3, r2
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800cfd6:	b29b      	uxth	r3, r3
 800cfd8:	4413      	add	r3, r2
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	b21b      	sxth	r3, r3
 800cfde:	833b      	strh	r3, [r7, #24]
    top_area.y1 = coords->y1 - 1 + aa;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	4413      	add	r3, r2
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	3b01      	subs	r3, #1
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	b21b      	sxth	r3, r3
 800cff8:	837b      	strh	r3, [r7, #26]
    top_area.x2 = coords->x2 - radius - aa;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d000:	b29a      	uxth	r2, r3
 800d002:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d004:	1ad3      	subs	r3, r2, r3
 800d006:	b29a      	uxth	r2, r3
 800d008:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800d00c:	b29b      	uxth	r3, r3
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	b29b      	uxth	r3, r3
 800d012:	b21b      	sxth	r3, r3
 800d014:	83bb      	strh	r3, [r7, #28]
    top_area.y2 = top_area.y1;
 800d016:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d01a:	83fb      	strh	r3, [r7, #30]

    lv_area_t bottom_area;
    bottom_area.x1 = coords->x1 + radius + aa;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d022:	b29a      	uxth	r2, r3
 800d024:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d026:	4413      	add	r3, r2
 800d028:	b29a      	uxth	r2, r3
 800d02a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800d02e:	b29b      	uxth	r3, r3
 800d030:	4413      	add	r3, r2
 800d032:	b29b      	uxth	r3, r3
 800d034:	b21b      	sxth	r3, r3
 800d036:	823b      	strh	r3, [r7, #16]
    bottom_area.y1 = coords->y2 + 1 - aa;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d03e:	b29a      	uxth	r2, r3
 800d040:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800d044:	b29b      	uxth	r3, r3
 800d046:	1ad3      	subs	r3, r2, r3
 800d048:	b29b      	uxth	r3, r3
 800d04a:	3301      	adds	r3, #1
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	b21b      	sxth	r3, r3
 800d050:	827b      	strh	r3, [r7, #18]
    bottom_area.x2 = coords->x2 - radius - aa;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d058:	b29a      	uxth	r2, r3
 800d05a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	b29a      	uxth	r2, r3
 800d060:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800d064:	b29b      	uxth	r3, r3
 800d066:	1ad3      	subs	r3, r2, r3
 800d068:	b29b      	uxth	r3, r3
 800d06a:	b21b      	sxth	r3, r3
 800d06c:	82bb      	strh	r3, [r7, #20]
    bottom_area.y2 = bottom_area.y1;
 800d06e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d072:	82fb      	strh	r3, [r7, #22]

    lv_opa_t opa_act;
    int16_t d;
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 800d074:	2301      	movs	r3, #1
 800d076:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d078:	e068      	b.n	800d14c <lv_draw_shadow_full_straight+0x29a>
        opa_act = map[d];
 800d07a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800d07e:	683a      	ldr	r2, [r7, #0]
 800d080:	4413      	add	r3, r2
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

        lv_draw_fill(&right_area, mask, style->body.shadow.color, opa_act);
 800d088:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800d092:	8a12      	ldrh	r2, [r2, #16]
 800d094:	68b9      	ldr	r1, [r7, #8]
 800d096:	f7fb f867 	bl	8008168 <lv_draw_fill>
        right_area.x1++;
 800d09a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	b21b      	sxth	r3, r3
 800d0a6:	853b      	strh	r3, [r7, #40]	@ 0x28
        right_area.x2++;
 800d0a8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	b29b      	uxth	r3, r3
 800d0b2:	b21b      	sxth	r3, r3
 800d0b4:	85bb      	strh	r3, [r7, #44]	@ 0x2c

        lv_draw_fill(&left_area, mask, style->body.shadow.color, opa_act);
 800d0b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d0ba:	687a      	ldr	r2, [r7, #4]
 800d0bc:	f107 0020 	add.w	r0, r7, #32
 800d0c0:	8a12      	ldrh	r2, [r2, #16]
 800d0c2:	68b9      	ldr	r1, [r7, #8]
 800d0c4:	f7fb f850 	bl	8008168 <lv_draw_fill>
        left_area.x1--;
 800d0c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	3b01      	subs	r3, #1
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	b21b      	sxth	r3, r3
 800d0d4:	843b      	strh	r3, [r7, #32]
        left_area.x2--;
 800d0d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	b21b      	sxth	r3, r3
 800d0e2:	84bb      	strh	r3, [r7, #36]	@ 0x24

        lv_draw_fill(&top_area, mask, style->body.shadow.color, opa_act);
 800d0e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	f107 0018 	add.w	r0, r7, #24
 800d0ee:	8a12      	ldrh	r2, [r2, #16]
 800d0f0:	68b9      	ldr	r1, [r7, #8]
 800d0f2:	f7fb f839 	bl	8008168 <lv_draw_fill>
        top_area.y1--;
 800d0f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	3b01      	subs	r3, #1
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	b21b      	sxth	r3, r3
 800d102:	837b      	strh	r3, [r7, #26]
        top_area.y2--;
 800d104:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d108:	b29b      	uxth	r3, r3
 800d10a:	3b01      	subs	r3, #1
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	b21b      	sxth	r3, r3
 800d110:	83fb      	strh	r3, [r7, #30]

        lv_draw_fill(&bottom_area, mask, style->body.shadow.color, opa_act);
 800d112:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	f107 0010 	add.w	r0, r7, #16
 800d11c:	8a12      	ldrh	r2, [r2, #16]
 800d11e:	68b9      	ldr	r1, [r7, #8]
 800d120:	f7fb f822 	bl	8008168 <lv_draw_fill>
        bottom_area.y1++;
 800d124:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d128:	b29b      	uxth	r3, r3
 800d12a:	3301      	adds	r3, #1
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	b21b      	sxth	r3, r3
 800d130:	827b      	strh	r3, [r7, #18]
        bottom_area.y2++;
 800d132:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d136:	b29b      	uxth	r3, r3
 800d138:	3301      	adds	r3, #1
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	b21b      	sxth	r3, r3
 800d13e:	82fb      	strh	r3, [r7, #22]
    for(d = 1 /*+ LV_ANTIALIAS*/; d <= swidth /* - LV_ANTIALIAS*/; d++) {
 800d140:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 800d144:	b29b      	uxth	r3, r3
 800d146:	3301      	adds	r3, #1
 800d148:	b29b      	uxth	r3, r3
 800d14a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d14c:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	@ 0x3e
 800d150:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800d154:	429a      	cmp	r2, r3
 800d156:	dd90      	ble.n	800d07a <lv_draw_shadow_full_straight+0x1c8>
    }
}
 800d158:	bf00      	nop
 800d15a:	bf00      	nop
 800d15c:	3740      	adds	r7, #64	@ 0x40
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <lv_draw_cont_radius_corr>:

#endif

static uint16_t lv_draw_cont_radius_corr(uint16_t r, lv_coord_t w, lv_coord_t h)
{
 800d162:	b580      	push	{r7, lr}
 800d164:	b084      	sub	sp, #16
 800d166:	af00      	add	r7, sp, #0
 800d168:	4603      	mov	r3, r0
 800d16a:	80fb      	strh	r3, [r7, #6]
 800d16c:	460b      	mov	r3, r1
 800d16e:	80bb      	strh	r3, [r7, #4]
 800d170:	4613      	mov	r3, r2
 800d172:	807b      	strh	r3, [r7, #2]
    bool aa = lv_disp_get_antialiasing(lv_refr_get_disp_refreshing());
 800d174:	f7f9 fed8 	bl	8006f28 <lv_refr_get_disp_refreshing>
 800d178:	4603      	mov	r3, r0
 800d17a:	4618      	mov	r0, r3
 800d17c:	f001 fd67 	bl	800ec4e <lv_disp_get_antialiasing>
 800d180:	4603      	mov	r3, r0
 800d182:	73fb      	strb	r3, [r7, #15]

    if(r >= (w >> 1)) {
 800d184:	88fb      	ldrh	r3, [r7, #6]
 800d186:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d18a:	1052      	asrs	r2, r2, #1
 800d18c:	b212      	sxth	r2, r2
 800d18e:	4293      	cmp	r3, r2
 800d190:	db0a      	blt.n	800d1a8 <lv_draw_cont_radius_corr+0x46>
        r = (w >> 1);
 800d192:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d196:	105b      	asrs	r3, r3, #1
 800d198:	b21b      	sxth	r3, r3
 800d19a:	80fb      	strh	r3, [r7, #6]
        if(r != 0) r--;
 800d19c:	88fb      	ldrh	r3, [r7, #6]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d002      	beq.n	800d1a8 <lv_draw_cont_radius_corr+0x46>
 800d1a2:	88fb      	ldrh	r3, [r7, #6]
 800d1a4:	3b01      	subs	r3, #1
 800d1a6:	80fb      	strh	r3, [r7, #6]
    }
    if(r >= (h >> 1)) {
 800d1a8:	88fb      	ldrh	r3, [r7, #6]
 800d1aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d1ae:	1052      	asrs	r2, r2, #1
 800d1b0:	b212      	sxth	r2, r2
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	db0a      	blt.n	800d1cc <lv_draw_cont_radius_corr+0x6a>
        r = (h >> 1);
 800d1b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1ba:	105b      	asrs	r3, r3, #1
 800d1bc:	b21b      	sxth	r3, r3
 800d1be:	80fb      	strh	r3, [r7, #6]
        if(r != 0) r--;
 800d1c0:	88fb      	ldrh	r3, [r7, #6]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d002      	beq.n	800d1cc <lv_draw_cont_radius_corr+0x6a>
 800d1c6:	88fb      	ldrh	r3, [r7, #6]
 800d1c8:	3b01      	subs	r3, #1
 800d1ca:	80fb      	strh	r3, [r7, #6]
    }

    if(r > 0) r -= aa;
 800d1cc:	88fb      	ldrh	r3, [r7, #6]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d004      	beq.n	800d1dc <lv_draw_cont_radius_corr+0x7a>
 800d1d2:	7bfb      	ldrb	r3, [r7, #15]
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	88fa      	ldrh	r2, [r7, #6]
 800d1d8:	1ad3      	subs	r3, r2, r3
 800d1da:	80fb      	strh	r3, [r7, #6]

    return r;
 800d1dc:	88fb      	ldrh	r3, [r7, #6]
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3710      	adds	r7, #16
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
	...

0800d1e8 <antialias_get_opa_circ>:
 * @param px_id index of pixel on the line segment
 * @param line_opa opacity of the lien (it will be the max opacity)
 * @return the desired opacity of the pixel
 */
static lv_opa_t antialias_get_opa_circ(lv_coord_t seg, lv_coord_t px_id, lv_opa_t opa)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b085      	sub	sp, #20
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	80fb      	strh	r3, [r7, #6]
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	80bb      	strh	r3, [r7, #4]
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	70fb      	strb	r3, [r7, #3]
#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 1
    if(seg == 1) return 170;
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 2
    if(seg == 2) return (opa_map2[px_id] * opa) >> 8;
 800d1fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d1fe:	2b02      	cmp	r3, #2
 800d200:	d10a      	bne.n	800d218 <antialias_get_opa_circ+0x30>
 800d202:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d206:	4a20      	ldr	r2, [pc, #128]	@ (800d288 <antialias_get_opa_circ+0xa0>)
 800d208:	5cd3      	ldrb	r3, [r2, r3]
 800d20a:	461a      	mov	r2, r3
 800d20c:	78fb      	ldrb	r3, [r7, #3]
 800d20e:	fb02 f303 	mul.w	r3, r2, r3
 800d212:	121b      	asrs	r3, r3, #8
 800d214:	b2db      	uxtb	r3, r3
 800d216:	e031      	b.n	800d27c <antialias_get_opa_circ+0x94>
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 3
    if(seg == 3) return (opa_map3[px_id] * opa) >> 8;
 800d218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d21c:	2b03      	cmp	r3, #3
 800d21e:	d10a      	bne.n	800d236 <antialias_get_opa_circ+0x4e>
 800d220:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d224:	4a19      	ldr	r2, [pc, #100]	@ (800d28c <antialias_get_opa_circ+0xa4>)
 800d226:	5cd3      	ldrb	r3, [r2, r3]
 800d228:	461a      	mov	r2, r3
 800d22a:	78fb      	ldrb	r3, [r7, #3]
 800d22c:	fb02 f303 	mul.w	r3, r2, r3
 800d230:	121b      	asrs	r3, r3, #8
 800d232:	b2db      	uxtb	r3, r3
 800d234:	e022      	b.n	800d27c <antialias_get_opa_circ+0x94>
#endif

#if CIRCLE_AA_NON_LINEAR_OPA_THRESHOLD < 4
    if(seg == 4) return (opa_map4[px_id] * opa) >> 8;
 800d236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d23a:	2b04      	cmp	r3, #4
 800d23c:	d10a      	bne.n	800d254 <antialias_get_opa_circ+0x6c>
 800d23e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d242:	4a13      	ldr	r2, [pc, #76]	@ (800d290 <antialias_get_opa_circ+0xa8>)
 800d244:	5cd3      	ldrb	r3, [r2, r3]
 800d246:	461a      	mov	r2, r3
 800d248:	78fb      	ldrb	r3, [r7, #3]
 800d24a:	fb02 f303 	mul.w	r3, r2, r3
 800d24e:	121b      	asrs	r3, r3, #8
 800d250:	b2db      	uxtb	r3, r3
 800d252:	e013      	b.n	800d27c <antialias_get_opa_circ+0x94>
#endif

    uint8_t id = (uint32_t)((uint32_t)px_id * (sizeof(opa_map8) - 1)) / (seg - 1);
 800d254:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d258:	4613      	mov	r3, r2
 800d25a:	00db      	lsls	r3, r3, #3
 800d25c:	1a9b      	subs	r3, r3, r2
 800d25e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d262:	3a01      	subs	r2, #1
 800d264:	fbb3 f3f2 	udiv	r3, r3, r2
 800d268:	73fb      	strb	r3, [r7, #15]
    return (uint32_t)((uint32_t)opa_map8[id] * opa) >> 8;
 800d26a:	7bfb      	ldrb	r3, [r7, #15]
 800d26c:	4a09      	ldr	r2, [pc, #36]	@ (800d294 <antialias_get_opa_circ+0xac>)
 800d26e:	5cd3      	ldrb	r3, [r2, r3]
 800d270:	461a      	mov	r2, r3
 800d272:	78fb      	ldrb	r3, [r7, #3]
 800d274:	fb02 f303 	mul.w	r3, r2, r3
 800d278:	0a1b      	lsrs	r3, r3, #8
 800d27a:	b2db      	uxtb	r3, r3
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3714      	adds	r7, #20
 800d280:	46bd      	mov	sp, r7
 800d282:	bc80      	pop	{r7}
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	0801cb9c 	.word	0x0801cb9c
 800d28c:	0801cba0 	.word	0x0801cba0
 800d290:	0801cba4 	.word	0x0801cba4
 800d294:	0801cba8 	.word	0x0801cba8

0800d298 <lv_img_cache_set_size>:
 * More cached images mean more opened image at same time which might mean more memory usage.
 * E.g. if 20 PNG or JPG images are open in the RAM they consume memory while opened in the cache.
 * @param new_entry_cnt number of image to cache
 */
void lv_img_cache_set_size(uint16_t new_entry_cnt)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	4603      	mov	r3, r0
 800d2a0:	80fb      	strh	r3, [r7, #6]
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
 800d2a2:	4b28      	ldr	r3, [pc, #160]	@ (800d344 <lv_img_cache_set_size+0xac>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d007      	beq.n	800d2ba <lv_img_cache_set_size+0x22>
        /*Clean the cache before free it*/
        lv_img_cache_invalidate_src(NULL);
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	f000 f84e 	bl	800d34c <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
 800d2b0:	4b24      	ldr	r3, [pc, #144]	@ (800d344 <lv_img_cache_set_size+0xac>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f002 ff3d 	bl	8010134 <lv_mem_free>
    }

    /*Reallocate the cache*/
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
 800d2ba:	88fa      	ldrh	r2, [r7, #6]
 800d2bc:	4613      	mov	r3, r2
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	4413      	add	r3, r2
 800d2c2:	00db      	lsls	r3, r3, #3
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f002 fefb 	bl	80100c0 <lv_mem_alloc>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	4a1d      	ldr	r2, [pc, #116]	@ (800d344 <lv_img_cache_set_size+0xac>)
 800d2ce:	6013      	str	r3, [r2, #0]
    lv_mem_assert(LV_GC_ROOT(_lv_img_cache_array));
 800d2d0:	4b1c      	ldr	r3, [pc, #112]	@ (800d344 <lv_img_cache_set_size+0xac>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d101      	bne.n	800d2dc <lv_img_cache_set_size+0x44>
 800d2d8:	bf00      	nop
 800d2da:	e7fd      	b.n	800d2d8 <lv_img_cache_set_size+0x40>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
 800d2dc:	4b19      	ldr	r3, [pc, #100]	@ (800d344 <lv_img_cache_set_size+0xac>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d103      	bne.n	800d2ec <lv_img_cache_set_size+0x54>
        entry_cnt = 0;
 800d2e4:	4b18      	ldr	r3, [pc, #96]	@ (800d348 <lv_img_cache_set_size+0xb0>)
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	801a      	strh	r2, [r3, #0]
        return;
 800d2ea:	e027      	b.n	800d33c <lv_img_cache_set_size+0xa4>
    }
    entry_cnt = new_entry_cnt;
 800d2ec:	4a16      	ldr	r2, [pc, #88]	@ (800d348 <lv_img_cache_set_size+0xb0>)
 800d2ee:	88fb      	ldrh	r3, [r7, #6]
 800d2f0:	8013      	strh	r3, [r2, #0]

    /*Clean the cache*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	81fb      	strh	r3, [r7, #14]
 800d2f6:	e01c      	b.n	800d332 <lv_img_cache_set_size+0x9a>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 800d2f8:	4b12      	ldr	r3, [pc, #72]	@ (800d344 <lv_img_cache_set_size+0xac>)
 800d2fa:	6819      	ldr	r1, [r3, #0]
 800d2fc:	89fa      	ldrh	r2, [r7, #14]
 800d2fe:	4613      	mov	r3, r2
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	4413      	add	r3, r2
 800d304:	00db      	lsls	r3, r3, #3
 800d306:	440b      	add	r3, r1
 800d308:	2224      	movs	r2, #36	@ 0x24
 800d30a:	2100      	movs	r1, #0
 800d30c:	4618      	mov	r0, r3
 800d30e:	f00e fae8 	bl	801b8e2 <memset>
        memset(&LV_GC_ROOT(_lv_img_cache_array)[i], 0, sizeof(lv_img_cache_entry_t));
 800d312:	4b0c      	ldr	r3, [pc, #48]	@ (800d344 <lv_img_cache_set_size+0xac>)
 800d314:	6819      	ldr	r1, [r3, #0]
 800d316:	89fa      	ldrh	r2, [r7, #14]
 800d318:	4613      	mov	r3, r2
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	4413      	add	r3, r2
 800d31e:	00db      	lsls	r3, r3, #3
 800d320:	440b      	add	r3, r1
 800d322:	2228      	movs	r2, #40	@ 0x28
 800d324:	2100      	movs	r1, #0
 800d326:	4618      	mov	r0, r3
 800d328:	f00e fadb 	bl	801b8e2 <memset>
    for(i = 0; i < entry_cnt; i++) {
 800d32c:	89fb      	ldrh	r3, [r7, #14]
 800d32e:	3301      	adds	r3, #1
 800d330:	81fb      	strh	r3, [r7, #14]
 800d332:	4b05      	ldr	r3, [pc, #20]	@ (800d348 <lv_img_cache_set_size+0xb0>)
 800d334:	881b      	ldrh	r3, [r3, #0]
 800d336:	89fa      	ldrh	r2, [r7, #14]
 800d338:	429a      	cmp	r2, r3
 800d33a:	d3dd      	bcc.n	800d2f8 <lv_img_cache_set_size+0x60>
    }
}
 800d33c:	3710      	adds	r7, #16
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}
 800d342:	bf00      	nop
 800d344:	20002d5c 	.word	0x20002d5c
 800d348:	20002cf0 	.word	0x20002cf0

0800d34c <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
 800d354:	4b28      	ldr	r3, [pc, #160]	@ (800d3f8 <lv_img_cache_invalidate_src+0xac>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	60bb      	str	r3, [r7, #8]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
 800d35a:	2300      	movs	r3, #0
 800d35c:	81fb      	strh	r3, [r7, #14]
 800d35e:	e041      	b.n	800d3e4 <lv_img_cache_invalidate_src+0x98>
        if(cache[i].dec_dsc.src == src || src == NULL) {
 800d360:	89fa      	ldrh	r2, [r7, #14]
 800d362:	4613      	mov	r3, r2
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4413      	add	r3, r2
 800d368:	00db      	lsls	r3, r3, #3
 800d36a:	461a      	mov	r2, r3
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	4413      	add	r3, r2
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	429a      	cmp	r2, r3
 800d376:	d002      	beq.n	800d37e <lv_img_cache_invalidate_src+0x32>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d12f      	bne.n	800d3de <lv_img_cache_invalidate_src+0x92>
            if(cache[i].dec_dsc.src != NULL) {
 800d37e:	89fa      	ldrh	r2, [r7, #14]
 800d380:	4613      	mov	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	4413      	add	r3, r2
 800d386:	00db      	lsls	r3, r3, #3
 800d388:	461a      	mov	r2, r3
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	4413      	add	r3, r2
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d00a      	beq.n	800d3aa <lv_img_cache_invalidate_src+0x5e>
                lv_img_decoder_close(&cache[i].dec_dsc);
 800d394:	89fa      	ldrh	r2, [r7, #14]
 800d396:	4613      	mov	r3, r2
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	4413      	add	r3, r2
 800d39c:	00db      	lsls	r3, r3, #3
 800d39e:	461a      	mov	r2, r3
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f000 f88b 	bl	800d4c0 <lv_img_decoder_close>
            }

            memset(&cache[i].dec_dsc, 0, sizeof(lv_img_decoder_dsc_t));
 800d3aa:	89fa      	ldrh	r2, [r7, #14]
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	4413      	add	r3, r2
 800d3b2:	00db      	lsls	r3, r3, #3
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	4413      	add	r3, r2
 800d3ba:	2224      	movs	r2, #36	@ 0x24
 800d3bc:	2100      	movs	r1, #0
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f00e fa8f 	bl	801b8e2 <memset>
            memset(&cache[i], 0, sizeof(lv_img_cache_entry_t));
 800d3c4:	89fa      	ldrh	r2, [r7, #14]
 800d3c6:	4613      	mov	r3, r2
 800d3c8:	009b      	lsls	r3, r3, #2
 800d3ca:	4413      	add	r3, r2
 800d3cc:	00db      	lsls	r3, r3, #3
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	4413      	add	r3, r2
 800d3d4:	2228      	movs	r2, #40	@ 0x28
 800d3d6:	2100      	movs	r1, #0
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f00e fa82 	bl	801b8e2 <memset>
    for(i = 0; i < entry_cnt; i++) {
 800d3de:	89fb      	ldrh	r3, [r7, #14]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	81fb      	strh	r3, [r7, #14]
 800d3e4:	4b05      	ldr	r3, [pc, #20]	@ (800d3fc <lv_img_cache_invalidate_src+0xb0>)
 800d3e6:	881b      	ldrh	r3, [r3, #0]
 800d3e8:	89fa      	ldrh	r2, [r7, #14]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d3b8      	bcc.n	800d360 <lv_img_cache_invalidate_src+0x14>
        }
    }
}
 800d3ee:	bf00      	nop
 800d3f0:	bf00      	nop
 800d3f2:	3710      	adds	r7, #16
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	20002d5c 	.word	0x20002d5c
 800d3fc:	20002cf0 	.word	0x20002cf0

0800d400 <lv_color_make>:
}
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
#define LV_COLOR_MAKE(r8, g8, b8) ((lv_color_t){{b8 >> 3, g8 >> 2, r8 >> 3}})
static inline lv_color_t lv_color_make(uint8_t r8, uint8_t g8, uint8_t b8)
{
 800d400:	b480      	push	{r7}
 800d402:	b085      	sub	sp, #20
 800d404:	af00      	add	r7, sp, #0
 800d406:	4603      	mov	r3, r0
 800d408:	71fb      	strb	r3, [r7, #7]
 800d40a:	460b      	mov	r3, r1
 800d40c:	71bb      	strb	r3, [r7, #6]
 800d40e:	4613      	mov	r3, r2
 800d410:	717b      	strb	r3, [r7, #5]
    lv_color_t color;
    color.ch.blue  = (uint16_t)(b8 >> 3);
 800d412:	797b      	ldrb	r3, [r7, #5]
 800d414:	08db      	lsrs	r3, r3, #3
 800d416:	b2db      	uxtb	r3, r3
 800d418:	f003 031f 	and.w	r3, r3, #31
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	7b3b      	ldrb	r3, [r7, #12]
 800d420:	f362 0304 	bfi	r3, r2, #0, #5
 800d424:	733b      	strb	r3, [r7, #12]
    color.ch.green = (uint16_t)(g8 >> 2);
 800d426:	79bb      	ldrb	r3, [r7, #6]
 800d428:	089b      	lsrs	r3, r3, #2
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d430:	b2da      	uxtb	r2, r3
 800d432:	89bb      	ldrh	r3, [r7, #12]
 800d434:	f362 134a 	bfi	r3, r2, #5, #6
 800d438:	81bb      	strh	r3, [r7, #12]
    color.ch.red   = (uint16_t)(r8 >> 3);
 800d43a:	79fb      	ldrb	r3, [r7, #7]
 800d43c:	08db      	lsrs	r3, r3, #3
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	f003 031f 	and.w	r3, r3, #31
 800d444:	b2da      	uxtb	r2, r3
 800d446:	7b7b      	ldrb	r3, [r7, #13]
 800d448:	f362 03c7 	bfi	r3, r2, #3, #5
 800d44c:	737b      	strb	r3, [r7, #13]
    return color;
 800d44e:	89bb      	ldrh	r3, [r7, #12]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3714      	adds	r7, #20
 800d454:	46bd      	mov	sp, r7
 800d456:	bc80      	pop	{r7}
 800d458:	4770      	bx	lr
	...

0800d45c <lv_img_decoder_init>:

/**
 * Initialize the image decoder module
 * */
void lv_img_decoder_init(void)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
 800d462:	2114      	movs	r1, #20
 800d464:	4811      	ldr	r0, [pc, #68]	@ (800d4ac <lv_img_decoder_init+0x50>)
 800d466:	f002 fb89 	bl	800fb7c <lv_ll_init>

    lv_img_decoder_t * decoder;

    /*Create a decoder for the built in color format*/
    decoder = lv_img_decoder_create();
 800d46a:	f000 f83f 	bl	800d4ec <lv_img_decoder_create>
 800d46e:	6078      	str	r0, [r7, #4]
    if(decoder == NULL) {
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d104      	bne.n	800d480 <lv_img_decoder_init+0x24>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
        lv_mem_assert(decoder);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d112      	bne.n	800d4a2 <lv_img_decoder_init+0x46>
 800d47c:	bf00      	nop
 800d47e:	e7fd      	b.n	800d47c <lv_img_decoder_init+0x20>
        return;
    }

    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
 800d480:	490b      	ldr	r1, [pc, #44]	@ (800d4b0 <lv_img_decoder_init+0x54>)
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 f850 	bl	800d528 <lv_img_decoder_set_info_cb>
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
 800d488:	490a      	ldr	r1, [pc, #40]	@ (800d4b4 <lv_img_decoder_init+0x58>)
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f859 	bl	800d542 <lv_img_decoder_set_open_cb>
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
 800d490:	4909      	ldr	r1, [pc, #36]	@ (800d4b8 <lv_img_decoder_init+0x5c>)
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f000 f862 	bl	800d55c <lv_img_decoder_set_read_line_cb>
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
 800d498:	4908      	ldr	r1, [pc, #32]	@ (800d4bc <lv_img_decoder_init+0x60>)
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 f86b 	bl	800d576 <lv_img_decoder_set_close_cb>
 800d4a0:	e000      	b.n	800d4a4 <lv_img_decoder_init+0x48>
        return;
 800d4a2:	bf00      	nop
}
 800d4a4:	3708      	adds	r7, #8
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	20002d50 	.word	0x20002d50
 800d4b0:	0800d591 	.word	0x0800d591
 800d4b4:	0800d695 	.word	0x0800d695
 800d4b8:	0800d8f5 	.word	0x0800d8f5
 800d4bc:	0800da19 	.word	0x0800da19

0800d4c0 <lv_img_decoder_close>:
/**
 * Close a decoding session
 * @param dsc pointer to `lv_img_decoder_dsc_t` used in `lv_img_decoder_open`
 */
void lv_img_decoder_close(lv_img_decoder_dsc_t * dsc)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
    if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	68db      	ldr	r3, [r3, #12]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d007      	beq.n	800d4e2 <lv_img_decoder_close+0x22>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	6812      	ldr	r2, [r2, #0]
 800d4dc:	6879      	ldr	r1, [r7, #4]
 800d4de:	4610      	mov	r0, r2
 800d4e0:	4798      	blx	r3
}
 800d4e2:	bf00      	nop
 800d4e4:	3708      	adds	r7, #8
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
	...

0800d4ec <lv_img_decoder_create>:
/**
 * Create a new image decoder
 * @return pointer to the new image decoder
 */
lv_img_decoder_t * lv_img_decoder_create(void)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
    lv_img_decoder_t * decoder;
    decoder = lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
 800d4f2:	480c      	ldr	r0, [pc, #48]	@ (800d524 <lv_img_decoder_create+0x38>)
 800d4f4:	f002 fb61 	bl	800fbba <lv_ll_ins_head>
 800d4f8:	6078      	str	r0, [r7, #4]
    lv_mem_assert(decoder);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d101      	bne.n	800d504 <lv_img_decoder_create+0x18>
 800d500:	bf00      	nop
 800d502:	e7fd      	b.n	800d500 <lv_img_decoder_create+0x14>
    if(decoder == NULL) return NULL;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d101      	bne.n	800d50e <lv_img_decoder_create+0x22>
 800d50a:	2300      	movs	r3, #0
 800d50c:	e005      	b.n	800d51a <lv_img_decoder_create+0x2e>

    memset(decoder, 0, sizeof(lv_img_decoder_t));
 800d50e:	2214      	movs	r2, #20
 800d510:	2100      	movs	r1, #0
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f00e f9e5 	bl	801b8e2 <memset>

    return decoder;
 800d518:	687b      	ldr	r3, [r7, #4]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3708      	adds	r7, #8
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	20002d50 	.word	0x20002d50

0800d528 <lv_img_decoder_set_info_cb>:
 * Set a callback to get information about the image
 * @param decoder pointer to an image decoder
 * @param info_cb a function to collect info about an image (fill an `lv_img_header_t` struct)
 */
void lv_img_decoder_set_info_cb(lv_img_decoder_t * decoder, lv_img_decoder_info_f_t info_cb)
{
 800d528:	b480      	push	{r7}
 800d52a:	b083      	sub	sp, #12
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	6039      	str	r1, [r7, #0]
    decoder->info_cb = info_cb;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	683a      	ldr	r2, [r7, #0]
 800d536:	601a      	str	r2, [r3, #0]
}
 800d538:	bf00      	nop
 800d53a:	370c      	adds	r7, #12
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bc80      	pop	{r7}
 800d540:	4770      	bx	lr

0800d542 <lv_img_decoder_set_open_cb>:
 * Set a callback to open an image
 * @param decoder pointer to an image decoder
 * @param open_cb a function to open an image
 */
void lv_img_decoder_set_open_cb(lv_img_decoder_t * decoder, lv_img_decoder_open_f_t open_cb)
{
 800d542:	b480      	push	{r7}
 800d544:	b083      	sub	sp, #12
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
 800d54a:	6039      	str	r1, [r7, #0]
    decoder->open_cb = open_cb;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	683a      	ldr	r2, [r7, #0]
 800d550:	605a      	str	r2, [r3, #4]
}
 800d552:	bf00      	nop
 800d554:	370c      	adds	r7, #12
 800d556:	46bd      	mov	sp, r7
 800d558:	bc80      	pop	{r7}
 800d55a:	4770      	bx	lr

0800d55c <lv_img_decoder_set_read_line_cb>:
 * Set a callback to a decoded line of an image
 * @param decoder pointer to an image decoder
 * @param read_line_cb a function to read a line of an image
 */
void lv_img_decoder_set_read_line_cb(lv_img_decoder_t * decoder, lv_img_decoder_read_line_f_t read_line_cb)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
    decoder->read_line_cb = read_line_cb;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	683a      	ldr	r2, [r7, #0]
 800d56a:	609a      	str	r2, [r3, #8]
}
 800d56c:	bf00      	nop
 800d56e:	370c      	adds	r7, #12
 800d570:	46bd      	mov	sp, r7
 800d572:	bc80      	pop	{r7}
 800d574:	4770      	bx	lr

0800d576 <lv_img_decoder_set_close_cb>:
 * Set a callback to close a decoding session. E.g. close files and free other resources.
 * @param decoder pointer to an image decoder
 * @param close_cb a function to close a decoding session
 */
void lv_img_decoder_set_close_cb(lv_img_decoder_t * decoder, lv_img_decoder_close_f_t close_cb)
{
 800d576:	b480      	push	{r7}
 800d578:	b083      	sub	sp, #12
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
 800d57e:	6039      	str	r1, [r7, #0]
    decoder->close_cb = close_cb;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	683a      	ldr	r2, [r7, #0]
 800d584:	60da      	str	r2, [r3, #12]
}
 800d586:	bf00      	nop
 800d588:	370c      	adds	r7, #12
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bc80      	pop	{r7}
 800d58e:	4770      	bx	lr

0800d590 <lv_img_decoder_built_in_info>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b088      	sub	sp, #32
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	607a      	str	r2, [r7, #4]
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
 800d59c:	68b8      	ldr	r0, [r7, #8]
 800d59e:	f7fb fa5d 	bl	8008a5c <lv_img_src_get_type>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	77bb      	strb	r3, [r7, #30]
    if(src_type == LV_IMG_SRC_VARIABLE) {
 800d5a6:	7fbb      	ldrb	r3, [r7, #30]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d11e      	bne.n	800d5ea <lv_img_decoder_built_in_info+0x5a>
        header->w  = ((lv_img_dsc_t *)src)->header.w;
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800d5b4:	b299      	uxth	r1, r3
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	6813      	ldr	r3, [r2, #0]
 800d5ba:	f361 2394 	bfi	r3, r1, #10, #11
 800d5be:	6013      	str	r3, [r2, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	885b      	ldrh	r3, [r3, #2]
 800d5c4:	f3c3 134a 	ubfx	r3, r3, #5, #11
 800d5c8:	b299      	uxth	r1, r3
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	8853      	ldrh	r3, [r2, #2]
 800d5ce:	f361 134f 	bfi	r3, r1, #5, #11
 800d5d2:	8053      	strh	r3, [r2, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800d5dc:	b2d9      	uxtb	r1, r3
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	7813      	ldrb	r3, [r2, #0]
 800d5e2:	f361 0304 	bfi	r3, r1, #0, #5
 800d5e6:	7013      	strb	r3, [r2, #0]
 800d5e8:	e04e      	b.n	800d688 <lv_img_decoder_built_in_info+0xf8>
    }
#if LV_USE_FILESYSTEM
    else if(src_type == LV_IMG_SRC_FILE) {
 800d5ea:	7fbb      	ldrb	r3, [r7, #30]
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d133      	bne.n	800d658 <lv_img_decoder_built_in_info+0xc8>
        lv_fs_file_t file;
        lv_fs_res_t res;
        uint32_t rn;
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
 800d5f0:	f107 0314 	add.w	r3, r7, #20
 800d5f4:	2202      	movs	r2, #2
 800d5f6:	68b9      	ldr	r1, [r7, #8]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f002 f945 	bl	800f888 <lv_fs_open>
 800d5fe:	4603      	mov	r3, r0
 800d600:	77fb      	strb	r3, [r7, #31]
        if(res == LV_FS_RES_OK) {
 800d602:	7ffb      	ldrb	r3, [r7, #31]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d10e      	bne.n	800d626 <lv_img_decoder_built_in_info+0x96>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
 800d608:	f107 0310 	add.w	r3, r7, #16
 800d60c:	f107 0014 	add.w	r0, r7, #20
 800d610:	2204      	movs	r2, #4
 800d612:	6879      	ldr	r1, [r7, #4]
 800d614:	f002 f9e8 	bl	800f9e8 <lv_fs_read>
 800d618:	4603      	mov	r3, r0
 800d61a:	77fb      	strb	r3, [r7, #31]
            lv_fs_close(&file);
 800d61c:	f107 0314 	add.w	r3, r7, #20
 800d620:	4618      	mov	r0, r3
 800d622:	f002 f9b2 	bl	800f98a <lv_fs_close>
        }

        /*Create a dummy header on fs error*/
        if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
 800d626:	7ffb      	ldrb	r3, [r7, #31]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d102      	bne.n	800d632 <lv_img_decoder_built_in_info+0xa2>
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	2b04      	cmp	r3, #4
 800d630:	d02a      	beq.n	800d688 <lv_img_decoder_built_in_info+0xf8>
            header->w  = LV_DPI;
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	6813      	ldr	r3, [r2, #0]
 800d636:	2164      	movs	r1, #100	@ 0x64
 800d638:	f361 2394 	bfi	r3, r1, #10, #11
 800d63c:	6013      	str	r3, [r2, #0]
            header->h  = LV_DPI;
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	8853      	ldrh	r3, [r2, #2]
 800d642:	2164      	movs	r1, #100	@ 0x64
 800d644:	f361 134f 	bfi	r3, r1, #5, #11
 800d648:	8053      	strh	r3, [r2, #2]
            header->cf = LV_IMG_CF_UNKNOWN;
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	7813      	ldrb	r3, [r2, #0]
 800d64e:	f36f 0304 	bfc	r3, #0, #5
 800d652:	7013      	strb	r3, [r2, #0]
            return LV_RES_INV;
 800d654:	2300      	movs	r3, #0
 800d656:	e018      	b.n	800d68a <lv_img_decoder_built_in_info+0xfa>
        }
    }
#endif
    else if(src_type == LV_IMG_SRC_SYMBOL) {
 800d658:	7fbb      	ldrb	r3, [r7, #30]
 800d65a:	2b02      	cmp	r3, #2
 800d65c:	d112      	bne.n	800d684 <lv_img_decoder_built_in_info+0xf4>
        /*The size depend on the font but it is unknown here. It should be handled outside of the
         * function*/
        header->w = 1;
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	6813      	ldr	r3, [r2, #0]
 800d662:	2101      	movs	r1, #1
 800d664:	f361 2394 	bfi	r3, r1, #10, #11
 800d668:	6013      	str	r3, [r2, #0]
        header->h = 1;
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	8853      	ldrh	r3, [r2, #2]
 800d66e:	2101      	movs	r1, #1
 800d670:	f361 134f 	bfi	r3, r1, #5, #11
 800d674:	8053      	strh	r3, [r2, #2]
        /* Symbols always have transparent parts. Important because of cover check in the design
         * function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
 800d676:	687a      	ldr	r2, [r7, #4]
 800d678:	7813      	ldrb	r3, [r2, #0]
 800d67a:	210b      	movs	r1, #11
 800d67c:	f361 0304 	bfi	r3, r1, #0, #5
 800d680:	7013      	strb	r3, [r2, #0]
 800d682:	e001      	b.n	800d688 <lv_img_decoder_built_in_info+0xf8>
    } else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
 800d684:	2300      	movs	r3, #0
 800d686:	e000      	b.n	800d68a <lv_img_decoder_built_in_info+0xfa>
    }
    return LV_RES_OK;
 800d688:	2301      	movs	r3, #1
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3720      	adds	r7, #32
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
	...

0800d694 <lv_img_decoder_built_in_open>:

static lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800d694:	b5b0      	push	{r4, r5, r7, lr}
 800d696:	b08c      	sub	sp, #48	@ 0x30
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	7b1b      	ldrb	r3, [r3, #12]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d155      	bne.n	800d752 <lv_img_decoder_built_in_open+0xbe>
#if LV_USE_FILESYSTEM

        /*Support only "*.bin" files*/
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f002 f9f4 	bl	800fa98 <lv_fs_get_ext>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	498f      	ldr	r1, [pc, #572]	@ (800d8f0 <lv_img_decoder_built_in_open+0x25c>)
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7f2 fdb5 	bl	8000224 <strcmp>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d001      	beq.n	800d6c4 <lv_img_decoder_built_in_open+0x30>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	e111      	b.n	800d8e8 <lv_img_decoder_built_in_open+0x254>

        lv_fs_file_t f;
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	6859      	ldr	r1, [r3, #4]
 800d6c8:	f107 030c 	add.w	r3, r7, #12
 800d6cc:	2202      	movs	r2, #2
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f002 f8da 	bl	800f888 <lv_fs_open>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        if(res != LV_FS_RES_OK) {
 800d6da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <lv_img_decoder_built_in_open+0x52>
            LV_LOG_WARN("Built-in image decoder can't open the file");
            return LV_RES_INV;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	e100      	b.n	800d8e8 <lv_img_decoder_built_in_open+0x254>
        }

        /*If the file was open successfully save the file descriptor*/
        if(dsc->user_data == NULL) {
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	6a1b      	ldr	r3, [r3, #32]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d116      	bne.n	800d71c <lv_img_decoder_built_in_open+0x88>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800d6ee:	2008      	movs	r0, #8
 800d6f0:	f002 fce6 	bl	80100c0 <lv_mem_alloc>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	621a      	str	r2, [r3, #32]
            if(dsc->user_data == NULL) {
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	6a1b      	ldr	r3, [r3, #32]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d105      	bne.n	800d70e <lv_img_decoder_built_in_open+0x7a>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_mem_assert(dsc->user_data);
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	6a1b      	ldr	r3, [r3, #32]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d101      	bne.n	800d70e <lv_img_decoder_built_in_open+0x7a>
 800d70a:	bf00      	nop
 800d70c:	e7fd      	b.n	800d70a <lv_img_decoder_built_in_open+0x76>
            }
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	6a1b      	ldr	r3, [r3, #32]
 800d712:	2208      	movs	r2, #8
 800d714:	2100      	movs	r1, #0
 800d716:	4618      	mov	r0, r3
 800d718:	f00e f8e3 	bl	801b8e2 <memset>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	6a1b      	ldr	r3, [r3, #32]
 800d720:	627b      	str	r3, [r7, #36]	@ 0x24
        user_data->f                               = lv_mem_alloc(sizeof(f));
 800d722:	2008      	movs	r0, #8
 800d724:	f002 fccc 	bl	80100c0 <lv_mem_alloc>
 800d728:	4602      	mov	r2, r0
 800d72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72c:	601a      	str	r2, [r3, #0]
        if(user_data->f == NULL) {
 800d72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d105      	bne.n	800d742 <lv_img_decoder_built_in_open+0xae>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
            lv_mem_assert(user_data->f);
 800d736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d101      	bne.n	800d742 <lv_img_decoder_built_in_open+0xae>
 800d73e:	bf00      	nop
 800d740:	e7fd      	b.n	800d73e <lv_img_decoder_built_in_open+0xaa>
        }

        memcpy(user_data->f, &f, sizeof(f));
 800d742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f107 010c 	add.w	r1, r7, #12
 800d74a:	2208      	movs	r2, #8
 800d74c:	4618      	mov	r0, r3
 800d74e:	f00e f94c 	bl	801b9ea <memcpy>
        LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
        return LV_RES_INV;
#endif
    }

    lv_img_cf_t cf = dsc->header.cf;
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	7c1b      	ldrb	r3, [r3, #16]
 800d756:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    /*Process true color formats*/
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800d760:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d764:	2b04      	cmp	r3, #4
 800d766:	d007      	beq.n	800d778 <lv_img_decoder_built_in_open+0xe4>
 800d768:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d76c:	2b05      	cmp	r3, #5
 800d76e:	d003      	beq.n	800d778 <lv_img_decoder_built_in_open+0xe4>
 800d770:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d774:	2b06      	cmp	r3, #6
 800d776:	d10f      	bne.n	800d798 <lv_img_decoder_built_in_open+0x104>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	7b1b      	ldrb	r3, [r3, #12]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d106      	bne.n	800d78e <lv_img_decoder_built_in_open+0xfa>
            /* In case of uncompressed formats the image stored in the ROM/RAM.
             * So simply give its pointer*/
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	689a      	ldr	r2, [r3, #8]
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 800d78a:	2301      	movs	r3, #1
 800d78c:	e0ac      	b.n	800d8e8 <lv_img_decoder_built_in_open+0x254>
        } else {
            /*If it's a file it need to be read line by line later*/
            dsc->img_data = NULL;
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	2200      	movs	r2, #0
 800d792:	615a      	str	r2, [r3, #20]
            return LV_RES_OK;
 800d794:	2301      	movs	r3, #1
 800d796:	e0a7      	b.n	800d8e8 <lv_img_decoder_built_in_open+0x254>
        }
    }
    /*Process indexed images. Build a palette*/
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
 800d798:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d79c:	2b07      	cmp	r3, #7
 800d79e:	d00b      	beq.n	800d7b8 <lv_img_decoder_built_in_open+0x124>
 800d7a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d7a4:	2b08      	cmp	r3, #8
 800d7a6:	d007      	beq.n	800d7b8 <lv_img_decoder_built_in_open+0x124>
 800d7a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d7ac:	2b09      	cmp	r3, #9
 800d7ae:	d003      	beq.n	800d7b8 <lv_img_decoder_built_in_open+0x124>
 800d7b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d7b4:	2b0a      	cmp	r3, #10
 800d7b6:	d17d      	bne.n	800d8b4 <lv_img_decoder_built_in_open+0x220>
            cf == LV_IMG_CF_INDEXED_8BIT) {

#if LV_IMG_CF_INDEXED
        uint8_t px_size       = lv_img_color_format_get_px_size(cf);
 800d7b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7fb f903 	bl	80089c8 <lv_img_color_format_get_px_size>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        uint32_t palette_size = 1 << px_size;
 800d7c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d7d2:	61fb      	str	r3, [r7, #28]

        /*Allocate the palette*/
        if(dsc->user_data == NULL) {
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	6a1b      	ldr	r3, [r3, #32]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d116      	bne.n	800d80a <lv_img_decoder_built_in_open+0x176>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
 800d7dc:	2008      	movs	r0, #8
 800d7de:	f002 fc6f 	bl	80100c0 <lv_mem_alloc>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	621a      	str	r2, [r3, #32]
            if(dsc->user_data == NULL) {
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	6a1b      	ldr	r3, [r3, #32]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d105      	bne.n	800d7fc <lv_img_decoder_built_in_open+0x168>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
                lv_mem_assert(dsc->user_data);
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	6a1b      	ldr	r3, [r3, #32]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d101      	bne.n	800d7fc <lv_img_decoder_built_in_open+0x168>
 800d7f8:	bf00      	nop
 800d7fa:	e7fd      	b.n	800d7f8 <lv_img_decoder_built_in_open+0x164>
            }
            memset(dsc->user_data, 0, sizeof(lv_img_decoder_built_in_data_t));
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	6a1b      	ldr	r3, [r3, #32]
 800d800:	2208      	movs	r2, #8
 800d802:	2100      	movs	r1, #0
 800d804:	4618      	mov	r0, r3
 800d806:	f00e f86c 	bl	801b8e2 <memset>
        }

        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	6a1b      	ldr	r3, [r3, #32]
 800d80e:	61bb      	str	r3, [r7, #24]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	005b      	lsls	r3, r3, #1
 800d814:	4618      	mov	r0, r3
 800d816:	f002 fc53 	bl	80100c0 <lv_mem_alloc>
 800d81a:	4602      	mov	r2, r0
 800d81c:	69bb      	ldr	r3, [r7, #24]
 800d81e:	605a      	str	r2, [r3, #4]
        if(user_data->palette == NULL) {
 800d820:	69bb      	ldr	r3, [r7, #24]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d105      	bne.n	800d834 <lv_img_decoder_built_in_open+0x1a0>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
#if LV_USE_FILESYSTEM
            lv_mem_assert(user_data->f);
 800d828:	69bb      	ldr	r3, [r7, #24]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d101      	bne.n	800d834 <lv_img_decoder_built_in_open+0x1a0>
 800d830:	bf00      	nop
 800d832:	e7fd      	b.n	800d830 <lv_img_decoder_built_in_open+0x19c>
#endif
        }

        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	7b1b      	ldrb	r3, [r3, #12]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d10f      	bne.n	800d85c <lv_img_decoder_built_in_open+0x1c8>
            /*Read the palette from file*/
#if LV_USE_FILESYSTEM
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2104      	movs	r1, #4
 800d842:	4618      	mov	r0, r3
 800d844:	f002 f906 	bl	800fa54 <lv_fs_seek>
            lv_fs_read(user_data->f, user_data->palette, palette_size * sizeof(lv_color_t), NULL);
 800d848:	69bb      	ldr	r3, [r7, #24]
 800d84a:	6818      	ldr	r0, [r3, #0]
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	6859      	ldr	r1, [r3, #4]
 800d850:	69fb      	ldr	r3, [r7, #28]
 800d852:	005a      	lsls	r2, r3, #1
 800d854:	2300      	movs	r3, #0
 800d856:	f002 f8c7 	bl	800f9e8 <lv_fs_read>
 800d85a:	e026      	b.n	800d8aa <lv_img_decoder_built_in_open+0x216>
            LV_LOG_WARN("Image built-in decoder can read the palette because LV_USE_FILESYSTEM = 0");
            return LV_RES_INV;
#endif
        } else {
            /*The palette begins in the beginning of the image data. Just point to it.*/
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	617b      	str	r3, [r7, #20]

            uint32_t i;
            for(i = 0; i < palette_size; i++) {
 800d864:	2300      	movs	r3, #0
 800d866:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d868:	e01b      	b.n	800d8a2 <lv_img_decoder_built_in_open+0x20e>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
 800d86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86c:	009b      	lsls	r3, r3, #2
 800d86e:	697a      	ldr	r2, [r7, #20]
 800d870:	4413      	add	r3, r2
 800d872:	7898      	ldrb	r0, [r3, #2]
 800d874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	697a      	ldr	r2, [r7, #20]
 800d87a:	4413      	add	r3, r2
 800d87c:	7859      	ldrb	r1, [r3, #1]
 800d87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	697a      	ldr	r2, [r7, #20]
 800d884:	4413      	add	r3, r2
 800d886:	781d      	ldrb	r5, [r3, #0]
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	685a      	ldr	r2, [r3, #4]
 800d88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88e:	005b      	lsls	r3, r3, #1
 800d890:	18d4      	adds	r4, r2, r3
 800d892:	462a      	mov	r2, r5
 800d894:	f7ff fdb4 	bl	800d400 <lv_color_make>
 800d898:	4603      	mov	r3, r0
 800d89a:	8023      	strh	r3, [r4, #0]
            for(i = 0; i < palette_size; i++) {
 800d89c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d89e:	3301      	adds	r3, #1
 800d8a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d3df      	bcc.n	800d86a <lv_img_decoder_built_in_open+0x1d6>
            }
        }

        dsc->img_data = NULL;
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	615a      	str	r2, [r3, #20]
        return LV_RES_OK;
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	e019      	b.n	800d8e8 <lv_img_decoder_built_in_open+0x254>
        LV_LOG_WARN("Indexed (palette) images are not enabled in lv_conf.h. See LV_IMG_CF_INDEXED");
        return LV_RES_INV;
#endif
    }
    /*Alpha indexed images. */
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
 800d8b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d8b8:	2b0b      	cmp	r3, #11
 800d8ba:	d00b      	beq.n	800d8d4 <lv_img_decoder_built_in_open+0x240>
 800d8bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d8c0:	2b0c      	cmp	r3, #12
 800d8c2:	d007      	beq.n	800d8d4 <lv_img_decoder_built_in_open+0x240>
 800d8c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d8c8:	2b0d      	cmp	r3, #13
 800d8ca:	d003      	beq.n	800d8d4 <lv_img_decoder_built_in_open+0x240>
 800d8cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d8d0:	2b0e      	cmp	r3, #14
 800d8d2:	d104      	bne.n	800d8de <lv_img_decoder_built_in_open+0x24a>
            cf == LV_IMG_CF_ALPHA_8BIT) {
#if LV_IMG_CF_ALPHA
        dsc->img_data = NULL;
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	615a      	str	r2, [r3, #20]
        return LV_RES_OK; /*Nothing to process*/
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e004      	b.n	800d8e8 <lv_img_decoder_built_in_open+0x254>
#endif
    }
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);
 800d8de:	6839      	ldr	r1, [r7, #0]
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f000 f899 	bl	800da18 <lv_img_decoder_built_in_close>

        LV_LOG_WARN("Image decoder open: unknown color format")
        return LV_RES_INV;
 800d8e6:	2300      	movs	r3, #0
    }
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3730      	adds	r7, #48	@ 0x30
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bdb0      	pop	{r4, r5, r7, pc}
 800d8f0:	0801c61c 	.word	0x0801c61c

0800d8f4 <lv_img_decoder_built_in_read_line>:

static lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                                  lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b088      	sub	sp, #32
 800d8f8:	af02      	add	r7, sp, #8
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	4611      	mov	r1, r2
 800d900:	461a      	mov	r2, r3
 800d902:	460b      	mov	r3, r1
 800d904:	80fb      	strh	r3, [r7, #6]
 800d906:	4613      	mov	r3, r2
 800d908:	80bb      	strh	r3, [r7, #4]
    (void)decoder; /*Unused*/

    lv_res_t res = LV_RES_INV;
 800d90a:	2300      	movs	r3, #0
 800d90c:	75fb      	strb	r3, [r7, #23]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	7c1b      	ldrb	r3, [r3, #16]
 800d912:	f003 031f 	and.w	r3, r3, #31
 800d916:	b2db      	uxtb	r3, r3
 800d918:	2b04      	cmp	r3, #4
 800d91a:	d00d      	beq.n	800d938 <lv_img_decoder_built_in_read_line+0x44>
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	7c1b      	ldrb	r3, [r3, #16]
 800d920:	f003 031f 	and.w	r3, r3, #31
 800d924:	b2db      	uxtb	r3, r3
 800d926:	2b05      	cmp	r3, #5
 800d928:	d006      	beq.n	800d938 <lv_img_decoder_built_in_read_line+0x44>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	7c1b      	ldrb	r3, [r3, #16]
 800d92e:	f003 031f 	and.w	r3, r3, #31
 800d932:	b2db      	uxtb	r3, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
 800d934:	2b06      	cmp	r3, #6
 800d936:	d112      	bne.n	800d95e <lv_img_decoder_built_in_read_line+0x6a>
        /* For TRUE_COLOR images read line required only for files.
         * For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	7b1b      	ldrb	r3, [r3, #12]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d166      	bne.n	800da0e <lv_img_decoder_built_in_read_line+0x11a>
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
 800d940:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800d944:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d948:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800d94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d94e:	9300      	str	r3, [sp, #0]
 800d950:	4603      	mov	r3, r0
 800d952:	68b8      	ldr	r0, [r7, #8]
 800d954:	f000 f88c 	bl	800da70 <lv_img_decoder_built_in_line_true_color>
 800d958:	4603      	mov	r3, r0
 800d95a:	75fb      	strb	r3, [r7, #23]
        if(dsc->src_type == LV_IMG_SRC_FILE) {
 800d95c:	e057      	b.n	800da0e <lv_img_decoder_built_in_read_line+0x11a>
        }
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	7c1b      	ldrb	r3, [r3, #16]
 800d962:	f003 031f 	and.w	r3, r3, #31
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b0b      	cmp	r3, #11
 800d96a:	d014      	beq.n	800d996 <lv_img_decoder_built_in_read_line+0xa2>
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	7c1b      	ldrb	r3, [r3, #16]
 800d970:	f003 031f 	and.w	r3, r3, #31
 800d974:	b2db      	uxtb	r3, r3
 800d976:	2b0c      	cmp	r3, #12
 800d978:	d00d      	beq.n	800d996 <lv_img_decoder_built_in_read_line+0xa2>
              dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	7c1b      	ldrb	r3, [r3, #16]
 800d97e:	f003 031f 	and.w	r3, r3, #31
 800d982:	b2db      	uxtb	r3, r3
    } else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
 800d984:	2b0d      	cmp	r3, #13
 800d986:	d006      	beq.n	800d996 <lv_img_decoder_built_in_read_line+0xa2>
              dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	7c1b      	ldrb	r3, [r3, #16]
 800d98c:	f003 031f 	and.w	r3, r3, #31
 800d990:	b2db      	uxtb	r3, r3
 800d992:	2b0e      	cmp	r3, #14
 800d994:	d10e      	bne.n	800d9b4 <lv_img_decoder_built_in_read_line+0xc0>

        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
 800d996:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800d99a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d99e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800d9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a4:	9300      	str	r3, [sp, #0]
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	68b8      	ldr	r0, [r7, #8]
 800d9aa:	f000 f8bf 	bl	800db2c <lv_img_decoder_built_in_line_alpha>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	75fb      	strb	r3, [r7, #23]
 800d9b2:	e02c      	b.n	800da0e <lv_img_decoder_built_in_read_line+0x11a>
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	7c1b      	ldrb	r3, [r3, #16]
 800d9b8:	f003 031f 	and.w	r3, r3, #31
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	2b07      	cmp	r3, #7
 800d9c0:	d014      	beq.n	800d9ec <lv_img_decoder_built_in_read_line+0xf8>
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	7c1b      	ldrb	r3, [r3, #16]
 800d9c6:	f003 031f 	and.w	r3, r3, #31
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	2b08      	cmp	r3, #8
 800d9ce:	d00d      	beq.n	800d9ec <lv_img_decoder_built_in_read_line+0xf8>
              dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	7c1b      	ldrb	r3, [r3, #16]
 800d9d4:	f003 031f 	and.w	r3, r3, #31
 800d9d8:	b2db      	uxtb	r3, r3
    } else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
 800d9da:	2b09      	cmp	r3, #9
 800d9dc:	d006      	beq.n	800d9ec <lv_img_decoder_built_in_read_line+0xf8>
              dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	7c1b      	ldrb	r3, [r3, #16]
 800d9e2:	f003 031f 	and.w	r3, r3, #31
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	2b0a      	cmp	r3, #10
 800d9ea:	d10e      	bne.n	800da0a <lv_img_decoder_built_in_read_line+0x116>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
 800d9ec:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800d9f0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d9f4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800d9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9fa:	9300      	str	r3, [sp, #0]
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	68b8      	ldr	r0, [r7, #8]
 800da00:	f000 fae6 	bl	800dfd0 <lv_img_decoder_built_in_line_indexed>
 800da04:	4603      	mov	r3, r0
 800da06:	75fb      	strb	r3, [r7, #23]
 800da08:	e001      	b.n	800da0e <lv_img_decoder_built_in_read_line+0x11a>
    } else {
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
        return LV_RES_INV;
 800da0a:	2300      	movs	r3, #0
 800da0c:	e000      	b.n	800da10 <lv_img_decoder_built_in_read_line+0x11c>
    }

    return res;
 800da0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3718      	adds	r7, #24
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <lv_img_decoder_built_in_close>:

static void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	6a1b      	ldr	r3, [r3, #32]
 800da26:	60fb      	str	r3, [r7, #12]
    if(user_data) {
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d01c      	beq.n	800da68 <lv_img_decoder_built_in_close+0x50>
#if LV_USE_FILESYSTEM
        if(user_data->f) {
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d009      	beq.n	800da4a <lv_img_decoder_built_in_close+0x32>
            lv_fs_close(user_data->f);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f001 ffa5 	bl	800f98a <lv_fs_close>
            lv_mem_free(user_data->f);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4618      	mov	r0, r3
 800da46:	f002 fb75 	bl	8010134 <lv_mem_free>
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d004      	beq.n	800da5c <lv_img_decoder_built_in_close+0x44>
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	4618      	mov	r0, r3
 800da58:	f002 fb6c 	bl	8010134 <lv_mem_free>

        lv_mem_free(user_data);
 800da5c:	68f8      	ldr	r0, [r7, #12]
 800da5e:	f002 fb69 	bl	8010134 <lv_mem_free>

        dsc->user_data = NULL;
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	2200      	movs	r2, #0
 800da66:	621a      	str	r2, [r3, #32]
    }
}
 800da68:	bf00      	nop
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <lv_img_decoder_built_in_line_true_color>:

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b08a      	sub	sp, #40	@ 0x28
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	4608      	mov	r0, r1
 800da7a:	4611      	mov	r1, r2
 800da7c:	461a      	mov	r2, r3
 800da7e:	4603      	mov	r3, r0
 800da80:	817b      	strh	r3, [r7, #10]
 800da82:	460b      	mov	r3, r1
 800da84:	813b      	strh	r3, [r7, #8]
 800da86:	4613      	mov	r3, r2
 800da88:	80fb      	strh	r3, [r7, #6]
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	6a1b      	ldr	r3, [r3, #32]
 800da8e:	627b      	str	r3, [r7, #36]	@ 0x24
    lv_fs_res_t res;
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	7c1b      	ldrb	r3, [r3, #16]
 800da94:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800da98:	b2db      	uxtb	r3, r3
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7fa ff94 	bl	80089c8 <lv_img_color_format_get_px_size>
 800daa0:	4603      	mov	r3, r0
 800daa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
 800daa6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800daaa:	68fa      	ldr	r2, [r7, #12]
 800daac:	6912      	ldr	r2, [r2, #16]
 800daae:	f3c2 228a 	ubfx	r2, r2, #10, #11
 800dab2:	b292      	uxth	r2, r2
 800dab4:	fb03 f202 	mul.w	r2, r3, r2
 800dab8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dabc:	4413      	add	r3, r2
 800dabe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800dac2:	fb02 f303 	mul.w	r3, r2, r3
 800dac6:	10db      	asrs	r3, r3, #3
 800dac8:	61fb      	str	r3, [r7, #28]
    pos += 4; /*Skip the header*/
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	3304      	adds	r3, #4
 800dace:	61fb      	str	r3, [r7, #28]
    res = lv_fs_seek(user_data->f, pos);
 800dad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	69f9      	ldr	r1, [r7, #28]
 800dad6:	4618      	mov	r0, r3
 800dad8:	f001 ffbc 	bl	800fa54 <lv_fs_seek>
 800dadc:	4603      	mov	r3, r0
 800dade:	76fb      	strb	r3, [r7, #27]
    if(res != LV_FS_RES_OK) {
 800dae0:	7efb      	ldrb	r3, [r7, #27]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d001      	beq.n	800daea <lv_img_decoder_built_in_line_true_color+0x7a>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
 800dae6:	2300      	movs	r3, #0
 800dae8:	e01c      	b.n	800db24 <lv_img_decoder_built_in_line_true_color+0xb4>
    }
    uint32_t btr = len * (px_size >> 3);
 800daea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800daee:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800daf2:	08d2      	lsrs	r2, r2, #3
 800daf4:	b2d2      	uxtb	r2, r2
 800daf6:	fb02 f303 	mul.w	r3, r2, r3
 800dafa:	617b      	str	r3, [r7, #20]
    uint32_t br  = 0;
 800dafc:	2300      	movs	r3, #0
 800dafe:	613b      	str	r3, [r7, #16]
    lv_fs_read(user_data->f, buf, btr, &br);
 800db00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db02:	6818      	ldr	r0, [r3, #0]
 800db04:	f107 0310 	add.w	r3, r7, #16
 800db08:	697a      	ldr	r2, [r7, #20]
 800db0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800db0c:	f001 ff6c 	bl	800f9e8 <lv_fs_read>
    if(res != LV_FS_RES_OK || btr != br) {
 800db10:	7efb      	ldrb	r3, [r7, #27]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d103      	bne.n	800db1e <lv_img_decoder_built_in_line_true_color+0xae>
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	697a      	ldr	r2, [r7, #20]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d001      	beq.n	800db22 <lv_img_decoder_built_in_line_true_color+0xb2>
        LV_LOG_WARN("Built-in image decoder read failed");
        return LV_RES_INV;
 800db1e:	2300      	movs	r3, #0
 800db20:	e000      	b.n	800db24 <lv_img_decoder_built_in_line_true_color+0xb4>
    }

    return LV_RES_OK;
 800db22:	2301      	movs	r3, #1
#else
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
 800db24:	4618      	mov	r0, r3
 800db26:	3728      	adds	r7, #40	@ 0x28
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
 800db2c:	b590      	push	{r4, r7, lr}
 800db2e:	b0e5      	sub	sp, #404	@ 0x194
 800db30:	af00      	add	r7, sp, #0
 800db32:	f507 74c8 	add.w	r4, r7, #400	@ 0x190
 800db36:	f5a4 74c2 	sub.w	r4, r4, #388	@ 0x184
 800db3a:	6020      	str	r0, [r4, #0]
 800db3c:	460c      	mov	r4, r1
 800db3e:	4610      	mov	r0, r2
 800db40:	4619      	mov	r1, r3
 800db42:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800db46:	f5a3 73c3 	sub.w	r3, r3, #390	@ 0x186
 800db4a:	4622      	mov	r2, r4
 800db4c:	801a      	strh	r2, [r3, #0]
 800db4e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800db52:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800db56:	4602      	mov	r2, r0
 800db58:	801a      	strh	r2, [r3, #0]
 800db5a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800db5e:	f5a3 73c5 	sub.w	r3, r3, #394	@ 0x18a
 800db62:	460a      	mov	r2, r1
 800db64:	801a      	strh	r2, [r3, #0]

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
 800db66:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800db6a:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
 800db6e:	4bb0      	ldr	r3, [pc, #704]	@ (800de30 <lv_img_decoder_built_in_line_alpha+0x304>)
 800db70:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
 800db74:	4baf      	ldr	r3, [pc, #700]	@ (800de34 <lv_img_decoder_built_in_line_alpha+0x308>)
 800db76:	f507 74aa 	add.w	r4, r7, #340	@ 0x154
 800db7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255};

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->style->image.color;
 800db80:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800db84:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800db8e:	f8a7 3150 	strh.w	r3, [r7, #336]	@ 0x150
    lv_coord_t i;
    for(i = 0; i < len; i++) {
 800db92:	2300      	movs	r3, #0
 800db94:	f8a7 318e 	strh.w	r3, [r7, #398]	@ 0x18e
 800db98:	e022      	b.n	800dbe0 <lv_img_decoder_built_in_line_alpha+0xb4>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
 800db9a:	f8b7 1150 	ldrh.w	r1, [r7, #336]	@ 0x150
 800db9e:	f9b7 218e 	ldrsh.w	r2, [r7, #398]	@ 0x18e
 800dba2:	4613      	mov	r3, r2
 800dba4:	005b      	lsls	r3, r3, #1
 800dba6:	4413      	add	r3, r2
 800dba8:	461a      	mov	r2, r3
 800dbaa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800dbae:	4413      	add	r3, r2
 800dbb0:	b2ca      	uxtb	r2, r1
 800dbb2:	701a      	strb	r2, [r3, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
 800dbb4:	f8b7 3150 	ldrh.w	r3, [r7, #336]	@ 0x150
 800dbb8:	0a1b      	lsrs	r3, r3, #8
 800dbba:	b299      	uxth	r1, r3
 800dbbc:	f9b7 218e 	ldrsh.w	r2, [r7, #398]	@ 0x18e
 800dbc0:	4613      	mov	r3, r2
 800dbc2:	005b      	lsls	r3, r3, #1
 800dbc4:	4413      	add	r3, r2
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 800dbcc:	4413      	add	r3, r2
 800dbce:	b2ca      	uxtb	r2, r1
 800dbd0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < len; i++) {
 800dbd2:	f9b7 318e 	ldrsh.w	r3, [r7, #398]	@ 0x18e
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	3301      	adds	r3, #1
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	f8a7 318e 	strh.w	r3, [r7, #398]	@ 0x18e
 800dbe0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800dbe4:	f5a3 73c5 	sub.w	r3, r3, #394	@ 0x18a
 800dbe8:	f9b7 218e 	ldrsh.w	r2, [r7, #398]	@ 0x18e
 800dbec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	dbd2      	blt.n	800db9a <lv_img_decoder_built_in_line_alpha+0x6e>
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
    uint8_t px_size            = lv_img_color_format_get_px_size(dsc->header.cf);
 800dbfa:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800dbfe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	7c1b      	ldrb	r3, [r3, #16]
 800dc06:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7fa fedb 	bl	80089c8 <lv_img_color_format_get_px_size>
 800dc12:	4603      	mov	r3, r0
 800dc14:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800dc18:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 800dc1c:	2201      	movs	r2, #1
 800dc1e:	fa02 f303 	lsl.w	r3, r2, r3
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	3b01      	subs	r3, #1
 800dc26:	f8a7 3174 	strh.w	r3, [r7, #372]	@ 0x174

    lv_coord_t w = 0;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
    uint32_t ofs = 0;
 800dc30:	2300      	movs	r3, #0
 800dc32:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
    int8_t pos   = 0;
 800dc36:	2300      	movs	r3, #0
 800dc38:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
    switch(dsc->header.cf) {
 800dc3c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800dc40:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	7c1b      	ldrb	r3, [r3, #16]
 800dc48:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800dc4c:	b2db      	uxtb	r3, r3
 800dc4e:	3b0b      	subs	r3, #11
 800dc50:	2b03      	cmp	r3, #3
 800dc52:	f200 8117 	bhi.w	800de84 <lv_img_decoder_built_in_line_alpha+0x358>
 800dc56:	a201      	add	r2, pc, #4	@ (adr r2, 800dc5c <lv_img_decoder_built_in_line_alpha+0x130>)
 800dc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc5c:	0800dc6d 	.word	0x0800dc6d
 800dc60:	0800dd01 	.word	0x0800dd01
 800dc64:	0800dd99 	.word	0x0800dd99
 800dc68:	0800de39 	.word	0x0800de39
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800dc6c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800dc70:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	691b      	ldr	r3, [r3, #16]
 800dc78:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	10db      	asrs	r3, r3, #3
 800dc80:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
            if(dsc->header.w & 0x7) w++;
 800dc84:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800dc88:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	691b      	ldr	r3, [r3, #16]
 800dc90:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	f003 0307 	and.w	r3, r3, #7
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d006      	beq.n	800dcac <lv_img_decoder_built_in_line_alpha+0x180>
 800dc9e:	f9b7 3186 	ldrsh.w	r3, [r7, #390]	@ 0x186
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	3301      	adds	r3, #1
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
            ofs += w * y + (x >> 3); /*First pixel*/
 800dcac:	f9b7 3186 	ldrsh.w	r3, [r7, #390]	@ 0x186
 800dcb0:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 800dcb4:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800dcb8:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dcbc:	fb02 f303 	mul.w	r3, r2, r3
 800dcc0:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 800dcc4:	f5a2 72c3 	sub.w	r2, r2, #390	@ 0x186
 800dcc8:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dccc:	10d2      	asrs	r2, r2, #3
 800dcce:	b212      	sxth	r2, r2
 800dcd0:	4413      	add	r3, r2
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800dcd8:	4413      	add	r3, r2
 800dcda:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
            pos       = 7 - (x & 0x7);
 800dcde:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800dce2:	f5a3 73c3 	sub.w	r3, r3, #390	@ 0x186
 800dce6:	881b      	ldrh	r3, [r3, #0]
 800dce8:	b25b      	sxtb	r3, r3
 800dcea:	43db      	mvns	r3, r3
 800dcec:	b25b      	sxtb	r3, r3
 800dcee:	f003 0307 	and.w	r3, r3, #7
 800dcf2:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
            opa_table = alpha1_opa_table;
 800dcf6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800dcfa:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
            break;
 800dcfe:	e0c1      	b.n	800de84 <lv_img_decoder_built_in_line_alpha+0x358>
        case LV_IMG_CF_ALPHA_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800dd00:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800dd04:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	691b      	ldr	r3, [r3, #16]
 800dd0c:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	109b      	asrs	r3, r3, #2
 800dd14:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
            if(dsc->header.w & 0x3) w++;
 800dd18:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800dd1c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	691b      	ldr	r3, [r3, #16]
 800dd24:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800dd28:	b29b      	uxth	r3, r3
 800dd2a:	f003 0303 	and.w	r3, r3, #3
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d006      	beq.n	800dd40 <lv_img_decoder_built_in_line_alpha+0x214>
 800dd32:	f9b7 3186 	ldrsh.w	r3, [r7, #390]	@ 0x186
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	3301      	adds	r3, #1
 800dd3a:	b29b      	uxth	r3, r3
 800dd3c:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
            ofs += w * y + (x >> 2); /*First pixel*/
 800dd40:	f9b7 3186 	ldrsh.w	r3, [r7, #390]	@ 0x186
 800dd44:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 800dd48:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800dd4c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd50:	fb02 f303 	mul.w	r3, r2, r3
 800dd54:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 800dd58:	f5a2 72c3 	sub.w	r2, r2, #390	@ 0x186
 800dd5c:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dd60:	1092      	asrs	r2, r2, #2
 800dd62:	b212      	sxth	r2, r2
 800dd64:	4413      	add	r3, r2
 800dd66:	461a      	mov	r2, r3
 800dd68:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800dd6c:	4413      	add	r3, r2
 800dd6e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
            pos       = 6 - ((x & 0x3) * 2);
 800dd72:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800dd76:	f5a3 73c3 	sub.w	r3, r3, #390	@ 0x186
 800dd7a:	881b      	ldrh	r3, [r3, #0]
 800dd7c:	43db      	mvns	r3, r3
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	f003 0303 	and.w	r3, r3, #3
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	005b      	lsls	r3, r3, #1
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
            opa_table = alpha2_opa_table;
 800dd8e:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800dd92:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
            break;
 800dd96:	e075      	b.n	800de84 <lv_img_decoder_built_in_line_alpha+0x358>
        case LV_IMG_CF_ALPHA_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800dd98:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800dd9c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	691b      	ldr	r3, [r3, #16]
 800dda4:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	105b      	asrs	r3, r3, #1
 800ddac:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
            if(dsc->header.w & 0x1) w++;
 800ddb0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800ddb4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	691b      	ldr	r3, [r3, #16]
 800ddbc:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	f003 0301 	and.w	r3, r3, #1
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d006      	beq.n	800ddd8 <lv_img_decoder_built_in_line_alpha+0x2ac>
 800ddca:	f9b7 3186 	ldrsh.w	r3, [r7, #390]	@ 0x186
 800ddce:	b29b      	uxth	r3, r3
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
            ofs += w * y + (x >> 1); /*First pixel*/
 800ddd8:	f9b7 3186 	ldrsh.w	r3, [r7, #390]	@ 0x186
 800dddc:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 800dde0:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800dde4:	f9b2 2000 	ldrsh.w	r2, [r2]
 800dde8:	fb02 f303 	mul.w	r3, r2, r3
 800ddec:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 800ddf0:	f5a2 72c3 	sub.w	r2, r2, #390	@ 0x186
 800ddf4:	f9b2 2000 	ldrsh.w	r2, [r2]
 800ddf8:	1052      	asrs	r2, r2, #1
 800ddfa:	b212      	sxth	r2, r2
 800ddfc:	4413      	add	r3, r2
 800ddfe:	461a      	mov	r2, r3
 800de00:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800de04:	4413      	add	r3, r2
 800de06:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
            pos       = 4 - ((x & 0x1) * 4);
 800de0a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800de0e:	f5a3 73c3 	sub.w	r3, r3, #390	@ 0x186
 800de12:	881b      	ldrh	r3, [r3, #0]
 800de14:	f003 0301 	and.w	r3, r3, #1
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d101      	bne.n	800de20 <lv_img_decoder_built_in_line_alpha+0x2f4>
 800de1c:	2304      	movs	r3, #4
 800de1e:	e000      	b.n	800de22 <lv_img_decoder_built_in_line_alpha+0x2f6>
 800de20:	2300      	movs	r3, #0
 800de22:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
            opa_table = alpha4_opa_table;
 800de26:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 800de2a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
            break;
 800de2e:	e029      	b.n	800de84 <lv_img_decoder_built_in_line_alpha+0x358>
 800de30:	ffaa5500 	.word	0xffaa5500
 800de34:	0801c620 	.word	0x0801c620
        case LV_IMG_CF_ALPHA_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800de38:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800de3c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	691b      	ldr	r3, [r3, #16]
 800de44:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800de48:	b29b      	uxth	r3, r3
 800de4a:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
            ofs += w * y + x;  /*First pixel*/
 800de4e:	f9b7 3186 	ldrsh.w	r3, [r7, #390]	@ 0x186
 800de52:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 800de56:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800de5a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800de5e:	fb03 f202 	mul.w	r2, r3, r2
 800de62:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800de66:	f5a3 73c3 	sub.w	r3, r3, #390	@ 0x186
 800de6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800de6e:	4413      	add	r3, r2
 800de70:	461a      	mov	r2, r3
 800de72:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800de76:	4413      	add	r3, r2
 800de78:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
            pos = 0;
 800de7c:	2300      	movs	r3, #0
 800de7e:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
            break;
 800de82:	bf00      	nop
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800de84:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800de88:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	6a1b      	ldr	r3, [r3, #32]
 800de90:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif

    const uint8_t * data_tmp = NULL;
 800de94:	2300      	movs	r3, #0
 800de96:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800de9a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800de9e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	7b1b      	ldrb	r3, [r3, #12]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d110      	bne.n	800decc <lv_img_decoder_built_in_line_alpha+0x3a0>
        const lv_img_dsc_t * img_dsc = dsc->src;
 800deaa:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800deae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

        data_tmp = img_dsc->data + ofs;
 800deba:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800debe:	689a      	ldr	r2, [r3, #8]
 800dec0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800dec4:	4413      	add	r3, r2
 800dec6:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800deca:	e017      	b.n	800defc <lv_img_decoder_built_in_line_alpha+0x3d0>
    } else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800decc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800ded6:	3304      	adds	r3, #4
 800ded8:	4619      	mov	r1, r3
 800deda:	4610      	mov	r0, r2
 800dedc:	f001 fdba 	bl	800fa54 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800dee0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800dee4:	6818      	ldr	r0, [r3, #0]
 800dee6:	f9b7 2186 	ldrsh.w	r2, [r7, #390]	@ 0x186
 800deea:	f107 0110 	add.w	r1, r7, #16
 800deee:	2300      	movs	r3, #0
 800def0:	f001 fd7a 	bl	800f9e8 <lv_fs_read>
        data_tmp = fs_buf;
 800def4:	f107 0310 	add.w	r3, r7, #16
 800def8:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    uint8_t byte_act = 0;
 800defc:	2300      	movs	r3, #0
 800defe:	f887 316b 	strb.w	r3, [r7, #363]	@ 0x16b
    uint8_t val_act;
    for(i = 0; i < len; i++) {
 800df02:	2300      	movs	r3, #0
 800df04:	f8a7 318e 	strh.w	r3, [r7, #398]	@ 0x18e
 800df08:	e051      	b.n	800dfae <lv_img_decoder_built_in_line_alpha+0x482>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800df0a:	f897 316b 	ldrb.w	r3, [r7, #363]	@ 0x16b
 800df0e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800df12:	4413      	add	r3, r2
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	4619      	mov	r1, r3
 800df18:	f8b7 2174 	ldrh.w	r2, [r7, #372]	@ 0x174
 800df1c:	f997 317f 	ldrsb.w	r3, [r7, #383]	@ 0x17f
 800df20:	fa02 f303 	lsl.w	r3, r2, r3
 800df24:	ea01 0203 	and.w	r2, r1, r3
 800df28:	f997 317f 	ldrsb.w	r3, [r7, #383]	@ 0x17f
 800df2c:	fa42 f303 	asr.w	r3, r2, r3
 800df30:	f887 316a 	strb.w	r3, [r7, #362]	@ 0x16a

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800df34:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800df38:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	7c1b      	ldrb	r3, [r3, #16]
 800df40:	f003 031f 	and.w	r3, r3, #31
 800df44:	b2db      	uxtb	r3, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800df46:	2b0e      	cmp	r3, #14
 800df48:	d006      	beq.n	800df58 <lv_img_decoder_built_in_line_alpha+0x42c>
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
 800df4a:	f897 316a 	ldrb.w	r3, [r7, #362]	@ 0x16a
 800df4e:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 800df52:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
 800df54:	781a      	ldrb	r2, [r3, #0]
 800df56:	e001      	b.n	800df5c <lv_img_decoder_built_in_line_alpha+0x430>
 800df58:	f897 216a 	ldrb.w	r2, [r7, #362]	@ 0x16a
 800df5c:	f9b7 118e 	ldrsh.w	r1, [r7, #398]	@ 0x18e
 800df60:	460b      	mov	r3, r1
 800df62:	005b      	lsls	r3, r3, #1
 800df64:	440b      	add	r3, r1
 800df66:	3302      	adds	r3, #2
 800df68:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 800df6c:	440b      	add	r3, r1
 800df6e:	701a      	strb	r2, [r3, #0]

        pos -= px_size;
 800df70:	f897 217f 	ldrb.w	r2, [r7, #383]	@ 0x17f
 800df74:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 800df78:	1ad3      	subs	r3, r2, r3
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
        if(pos < 0) {
 800df80:	f997 317f 	ldrsb.w	r3, [r7, #383]	@ 0x17f
 800df84:	2b00      	cmp	r3, #0
 800df86:	da0b      	bge.n	800dfa0 <lv_img_decoder_built_in_line_alpha+0x474>
            pos = 8 - px_size;
 800df88:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 800df8c:	f1c3 0308 	rsb	r3, r3, #8
 800df90:	b2db      	uxtb	r3, r3
 800df92:	f887 317f 	strb.w	r3, [r7, #383]	@ 0x17f
            data_tmp++;
 800df96:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800df9a:	3301      	adds	r3, #1
 800df9c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    for(i = 0; i < len; i++) {
 800dfa0:	f9b7 318e 	ldrsh.w	r3, [r7, #398]	@ 0x18e
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	f8a7 318e 	strh.w	r3, [r7, #398]	@ 0x18e
 800dfae:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800dfb2:	f5a3 73c5 	sub.w	r3, r3, #394	@ 0x18a
 800dfb6:	f9b7 218e 	ldrsh.w	r2, [r7, #398]	@ 0x18e
 800dfba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	dba3      	blt.n	800df0a <lv_img_decoder_built_in_line_alpha+0x3de>
        }
    }

    return LV_RES_OK;
 800dfc2:	2301      	movs	r3, #1

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f507 77ca 	add.w	r7, r7, #404	@ 0x194
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd90      	pop	{r4, r7, pc}
 800dfce:	bf00      	nop

0800dfd0 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
 800dfd0:	b590      	push	{r4, r7, lr}
 800dfd2:	b0df      	sub	sp, #380	@ 0x17c
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	f507 74bc 	add.w	r4, r7, #376	@ 0x178
 800dfda:	f5a4 74b6 	sub.w	r4, r4, #364	@ 0x16c
 800dfde:	6020      	str	r0, [r4, #0]
 800dfe0:	460c      	mov	r4, r1
 800dfe2:	4610      	mov	r0, r2
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800dfea:	f5a3 73b7 	sub.w	r3, r3, #366	@ 0x16e
 800dfee:	4622      	mov	r2, r4
 800dff0:	801a      	strh	r2, [r3, #0]
 800dff2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800dff6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800dffa:	4602      	mov	r2, r0
 800dffc:	801a      	strh	r2, [r3, #0]
 800dffe:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e002:	f5a3 73b9 	sub.w	r3, r3, #370	@ 0x172
 800e006:	460a      	mov	r2, r1
 800e008:	801a      	strh	r2, [r3, #0]

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_color_format_get_px_size(dsc->header.cf);
 800e00a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e00e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	7c1b      	ldrb	r3, [r3, #16]
 800e016:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	4618      	mov	r0, r3
 800e01e:	f7fa fcd3 	bl	80089c8 <lv_img_color_format_get_px_size>
 800e022:	4603      	mov	r3, r0
 800e024:	f887 3169 	strb.w	r3, [r7, #361]	@ 0x169
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
 800e028:	f897 3169 	ldrb.w	r3, [r7, #361]	@ 0x169
 800e02c:	2201      	movs	r2, #1
 800e02e:	fa02 f303 	lsl.w	r3, r2, r3
 800e032:	b29b      	uxth	r3, r3
 800e034:	3b01      	subs	r3, #1
 800e036:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166

    lv_coord_t w = 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	f8a7 3176 	strh.w	r3, [r7, #374]	@ 0x176
    int8_t pos   = 0;
 800e040:	2300      	movs	r3, #0
 800e042:	f887 3175 	strb.w	r3, [r7, #373]	@ 0x175
    uint32_t ofs = 0;
 800e046:	2300      	movs	r3, #0
 800e048:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
    switch(dsc->header.cf) {
 800e04c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e050:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	7c1b      	ldrb	r3, [r3, #16]
 800e058:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800e05c:	b2db      	uxtb	r3, r3
 800e05e:	3b07      	subs	r3, #7
 800e060:	2b03      	cmp	r3, #3
 800e062:	f200 811c 	bhi.w	800e29e <lv_img_decoder_built_in_line_indexed+0x2ce>
 800e066:	a201      	add	r2, pc, #4	@ (adr r2, 800e06c <lv_img_decoder_built_in_line_indexed+0x9c>)
 800e068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e06c:	0800e07d 	.word	0x0800e07d
 800e070:	0800e113 	.word	0x0800e113
 800e074:	0800e1ad 	.word	0x0800e1ad
 800e078:	0800e247 	.word	0x0800e247
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
 800e07c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e080:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	691b      	ldr	r3, [r3, #16]
 800e088:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	10db      	asrs	r3, r3, #3
 800e090:	f8a7 3176 	strh.w	r3, [r7, #374]	@ 0x176
            if(dsc->header.w & 0x7) w++;
 800e094:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e098:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	691b      	ldr	r3, [r3, #16]
 800e0a0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	f003 0307 	and.w	r3, r3, #7
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d006      	beq.n	800e0bc <lv_img_decoder_built_in_line_indexed+0xec>
 800e0ae:	f9b7 3176 	ldrsh.w	r3, [r7, #374]	@ 0x176
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	f8a7 3176 	strh.w	r3, [r7, #374]	@ 0x176
            ofs += w * y + (x >> 3); /*First pixel*/
 800e0bc:	f9b7 3176 	ldrsh.w	r3, [r7, #374]	@ 0x176
 800e0c0:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800e0c4:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 800e0c8:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e0cc:	fb02 f303 	mul.w	r3, r2, r3
 800e0d0:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800e0d4:	f5a2 72b7 	sub.w	r2, r2, #366	@ 0x16e
 800e0d8:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e0dc:	10d2      	asrs	r2, r2, #3
 800e0de:	b212      	sxth	r2, r2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800e0e8:	4413      	add	r3, r2
 800e0ea:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
            ofs += 8;                /*Skip the palette*/
 800e0ee:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800e0f2:	3308      	adds	r3, #8
 800e0f4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
            pos = 7 - (x & 0x7);
 800e0f8:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e0fc:	f5a3 73b7 	sub.w	r3, r3, #366	@ 0x16e
 800e100:	881b      	ldrh	r3, [r3, #0]
 800e102:	b25b      	sxtb	r3, r3
 800e104:	43db      	mvns	r3, r3
 800e106:	b25b      	sxtb	r3, r3
 800e108:	f003 0307 	and.w	r3, r3, #7
 800e10c:	f887 3175 	strb.w	r3, [r7, #373]	@ 0x175
            break;
 800e110:	e0c5      	b.n	800e29e <lv_img_decoder_built_in_line_indexed+0x2ce>
        case LV_IMG_CF_INDEXED_2BIT:
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
 800e112:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e116:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	691b      	ldr	r3, [r3, #16]
 800e11e:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e122:	b29b      	uxth	r3, r3
 800e124:	109b      	asrs	r3, r3, #2
 800e126:	f8a7 3176 	strh.w	r3, [r7, #374]	@ 0x176
            if(dsc->header.w & 0x3) w++;
 800e12a:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e12e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	691b      	ldr	r3, [r3, #16]
 800e136:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	f003 0303 	and.w	r3, r3, #3
 800e140:	2b00      	cmp	r3, #0
 800e142:	d006      	beq.n	800e152 <lv_img_decoder_built_in_line_indexed+0x182>
 800e144:	f9b7 3176 	ldrsh.w	r3, [r7, #374]	@ 0x176
 800e148:	b29b      	uxth	r3, r3
 800e14a:	3301      	adds	r3, #1
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	f8a7 3176 	strh.w	r3, [r7, #374]	@ 0x176
            ofs += w * y + (x >> 2); /*First pixel*/
 800e152:	f9b7 3176 	ldrsh.w	r3, [r7, #374]	@ 0x176
 800e156:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800e15a:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 800e15e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e162:	fb02 f303 	mul.w	r3, r2, r3
 800e166:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800e16a:	f5a2 72b7 	sub.w	r2, r2, #366	@ 0x16e
 800e16e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e172:	1092      	asrs	r2, r2, #2
 800e174:	b212      	sxth	r2, r2
 800e176:	4413      	add	r3, r2
 800e178:	461a      	mov	r2, r3
 800e17a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800e17e:	4413      	add	r3, r2
 800e180:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
            ofs += 16;               /*Skip the palette*/
 800e184:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800e188:	3310      	adds	r3, #16
 800e18a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
            pos = 6 - ((x & 0x3) * 2);
 800e18e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e192:	f5a3 73b7 	sub.w	r3, r3, #366	@ 0x16e
 800e196:	881b      	ldrh	r3, [r3, #0]
 800e198:	43db      	mvns	r3, r3
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	f003 0303 	and.w	r3, r3, #3
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	005b      	lsls	r3, r3, #1
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	f887 3175 	strb.w	r3, [r7, #373]	@ 0x175
            break;
 800e1aa:	e078      	b.n	800e29e <lv_img_decoder_built_in_line_indexed+0x2ce>
        case LV_IMG_CF_INDEXED_4BIT:
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
 800e1ac:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e1b0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	691b      	ldr	r3, [r3, #16]
 800e1b8:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	105b      	asrs	r3, r3, #1
 800e1c0:	f8a7 3176 	strh.w	r3, [r7, #374]	@ 0x176
            if(dsc->header.w & 0x1) w++;
 800e1c4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e1c8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	691b      	ldr	r3, [r3, #16]
 800e1d0:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	f003 0301 	and.w	r3, r3, #1
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d006      	beq.n	800e1ec <lv_img_decoder_built_in_line_indexed+0x21c>
 800e1de:	f9b7 3176 	ldrsh.w	r3, [r7, #374]	@ 0x176
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	f8a7 3176 	strh.w	r3, [r7, #374]	@ 0x176
            ofs += w * y + (x >> 1); /*First pixel*/
 800e1ec:	f9b7 3176 	ldrsh.w	r3, [r7, #374]	@ 0x176
 800e1f0:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800e1f4:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 800e1f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e1fc:	fb02 f303 	mul.w	r3, r2, r3
 800e200:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800e204:	f5a2 72b7 	sub.w	r2, r2, #366	@ 0x16e
 800e208:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e20c:	1052      	asrs	r2, r2, #1
 800e20e:	b212      	sxth	r2, r2
 800e210:	4413      	add	r3, r2
 800e212:	461a      	mov	r2, r3
 800e214:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800e218:	4413      	add	r3, r2
 800e21a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
            ofs += 64;               /*Skip the palette*/
 800e21e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800e222:	3340      	adds	r3, #64	@ 0x40
 800e224:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
            pos = 4 - ((x & 0x1) * 4);
 800e228:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e22c:	f5a3 73b7 	sub.w	r3, r3, #366	@ 0x16e
 800e230:	881b      	ldrh	r3, [r3, #0]
 800e232:	f003 0301 	and.w	r3, r3, #1
 800e236:	2b00      	cmp	r3, #0
 800e238:	d101      	bne.n	800e23e <lv_img_decoder_built_in_line_indexed+0x26e>
 800e23a:	2304      	movs	r3, #4
 800e23c:	e000      	b.n	800e240 <lv_img_decoder_built_in_line_indexed+0x270>
 800e23e:	2300      	movs	r3, #0
 800e240:	f887 3175 	strb.w	r3, [r7, #373]	@ 0x175
            break;
 800e244:	e02b      	b.n	800e29e <lv_img_decoder_built_in_line_indexed+0x2ce>
        case LV_IMG_CF_INDEXED_8BIT:
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
 800e246:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e24a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	691b      	ldr	r3, [r3, #16]
 800e252:	f3c3 238a 	ubfx	r3, r3, #10, #11
 800e256:	b29b      	uxth	r3, r3
 800e258:	f8a7 3176 	strh.w	r3, [r7, #374]	@ 0x176
            ofs += w * y + x;  /*First pixel*/
 800e25c:	f9b7 3176 	ldrsh.w	r3, [r7, #374]	@ 0x176
 800e260:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800e264:	f5a2 72b8 	sub.w	r2, r2, #368	@ 0x170
 800e268:	f9b2 2000 	ldrsh.w	r2, [r2]
 800e26c:	fb03 f202 	mul.w	r2, r3, r2
 800e270:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e274:	f5a3 73b7 	sub.w	r3, r3, #366	@ 0x16e
 800e278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e27c:	4413      	add	r3, r2
 800e27e:	461a      	mov	r2, r3
 800e280:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800e284:	4413      	add	r3, r2
 800e286:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
            ofs += 1024;       /*Skip the palette*/
 800e28a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800e28e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e292:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
            pos = 0;
 800e296:	2300      	movs	r3, #0
 800e298:	f887 3175 	strb.w	r3, [r7, #373]	@ 0x175
            break;
 800e29c:	bf00      	nop
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
 800e29e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e2a2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	6a1b      	ldr	r3, [r3, #32]
 800e2aa:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160

#if LV_USE_FILESYSTEM
    uint8_t fs_buf[LV_HOR_RES_MAX];
#endif
    const uint8_t * data_tmp = NULL;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
 800e2b4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e2b8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	7b1b      	ldrb	r3, [r3, #12]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d110      	bne.n	800e2e6 <lv_img_decoder_built_in_line_indexed+0x316>
        const lv_img_dsc_t * img_dsc = dsc->src;
 800e2c4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e2c8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        data_tmp                     = img_dsc->data + ofs;
 800e2d4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800e2d8:	689a      	ldr	r2, [r3, #8]
 800e2da:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800e2de:	4413      	add	r3, r2
 800e2e0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800e2e4:	e017      	b.n	800e316 <lv_img_decoder_built_in_line_indexed+0x346>
    } else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
 800e2e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800e2f0:	3304      	adds	r3, #4
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	4610      	mov	r0, r2
 800e2f6:	f001 fbad 	bl	800fa54 <lv_fs_seek>
        lv_fs_read(user_data->f, fs_buf, w, NULL);
 800e2fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800e2fe:	6818      	ldr	r0, [r3, #0]
 800e300:	f9b7 2176 	ldrsh.w	r2, [r7, #374]	@ 0x176
 800e304:	f107 0110 	add.w	r1, r7, #16
 800e308:	2300      	movs	r3, #0
 800e30a:	f001 fb6d 	bl	800f9e8 <lv_fs_read>
        data_tmp = fs_buf;
 800e30e:	f107 0310 	add.w	r3, r7, #16
 800e312:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
        data_tmp = NULL; /*To avoid warnings*/
        return LV_RES_INV;
#endif
    }

    uint8_t byte_act = 0;
 800e316:	2300      	movs	r3, #0
 800e318:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
    uint8_t val_act;
    lv_coord_t i;
    lv_color_t * cbuf = (lv_color_t *)buf;
 800e31c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800e320:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    for(i = 0; i < len; i++) {
 800e324:	2300      	movs	r3, #0
 800e326:	f8a7 316a 	strh.w	r3, [r7, #362]	@ 0x16a
 800e32a:	e042      	b.n	800e3b2 <lv_img_decoder_built_in_line_indexed+0x3e2>
        val_act = (data_tmp[byte_act] & (mask << pos)) >> pos;
 800e32c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800e330:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800e334:	4413      	add	r3, r2
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	4619      	mov	r1, r3
 800e33a:	f8b7 2166 	ldrh.w	r2, [r7, #358]	@ 0x166
 800e33e:	f997 3175 	ldrsb.w	r3, [r7, #373]	@ 0x175
 800e342:	fa02 f303 	lsl.w	r3, r2, r3
 800e346:	ea01 0203 	and.w	r2, r1, r3
 800e34a:	f997 3175 	ldrsb.w	r3, [r7, #373]	@ 0x175
 800e34e:	fa42 f303 	asr.w	r3, r2, r3
 800e352:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        cbuf[i] = user_data->palette[val_act];
 800e356:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800e35a:	685a      	ldr	r2, [r3, #4]
 800e35c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800e360:	005b      	lsls	r3, r3, #1
 800e362:	441a      	add	r2, r3
 800e364:	f9b7 316a 	ldrsh.w	r3, [r7, #362]	@ 0x16a
 800e368:	005b      	lsls	r3, r3, #1
 800e36a:	f8d7 1154 	ldr.w	r1, [r7, #340]	@ 0x154
 800e36e:	440b      	add	r3, r1
 800e370:	8812      	ldrh	r2, [r2, #0]
 800e372:	801a      	strh	r2, [r3, #0]

        pos -= px_size;
 800e374:	f897 2175 	ldrb.w	r2, [r7, #373]	@ 0x175
 800e378:	f897 3169 	ldrb.w	r3, [r7, #361]	@ 0x169
 800e37c:	1ad3      	subs	r3, r2, r3
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	f887 3175 	strb.w	r3, [r7, #373]	@ 0x175
        if(pos < 0) {
 800e384:	f997 3175 	ldrsb.w	r3, [r7, #373]	@ 0x175
 800e388:	2b00      	cmp	r3, #0
 800e38a:	da0b      	bge.n	800e3a4 <lv_img_decoder_built_in_line_indexed+0x3d4>
            pos = 8 - px_size;
 800e38c:	f897 3169 	ldrb.w	r3, [r7, #361]	@ 0x169
 800e390:	f1c3 0308 	rsb	r3, r3, #8
 800e394:	b2db      	uxtb	r3, r3
 800e396:	f887 3175 	strb.w	r3, [r7, #373]	@ 0x175
            data_tmp++;
 800e39a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800e39e:	3301      	adds	r3, #1
 800e3a0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
    for(i = 0; i < len; i++) {
 800e3a4:	f9b7 316a 	ldrsh.w	r3, [r7, #362]	@ 0x16a
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	b29b      	uxth	r3, r3
 800e3ae:	f8a7 316a 	strh.w	r3, [r7, #362]	@ 0x16a
 800e3b2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800e3b6:	f5a3 73b9 	sub.w	r3, r3, #370	@ 0x172
 800e3ba:	f9b7 216a 	ldrsh.w	r2, [r7, #362]	@ 0x16a
 800e3be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	dbb2      	blt.n	800e32c <lv_img_decoder_built_in_line_indexed+0x35c>
        }
    }

    return LV_RES_OK;
 800e3c6:	2301      	movs	r3, #1
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f507 77be 	add.w	r7, r7, #380	@ 0x17c
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd90      	pop	{r4, r7, pc}
 800e3d2:	bf00      	nop

0800e3d4 <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
    return font_p->get_glyph_bitmap(font_p, letter);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	685b      	ldr	r3, [r3, #4]
 800e3e2:	6839      	ldr	r1, [r7, #0]
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	4798      	blx	r3
 800e3e8:	4603      	mov	r3, r0
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3708      	adds	r7, #8
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	bd80      	pop	{r7, pc}

0800e3f2 <lv_font_get_glyph_dsc>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
{
 800e3f2:	b590      	push	{r4, r7, lr}
 800e3f4:	b085      	sub	sp, #20
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	60f8      	str	r0, [r7, #12]
 800e3fa:	60b9      	str	r1, [r7, #8]
 800e3fc:	607a      	str	r2, [r7, #4]
 800e3fe:	603b      	str	r3, [r7, #0]
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681c      	ldr	r4, [r3, #0]
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	687a      	ldr	r2, [r7, #4]
 800e408:	68b9      	ldr	r1, [r7, #8]
 800e40a:	68f8      	ldr	r0, [r7, #12]
 800e40c:	47a0      	blx	r4
 800e40e:	4603      	mov	r3, r0
}
 800e410:	4618      	mov	r0, r3
 800e412:	3714      	adds	r7, #20
 800e414:	46bd      	mov	sp, r7
 800e416:	bd90      	pop	{r4, r7, pc}

0800e418 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b088      	sub	sp, #32
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	60b9      	str	r1, [r7, #8]
 800e422:	607a      	str	r2, [r7, #4]
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
 800e424:	f107 0114 	add.w	r1, r7, #20
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	68ba      	ldr	r2, [r7, #8]
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f7ff ffe0 	bl	800e3f2 <lv_font_get_glyph_dsc>
 800e432:	4603      	mov	r3, r0
 800e434:	77fb      	strb	r3, [r7, #31]
    if(ret) return g.adv_w;
 800e436:	7ffb      	ldrb	r3, [r7, #31]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d001      	beq.n	800e440 <lv_font_get_glyph_width+0x28>
 800e43c:	8abb      	ldrh	r3, [r7, #20]
 800e43e:	e000      	b.n	800e442 <lv_font_get_glyph_width+0x2a>
    else return 0;
 800e440:	2300      	movs	r3, #0
}
 800e442:	4618      	mov	r0, r3
 800e444:	3720      	adds	r7, #32
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <lv_font_get_bitmap_fmt_txt>:
 * @param font pointer to font
 * @param unicode_letter an unicode letter which bitmap should be get
 * @return pointer to the bitmap or NULL if not found
 */
const uint8_t * lv_font_get_bitmap_fmt_txt(const lv_font_t * font, uint32_t unicode_letter)
{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b086      	sub	sp, #24
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
 800e452:	6039      	str	r1, [r7, #0]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	617b      	str	r3, [r7, #20]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 800e45a:	6839      	ldr	r1, [r7, #0]
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f000 f883 	bl	800e568 <get_glyph_dsc_id>
 800e462:	6138      	str	r0, [r7, #16]
    if(!gid) return false;
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d101      	bne.n	800e46e <lv_font_get_bitmap_fmt_txt+0x24>
 800e46a:	2300      	movs	r3, #0
 800e46c:	e011      	b.n	800e492 <lv_font_get_bitmap_fmt_txt+0x48>

    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	685a      	ldr	r2, [r3, #4]
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	00db      	lsls	r3, r3, #3
 800e476:	4413      	add	r3, r2
 800e478:	60fb      	str	r3, [r7, #12]

    if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d007      	beq.n	800e490 <lv_font_get_bitmap_fmt_txt+0x46>
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	6812      	ldr	r2, [r2, #0]
 800e488:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e48c:	4413      	add	r3, r2
 800e48e:	e000      	b.n	800e492 <lv_font_get_bitmap_fmt_txt+0x48>

    /*If not returned earlier then the letter is not found in this font*/
    return NULL;
 800e490:	2300      	movs	r3, #0
}
 800e492:	4618      	mov	r0, r3
 800e494:	3718      	adds	r7, #24
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <lv_font_get_glyph_dsc_fmt_txt>:
 * @param letter an UNICODE letter code
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc_fmt_txt(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t unicode_letter, uint32_t unicode_letter_next)
{
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b08a      	sub	sp, #40	@ 0x28
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	60f8      	str	r0, [r7, #12]
 800e4a2:	60b9      	str	r1, [r7, #8]
 800e4a4:	607a      	str	r2, [r7, #4]
 800e4a6:	603b      	str	r3, [r7, #0]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	623b      	str	r3, [r7, #32]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
 800e4ae:	6879      	ldr	r1, [r7, #4]
 800e4b0:	68f8      	ldr	r0, [r7, #12]
 800e4b2:	f000 f859 	bl	800e568 <get_glyph_dsc_id>
 800e4b6:	61f8      	str	r0, [r7, #28]
    if(!gid) return false;
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d101      	bne.n	800e4c2 <lv_font_get_glyph_dsc_fmt_txt+0x28>
 800e4be:	2300      	movs	r3, #0
 800e4c0:	e04e      	b.n	800e560 <lv_font_get_glyph_dsc_fmt_txt+0xc6>

    int8_t kvalue = 0;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if(fdsc->kern_dsc) {
 800e4c8:	6a3b      	ldr	r3, [r7, #32]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00f      	beq.n	800e4f0 <lv_font_get_glyph_dsc_fmt_txt+0x56>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
 800e4d0:	6839      	ldr	r1, [r7, #0]
 800e4d2:	68f8      	ldr	r0, [r7, #12]
 800e4d4:	f000 f848 	bl	800e568 <get_glyph_dsc_id>
 800e4d8:	61b8      	str	r0, [r7, #24]
        if(gid_next) {
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d007      	beq.n	800e4f0 <lv_font_get_glyph_dsc_fmt_txt+0x56>
            kvalue = get_kern_value(font, gid, gid_next);
 800e4e0:	69ba      	ldr	r2, [r7, #24]
 800e4e2:	69f9      	ldr	r1, [r7, #28]
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f000 f97b 	bl	800e7e0 <get_kern_value>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
    }

    /*Put together a glyph dsc*/
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
 800e4f0:	6a3b      	ldr	r3, [r7, #32]
 800e4f2:	685a      	ldr	r2, [r3, #4]
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	00db      	lsls	r3, r3, #3
 800e4f8:	4413      	add	r3, r2
 800e4fa:	617b      	str	r3, [r7, #20]

    uint32_t adv_w = gdsc->adv_w + ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	885b      	ldrh	r3, [r3, #2]
 800e500:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800e504:	b29b      	uxth	r3, r3
 800e506:	4619      	mov	r1, r3
 800e508:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e50c:	6a3a      	ldr	r2, [r7, #32]
 800e50e:	8a12      	ldrh	r2, [r2, #16]
 800e510:	fb02 f303 	mul.w	r3, r2, r3
 800e514:	111b      	asrs	r3, r3, #4
 800e516:	440b      	add	r3, r1
 800e518:	613b      	str	r3, [r7, #16]
    adv_w  = (adv_w + (1 << 3)) >> 4;
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	3308      	adds	r3, #8
 800e51e:	091b      	lsrs	r3, r3, #4
 800e520:	613b      	str	r3, [r7, #16]

    dsc_out->adv_w = adv_w;
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	b29a      	uxth	r2, r3
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	801a      	strh	r2, [r3, #0]
    dsc_out->box_h = gdsc->box_h;
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	795a      	ldrb	r2, [r3, #5]
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	70da      	strb	r2, [r3, #3]
    dsc_out->box_w = gdsc->box_w;
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	791a      	ldrb	r2, [r3, #4]
 800e536:	68bb      	ldr	r3, [r7, #8]
 800e538:	709a      	strb	r2, [r3, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	f993 2006 	ldrsb.w	r2, [r3, #6]
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	711a      	strb	r2, [r3, #4]
    dsc_out->ofs_y = gdsc->ofs_y;
 800e544:	697b      	ldr	r3, [r7, #20]
 800e546:	79db      	ldrb	r3, [r3, #7]
 800e548:	b25a      	sxtb	r2, r3
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	715a      	strb	r2, [r3, #5]
    dsc_out->bpp   = fdsc->bpp;
 800e54e:	6a3b      	ldr	r3, [r7, #32]
 800e550:	7cdb      	ldrb	r3, [r3, #19]
 800e552:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800e556:	b2db      	uxtb	r3, r3
 800e558:	461a      	mov	r2, r3
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	719a      	strb	r2, [r3, #6]

    return true;
 800e55e:	2301      	movs	r3, #1
}
 800e560:	4618      	mov	r0, r3
 800e562:	3728      	adds	r7, #40	@ 0x28
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <get_glyph_dsc_id>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
{
 800e568:	b590      	push	{r4, r7, lr}
 800e56a:	b08f      	sub	sp, #60	@ 0x3c
 800e56c:	af02      	add	r7, sp, #8
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
    if(letter == '\0') return 0;
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d101      	bne.n	800e57c <get_glyph_dsc_id+0x14>
 800e578:	2300      	movs	r3, #0
 800e57a:	e12a      	b.n	800e7d2 <get_glyph_dsc_id+0x26a>

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	627b      	str	r3, [r7, #36]	@ 0x24

    /*Check the chacge first*/
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
 800e582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e584:	695b      	ldr	r3, [r3, #20]
 800e586:	683a      	ldr	r2, [r7, #0]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d102      	bne.n	800e592 <get_glyph_dsc_id+0x2a>
 800e58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e58e:	699b      	ldr	r3, [r3, #24]
 800e590:	e11f      	b.n	800e7d2 <get_glyph_dsc_id+0x26a>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
 800e592:	2300      	movs	r3, #0
 800e594:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800e596:	e10b      	b.n	800e7b0 <get_glyph_dsc_id+0x248>

        /*Relative code point*/
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
 800e598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e59a:	6899      	ldr	r1, [r3, #8]
 800e59c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e59e:	4613      	mov	r3, r2
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	4413      	add	r3, r2
 800e5a4:	009b      	lsls	r3, r3, #2
 800e5a6:	440b      	add	r3, r1
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	683a      	ldr	r2, [r7, #0]
 800e5ac:	1ad3      	subs	r3, r2, r3
 800e5ae:	60bb      	str	r3, [r7, #8]
        if(rcp > fdsc->cmaps[i].range_length) continue;
 800e5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5b2:	6899      	ldr	r1, [r3, #8]
 800e5b4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	009b      	lsls	r3, r3, #2
 800e5ba:	4413      	add	r3, r2
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	440b      	add	r3, r1
 800e5c0:	889b      	ldrh	r3, [r3, #4]
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d203      	bcs.n	800e5d2 <get_glyph_dsc_id+0x6a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 800e5ca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800e5d0:	e0ee      	b.n	800e7b0 <get_glyph_dsc_id+0x248>
        uint32_t glyph_id = 0;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	62bb      	str	r3, [r7, #40]	@ 0x28
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
 800e5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5d8:	6899      	ldr	r1, [r3, #8]
 800e5da:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e5dc:	4613      	mov	r3, r2
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	4413      	add	r3, r2
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	440b      	add	r3, r1
 800e5e6:	7c9b      	ldrb	r3, [r3, #18]
 800e5e8:	f003 0303 	and.w	r3, r3, #3
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d10d      	bne.n	800e60e <get_glyph_dsc_id+0xa6>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
 800e5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5f4:	6899      	ldr	r1, [r3, #8]
 800e5f6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e5f8:	4613      	mov	r3, r2
 800e5fa:	009b      	lsls	r3, r3, #2
 800e5fc:	4413      	add	r3, r2
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	440b      	add	r3, r1
 800e602:	88db      	ldrh	r3, [r3, #6]
 800e604:	461a      	mov	r2, r3
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	4413      	add	r3, r2
 800e60a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e60c:	e0c8      	b.n	800e7a0 <get_glyph_dsc_id+0x238>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
 800e60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e610:	6899      	ldr	r1, [r3, #8]
 800e612:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e614:	4613      	mov	r3, r2
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	4413      	add	r3, r2
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	440b      	add	r3, r1
 800e61e:	7c9b      	ldrb	r3, [r3, #18]
 800e620:	f003 0303 	and.w	r3, r3, #3
 800e624:	b2db      	uxtb	r3, r3
 800e626:	2b01      	cmp	r3, #1
 800e628:	d11a      	bne.n	800e660 <get_glyph_dsc_id+0xf8>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
 800e62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e62c:	6899      	ldr	r1, [r3, #8]
 800e62e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e630:	4613      	mov	r3, r2
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	4413      	add	r3, r2
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	440b      	add	r3, r1
 800e63a:	68db      	ldr	r3, [r3, #12]
 800e63c:	60fb      	str	r3, [r7, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
 800e63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e640:	6899      	ldr	r1, [r3, #8]
 800e642:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e644:	4613      	mov	r3, r2
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	4413      	add	r3, r2
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	440b      	add	r3, r1
 800e64e:	88db      	ldrh	r3, [r3, #6]
 800e650:	4619      	mov	r1, r3
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	68fa      	ldr	r2, [r7, #12]
 800e656:	4413      	add	r3, r2
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	440b      	add	r3, r1
 800e65c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e65e:	e09f      	b.n	800e7a0 <get_glyph_dsc_id+0x238>
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
 800e660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e662:	6899      	ldr	r1, [r3, #8]
 800e664:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e666:	4613      	mov	r3, r2
 800e668:	009b      	lsls	r3, r3, #2
 800e66a:	4413      	add	r3, r2
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	440b      	add	r3, r1
 800e670:	7c9b      	ldrb	r3, [r3, #18]
 800e672:	f003 0303 	and.w	r3, r3, #3
 800e676:	b2db      	uxtb	r3, r3
 800e678:	2b02      	cmp	r3, #2
 800e67a:	d13b      	bne.n	800e6f4 <get_glyph_dsc_id+0x18c>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800e67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e67e:	6899      	ldr	r1, [r3, #8]
 800e680:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e682:	4613      	mov	r3, r2
 800e684:	009b      	lsls	r3, r3, #2
 800e686:	4413      	add	r3, r2
 800e688:	009b      	lsls	r3, r3, #2
 800e68a:	440b      	add	r3, r1
 800e68c:	689c      	ldr	r4, [r3, #8]
 800e68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e690:	6899      	ldr	r1, [r3, #8]
 800e692:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e694:	4613      	mov	r3, r2
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	4413      	add	r3, r2
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	440b      	add	r3, r1
 800e69e:	8a1b      	ldrh	r3, [r3, #16]
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	f107 0008 	add.w	r0, r7, #8
 800e6a6:	4b4d      	ldr	r3, [pc, #308]	@ (800e7dc <get_glyph_dsc_id+0x274>)
 800e6a8:	9300      	str	r3, [sp, #0]
 800e6aa:	2302      	movs	r3, #2
 800e6ac:	4621      	mov	r1, r4
 800e6ae:	f002 fe23 	bl	80112f8 <lv_utils_bsearch>
 800e6b2:	6178      	str	r0, [r7, #20]

            if(p) {
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d072      	beq.n	800e7a0 <get_glyph_dsc_id+0x238>
                uint32_t ofs = (uintptr_t)p - (uintptr_t) fdsc->cmaps[i].unicode_list;
 800e6ba:	6979      	ldr	r1, [r7, #20]
 800e6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6be:	6898      	ldr	r0, [r3, #8]
 800e6c0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	009b      	lsls	r3, r3, #2
 800e6c6:	4413      	add	r3, r2
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	4403      	add	r3, r0
 800e6cc:	689b      	ldr	r3, [r3, #8]
 800e6ce:	1acb      	subs	r3, r1, r3
 800e6d0:	613b      	str	r3, [r7, #16]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	085b      	lsrs	r3, r3, #1
 800e6d6:	613b      	str	r3, [r7, #16]
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
 800e6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6da:	6899      	ldr	r1, [r3, #8]
 800e6dc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e6de:	4613      	mov	r3, r2
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	4413      	add	r3, r2
 800e6e4:	009b      	lsls	r3, r3, #2
 800e6e6:	440b      	add	r3, r1
 800e6e8:	88db      	ldrh	r3, [r3, #6]
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	4413      	add	r3, r2
 800e6f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e6f2:	e055      	b.n	800e7a0 <get_glyph_dsc_id+0x238>
            }
        }
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6f6:	6899      	ldr	r1, [r3, #8]
 800e6f8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e6fa:	4613      	mov	r3, r2
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	4413      	add	r3, r2
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	440b      	add	r3, r1
 800e704:	7c9b      	ldrb	r3, [r3, #18]
 800e706:	f003 0303 	and.w	r3, r3, #3
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	2b03      	cmp	r3, #3
 800e70e:	d147      	bne.n	800e7a0 <get_glyph_dsc_id+0x238>
            uint8_t * p = lv_utils_bsearch(&rcp, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length, sizeof(fdsc->cmaps[i].unicode_list[0]), unicode_list_compare);
 800e710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e712:	6899      	ldr	r1, [r3, #8]
 800e714:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e716:	4613      	mov	r3, r2
 800e718:	009b      	lsls	r3, r3, #2
 800e71a:	4413      	add	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	440b      	add	r3, r1
 800e720:	689c      	ldr	r4, [r3, #8]
 800e722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e724:	6899      	ldr	r1, [r3, #8]
 800e726:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e728:	4613      	mov	r3, r2
 800e72a:	009b      	lsls	r3, r3, #2
 800e72c:	4413      	add	r3, r2
 800e72e:	009b      	lsls	r3, r3, #2
 800e730:	440b      	add	r3, r1
 800e732:	8a1b      	ldrh	r3, [r3, #16]
 800e734:	461a      	mov	r2, r3
 800e736:	f107 0008 	add.w	r0, r7, #8
 800e73a:	4b28      	ldr	r3, [pc, #160]	@ (800e7dc <get_glyph_dsc_id+0x274>)
 800e73c:	9300      	str	r3, [sp, #0]
 800e73e:	2302      	movs	r3, #2
 800e740:	4621      	mov	r1, r4
 800e742:	f002 fdd9 	bl	80112f8 <lv_utils_bsearch>
 800e746:	6238      	str	r0, [r7, #32]

            if(p) {
 800e748:	6a3b      	ldr	r3, [r7, #32]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d028      	beq.n	800e7a0 <get_glyph_dsc_id+0x238>
                uint32_t ofs = (uintptr_t)p - (uintptr_t) fdsc->cmaps[i].unicode_list;
 800e74e:	6a39      	ldr	r1, [r7, #32]
 800e750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e752:	6898      	ldr	r0, [r3, #8]
 800e754:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e756:	4613      	mov	r3, r2
 800e758:	009b      	lsls	r3, r3, #2
 800e75a:	4413      	add	r3, r2
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	4403      	add	r3, r0
 800e760:	689b      	ldr	r3, [r3, #8]
 800e762:	1acb      	subs	r3, r1, r3
 800e764:	61fb      	str	r3, [r7, #28]
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	085b      	lsrs	r3, r3, #1
 800e76a:	61fb      	str	r3, [r7, #28]
                const uint8_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
 800e76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e76e:	6899      	ldr	r1, [r3, #8]
 800e770:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e772:	4613      	mov	r3, r2
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	4413      	add	r3, r2
 800e778:	009b      	lsls	r3, r3, #2
 800e77a:	440b      	add	r3, r1
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	61bb      	str	r3, [r7, #24]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
 800e780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e782:	6899      	ldr	r1, [r3, #8]
 800e784:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e786:	4613      	mov	r3, r2
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	4413      	add	r3, r2
 800e78c:	009b      	lsls	r3, r3, #2
 800e78e:	440b      	add	r3, r1
 800e790:	88db      	ldrh	r3, [r3, #6]
 800e792:	4619      	mov	r1, r3
 800e794:	69ba      	ldr	r2, [r7, #24]
 800e796:	69fb      	ldr	r3, [r7, #28]
 800e798:	4413      	add	r3, r2
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	440b      	add	r3, r1
 800e79e:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
        }

        /*Update the cache*/
        fdsc->last_letter = letter;
 800e7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a2:	683a      	ldr	r2, [r7, #0]
 800e7a4:	615a      	str	r2, [r3, #20]
        fdsc->last_glyph_id = glyph_id;
 800e7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7aa:	619a      	str	r2, [r3, #24]
        return glyph_id;
 800e7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ae:	e010      	b.n	800e7d2 <get_glyph_dsc_id+0x26a>
    for(i = 0; i < fdsc->cmap_num; i++) {
 800e7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7b2:	8a5b      	ldrh	r3, [r3, #18]
 800e7b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	f4ff aeea 	bcc.w	800e598 <get_glyph_dsc_id+0x30>
    }

    fdsc->last_letter = letter;
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7c6:	683a      	ldr	r2, [r7, #0]
 800e7c8:	615a      	str	r2, [r3, #20]
    fdsc->last_glyph_id = 0;
 800e7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	619a      	str	r2, [r3, #24]
    return 0;
 800e7d0:	2300      	movs	r3, #0

}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3734      	adds	r7, #52	@ 0x34
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd90      	pop	{r4, r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	0800e9c5 	.word	0x0800e9c5

0800e7e0 <get_kern_value>:

static int8_t get_kern_value(const lv_font_t * font, uint32_t gid_left, uint32_t gid_right)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b094      	sub	sp, #80	@ 0x50
 800e7e4:	af02      	add	r7, sp, #8
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	60b9      	str	r1, [r7, #8]
 800e7ea:	607a      	str	r2, [r7, #4]
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	68db      	ldr	r3, [r3, #12]
 800e7f0:	643b      	str	r3, [r7, #64]	@ 0x40

    int8_t value = 0;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    if(fdsc->kern_classes == 0) {
 800e7f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7fa:	7cdb      	ldrb	r3, [r3, #19]
 800e7fc:	f003 0320 	and.w	r3, r3, #32
 800e800:	b2db      	uxtb	r3, r3
 800e802:	2b00      	cmp	r3, #0
 800e804:	d164      	bne.n	800e8d0 <get_kern_value+0xf0>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
 800e806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e808:	68db      	ldr	r3, [r3, #12]
 800e80a:	637b      	str	r3, [r7, #52]	@ 0x34
        if(kdsc->glyph_ids_size == 0) {
 800e80c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e80e:	7adb      	ldrb	r3, [r3, #11]
 800e810:	f003 0303 	and.w	r3, r3, #3
 800e814:	b2db      	uxtb	r3, r3
 800e816:	2b00      	cmp	r3, #0
 800e818:	d12b      	bne.n	800e872 <get_kern_value+0x92>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint8_t * g_ids = kdsc->glyph_ids;
 800e81a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	627b      	str	r3, [r7, #36]	@ 0x24
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	b29b      	uxth	r3, r3
 800e824:	021b      	lsls	r3, r3, #8
 800e826:	b29a      	uxth	r2, r3
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	4413      	add	r3, r2
 800e82e:	b29b      	uxth	r3, r3
 800e830:	837b      	strh	r3, [r7, #26]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
 800e832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e834:	689b      	ldr	r3, [r3, #8]
 800e836:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800e83a:	461a      	mov	r2, r3
 800e83c:	f107 001a 	add.w	r0, r7, #26
 800e840:	4b3b      	ldr	r3, [pc, #236]	@ (800e930 <get_kern_value+0x150>)
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	2302      	movs	r3, #2
 800e846:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e848:	f002 fd56 	bl	80112f8 <lv_utils_bsearch>
 800e84c:	6238      	str	r0, [r7, #32]

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 800e84e:	6a3b      	ldr	r3, [r7, #32]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d067      	beq.n	800e924 <get_kern_value+0x144>
                uintptr_t ofs = (uintptr_t)kid_p - (uintptr_t)g_ids;
 800e854:	6a3a      	ldr	r2, [r7, #32]
 800e856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e858:	1ad3      	subs	r3, r2, r3
 800e85a:	61fb      	str	r3, [r7, #28]
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	085b      	lsrs	r3, r3, #1
 800e860:	61fb      	str	r3, [r7, #28]
                value = kdsc->values[ofs];
 800e862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e864:	685a      	ldr	r2, [r3, #4]
 800e866:	69fb      	ldr	r3, [r7, #28]
 800e868:	4413      	add	r3, r2
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800e870:	e058      	b.n	800e924 <get_kern_value+0x144>
            }
        } else if(kdsc->glyph_ids_size == 1) {
 800e872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e874:	7adb      	ldrb	r3, [r3, #11]
 800e876:	f003 0303 	and.w	r3, r3, #3
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d151      	bne.n	800e924 <get_kern_value+0x144>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint16_t * g_ids = kdsc->glyph_ids;
 800e880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	633b      	str	r3, [r7, #48]	@ 0x30
            uint32_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	021a      	lsls	r2, r3, #8
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	4413      	add	r3, r2
 800e88e:	617b      	str	r3, [r7, #20]
            uint8_t * kid_p = lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
 800e890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e892:	689b      	ldr	r3, [r3, #8]
 800e894:	f3c3 0317 	ubfx	r3, r3, #0, #24
 800e898:	461a      	mov	r2, r3
 800e89a:	f107 0014 	add.w	r0, r7, #20
 800e89e:	4b25      	ldr	r3, [pc, #148]	@ (800e934 <get_kern_value+0x154>)
 800e8a0:	9300      	str	r3, [sp, #0]
 800e8a2:	2304      	movs	r3, #4
 800e8a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e8a6:	f002 fd27 	bl	80112f8 <lv_utils_bsearch>
 800e8aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
 800e8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d038      	beq.n	800e924 <get_kern_value+0x144>
                uintptr_t ofs = (uintptr_t)kid_p - (uintptr_t)g_ids;
 800e8b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8b6:	1ad3      	subs	r3, r2, r3
 800e8b8:	62bb      	str	r3, [r7, #40]	@ 0x28
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
 800e8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8bc:	091b      	lsrs	r3, r3, #4
 800e8be:	62bb      	str	r3, [r7, #40]	@ 0x28
                value = kdsc->values[ofs];
 800e8c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8c2:	685a      	ldr	r2, [r3, #4]
 800e8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8c6:	4413      	add	r3, r2
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800e8ce:	e029      	b.n	800e924 <get_kern_value+0x144>
        } else {
            /*Invalid value*/
        }
    } else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
 800e8d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
 800e8d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8d8:	685a      	ldr	r2, [r3, #4]
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	4413      	add	r3, r2
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint8_t right_class = kdsc->left_class_mapping[gid_right];
 800e8e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8e6:	685a      	ldr	r2, [r3, #4]
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	4413      	add	r3, r2
 800e8ec:	781b      	ldrb	r3, [r3, #0]
 800e8ee:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

        /* If class = 0, kerning not exist for that glyph
         * else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
 800e8f2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d014      	beq.n	800e924 <get_kern_value+0x144>
 800e8fa:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d010      	beq.n	800e924 <get_kern_value+0x144>
            value = kdsc->class_pair_values[(left_class-1)* kdsc->right_class_cnt + (right_class-1)];
 800e902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800e90a:	3a01      	subs	r2, #1
 800e90c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e90e:	7b49      	ldrb	r1, [r1, #13]
 800e910:	fb02 f101 	mul.w	r1, r2, r1
 800e914:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800e918:	3a01      	subs	r2, #1
 800e91a:	440a      	add	r2, r1
 800e91c:	4413      	add	r3, r2
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }

    }
    return value;
 800e924:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3748      	adds	r7, #72	@ 0x48
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	0800e939 	.word	0x0800e939
 800e934:	0800e97f 	.word	0x0800e97f

0800e938 <kern_pair_8_compare>:

static int32_t kern_pair_8_compare(const void * ref, const void * element)
{
 800e938:	b480      	push	{r7}
 800e93a:	b085      	sub	sp, #20
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
 800e940:	6039      	str	r1, [r7, #0]
    const uint8_t * ref8_p = ref;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	60fb      	str	r3, [r7, #12]
    const uint8_t * element8_p = element;
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	781a      	ldrb	r2, [r3, #0]
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	429a      	cmp	r2, r3
 800e954:	d006      	beq.n	800e964 <kern_pair_8_compare+0x2c>
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	461a      	mov	r2, r3
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	781b      	ldrb	r3, [r3, #0]
 800e960:	1ad3      	subs	r3, r2, r3
 800e962:	e007      	b.n	800e974 <kern_pair_8_compare+0x3c>
    else return (int32_t) ref8_p[1] - element8_p[1];
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	3301      	adds	r3, #1
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	461a      	mov	r2, r3
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	3301      	adds	r3, #1
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	1ad3      	subs	r3, r2, r3

}
 800e974:	4618      	mov	r0, r3
 800e976:	3714      	adds	r7, #20
 800e978:	46bd      	mov	sp, r7
 800e97a:	bc80      	pop	{r7}
 800e97c:	4770      	bx	lr

0800e97e <kern_pair_16_compare>:

static int32_t kern_pair_16_compare(const void * ref, const void * element)
{
 800e97e:	b480      	push	{r7}
 800e980:	b085      	sub	sp, #20
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
 800e986:	6039      	str	r1, [r7, #0]
    const uint16_t * ref16_p = ref;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	60fb      	str	r3, [r7, #12]
    const uint16_t * element16_p = element;
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	60bb      	str	r3, [r7, #8]

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	881a      	ldrh	r2, [r3, #0]
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	881b      	ldrh	r3, [r3, #0]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d006      	beq.n	800e9aa <kern_pair_16_compare+0x2c>
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	881b      	ldrh	r3, [r3, #0]
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	881b      	ldrh	r3, [r3, #0]
 800e9a6:	1ad3      	subs	r3, r2, r3
 800e9a8:	e007      	b.n	800e9ba <kern_pair_16_compare+0x3c>
    else return (int32_t) ref16_p[1] - element16_p[1];
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	3302      	adds	r3, #2
 800e9ae:	881b      	ldrh	r3, [r3, #0]
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	3302      	adds	r3, #2
 800e9b6:	881b      	ldrh	r3, [r3, #0]
 800e9b8:	1ad3      	subs	r3, r2, r3
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3714      	adds	r7, #20
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bc80      	pop	{r7}
 800e9c2:	4770      	bx	lr

0800e9c4 <unicode_list_compare>:
 *  @retval = 0   Reference is equal to element.
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	b083      	sub	sp, #12
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	6039      	str	r1, [r7, #0]
    return (*(uint16_t *)ref) - (*(uint16_t *)element);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	881b      	ldrh	r3, [r3, #0]
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	881b      	ldrh	r3, [r3, #0]
 800e9d8:	1ad3      	subs	r3, r2, r3
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	370c      	adds	r7, #12
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bc80      	pop	{r7}
 800e9e2:	4770      	bx	lr

0800e9e4 <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
    memset(driver, 0, sizeof(lv_disp_drv_t));
 800e9ec:	2224      	movs	r2, #36	@ 0x24
 800e9ee:	2100      	movs	r1, #0
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f00c ff76 	bl	801b8e2 <memset>

    driver->flush_cb         = NULL;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	60da      	str	r2, [r3, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800ea02:	801a      	strh	r2, [r3, #0]
    driver->ver_res          = LV_VER_RES_MAX;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	22f0      	movs	r2, #240	@ 0xf0
 800ea08:	805a      	strh	r2, [r3, #2]
    driver->buffer           = NULL;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	605a      	str	r2, [r3, #4]
    driver->rotated          = 0;
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	7a13      	ldrb	r3, [r2, #8]
 800ea14:	f36f 0341 	bfc	r3, #1, #1
 800ea18:	7213      	strb	r3, [r2, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
 800ea1a:	687a      	ldr	r2, [r7, #4]
 800ea1c:	7f13      	ldrb	r3, [r2, #28]
 800ea1e:	f36f 0304 	bfc	r3, #0, #5
 800ea22:	7713      	strb	r3, [r2, #28]
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	8b93      	ldrh	r3, [r2, #28]
 800ea28:	f443 63fc 	orr.w	r3, r3, #2016	@ 0x7e0
 800ea2c:	8393      	strh	r3, [r2, #28]
 800ea2e:	687a      	ldr	r2, [r7, #4]
 800ea30:	7f53      	ldrb	r3, [r2, #29]
 800ea32:	f36f 03c7 	bfc	r3, #3, #5
 800ea36:	7753      	strb	r3, [r2, #29]

#if LV_ANTIALIAS
    driver->antialiasing = true;
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	7a13      	ldrb	r3, [r2, #8]
 800ea3c:	f043 0301 	orr.w	r3, r3, #1
 800ea40:	7213      	strb	r3, [r2, #8]
    driver->gpu_blend_cb = NULL;
    driver->gpu_fill_cb  = NULL;
#endif

#if LV_USE_USER_DATA
    driver->user_data = NULL;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	621a      	str	r2, [r3, #32]
#endif

    driver->set_px_cb = NULL;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	615a      	str	r2, [r3, #20]
}
 800ea4e:	bf00      	nop
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <lv_disp_buf_init>:
 *             It lets LittlevGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b084      	sub	sp, #16
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	60f8      	str	r0, [r7, #12]
 800ea5e:	60b9      	str	r1, [r7, #8]
 800ea60:	607a      	str	r2, [r7, #4]
 800ea62:	603b      	str	r3, [r7, #0]
    memset(disp_buf, 0, sizeof(lv_disp_buf_t));
 800ea64:	221c      	movs	r2, #28
 800ea66:	2100      	movs	r1, #0
 800ea68:	68f8      	ldr	r0, [r7, #12]
 800ea6a:	f00c ff3a 	bl	801b8e2 <memset>

    disp_buf->buf1    = buf1;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	68ba      	ldr	r2, [r7, #8]
 800ea72:	601a      	str	r2, [r3, #0]
    disp_buf->buf2    = buf2;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	687a      	ldr	r2, [r7, #4]
 800ea78:	605a      	str	r2, [r3, #4]
    disp_buf->buf_act = disp_buf->buf1;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681a      	ldr	r2, [r3, #0]
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	609a      	str	r2, [r3, #8]
    disp_buf->size    = size_in_px_cnt;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	683a      	ldr	r2, [r7, #0]
 800ea86:	60da      	str	r2, [r3, #12]
}
 800ea88:	bf00      	nop
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <lv_disp_drv_register>:
 * Automatically set the first display as active.
 * @param driver pointer to an initialized 'lv_disp_drv_t' variable (can be local variable)
 * @return pointer to the new display or NULL on error
 */
lv_disp_t * lv_disp_drv_register(lv_disp_drv_t * driver)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
    lv_disp_t * disp = lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
 800ea98:	4842      	ldr	r0, [pc, #264]	@ (800eba4 <lv_disp_drv_register+0x114>)
 800ea9a:	f001 f88e 	bl	800fbba <lv_ll_ins_head>
 800ea9e:	60f8      	str	r0, [r7, #12]
    if(!disp) {
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d106      	bne.n	800eab4 <lv_disp_drv_register+0x24>
        lv_mem_assert(disp);
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d101      	bne.n	800eab0 <lv_disp_drv_register+0x20>
 800eaac:	bf00      	nop
 800eaae:	e7fd      	b.n	800eaac <lv_disp_drv_register+0x1c>
        return NULL;
 800eab0:	2300      	movs	r3, #0
 800eab2:	e073      	b.n	800eb9c <lv_disp_drv_register+0x10c>
    }

    memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2224      	movs	r2, #36	@ 0x24
 800eab8:	6879      	ldr	r1, [r7, #4]
 800eaba:	4618      	mov	r0, r3
 800eabc:	f00c ff95 	bl	801b9ea <memcpy>
    memset(&disp->inv_area_joined, 0, sizeof(disp->inv_area_joined));
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800eac6:	2220      	movs	r2, #32
 800eac8:	2100      	movs	r1, #0
 800eaca:	4618      	mov	r0, r3
 800eacc:	f00c ff09 	bl	801b8e2 <memset>
    memset(&disp->inv_areas, 0, sizeof(disp->inv_areas));
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	3340      	adds	r3, #64	@ 0x40
 800ead4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ead8:	2100      	movs	r1, #0
 800eada:	4618      	mov	r0, r3
 800eadc:	f00c ff01 	bl	801b8e2 <memset>
    lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	3328      	adds	r3, #40	@ 0x28
 800eae4:	2148      	movs	r1, #72	@ 0x48
 800eae6:	4618      	mov	r0, r3
 800eae8:	f001 f848 	bl	800fb7c <lv_ll_init>

    if(disp_def == NULL) disp_def = disp;
 800eaec:	4b2e      	ldr	r3, [pc, #184]	@ (800eba8 <lv_disp_drv_register+0x118>)
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d102      	bne.n	800eafa <lv_disp_drv_register+0x6a>
 800eaf4:	4a2c      	ldr	r2, [pc, #176]	@ (800eba8 <lv_disp_drv_register+0x118>)
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	6013      	str	r3, [r2, #0]

    lv_disp_t * disp_def_tmp = disp_def;
 800eafa:	4b2b      	ldr	r3, [pc, #172]	@ (800eba8 <lv_disp_drv_register+0x118>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	60bb      	str	r3, [r7, #8]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
 800eb00:	4a29      	ldr	r2, [pc, #164]	@ (800eba8 <lv_disp_drv_register+0x118>)
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	6013      	str	r3, [r2, #0]
                                        new display*/

    disp->inv_p = 0;
 800eb06:	68fa      	ldr	r2, [r7, #12]
 800eb08:	f8b2 3160 	ldrh.w	r3, [r2, #352]	@ 0x160
 800eb0c:	f36f 0309 	bfc	r3, #0, #10
 800eb10:	f8a2 3160 	strh.w	r3, [r2, #352]	@ 0x160

    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
 800eb14:	2100      	movs	r1, #0
 800eb16:	2000      	movs	r0, #0
 800eb18:	f7f6 f8fc 	bl	8004d14 <lv_obj_create>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	635a      	str	r2, [r3, #52]	@ 0x34
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800eb22:	2100      	movs	r1, #0
 800eb24:	2000      	movs	r0, #0
 800eb26:	f7f6 f8f5 	bl	8004d14 <lv_obj_create>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	639a      	str	r2, [r3, #56]	@ 0x38
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
 800eb30:	2100      	movs	r1, #0
 800eb32:	2000      	movs	r0, #0
 800eb34:	f7f6 f8ee 	bl	8004d14 <lv_obj_create>
 800eb38:	4602      	mov	r2, r0
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	63da      	str	r2, [r3, #60]	@ 0x3c
    lv_obj_set_style(disp->top_layer, &lv_style_transp);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb42:	491a      	ldr	r1, [pc, #104]	@ (800ebac <lv_disp_drv_register+0x11c>)
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7f7 fb06 	bl	8006156 <lv_obj_set_style>
    lv_obj_set_style(disp->sys_layer, &lv_style_transp);
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb4e:	4917      	ldr	r1, [pc, #92]	@ (800ebac <lv_disp_drv_register+0x11c>)
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7f7 fb00 	bl	8006156 <lv_obj_set_style>

    lv_obj_invalidate(disp->act_scr);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7f6 fbfe 	bl	800535c <lv_obj_invalidate>

    disp_def = disp_def_tmp; /*Revert the default display*/
 800eb60:	4a11      	ldr	r2, [pc, #68]	@ (800eba8 <lv_disp_drv_register+0x118>)
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	6013      	str	r3, [r2, #0]

    /*Create a refresh task*/
    disp->refr_task = lv_task_create(lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, disp);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2203      	movs	r2, #3
 800eb6a:	211e      	movs	r1, #30
 800eb6c:	4810      	ldr	r0, [pc, #64]	@ (800ebb0 <lv_disp_drv_register+0x120>)
 800eb6e:	f001 fda7 	bl	80106c0 <lv_task_create>
 800eb72:	4602      	mov	r2, r0
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	625a      	str	r2, [r3, #36]	@ 0x24
    lv_mem_assert(disp->refr_task);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d101      	bne.n	800eb84 <lv_disp_drv_register+0xf4>
 800eb80:	bf00      	nop
 800eb82:	e7fd      	b.n	800eb80 <lv_disp_drv_register+0xf0>
    if(disp->refr_task == NULL) return NULL;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d101      	bne.n	800eb90 <lv_disp_drv_register+0x100>
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	e005      	b.n	800eb9c <lv_disp_drv_register+0x10c>

    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb94:	4618      	mov	r0, r3
 800eb96:	f001 fe40 	bl	801081a <lv_task_ready>

    return disp;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3710      	adds	r7, #16
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	20002d14 	.word	0x20002d14
 800eba8:	20002cf4 	.word	0x20002cf4
 800ebac:	20002a18 	.word	0x20002a18
 800ebb0:	08006f3d 	.word	0x08006f3d

0800ebb4 <lv_disp_get_default>:
/**
 * Get the default display
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	af00      	add	r7, sp, #0
    return disp_def;
 800ebb8:	4b02      	ldr	r3, [pc, #8]	@ (800ebc4 <lv_disp_get_default+0x10>)
 800ebba:	681b      	ldr	r3, [r3, #0]
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bc80      	pop	{r7}
 800ebc2:	4770      	bx	lr
 800ebc4:	20002cf4 	.word	0x20002cf4

0800ebc8 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d102      	bne.n	800ebdc <lv_disp_get_hor_res+0x14>
 800ebd6:	f7ff ffed 	bl	800ebb4 <lv_disp_get_default>
 800ebda:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d102      	bne.n	800ebe8 <lv_disp_get_hor_res+0x20>
        return LV_HOR_RES_MAX;
 800ebe2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800ebe6:	e00d      	b.n	800ec04 <lv_disp_get_hor_res+0x3c>
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	7a1b      	ldrb	r3, [r3, #8]
 800ebec:	f003 0302 	and.w	r3, r3, #2
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d103      	bne.n	800ebfe <lv_disp_get_hor_res+0x36>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ebfc:	e002      	b.n	800ec04 <lv_disp_get_hor_res+0x3c>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3708      	adds	r7, #8
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
    if(disp == NULL) disp = lv_disp_get_default();
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d102      	bne.n	800ec20 <lv_disp_get_ver_res+0x14>
 800ec1a:	f7ff ffcb 	bl	800ebb4 <lv_disp_get_default>
 800ec1e:	6078      	str	r0, [r7, #4]

    if(disp == NULL)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d101      	bne.n	800ec2a <lv_disp_get_ver_res+0x1e>
        return LV_VER_RES_MAX;
 800ec26:	23f0      	movs	r3, #240	@ 0xf0
 800ec28:	e00d      	b.n	800ec46 <lv_disp_get_ver_res+0x3a>
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	7a1b      	ldrb	r3, [r3, #8]
 800ec2e:	f003 0302 	and.w	r3, r3, #2
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d103      	bne.n	800ec40 <lv_disp_get_ver_res+0x34>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ec3e:	e002      	b.n	800ec46 <lv_disp_get_ver_res+0x3a>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <lv_disp_get_antialiasing>:
 * Get if anti-aliasing is enabled for a display or not
 * @param disp pointer to a display (NULL to use the default display)
 * @return true: anti-aliasing is enabled; false: disabled
 */
bool lv_disp_get_antialiasing(lv_disp_t * disp)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b082      	sub	sp, #8
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
#if LV_ANTIALIAS == 0
    return false;
#else
    if(disp == NULL) disp = lv_disp_get_default();
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d102      	bne.n	800ec62 <lv_disp_get_antialiasing+0x14>
 800ec5c:	f7ff ffaa 	bl	800ebb4 <lv_disp_get_default>
 800ec60:	6078      	str	r0, [r7, #4]
    if(disp == NULL) return false;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d101      	bne.n	800ec6c <lv_disp_get_antialiasing+0x1e>
 800ec68:	2300      	movs	r3, #0
 800ec6a:	e008      	b.n	800ec7e <lv_disp_get_antialiasing+0x30>

    return disp->driver.antialiasing ? true : false;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	7a1b      	ldrb	r3, [r3, #8]
 800ec70:	f003 0301 	and.w	r3, r3, #1
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	bf14      	ite	ne
 800ec78:	2301      	movne	r3, #1
 800ec7a:	2300      	moveq	r3, #0
 800ec7c:	b2db      	uxtb	r3, r3
#endif
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3708      	adds	r7, #8
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}

0800ec86 <lv_disp_flush_ready>:
/**
 * Call in the display driver's `flush_cb` function when the flushing is finished
 * @param disp_drv pointer to display driver in `flush_cb` where this function is called
 */
LV_ATTRIBUTE_FLUSH_READY void lv_disp_flush_ready(lv_disp_drv_t * disp_drv)
{
 800ec86:	b480      	push	{r7}
 800ec88:	b083      	sub	sp, #12
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	6078      	str	r0, [r7, #4]
    disp_drv->buffer->flushing = 0;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	685a      	ldr	r2, [r3, #4]
 800ec92:	7e13      	ldrb	r3, [r2, #24]
 800ec94:	f36f 0300 	bfc	r3, #0, #1
 800ec98:	7613      	strb	r3, [r2, #24]
#if LV_COLOR_SCREEN_TRANSP
    if(disp_drv->screen_transp) {
        memset(disp_drv->buffer->buf_act, 0x00, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif
}
 800ec9a:	bf00      	nop
 800ec9c:	370c      	adds	r7, #12
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bc80      	pop	{r7}
 800eca2:	4770      	bx	lr

0800eca4 <lv_disp_get_buf>:
 * Get the internal buffer of a display
 * @param disp pointer to a display
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
    return disp->driver.buffer;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	685b      	ldr	r3, [r3, #4]
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	370c      	adds	r7, #12
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bc80      	pop	{r7}
 800ecb8:	4770      	bx	lr

0800ecba <lv_disp_get_inv_buf_size>:
/**
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
 800ecba:	b480      	push	{r7}
 800ecbc:	b083      	sub	sp, #12
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
    return disp->inv_p;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 800ecc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eccc:	b29b      	uxth	r3, r3
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	370c      	adds	r7, #12
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bc80      	pop	{r7}
 800ecd6:	4770      	bx	lr

0800ecd8 <lv_disp_pop_from_inv_buf>:
/**
 * Pop (delete) the last 'num' invalidated areas from the buffer
 * @param num number of areas to delete
 */
void lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b083      	sub	sp, #12
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	460b      	mov	r3, r1
 800ece2:	807b      	strh	r3, [r7, #2]

    if(disp->inv_p < num)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 800ecea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ecee:	b29b      	uxth	r3, r3
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	887b      	ldrh	r3, [r7, #2]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	da07      	bge.n	800ed08 <lv_disp_pop_from_inv_buf+0x30>
        disp->inv_p = 0;
 800ecf8:	687a      	ldr	r2, [r7, #4]
 800ecfa:	f8b2 3160 	ldrh.w	r3, [r2, #352]	@ 0x160
 800ecfe:	f36f 0309 	bfc	r3, #0, #10
 800ed02:	f8a2 3160 	strh.w	r3, [r2, #352]	@ 0x160
    else
        disp->inv_p -= num;
}
 800ed06:	e013      	b.n	800ed30 <lv_disp_pop_from_inv_buf+0x58>
        disp->inv_p -= num;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 800ed0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	461a      	mov	r2, r3
 800ed16:	887b      	ldrh	r3, [r7, #2]
 800ed18:	1ad3      	subs	r3, r2, r3
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed20:	b299      	uxth	r1, r3
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	f8b2 3160 	ldrh.w	r3, [r2, #352]	@ 0x160
 800ed28:	f361 0309 	bfi	r3, r1, #0, #10
 800ed2c:	f8a2 3160 	strh.w	r3, [r2, #352]	@ 0x160
}
 800ed30:	bf00      	nop
 800ed32:	370c      	adds	r7, #12
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bc80      	pop	{r7}
 800ed38:	4770      	bx	lr

0800ed3a <lv_disp_is_double_buf>:
 * Check the driver configuration if it's double buffered (both `buf1` and `buf2` are set)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
 800ed3a:	b480      	push	{r7}
 800ed3c:	b083      	sub	sp, #12
 800ed3e:	af00      	add	r7, sp, #0
 800ed40:	6078      	str	r0, [r7, #4]
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	685b      	ldr	r3, [r3, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d006      	beq.n	800ed5a <lv_disp_is_double_buf+0x20>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d001      	beq.n	800ed5a <lv_disp_is_double_buf+0x20>
        return true;
 800ed56:	2301      	movs	r3, #1
 800ed58:	e000      	b.n	800ed5c <lv_disp_is_double_buf+0x22>
    else
        return false;
 800ed5a:	2300      	movs	r3, #0
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	370c      	adds	r7, #12
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bc80      	pop	{r7}
 800ed64:	4770      	bx	lr

0800ed66 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
 800ed66:	b580      	push	{r7, lr}
 800ed68:	b084      	sub	sp, #16
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	6078      	str	r0, [r7, #4]
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ed74:	461a      	mov	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ed7c:	fb02 f303 	mul.w	r3, r2, r3
 800ed80:	60fb      	str	r3, [r7, #12]

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f7ff ffd9 	bl	800ed3a <lv_disp_is_double_buf>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d007      	beq.n	800ed9e <lv_disp_is_true_double_buf+0x38>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	68fa      	ldr	r2, [r7, #12]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d101      	bne.n	800ed9e <lv_disp_is_true_double_buf+0x38>
        return true;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e000      	b.n	800eda0 <lv_disp_is_true_double_buf+0x3a>
    } else {
        return false;
 800ed9e:	2300      	movs	r3, #0
    }
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3710      	adds	r7, #16
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b082      	sub	sp, #8
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
    memset(driver, 0, sizeof(lv_indev_drv_t));
 800edb0:	2220      	movs	r2, #32
 800edb2:	2100      	movs	r1, #0
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f00c fd94 	bl	801b8e2 <memset>

    driver->type                = LV_INDEV_TYPE_NONE;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2200      	movs	r2, #0
 800edbe:	701a      	strb	r2, [r3, #0]
    driver->drag_limit          = LV_INDEV_DEF_DRAG_LIMIT;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	220a      	movs	r2, #10
 800edc4:	761a      	strb	r2, [r3, #24]
    driver->drag_throw          = LV_INDEV_DEF_DRAG_THROW;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2214      	movs	r2, #20
 800edca:	765a      	strb	r2, [r3, #25]
    driver->long_press_time     = LV_INDEV_DEF_LONG_PRESS_TIME;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800edd2:	835a      	strh	r2, [r3, #26]
    driver->long_press_rep_time = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2264      	movs	r2, #100	@ 0x64
 800edd8:	839a      	strh	r2, [r3, #28]
}
 800edda:	bf00      	nop
 800eddc:	3708      	adds	r7, #8
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
	...

0800ede4 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	691b      	ldr	r3, [r3, #16]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d104      	bne.n	800edfe <lv_indev_drv_register+0x1a>
 800edf4:	f7ff fede 	bl	800ebb4 <lv_disp_get_default>
 800edf8:	4602      	mov	r2, r0
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	611a      	str	r2, [r3, #16]

    if(driver->disp == NULL) {
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	691b      	ldr	r3, [r3, #16]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d101      	bne.n	800ee0a <lv_indev_drv_register+0x26>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attache the indev to "
                    "a display");
        return NULL;
 800ee06:	2300      	movs	r3, #0
 800ee08:	e032      	b.n	800ee70 <lv_indev_drv_register+0x8c>
    }

    lv_indev_t * indev = lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
 800ee0a:	481b      	ldr	r0, [pc, #108]	@ (800ee78 <lv_indev_drv_register+0x94>)
 800ee0c:	f000 fed5 	bl	800fbba <lv_ll_ins_head>
 800ee10:	60f8      	str	r0, [r7, #12]
    if(!indev) {
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d106      	bne.n	800ee26 <lv_indev_drv_register+0x42>
        lv_mem_assert(indev);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d101      	bne.n	800ee22 <lv_indev_drv_register+0x3e>
 800ee1e:	bf00      	nop
 800ee20:	e7fd      	b.n	800ee1e <lv_indev_drv_register+0x3a>
        return NULL;
 800ee22:	2300      	movs	r3, #0
 800ee24:	e024      	b.n	800ee70 <lv_indev_drv_register+0x8c>
    }

    memset(indev, 0, sizeof(lv_indev_t));
 800ee26:	2260      	movs	r2, #96	@ 0x60
 800ee28:	2100      	movs	r1, #0
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	f00c fd59 	bl	801b8e2 <memset>
    memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2220      	movs	r2, #32
 800ee34:	6879      	ldr	r1, [r7, #4]
 800ee36:	4618      	mov	r0, r3
 800ee38:	f00c fdd7 	bl	801b9ea <memcpy>

    indev->proc.reset_query = 1;
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	f892 3050 	ldrb.w	r3, [r2, #80]	@ 0x50
 800ee42:	f043 0302 	orr.w	r3, r3, #2
 800ee46:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
    indev->cursor           = NULL;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	655a      	str	r2, [r3, #84]	@ 0x54
    indev->group            = NULL;
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2200      	movs	r2, #0
 800ee54:	659a      	str	r2, [r3, #88]	@ 0x58
    indev->btn_points       = NULL;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	2200      	movs	r2, #0
 800ee5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    indev->driver.read_task = lv_task_create(lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_MID, indev);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2203      	movs	r2, #3
 800ee60:	211e      	movs	r1, #30
 800ee62:	4806      	ldr	r0, [pc, #24]	@ (800ee7c <lv_indev_drv_register+0x98>)
 800ee64:	f001 fc2c 	bl	80106c0 <lv_task_create>
 800ee68:	4602      	mov	r2, r0
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	615a      	str	r2, [r3, #20]

    return indev;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	3710      	adds	r7, #16
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	20002d20 	.word	0x20002d20
 800ee7c:	08002f91 	.word	0x08002f91

0800ee80 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
    if(indev == NULL)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d104      	bne.n	800ee98 <lv_indev_get_next+0x18>
        return lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
 800ee8e:	4807      	ldr	r0, [pc, #28]	@ (800eeac <lv_indev_get_next+0x2c>)
 800ee90:	f000 fff5 	bl	800fe7e <lv_ll_get_head>
 800ee94:	4603      	mov	r3, r0
 800ee96:	e004      	b.n	800eea2 <lv_indev_get_next+0x22>
    else
        return lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
 800ee98:	6879      	ldr	r1, [r7, #4]
 800ee9a:	4804      	ldr	r0, [pc, #16]	@ (800eeac <lv_indev_get_next+0x2c>)
 800ee9c:	f001 f813 	bl	800fec6 <lv_ll_get_next>
 800eea0:	4603      	mov	r3, r0
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3708      	adds	r7, #8
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	bf00      	nop
 800eeac:	20002d20 	.word	0x20002d20

0800eeb0 <lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b084      	sub	sp, #16
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
    bool cont = false;
 800eeba:	2300      	movs	r3, #0
 800eebc:	73fb      	strb	r3, [r7, #15]

    memset(data, 0, sizeof(lv_indev_data_t));
 800eebe:	2210      	movs	r2, #16
 800eec0:	2100      	movs	r1, #0
 800eec2:	6838      	ldr	r0, [r7, #0]
 800eec4:	f00c fd0d 	bl	801b8e2 <memset>

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d10a      	bne.n	800eee6 <lv_indev_read+0x36>
        data->point.x = indev->proc.types.pointer.act_point.x;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	@ 0x24
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	801a      	strh	r2, [r3, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	805a      	strh	r2, [r3, #2]
 800eee4:	e007      	b.n	800eef6 <lv_indev_read+0x46>
    }
    /*Similarly set at least the last key in case of the  the user doesn't set it  on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	2b02      	cmp	r3, #2
 800eeec:	d103      	bne.n	800eef6 <lv_indev_read+0x46>
        data->key = indev->proc.types.keypad.last_key;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	605a      	str	r2, [r3, #4]
    }

    if(indev->driver.read_cb) {
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	685b      	ldr	r3, [r3, #4]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d007      	beq.n	800ef0e <lv_indev_read+0x5e>
        LV_LOG_TRACE("idnev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	6839      	ldr	r1, [r7, #0]
 800ef06:	4610      	mov	r0, r2
 800ef08:	4798      	blx	r3
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	73fb      	strb	r3, [r7, #15]
        LV_LOG_TRACE("idnev read finished");
    } else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
 800ef0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3710      	adds	r7, #16
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <lv_tick_inc>:
/**
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b083      	sub	sp, #12
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
    tick_irq_flag = 0;
 800ef20:	4b06      	ldr	r3, [pc, #24]	@ (800ef3c <lv_tick_inc+0x24>)
 800ef22:	2200      	movs	r2, #0
 800ef24:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
 800ef26:	4b06      	ldr	r3, [pc, #24]	@ (800ef40 <lv_tick_inc+0x28>)
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	4a04      	ldr	r2, [pc, #16]	@ (800ef40 <lv_tick_inc+0x28>)
 800ef30:	6013      	str	r3, [r2, #0]
}
 800ef32:	bf00      	nop
 800ef34:	370c      	adds	r7, #12
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bc80      	pop	{r7}
 800ef3a:	4770      	bx	lr
 800ef3c:	20002cfc 	.word	0x20002cfc
 800ef40:	20002cf8 	.word	0x20002cf8

0800ef44 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	af00      	add	r7, sp, #0
    } while(!tick_irq_flag); /*'lv_tick_inc()' clears this flag which can be in an interrupt.
                                Continue until make a non interrupted cycle */

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
 800ef48:	f00b fa46 	bl	801a3d8 <HAL_GetTick>
 800ef4c:	4603      	mov	r3, r0
#endif
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b084      	sub	sp, #16
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
    uint32_t act_time = lv_tick_get();
 800ef5a:	f7ff fff3 	bl	800ef44 <lv_tick_get>
 800ef5e:	60f8      	str	r0, [r7, #12]

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
 800ef60:	68fa      	ldr	r2, [r7, #12]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	429a      	cmp	r2, r3
 800ef66:	d304      	bcc.n	800ef72 <lv_tick_elaps+0x20>
        prev_tick = act_time - prev_tick;
 800ef68:	68fa      	ldr	r2, [r7, #12]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	1ad3      	subs	r3, r2, r3
 800ef6e:	607b      	str	r3, [r7, #4]
 800ef70:	e006      	b.n	800ef80 <lv_tick_elaps+0x2e>
    } else {
        prev_tick = UINT32_MAX - prev_tick + 1;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	425b      	negs	r3, r3
 800ef76:	607b      	str	r3, [r7, #4]
        prev_tick += act_time;
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	607b      	str	r3, [r7, #4]
    }

    return prev_tick;
 800ef80:	687b      	ldr	r3, [r7, #4]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
	...

0800ef8c <lv_anim_core_init>:

/**
 * Init. the animation module
 */
void lv_anim_core_init(void)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
 800ef90:	2128      	movs	r1, #40	@ 0x28
 800ef92:	4808      	ldr	r0, [pc, #32]	@ (800efb4 <lv_anim_core_init+0x28>)
 800ef94:	f000 fdf2 	bl	800fb7c <lv_ll_init>
    last_task_run = lv_tick_get();
 800ef98:	f7ff ffd4 	bl	800ef44 <lv_tick_get>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	4a06      	ldr	r2, [pc, #24]	@ (800efb8 <lv_anim_core_init+0x2c>)
 800efa0:	6013      	str	r3, [r2, #0]
    lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_TASK_PRIO_MID, NULL);
 800efa2:	2300      	movs	r3, #0
 800efa4:	2203      	movs	r2, #3
 800efa6:	211e      	movs	r1, #30
 800efa8:	4804      	ldr	r0, [pc, #16]	@ (800efbc <lv_anim_core_init+0x30>)
 800efaa:	f001 fb89 	bl	80106c0 <lv_task_create>
}
 800efae:	bf00      	nop
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	20002d38 	.word	0x20002d38
 800efb8:	20002d00 	.word	0x20002d00
 800efbc:	0800f1a5 	.word	0x0800f1a5

0800efc0 <lv_anim_create>:
/**
 * Create an animation
 * @param a an initialized 'anim_t' variable. Not required after call.
 */
void lv_anim_create(lv_anim_t * a)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b084      	sub	sp, #16
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
    LV_LOG_TRACE("animation create started")
    /* Do not let two animations for the  same 'var' with the same 'fp'*/
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	685b      	ldr	r3, [r3, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d007      	beq.n	800efe0 <lv_anim_create+0x20>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681a      	ldr	r2, [r3, #0]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	685b      	ldr	r3, [r3, #4]
 800efd8:	4619      	mov	r1, r3
 800efda:	4610      	mov	r0, r2
 800efdc:	f000 f832 	bl	800f044 <lv_anim_del>

    /*Add the new animation to the animation linked list*/
    lv_anim_t * new_anim = lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
 800efe0:	4816      	ldr	r0, [pc, #88]	@ (800f03c <lv_anim_create+0x7c>)
 800efe2:	f000 fdea 	bl	800fbba <lv_ll_ins_head>
 800efe6:	60f8      	str	r0, [r7, #12]
    lv_mem_assert(new_anim);
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d101      	bne.n	800eff2 <lv_anim_create+0x32>
 800efee:	bf00      	nop
 800eff0:	e7fd      	b.n	800efee <lv_anim_create+0x2e>
    if(new_anim == NULL) return;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d01c      	beq.n	800f032 <lv_anim_create+0x72>

    /*Initialize the animation descriptor*/
    a->playback_now = 0;
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 800effe:	f36f 0382 	bfc	r3, #2, #1
 800f002:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
    memcpy(new_anim, a, sizeof(lv_anim_t));
 800f006:	2228      	movs	r2, #40	@ 0x28
 800f008:	6879      	ldr	r1, [r7, #4]
 800f00a:	68f8      	ldr	r0, [r7, #12]
 800f00c:	f00c fced 	bl	801b9ea <memcpy>

    /*Set the start value*/
    if(new_anim->exec_cb) new_anim->exec_cb(new_anim->var, new_anim->start);
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d008      	beq.n	800f02a <lv_anim_create+0x6a>
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	68fa      	ldr	r2, [r7, #12]
 800f01e:	6810      	ldr	r0, [r2, #0]
 800f020:	68fa      	ldr	r2, [r7, #12]
 800f022:	6912      	ldr	r2, [r2, #16]
 800f024:	b212      	sxth	r2, r2
 800f026:	4611      	mov	r1, r2
 800f028:	4798      	blx	r3

    /* Creating an animation changed the linked list.
     * It's important if it happens in a ready callback. (see `anim_task`)*/
    anim_list_changed = true;
 800f02a:	4b05      	ldr	r3, [pc, #20]	@ (800f040 <lv_anim_create+0x80>)
 800f02c:	2201      	movs	r2, #1
 800f02e:	701a      	strb	r2, [r3, #0]
 800f030:	e000      	b.n	800f034 <lv_anim_create+0x74>
    if(new_anim == NULL) return;
 800f032:	bf00      	nop

    LV_LOG_TRACE("animation created")
}
 800f034:	3710      	adds	r7, #16
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	20002d38 	.word	0x20002d38
 800f040:	20002d04 	.word	0x20002d04

0800f044 <lv_anim_del>:
 * @param exec_cb a function pointer which is animating 'var',
 *           or NULL to delete all the animations of 'var'
 * @return true: at least 1 animation is deleted, false: no animation is deleted
 */
bool lv_anim_del(void * var, lv_anim_exec_xcb_t exec_cb)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b086      	sub	sp, #24
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
    lv_anim_t * a;
    lv_anim_t * a_next;
    bool del = false;
 800f04e:	2300      	movs	r3, #0
 800f050:	74fb      	strb	r3, [r7, #19]
    a        = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800f052:	4816      	ldr	r0, [pc, #88]	@ (800f0ac <lv_anim_del+0x68>)
 800f054:	f000 ff13 	bl	800fe7e <lv_ll_get_head>
 800f058:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 800f05a:	e01f      	b.n	800f09c <lv_anim_del+0x58>
        /*'a' might be deleted, so get the next object while 'a' is valid*/
        a_next = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800f05c:	6979      	ldr	r1, [r7, #20]
 800f05e:	4813      	ldr	r0, [pc, #76]	@ (800f0ac <lv_anim_del+0x68>)
 800f060:	f000 ff31 	bl	800fec6 <lv_ll_get_next>
 800f064:	60f8      	str	r0, [r7, #12]

        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d113      	bne.n	800f098 <lv_anim_del+0x54>
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	683a      	ldr	r2, [r7, #0]
 800f076:	429a      	cmp	r2, r3
 800f078:	d002      	beq.n	800f080 <lv_anim_del+0x3c>
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d10b      	bne.n	800f098 <lv_anim_del+0x54>
            lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800f080:	6979      	ldr	r1, [r7, #20]
 800f082:	480a      	ldr	r0, [pc, #40]	@ (800f0ac <lv_anim_del+0x68>)
 800f084:	f000 fe4d 	bl	800fd22 <lv_ll_rem>
            lv_mem_free(a);
 800f088:	6978      	ldr	r0, [r7, #20]
 800f08a:	f001 f853 	bl	8010134 <lv_mem_free>
            anim_list_changed = true; /*Read by `anim_task`. It need to know if a delete occurred in
 800f08e:	4b08      	ldr	r3, [pc, #32]	@ (800f0b0 <lv_anim_del+0x6c>)
 800f090:	2201      	movs	r2, #1
 800f092:	701a      	strb	r2, [r3, #0]
                                         the linked list*/
            del = true;
 800f094:	2301      	movs	r3, #1
 800f096:	74fb      	strb	r3, [r7, #19]
        }

        a = a_next;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	617b      	str	r3, [r7, #20]
    while(a != NULL) {
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d1dc      	bne.n	800f05c <lv_anim_del+0x18>
    }

    return del;
 800f0a2:	7cfb      	ldrb	r3, [r7, #19]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3718      	adds	r7, #24
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	20002d38 	.word	0x20002d38
 800f0b0:	20002d04 	.word	0x20002d04

0800f0b4 <lv_anim_speed_to_time>:
 * @param start start value of the animation
 * @param end end value of the animation
 * @return the required time [ms] for the animation with the given parameters
 */
uint16_t lv_anim_speed_to_time(uint16_t speed, lv_anim_value_t start, lv_anim_value_t end)
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b085      	sub	sp, #20
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	80fb      	strh	r3, [r7, #6]
 800f0be:	460b      	mov	r3, r1
 800f0c0:	80bb      	strh	r3, [r7, #4]
 800f0c2:	4613      	mov	r3, r2
 800f0c4:	807b      	strh	r3, [r7, #2]
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
 800f0c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800f0ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f0ce:	1ad3      	subs	r3, r2, r3
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	bfb8      	it	lt
 800f0d4:	425b      	neglt	r3, r3
 800f0d6:	60bb      	str	r3, [r7, #8]
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f0de:	fb03 f202 	mul.w	r2, r3, r2
 800f0e2:	88fb      	ldrh	r3, [r7, #6]
 800f0e4:	fb92 f3f3 	sdiv	r3, r2, r3
 800f0e8:	60fb      	str	r3, [r7, #12]

    if(time > UINT16_MAX) time = UINT16_MAX;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0f0:	d302      	bcc.n	800f0f8 <lv_anim_speed_to_time+0x44>
 800f0f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f0f6:	60fb      	str	r3, [r7, #12]

    if(time == 0) {
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d102      	bne.n	800f104 <lv_anim_speed_to_time+0x50>
        time++;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	3301      	adds	r3, #1
 800f102:	60fb      	str	r3, [r7, #12]
    }

    return time;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	b29b      	uxth	r3, r3
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3714      	adds	r7, #20
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bc80      	pop	{r7}
 800f110:	4770      	bx	lr

0800f112 <lv_anim_path_linear>:
 * Calculate the current value of an animation applying linear characteristic
 * @param a pointer to an animation
 * @return the current value to set
 */
lv_anim_value_t lv_anim_path_linear(const lv_anim_t * a)
{
 800f112:	b480      	push	{r7}
 800f114:	b085      	sub	sp, #20
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	8b1b      	ldrh	r3, [r3, #24]
 800f11e:	461a      	mov	r2, r3
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800f126:	429a      	cmp	r2, r3
 800f128:	d103      	bne.n	800f132 <lv_anim_path_linear+0x20>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
 800f12a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f12e:	60fb      	str	r3, [r7, #12]
 800f130:	e008      	b.n	800f144 <lv_anim_path_linear+0x32>
    } else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800f138:	029b      	lsls	r3, r3, #10
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	8b12      	ldrh	r2, [r2, #24]
 800f13e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f142:	60fb      	str	r3, [r7, #12]
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	695a      	ldr	r2, [r3, #20]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	691b      	ldr	r3, [r3, #16]
 800f14c:	1ad3      	subs	r3, r2, r3
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	fb02 f303 	mul.w	r3, r2, r3
 800f154:	60bb      	str	r3, [r7, #8]
    new_value = new_value >> LV_ANIM_RES_SHIFT;
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	129b      	asrs	r3, r3, #10
 800f15a:	60bb      	str	r3, [r7, #8]
    new_value += a->start;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	691b      	ldr	r3, [r3, #16]
 800f160:	68ba      	ldr	r2, [r7, #8]
 800f162:	4413      	add	r3, r2
 800f164:	60bb      	str	r3, [r7, #8]

    return (lv_anim_value_t)new_value;
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	b21b      	sxth	r3, r3
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3714      	adds	r7, #20
 800f16e:	46bd      	mov	sp, r7
 800f170:	bc80      	pop	{r7}
 800f172:	4770      	bx	lr

0800f174 <lv_anim_path_step>:
 * (Set end value on the end of the animation)
 * @param a pointer to an animation
 * @return the current value to set
 */
lv_anim_value_t lv_anim_path_step(const lv_anim_t * a)
{
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
    if(a->act_time >= a->time)
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800f182:	461a      	mov	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	8b1b      	ldrh	r3, [r3, #24]
 800f188:	429a      	cmp	r2, r3
 800f18a:	db03      	blt.n	800f194 <lv_anim_path_step+0x20>
        return a->end;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	695b      	ldr	r3, [r3, #20]
 800f190:	b21b      	sxth	r3, r3
 800f192:	e002      	b.n	800f19a <lv_anim_path_step+0x26>
    else
        return a->start;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	691b      	ldr	r3, [r3, #16]
 800f198:	b21b      	sxth	r3, r3
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	370c      	adds	r7, #12
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bc80      	pop	{r7}
 800f1a2:	4770      	bx	lr

0800f1a4 <anim_task>:
/**
 * Periodically handle the animations.
 * @param param unused
 */
static void anim_task(lv_task_t * param)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b086      	sub	sp, #24
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
    (void)param;

    lv_anim_t * a;
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800f1ac:	4842      	ldr	r0, [pc, #264]	@ (800f2b8 <anim_task+0x114>)
 800f1ae:	f000 fe66 	bl	800fe7e <lv_ll_get_head>
 800f1b2:	6178      	str	r0, [r7, #20]
 800f1b4:	e00b      	b.n	800f1ce <anim_task+0x2a>
    {
        a->has_run = 0;
 800f1b6:	697a      	ldr	r2, [r7, #20]
 800f1b8:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 800f1bc:	f36f 03c3 	bfc	r3, #3, #1
 800f1c0:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
    LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a)
 800f1c4:	6979      	ldr	r1, [r7, #20]
 800f1c6:	483c      	ldr	r0, [pc, #240]	@ (800f2b8 <anim_task+0x114>)
 800f1c8:	f000 fe7d 	bl	800fec6 <lv_ll_get_next>
 800f1cc:	6178      	str	r0, [r7, #20]
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d1f0      	bne.n	800f1b6 <anim_task+0x12>
    }

    uint32_t elaps = lv_tick_elaps(last_task_run);
 800f1d4:	4b39      	ldr	r3, [pc, #228]	@ (800f2bc <anim_task+0x118>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7ff feba 	bl	800ef52 <lv_tick_elaps>
 800f1de:	6138      	str	r0, [r7, #16]

    a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800f1e0:	4835      	ldr	r0, [pc, #212]	@ (800f2b8 <anim_task+0x114>)
 800f1e2:	f000 fe4c 	bl	800fe7e <lv_ll_get_head>
 800f1e6:	6178      	str	r0, [r7, #20]

    while(a != NULL) {
 800f1e8:	e059      	b.n	800f29e <anim_task+0xfa>
        /*It can be set by `lv_anim_del()` typically in `end_cb`. If set then an animation delete
         * happened in `anim_ready_handler` which could make this linked list reading corrupt
         * because the list is changed meanwhile
         */
        anim_list_changed = false;
 800f1ea:	4b35      	ldr	r3, [pc, #212]	@ (800f2c0 <anim_task+0x11c>)
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	701a      	strb	r2, [r3, #0]

        if(!a->has_run) {
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f1f6:	f003 0308 	and.w	r3, r3, #8
 800f1fa:	b2db      	uxtb	r3, r3
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d140      	bne.n	800f282 <anim_task+0xde>
            a->has_run = 1; /*The list readying might be reseted so need to know which anim has run already*/
 800f200:	697a      	ldr	r2, [r7, #20]
 800f202:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 800f206:	f043 0308 	orr.w	r3, r3, #8
 800f20a:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
            a->act_time += elaps;
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800f214:	b29a      	uxth	r2, r3
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	b29b      	uxth	r3, r3
 800f21a:	4413      	add	r3, r2
 800f21c:	b29b      	uxth	r3, r3
 800f21e:	b21a      	sxth	r2, r3
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	835a      	strh	r2, [r3, #26]
            if(a->act_time >= 0) {
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	db29      	blt.n	800f282 <anim_task+0xde>
                if(a->act_time > a->time) a->act_time = a->time;
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800f234:	461a      	mov	r2, r3
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	8b1b      	ldrh	r3, [r3, #24]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	dd04      	ble.n	800f248 <anim_task+0xa4>
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	8b1b      	ldrh	r3, [r3, #24]
 800f242:	b21a      	sxth	r2, r3
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	835a      	strh	r2, [r3, #26]

                int32_t new_value;
                new_value = a->path_cb(a);
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	689b      	ldr	r3, [r3, #8]
 800f24c:	6978      	ldr	r0, [r7, #20]
 800f24e:	4798      	blx	r3
 800f250:	4603      	mov	r3, r0
 800f252:	60fb      	str	r3, [r7, #12]

                /*Apply the calculated value*/
                if(a->exec_cb) a->exec_cb(a->var, new_value);
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d007      	beq.n	800f26c <anim_task+0xc8>
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	697a      	ldr	r2, [r7, #20]
 800f262:	6812      	ldr	r2, [r2, #0]
 800f264:	68f9      	ldr	r1, [r7, #12]
 800f266:	b209      	sxth	r1, r1
 800f268:	4610      	mov	r0, r2
 800f26a:	4798      	blx	r3

                /*If the time is elapsed the animation is ready*/
                if(a->act_time >= a->time) {
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800f272:	461a      	mov	r2, r3
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	8b1b      	ldrh	r3, [r3, #24]
 800f278:	429a      	cmp	r2, r3
 800f27a:	db02      	blt.n	800f282 <anim_task+0xde>
                    anim_ready_handler(a);
 800f27c:	6978      	ldr	r0, [r7, #20]
 800f27e:	f000 f821 	bl	800f2c4 <anim_ready_handler>
            }
        }

        /* If the linked list changed due to anim. delete then it's not safe to continue
         * the reading of the list from here -> start from the head*/
        if(anim_list_changed)
 800f282:	4b0f      	ldr	r3, [pc, #60]	@ (800f2c0 <anim_task+0x11c>)
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d004      	beq.n	800f294 <anim_task+0xf0>
            a = lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
 800f28a:	480b      	ldr	r0, [pc, #44]	@ (800f2b8 <anim_task+0x114>)
 800f28c:	f000 fdf7 	bl	800fe7e <lv_ll_get_head>
 800f290:	6178      	str	r0, [r7, #20]
 800f292:	e004      	b.n	800f29e <anim_task+0xfa>
        else
            a = lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
 800f294:	6979      	ldr	r1, [r7, #20]
 800f296:	4808      	ldr	r0, [pc, #32]	@ (800f2b8 <anim_task+0x114>)
 800f298:	f000 fe15 	bl	800fec6 <lv_ll_get_next>
 800f29c:	6178      	str	r0, [r7, #20]
    while(a != NULL) {
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d1a2      	bne.n	800f1ea <anim_task+0x46>
    }

    last_task_run = lv_tick_get();
 800f2a4:	f7ff fe4e 	bl	800ef44 <lv_tick_get>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	4a04      	ldr	r2, [pc, #16]	@ (800f2bc <anim_task+0x118>)
 800f2ac:	6013      	str	r3, [r2, #0]
}
 800f2ae:	bf00      	nop
 800f2b0:	3718      	adds	r7, #24
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	20002d38 	.word	0x20002d38
 800f2bc:	20002d00 	.word	0x20002d00
 800f2c0:	20002d04 	.word	0x20002d04

0800f2c4 <anim_ready_handler>:
 * e.g. repeat, play back, delete etc.
 * @param a pointer to an animation descriptor
 * @return true: animation delete occurred nnd the `LV_GC_ROOT(_lv_anim_ll)` has changed
 * */
static bool anim_ready_handler(lv_anim_t * a)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b08e      	sub	sp, #56	@ 0x38
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]

    /*Delete the animation if
     * - no repeat and no play back (simple one shot animation)
     * - no repeat, play back is enabled and play back is ready */
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f2d2:	f003 0302 	and.w	r3, r3, #2
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d107      	bne.n	800f2ec <anim_ready_handler+0x28>
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f2e2:	f003 0301 	and.w	r3, r3, #1
 800f2e6:	b2db      	uxtb	r3, r3
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d017      	beq.n	800f31c <anim_ready_handler+0x58>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f2f2:	f003 0302 	and.w	r3, r3, #2
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d129      	bne.n	800f350 <anim_ready_handler+0x8c>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f302:	f003 0301 	and.w	r3, r3, #1
 800f306:	b2db      	uxtb	r3, r3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d021      	beq.n	800f350 <anim_ready_handler+0x8c>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f312:	f003 0304 	and.w	r3, r3, #4
 800f316:	b2db      	uxtb	r3, r3
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d019      	beq.n	800f350 <anim_ready_handler+0x8c>

        /*Create copy from the animation and delete the animation from the list.
         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        memcpy(&a_tmp, a, sizeof(lv_anim_t));
 800f31c:	f107 030c 	add.w	r3, r7, #12
 800f320:	2228      	movs	r2, #40	@ 0x28
 800f322:	6879      	ldr	r1, [r7, #4]
 800f324:	4618      	mov	r0, r3
 800f326:	f00c fb60 	bl	801b9ea <memcpy>
        lv_ll_rem(&LV_GC_ROOT(_lv_anim_ll), a);
 800f32a:	6879      	ldr	r1, [r7, #4]
 800f32c:	4829      	ldr	r0, [pc, #164]	@ (800f3d4 <anim_ready_handler+0x110>)
 800f32e:	f000 fcf8 	bl	800fd22 <lv_ll_rem>
        lv_mem_free(a);
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f000 fefe 	bl	8010134 <lv_mem_free>
        anim_list_changed = true;
 800f338:	4b27      	ldr	r3, [pc, #156]	@ (800f3d8 <anim_ready_handler+0x114>)
 800f33a:	2201      	movs	r2, #1
 800f33c:	701a      	strb	r2, [r3, #0]

        /* Call the callback function at the end*/
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d040      	beq.n	800f3c6 <anim_ready_handler+0x102>
 800f344:	69bb      	ldr	r3, [r7, #24]
 800f346:	f107 020c 	add.w	r2, r7, #12
 800f34a:	4610      	mov	r0, r2
 800f34c:	4798      	blx	r3
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 800f34e:	e03a      	b.n	800f3c6 <anim_ready_handler+0x102>
    }
    /*If the animation is not deleted then restart it*/
    else {
        a->act_time = -a->repeat_pause; /*Restart the animation*/
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	8bdb      	ldrh	r3, [r3, #30]
 800f354:	425b      	negs	r3, r3
 800f356:	b29b      	uxth	r3, r3
 800f358:	b21a      	sxth	r2, r3
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	835a      	strh	r2, [r3, #26]
        /*Swap the start and end values in play back mode*/
        if(a->playback != 0) {
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f364:	f003 0301 	and.w	r3, r3, #1
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d02c      	beq.n	800f3c8 <anim_ready_handler+0x104>
            /*If now turning back use the 'playback_pause*/
            if(a->playback_now == 0) a->act_time = -a->playback_pause;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f374:	f003 0304 	and.w	r3, r3, #4
 800f378:	b2db      	uxtb	r3, r3
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d106      	bne.n	800f38c <anim_ready_handler+0xc8>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	8b9b      	ldrh	r3, [r3, #28]
 800f382:	425b      	negs	r3, r3
 800f384:	b29b      	uxth	r3, r3
 800f386:	b21a      	sxth	r2, r3
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	835a      	strh	r2, [r3, #26]

            /*Toggle the play back state*/
            a->playback_now = a->playback_now == 0 ? 1 : 0;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f392:	f003 0304 	and.w	r3, r3, #4
 800f396:	b2db      	uxtb	r3, r3
 800f398:	2b00      	cmp	r3, #0
 800f39a:	bf0c      	ite	eq
 800f39c:	2301      	moveq	r3, #1
 800f39e:	2300      	movne	r3, #0
 800f3a0:	b2d9      	uxtb	r1, r3
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	f892 3024 	ldrb.w	r3, [r2, #36]	@ 0x24
 800f3a8:	f361 0382 	bfi	r3, r1, #2, #1
 800f3ac:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
            /*Swap the start and end values*/
            int32_t tmp;
            tmp      = a->start;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	691b      	ldr	r3, [r3, #16]
 800f3b4:	637b      	str	r3, [r7, #52]	@ 0x34
            a->start = a->end;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	695a      	ldr	r2, [r3, #20]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	611a      	str	r2, [r3, #16]
            a->end   = tmp;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f3c2:	615a      	str	r2, [r3, #20]
 800f3c4:	e000      	b.n	800f3c8 <anim_ready_handler+0x104>
    if((a->repeat == 0 && a->playback == 0) || (a->repeat == 0 && a->playback == 1 && a->playback_now == 1)) {
 800f3c6:	bf00      	nop
        }
    }

    return anim_list_changed;
 800f3c8:	4b03      	ldr	r3, [pc, #12]	@ (800f3d8 <anim_ready_handler+0x114>)
 800f3ca:	781b      	ldrb	r3, [r3, #0]
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3738      	adds	r7, #56	@ 0x38
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	20002d38 	.word	0x20002d38
 800f3d8:	20002d04 	.word	0x20002d04

0800f3dc <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f3ea:	b29a      	uxth	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	1ad3      	subs	r3, r2, r3
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	b21b      	sxth	r3, r3
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	370c      	adds	r7, #12
 800f402:	46bd      	mov	sp, r7
 800f404:	bc80      	pop	{r7}
 800f406:	4770      	bx	lr

0800f408 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f416:	b29a      	uxth	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f41e:	b29b      	uxth	r3, r3
 800f420:	1ad3      	subs	r3, r2, r3
 800f422:	b29b      	uxth	r3, r3
 800f424:	3301      	adds	r3, #1
 800f426:	b29b      	uxth	r3, r3
 800f428:	b21b      	sxth	r3, r3
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	370c      	adds	r7, #12
 800f42e:	46bd      	mov	sp, r7
 800f430:	bc80      	pop	{r7}
 800f432:	4770      	bx	lr

0800f434 <lv_area_set>:
 * @param y1 top coordinate of the area
 * @param x2 right coordinate of the area
 * @param y2 bottom coordinate of the area
 */
void lv_area_set(lv_area_t * area_p, lv_coord_t x1, lv_coord_t y1, lv_coord_t x2, lv_coord_t y2)
{
 800f434:	b480      	push	{r7}
 800f436:	b085      	sub	sp, #20
 800f438:	af00      	add	r7, sp, #0
 800f43a:	60f8      	str	r0, [r7, #12]
 800f43c:	4608      	mov	r0, r1
 800f43e:	4611      	mov	r1, r2
 800f440:	461a      	mov	r2, r3
 800f442:	4603      	mov	r3, r0
 800f444:	817b      	strh	r3, [r7, #10]
 800f446:	460b      	mov	r3, r1
 800f448:	813b      	strh	r3, [r7, #8]
 800f44a:	4613      	mov	r3, r2
 800f44c:	80fb      	strh	r3, [r7, #6]
    area_p->x1 = x1;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	897a      	ldrh	r2, [r7, #10]
 800f452:	801a      	strh	r2, [r3, #0]
    area_p->y1 = y1;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	893a      	ldrh	r2, [r7, #8]
 800f458:	805a      	strh	r2, [r3, #2]
    area_p->x2 = x2;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	88fa      	ldrh	r2, [r7, #6]
 800f45e:	809a      	strh	r2, [r3, #4]
    area_p->y2 = y2;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	8b3a      	ldrh	r2, [r7, #24]
 800f464:	80da      	strh	r2, [r3, #6]
}
 800f466:	bf00      	nop
 800f468:	3714      	adds	r7, #20
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bc80      	pop	{r7}
 800f46e:	4770      	bx	lr

0800f470 <lv_area_set_width>:
 * Set the width of an area
 * @param area_p pointer to an area
 * @param w the new width of the area (w == 1 makes x1 == x2)
 */
void lv_area_set_width(lv_area_t * area_p, lv_coord_t w)
{
 800f470:	b480      	push	{r7}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	460b      	mov	r3, r1
 800f47a:	807b      	strh	r3, [r7, #2]
    area_p->x2 = area_p->x1 + w - 1;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f482:	b29a      	uxth	r2, r3
 800f484:	887b      	ldrh	r3, [r7, #2]
 800f486:	4413      	add	r3, r2
 800f488:	b29b      	uxth	r3, r3
 800f48a:	3b01      	subs	r3, #1
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	b21a      	sxth	r2, r3
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	809a      	strh	r2, [r3, #4]
}
 800f494:	bf00      	nop
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	bc80      	pop	{r7}
 800f49c:	4770      	bx	lr

0800f49e <lv_area_set_height>:
 * Set the height of an area
 * @param area_p pointer to an area
 * @param h the new height of the area (h == 1 makes y1 == y2)
 */
void lv_area_set_height(lv_area_t * area_p, lv_coord_t h)
{
 800f49e:	b480      	push	{r7}
 800f4a0:	b083      	sub	sp, #12
 800f4a2:	af00      	add	r7, sp, #0
 800f4a4:	6078      	str	r0, [r7, #4]
 800f4a6:	460b      	mov	r3, r1
 800f4a8:	807b      	strh	r3, [r7, #2]
    area_p->y2 = area_p->y1 + h - 1;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f4b0:	b29a      	uxth	r2, r3
 800f4b2:	887b      	ldrh	r3, [r7, #2]
 800f4b4:	4413      	add	r3, r2
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	3b01      	subs	r3, #1
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	b21a      	sxth	r2, r3
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	80da      	strh	r2, [r3, #6]
}
 800f4c2:	bf00      	nop
 800f4c4:	370c      	adds	r7, #12
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bc80      	pop	{r7}
 800f4ca:	4770      	bx	lr

0800f4cc <lv_area_set_pos>:
 * @param area_p pointer to an area
 * @param x the new x coordinate of the area
 * @param y the new y coordinate of the area
 */
void lv_area_set_pos(lv_area_t * area_p, lv_coord_t x, lv_coord_t y)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	460b      	mov	r3, r1
 800f4d6:	807b      	strh	r3, [r7, #2]
 800f4d8:	4613      	mov	r3, r2
 800f4da:	803b      	strh	r3, [r7, #0]
    lv_coord_t w = lv_area_get_width(area_p);
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f7ff ff7d 	bl	800f3dc <lv_area_get_width>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	81fb      	strh	r3, [r7, #14]
    lv_coord_t h = lv_area_get_height(area_p);
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7ff ff8e 	bl	800f408 <lv_area_get_height>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	81bb      	strh	r3, [r7, #12]
    area_p->x1   = x;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	887a      	ldrh	r2, [r7, #2]
 800f4f4:	801a      	strh	r2, [r3, #0]
    area_p->y1   = y;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	883a      	ldrh	r2, [r7, #0]
 800f4fa:	805a      	strh	r2, [r3, #2]
    lv_area_set_width(area_p, w);
 800f4fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f500:	4619      	mov	r1, r3
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f7ff ffb4 	bl	800f470 <lv_area_set_width>
    lv_area_set_height(area_p, h);
 800f508:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f50c:	4619      	mov	r1, r3
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f7ff ffc5 	bl	800f49e <lv_area_set_height>
}
 800f514:	bf00      	nop
 800f516:	3710      	adds	r7, #16
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <lv_area_get_size>:
 * Return with area of an area (x * y)
 * @param area_p pointer to an area
 * @return size of area
 */
uint32_t lv_area_get_size(const lv_area_t * area_p)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b085      	sub	sp, #20
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
    uint32_t size;

    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f52a:	461a      	mov	r2, r3
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f532:	1ad3      	subs	r3, r2, r3
 800f534:	3301      	adds	r3, #1
 800f536:	461a      	mov	r2, r3
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f53e:	4619      	mov	r1, r3
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f546:	1acb      	subs	r3, r1, r3
 800f548:	3301      	adds	r3, #1
 800f54a:	fb02 f303 	mul.w	r3, r2, r3
 800f54e:	60fb      	str	r3, [r7, #12]

    return size;
 800f550:	68fb      	ldr	r3, [r7, #12]
}
 800f552:	4618      	mov	r0, r3
 800f554:	3714      	adds	r7, #20
 800f556:	46bd      	mov	sp, r7
 800f558:	bc80      	pop	{r7}
 800f55a:	4770      	bx	lr

0800f55c <lv_area_intersect>:
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 * @return false: the two area has NO common parts, res_p is invalid
 */
bool lv_area_intersect(lv_area_t * res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b087      	sub	sp, #28
 800f560:	af00      	add	r7, sp, #0
 800f562:	60f8      	str	r0, [r7, #12]
 800f564:	60b9      	str	r1, [r7, #8]
 800f566:	607a      	str	r2, [r7, #4]
    /* Get the smaller area from 'a1_p' and 'a2_p' */
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f574:	4293      	cmp	r3, r2
 800f576:	bfb8      	it	lt
 800f578:	4613      	movlt	r3, r2
 800f57a:	b21a      	sxth	r2, r3
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	801a      	strh	r2, [r3, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f58c:	4293      	cmp	r3, r2
 800f58e:	bfb8      	it	lt
 800f590:	4613      	movlt	r3, r2
 800f592:	b21a      	sxth	r2, r3
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	805a      	strh	r2, [r3, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	bfa8      	it	ge
 800f5a8:	4613      	movge	r3, r2
 800f5aa:	b21a      	sxth	r2, r3
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	809a      	strh	r2, [r3, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	bfa8      	it	ge
 800f5c0:	4613      	movge	r3, r2
 800f5c2:	b21a      	sxth	r2, r3
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	80da      	strh	r2, [r3, #6]

    /*If x1 or y1 greater then x2 or y2 then the areas union is empty*/
    bool union_ok = true;
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	75fb      	strb	r3, [r7, #23]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	dc07      	bgt.n	800f5ec <lv_area_intersect+0x90>
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	dd01      	ble.n	800f5f0 <lv_area_intersect+0x94>
        union_ok = false;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	75fb      	strb	r3, [r7, #23]
    }

    return union_ok;
 800f5f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	371c      	adds	r7, #28
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bc80      	pop	{r7}
 800f5fa:	4770      	bx	lr

0800f5fc <lv_area_join>:
 * @param res_p pointer to an area, the result will be stored here
 * @param a1_p pointer to the first area
 * @param a2_p pointer to the second area
 */
void lv_area_join(lv_area_t * a_res_p, const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b085      	sub	sp, #20
 800f600:	af00      	add	r7, sp, #0
 800f602:	60f8      	str	r0, [r7, #12]
 800f604:	60b9      	str	r1, [r7, #8]
 800f606:	607a      	str	r2, [r7, #4]
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f614:	4293      	cmp	r3, r2
 800f616:	bfa8      	it	ge
 800f618:	4613      	movge	r3, r2
 800f61a:	b21a      	sxth	r2, r3
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	801a      	strh	r2, [r3, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f626:	68bb      	ldr	r3, [r7, #8]
 800f628:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f62c:	4293      	cmp	r3, r2
 800f62e:	bfa8      	it	ge
 800f630:	4613      	movge	r3, r2
 800f632:	b21a      	sxth	r2, r3
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	805a      	strh	r2, [r3, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f644:	4293      	cmp	r3, r2
 800f646:	bfb8      	it	lt
 800f648:	4613      	movlt	r3, r2
 800f64a:	b21a      	sxth	r2, r3
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	809a      	strh	r2, [r3, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f65c:	4293      	cmp	r3, r2
 800f65e:	bfb8      	it	lt
 800f660:	4613      	movlt	r3, r2
 800f662:	b21a      	sxth	r2, r3
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	80da      	strh	r2, [r3, #6]
}
 800f668:	bf00      	nop
 800f66a:	3714      	adds	r7, #20
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bc80      	pop	{r7}
 800f670:	4770      	bx	lr

0800f672 <lv_area_is_point_on>:
 * @param a_p pointer to an area
 * @param p_p pointer to a point
 * @return false:the point is out of the area
 */
bool lv_area_is_point_on(const lv_area_t * a_p, const lv_point_t * p_p)
{
 800f672:	b480      	push	{r7}
 800f674:	b085      	sub	sp, #20
 800f676:	af00      	add	r7, sp, #0
 800f678:	6078      	str	r0, [r7, #4]
 800f67a:	6039      	str	r1, [r7, #0]
    bool is_on = false;
 800f67c:	2300      	movs	r3, #0
 800f67e:	73fb      	strb	r3, [r7, #15]

    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f68c:	429a      	cmp	r2, r3
 800f68e:	db19      	blt.n	800f6c4 <lv_area_is_point_on+0x52>
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f69c:	429a      	cmp	r2, r3
 800f69e:	dc11      	bgt.n	800f6c4 <lv_area_is_point_on+0x52>
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	db09      	blt.n	800f6c4 <lv_area_is_point_on+0x52>
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	dc01      	bgt.n	800f6c4 <lv_area_is_point_on+0x52>
        is_on = true;
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	73fb      	strb	r3, [r7, #15]
    }

    return is_on;
 800f6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3714      	adds	r7, #20
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bc80      	pop	{r7}
 800f6ce:	4770      	bx	lr

0800f6d0 <lv_area_is_on>:
 * @param a1_p pointer to an area.
 * @param a2_p pointer to an other area
 * @return false: a1_p and a2_p has no common parts
 */
bool lv_area_is_on(const lv_area_t * a1_p, const lv_area_t * a2_p)
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	6039      	str	r1, [r7, #0]
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	dc19      	bgt.n	800f71e <lv_area_is_on+0x4e>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	db11      	blt.n	800f71e <lv_area_is_on+0x4e>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800f706:	429a      	cmp	r2, r3
 800f708:	dc09      	bgt.n	800f71e <lv_area_is_on+0x4e>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f716:	429a      	cmp	r2, r3
 800f718:	db01      	blt.n	800f71e <lv_area_is_on+0x4e>
        return true;
 800f71a:	2301      	movs	r3, #1
 800f71c:	e000      	b.n	800f720 <lv_area_is_on+0x50>
    } else {
        return false;
 800f71e:	2300      	movs	r3, #0
    }
}
 800f720:	4618      	mov	r0, r3
 800f722:	370c      	adds	r7, #12
 800f724:	46bd      	mov	sp, r7
 800f726:	bc80      	pop	{r7}
 800f728:	4770      	bx	lr

0800f72a <lv_area_is_in>:
 * @param ain_p pointer to an area which could be in 'aholder_p'
 * @param aholder pointer to an area which could involve 'ain_p'
 * @return
 */
bool lv_area_is_in(const lv_area_t * ain_p, const lv_area_t * aholder_p)
{
 800f72a:	b480      	push	{r7}
 800f72c:	b085      	sub	sp, #20
 800f72e:	af00      	add	r7, sp, #0
 800f730:	6078      	str	r0, [r7, #4]
 800f732:	6039      	str	r1, [r7, #0]
    bool is_in = false;
 800f734:	2300      	movs	r3, #0
 800f736:	73fb      	strb	r3, [r7, #15]

    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f744:	429a      	cmp	r2, r3
 800f746:	db19      	blt.n	800f77c <lv_area_is_in+0x52>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f754:	429a      	cmp	r2, r3
 800f756:	db11      	blt.n	800f77c <lv_area_is_in+0x52>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f764:	429a      	cmp	r2, r3
 800f766:	dc09      	bgt.n	800f77c <lv_area_is_in+0x52>
       ain_p->y2 <= aholder_p->y2) {
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
 800f774:	429a      	cmp	r2, r3
 800f776:	dc01      	bgt.n	800f77c <lv_area_is_in+0x52>
        is_in = true;
 800f778:	2301      	movs	r3, #1
 800f77a:	73fb      	strb	r3, [r7, #15]
    }

    return is_in;
 800f77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3714      	adds	r7, #20
 800f782:	46bd      	mov	sp, r7
 800f784:	bc80      	pop	{r7}
 800f786:	4770      	bx	lr

0800f788 <lv_circ_init>:
 * @param c pointer to a point. The coordinates will be calculated here
 * @param tmp point to a variable. It will store temporary data
 * @param radius radius of the circle
 */
void lv_circ_init(lv_point_t * c, lv_coord_t * tmp, lv_coord_t radius)
{
 800f788:	b480      	push	{r7}
 800f78a:	b085      	sub	sp, #20
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	60f8      	str	r0, [r7, #12]
 800f790:	60b9      	str	r1, [r7, #8]
 800f792:	4613      	mov	r3, r2
 800f794:	80fb      	strh	r3, [r7, #6]
    c->x = radius;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	88fa      	ldrh	r2, [r7, #6]
 800f79a:	801a      	strh	r2, [r3, #0]
    c->y = 0;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	805a      	strh	r2, [r3, #2]
    *tmp = 1 - radius;
 800f7a2:	88fb      	ldrh	r3, [r7, #6]
 800f7a4:	f1c3 0301 	rsb	r3, r3, #1
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	b21a      	sxth	r2, r3
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	801a      	strh	r2, [r3, #0]
}
 800f7b0:	bf00      	nop
 800f7b2:	3714      	adds	r7, #20
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bc80      	pop	{r7}
 800f7b8:	4770      	bx	lr

0800f7ba <lv_circ_cont>:
 * Test the circle drawing is ready or not
 * @param c same as in circ_init
 * @return true if the circle is not ready yet
 */
bool lv_circ_cont(lv_point_t * c)
{
 800f7ba:	b480      	push	{r7}
 800f7bc:	b083      	sub	sp, #12
 800f7be:	af00      	add	r7, sp, #0
 800f7c0:	6078      	str	r0, [r7, #4]
    return c->y <= c->x ? true : false;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	bfd4      	ite	le
 800f7d2:	2301      	movle	r3, #1
 800f7d4:	2300      	movgt	r3, #0
 800f7d6:	b2db      	uxtb	r3, r3
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	370c      	adds	r7, #12
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bc80      	pop	{r7}
 800f7e0:	4770      	bx	lr

0800f7e2 <lv_circ_next>:
 * Get the next point from the circle
 * @param c same as in circ_init. The next point stored here.
 * @param tmp same as in circ_init.
 */
void lv_circ_next(lv_point_t * c, lv_coord_t * tmp)
{
 800f7e2:	b480      	push	{r7}
 800f7e4:	b083      	sub	sp, #12
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	6078      	str	r0, [r7, #4]
 800f7ea:	6039      	str	r1, [r7, #0]
    c->y++;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f7f2:	b29b      	uxth	r3, r3
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	b21a      	sxth	r2, r3
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	805a      	strh	r2, [r3, #2]

    if(*tmp <= 0) {
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f804:	2b00      	cmp	r3, #0
 800f806:	dc11      	bgt.n	800f82c <lv_circ_next+0x4a>
        (*tmp) += 2 * c->y + 1; // Change in decision criterion for y -> y+1
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f80e:	b29a      	uxth	r2, r3
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f816:	b29b      	uxth	r3, r3
 800f818:	005b      	lsls	r3, r3, #1
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	4413      	add	r3, r2
 800f81e:	b29b      	uxth	r3, r3
 800f820:	3301      	adds	r3, #1
 800f822:	b29b      	uxth	r3, r3
 800f824:	b21a      	sxth	r2, r3
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	801a      	strh	r2, [r3, #0]
    } else {
        c->x--;
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
    }
}
 800f82a:	e01e      	b.n	800f86a <lv_circ_next+0x88>
        c->x--;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f832:	b29b      	uxth	r3, r3
 800f834:	3b01      	subs	r3, #1
 800f836:	b29b      	uxth	r3, r3
 800f838:	b21a      	sxth	r2, r3
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	801a      	strh	r2, [r3, #0]
        (*tmp) += 2 * (c->y - c->x) + 1; // Change for y -> y+1, x -> x-1
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f844:	b29a      	uxth	r2, r3
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f84c:	4619      	mov	r1, r3
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f854:	1acb      	subs	r3, r1, r3
 800f856:	b29b      	uxth	r3, r3
 800f858:	005b      	lsls	r3, r3, #1
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	4413      	add	r3, r2
 800f85e:	b29b      	uxth	r3, r3
 800f860:	3301      	adds	r3, #1
 800f862:	b29b      	uxth	r3, r3
 800f864:	b21a      	sxth	r2, r3
 800f866:	683b      	ldr	r3, [r7, #0]
 800f868:	801a      	strh	r2, [r3, #0]
}
 800f86a:	bf00      	nop
 800f86c:	370c      	adds	r7, #12
 800f86e:	46bd      	mov	sp, r7
 800f870:	bc80      	pop	{r7}
 800f872:	4770      	bx	lr

0800f874 <lv_fs_init>:

/**
 * Initialize the File system interface
 */
void lv_fs_init(void)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
 800f878:	2148      	movs	r1, #72	@ 0x48
 800f87a:	4802      	ldr	r0, [pc, #8]	@ (800f884 <lv_fs_init+0x10>)
 800f87c:	f000 f97e 	bl	800fb7c <lv_ll_init>
}
 800f880:	bf00      	nop
 800f882:	bd80      	pop	{r7, pc}
 800f884:	20002d2c 	.word	0x20002d2c

0800f888 <lv_fs_open>:
 * @param path path to the file beginning with the driver letter (e.g. S:/folder/file.txt)
 * @param mode read: FS_MODE_RD, write: FS_MODE_WR, both: FS_MODE_RD | FS_MODE_WR
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_open(lv_fs_file_t * file_p, const char * path, lv_fs_mode_t mode)
{
 800f888:	b590      	push	{r4, r7, lr}
 800f88a:	b089      	sub	sp, #36	@ 0x24
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	60b9      	str	r1, [r7, #8]
 800f892:	4613      	mov	r3, r2
 800f894:	71fb      	strb	r3, [r7, #7]
    file_p->drv    = NULL;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	2200      	movs	r2, #0
 800f89a:	605a      	str	r2, [r3, #4]
    file_p->file_d = NULL;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	601a      	str	r2, [r3, #0]

    if(path == NULL) return LV_FS_RES_INV_PARAM;
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d101      	bne.n	800f8ac <lv_fs_open+0x24>
 800f8a8:	230b      	movs	r3, #11
 800f8aa:	e06a      	b.n	800f982 <lv_fs_open+0xfa>

    char letter = path[0];
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	77fb      	strb	r3, [r7, #31]

    file_p->drv = lv_fs_get_drv(letter);
 800f8b2:	7ffb      	ldrb	r3, [r7, #31]
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f000 f941 	bl	800fb3c <lv_fs_get_drv>
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	605a      	str	r2, [r3, #4]

    if(file_p->drv == NULL) {
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	685b      	ldr	r3, [r3, #4]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d104      	bne.n	800f8d2 <lv_fs_open+0x4a>
        file_p->file_d = NULL;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	601a      	str	r2, [r3, #0]
        return LV_FS_RES_NOT_EX;
 800f8ce:	2303      	movs	r3, #3
 800f8d0:	e057      	b.n	800f982 <lv_fs_open+0xfa>
    }

    if(file_p->drv->ready_cb != NULL) {
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	685b      	ldr	r3, [r3, #4]
 800f8d6:	689b      	ldr	r3, [r3, #8]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d014      	beq.n	800f906 <lv_fs_open+0x7e>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	689b      	ldr	r3, [r3, #8]
 800f8e2:	68fa      	ldr	r2, [r7, #12]
 800f8e4:	6852      	ldr	r2, [r2, #4]
 800f8e6:	4610      	mov	r0, r2
 800f8e8:	4798      	blx	r3
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	f083 0301 	eor.w	r3, r3, #1
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d007      	beq.n	800f906 <lv_fs_open+0x7e>
            file_p->drv    = NULL;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	605a      	str	r2, [r3, #4]
            file_p->file_d = NULL;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	2200      	movs	r2, #0
 800f900:	601a      	str	r2, [r3, #0]
            return LV_FS_RES_HW_ERR;
 800f902:	2301      	movs	r3, #1
 800f904:	e03d      	b.n	800f982 <lv_fs_open+0xfa>
        }
    }

    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	685b      	ldr	r3, [r3, #4]
 800f90a:	885b      	ldrh	r3, [r3, #2]
 800f90c:	4618      	mov	r0, r3
 800f90e:	f000 fbd7 	bl	80100c0 <lv_mem_alloc>
 800f912:	4602      	mov	r2, r0
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	601a      	str	r2, [r3, #0]
    lv_mem_assert(file_p->file_d);
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d101      	bne.n	800f924 <lv_fs_open+0x9c>
 800f920:	bf00      	nop
 800f922:	e7fd      	b.n	800f920 <lv_fs_open+0x98>
    if(file_p->file_d == NULL) {
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d104      	bne.n	800f936 <lv_fs_open+0xae>
        file_p->drv = NULL;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	2200      	movs	r2, #0
 800f930:	605a      	str	r2, [r3, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
 800f932:	230a      	movs	r3, #10
 800f934:	e025      	b.n	800f982 <lv_fs_open+0xfa>
    }

    if(file_p->drv->open_cb == NULL) {
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d101      	bne.n	800f944 <lv_fs_open+0xbc>
        return LV_FS_RES_NOT_IMP;
 800f940:	2309      	movs	r3, #9
 800f942:	e01e      	b.n	800f982 <lv_fs_open+0xfa>
    }

    const char * real_path = lv_fs_get_real_path(path);
 800f944:	68b8      	ldr	r0, [r7, #8]
 800f946:	f000 f8d7 	bl	800faf8 <lv_fs_get_real_path>
 800f94a:	61b8      	str	r0, [r7, #24]
    lv_fs_res_t res        = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	68dc      	ldr	r4, [r3, #12]
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	6858      	ldr	r0, [r3, #4]
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	6819      	ldr	r1, [r3, #0]
 800f95a:	79fb      	ldrb	r3, [r7, #7]
 800f95c:	69ba      	ldr	r2, [r7, #24]
 800f95e:	47a0      	blx	r4
 800f960:	4603      	mov	r3, r0
 800f962:	75fb      	strb	r3, [r7, #23]

    if(res != LV_FS_RES_OK) {
 800f964:	7dfb      	ldrb	r3, [r7, #23]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d00a      	beq.n	800f980 <lv_fs_open+0xf8>
        lv_mem_free(file_p->file_d);
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	4618      	mov	r0, r3
 800f970:	f000 fbe0 	bl	8010134 <lv_mem_free>
        file_p->file_d = NULL;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2200      	movs	r2, #0
 800f978:	601a      	str	r2, [r3, #0]
        file_p->drv    = NULL;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	2200      	movs	r2, #0
 800f97e:	605a      	str	r2, [r3, #4]
    }

    return res;
 800f980:	7dfb      	ldrb	r3, [r7, #23]
}
 800f982:	4618      	mov	r0, r3
 800f984:	3724      	adds	r7, #36	@ 0x24
 800f986:	46bd      	mov	sp, r7
 800f988:	bd90      	pop	{r4, r7, pc}

0800f98a <lv_fs_close>:
 * Close an already opened file
 * @param file_p pointer to a lv_fs_file_t variable
 * @return  LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_close(lv_fs_file_t * file_p)
{
 800f98a:	b580      	push	{r7, lr}
 800f98c:	b084      	sub	sp, #16
 800f98e:	af00      	add	r7, sp, #0
 800f990:	6078      	str	r0, [r7, #4]
    if(file_p->drv == NULL) {
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d101      	bne.n	800f99e <lv_fs_close+0x14>
        return LV_FS_RES_INV_PARAM;
 800f99a:	230b      	movs	r3, #11
 800f99c:	e020      	b.n	800f9e0 <lv_fs_close+0x56>
    }

    if(file_p->drv->close_cb == NULL) {
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	685b      	ldr	r3, [r3, #4]
 800f9a2:	691b      	ldr	r3, [r3, #16]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d101      	bne.n	800f9ac <lv_fs_close+0x22>
        return LV_FS_RES_NOT_IMP;
 800f9a8:	2309      	movs	r3, #9
 800f9aa:	e019      	b.n	800f9e0 <lv_fs_close+0x56>
    }

    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	691b      	ldr	r3, [r3, #16]
 800f9b2:	687a      	ldr	r2, [r7, #4]
 800f9b4:	6850      	ldr	r0, [r2, #4]
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	6812      	ldr	r2, [r2, #0]
 800f9ba:	4611      	mov	r1, r2
 800f9bc:	4798      	blx	r3
 800f9be:	4603      	mov	r3, r0
 800f9c0:	73fb      	strb	r3, [r7, #15]

    lv_mem_free(file_p->file_d); /*Clean up*/
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f000 fbb4 	bl	8010134 <lv_mem_free>
    file_p->file_d = NULL;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	601a      	str	r2, [r3, #0]
    file_p->drv    = NULL;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	605a      	str	r2, [r3, #4]
    file_p->file_d = NULL;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	601a      	str	r2, [r3, #0]

    return res;
 800f9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <lv_fs_read>:
 * @param btr Bytes To Read
 * @param br the number of real read bytes (Bytes Read). NULL if unused.
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_read(lv_fs_file_t * file_p, void * buf, uint32_t btr, uint32_t * br)
{
 800f9e8:	b590      	push	{r4, r7, lr}
 800f9ea:	b089      	sub	sp, #36	@ 0x24
 800f9ec:	af02      	add	r7, sp, #8
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	60b9      	str	r1, [r7, #8]
 800f9f2:	607a      	str	r2, [r7, #4]
 800f9f4:	603b      	str	r3, [r7, #0]
    if(br != NULL) *br = 0;
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d002      	beq.n	800fa02 <lv_fs_read+0x1a>
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	601a      	str	r2, [r3, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	685b      	ldr	r3, [r3, #4]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d101      	bne.n	800fa0e <lv_fs_read+0x26>
 800fa0a:	230b      	movs	r3, #11
 800fa0c:	e01e      	b.n	800fa4c <lv_fs_read+0x64>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	699b      	ldr	r3, [r3, #24]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d101      	bne.n	800fa1c <lv_fs_read+0x34>
 800fa18:	2309      	movs	r3, #9
 800fa1a:	e017      	b.n	800fa4c <lv_fs_read+0x64>

    uint32_t br_tmp = 0;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	613b      	str	r3, [r7, #16]
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	685b      	ldr	r3, [r3, #4]
 800fa24:	699c      	ldr	r4, [r3, #24]
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	6858      	ldr	r0, [r3, #4]
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	6819      	ldr	r1, [r3, #0]
 800fa2e:	f107 0310 	add.w	r3, r7, #16
 800fa32:	9300      	str	r3, [sp, #0]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	68ba      	ldr	r2, [r7, #8]
 800fa38:	47a0      	blx	r4
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	75fb      	strb	r3, [r7, #23]
    if(br != NULL) *br = br_tmp;
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d002      	beq.n	800fa4a <lv_fs_read+0x62>
 800fa44:	693a      	ldr	r2, [r7, #16]
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	601a      	str	r2, [r3, #0]

    return res;
 800fa4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	371c      	adds	r7, #28
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd90      	pop	{r4, r7, pc}

0800fa54 <lv_fs_seek>:
 * @param file_p pointer to a lv_fs_file_t variable
 * @param pos the new position expressed in bytes index (0: start of file)
 * @return LV_FS_RES_OK or any error from lv_fs_res_t enum
 */
lv_fs_res_t lv_fs_seek(lv_fs_file_t * file_p, uint32_t pos)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b084      	sub	sp, #16
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
    if(file_p->drv == NULL) {
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d101      	bne.n	800fa6a <lv_fs_seek+0x16>
        return LV_FS_RES_INV_PARAM;
 800fa66:	230b      	movs	r3, #11
 800fa68:	e012      	b.n	800fa90 <lv_fs_seek+0x3c>
    }

    if(file_p->drv->seek_cb == NULL) {
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	6a1b      	ldr	r3, [r3, #32]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d101      	bne.n	800fa78 <lv_fs_seek+0x24>
        return LV_FS_RES_NOT_IMP;
 800fa74:	2309      	movs	r3, #9
 800fa76:	e00b      	b.n	800fa90 <lv_fs_seek+0x3c>
    }

    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	6a1b      	ldr	r3, [r3, #32]
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	6850      	ldr	r0, [r2, #4]
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	6811      	ldr	r1, [r2, #0]
 800fa86:	683a      	ldr	r2, [r7, #0]
 800fa88:	4798      	blx	r3
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	73fb      	strb	r3, [r7, #15]

    return res;
 800fa8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3710      	adds	r7, #16
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <lv_fs_get_ext>:
 * Return with the extension of the filename
 * @param fn string with a filename
 * @return pointer to the beginning extension or empty string if no extension
 */
const char * lv_fs_get_ext(const char * fn)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b084      	sub	sp, #16
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
    uint16_t i;
    for(i = strlen(fn); i > 0; i--) {
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7f0 fbc9 	bl	8000238 <strlen>
 800faa6:	4603      	mov	r3, r0
 800faa8:	81fb      	strh	r3, [r7, #14]
 800faaa:	e01b      	b.n	800fae4 <lv_fs_get_ext+0x4c>
        if(fn[i] == '.') {
 800faac:	89fb      	ldrh	r3, [r7, #14]
 800faae:	687a      	ldr	r2, [r7, #4]
 800fab0:	4413      	add	r3, r2
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	2b2e      	cmp	r3, #46	@ 0x2e
 800fab6:	d104      	bne.n	800fac2 <lv_fs_get_ext+0x2a>
            return &fn[i + 1];
 800fab8:	89fb      	ldrh	r3, [r7, #14]
 800faba:	3301      	adds	r3, #1
 800fabc:	687a      	ldr	r2, [r7, #4]
 800fabe:	4413      	add	r3, r2
 800fac0:	e014      	b.n	800faec <lv_fs_get_ext+0x54>
        } else if(fn[i] == '/' || fn[i] == '\\') {
 800fac2:	89fb      	ldrh	r3, [r7, #14]
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	4413      	add	r3, r2
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	2b2f      	cmp	r3, #47	@ 0x2f
 800facc:	d005      	beq.n	800fada <lv_fs_get_ext+0x42>
 800face:	89fb      	ldrh	r3, [r7, #14]
 800fad0:	687a      	ldr	r2, [r7, #4]
 800fad2:	4413      	add	r3, r2
 800fad4:	781b      	ldrb	r3, [r3, #0]
 800fad6:	2b5c      	cmp	r3, #92	@ 0x5c
 800fad8:	d101      	bne.n	800fade <lv_fs_get_ext+0x46>
            return ""; /*No extension if a '\' or '/' found*/
 800fada:	4b06      	ldr	r3, [pc, #24]	@ (800faf4 <lv_fs_get_ext+0x5c>)
 800fadc:	e006      	b.n	800faec <lv_fs_get_ext+0x54>
    for(i = strlen(fn); i > 0; i--) {
 800fade:	89fb      	ldrh	r3, [r7, #14]
 800fae0:	3b01      	subs	r3, #1
 800fae2:	81fb      	strh	r3, [r7, #14]
 800fae4:	89fb      	ldrh	r3, [r7, #14]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d1e0      	bne.n	800faac <lv_fs_get_ext+0x14>
        }
    }

    return ""; /*Empty string if no '.' in the file name. */
 800faea:	4b02      	ldr	r3, [pc, #8]	@ (800faf4 <lv_fs_get_ext+0x5c>)
}
 800faec:	4618      	mov	r0, r3
 800faee:	3710      	adds	r7, #16
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}
 800faf4:	0801c630 	.word	0x0801c630

0800faf8 <lv_fs_get_real_path>:
 * Leave the driver letters and / or \ letters from beginning of the path
 * @param path path string (E.g. S:/folder/file.txt)
 * @return pointer to the beginning of the real path (E.g. folder/file.txt)
 */
static const char * lv_fs_get_real_path(const char * path)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b083      	sub	sp, #12
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	3301      	adds	r3, #1
 800fb04:	607b      	str	r3, [r7, #4]

    while(*path != '\0') {
 800fb06:	e00e      	b.n	800fb26 <lv_fs_get_real_path+0x2e>
        if(*path == ':' || *path == '\\' || *path == '/') {
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	2b3a      	cmp	r3, #58	@ 0x3a
 800fb0e:	d007      	beq.n	800fb20 <lv_fs_get_real_path+0x28>
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	2b5c      	cmp	r3, #92	@ 0x5c
 800fb16:	d003      	beq.n	800fb20 <lv_fs_get_real_path+0x28>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	2b2f      	cmp	r3, #47	@ 0x2f
 800fb1e:	d106      	bne.n	800fb2e <lv_fs_get_real_path+0x36>
            path++;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	3301      	adds	r3, #1
 800fb24:	607b      	str	r3, [r7, #4]
    while(*path != '\0') {
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d1ec      	bne.n	800fb08 <lv_fs_get_real_path+0x10>
        } else {
            break;
        }
    }

    return path;
 800fb2e:	687b      	ldr	r3, [r7, #4]
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	370c      	adds	r7, #12
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bc80      	pop	{r7}
 800fb38:	4770      	bx	lr
	...

0800fb3c <lv_fs_get_drv>:
 * Give a pointer to a driver from its letter
 * @param letter the driver letter
 * @return pointer to a driver or NULL if not found
 */
static lv_fs_drv_t * lv_fs_get_drv(char letter)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b084      	sub	sp, #16
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	4603      	mov	r3, r0
 800fb44:	71fb      	strb	r3, [r7, #7]
    lv_fs_drv_t * drv;

    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800fb46:	480c      	ldr	r0, [pc, #48]	@ (800fb78 <lv_fs_get_drv+0x3c>)
 800fb48:	f000 f999 	bl	800fe7e <lv_ll_get_head>
 800fb4c:	60f8      	str	r0, [r7, #12]
 800fb4e:	e00b      	b.n	800fb68 <lv_fs_get_drv+0x2c>
    {
        if(drv->letter == letter) {
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	781b      	ldrb	r3, [r3, #0]
 800fb54:	79fa      	ldrb	r2, [r7, #7]
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d101      	bne.n	800fb5e <lv_fs_get_drv+0x22>
            return drv;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	e008      	b.n	800fb70 <lv_fs_get_drv+0x34>
    LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv)
 800fb5e:	68f9      	ldr	r1, [r7, #12]
 800fb60:	4805      	ldr	r0, [pc, #20]	@ (800fb78 <lv_fs_get_drv+0x3c>)
 800fb62:	f000 f9b0 	bl	800fec6 <lv_ll_get_next>
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d1f0      	bne.n	800fb50 <lv_fs_get_drv+0x14>
        }
    }

    return NULL;
 800fb6e:	2300      	movs	r3, #0
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3710      	adds	r7, #16
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	20002d2c 	.word	0x20002d2c

0800fb7c <lv_ll_init>:
 * Initialize linked list
 * @param ll_dsc pointer to ll_dsc variable
 * @param node_size the size of 1 node in bytes
 */
void lv_ll_init(lv_ll_t * ll_p, uint32_t node_size)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b083      	sub	sp, #12
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
    ll_p->head = NULL;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	605a      	str	r2, [r3, #4]
    ll_p->tail = NULL;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	609a      	str	r2, [r3, #8]
        node_size = node_size & (~0x7);
        node_size += 8;
    }
#else
    /*Round the size up to 4*/
    if(node_size & 0x3) {
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	f003 0303 	and.w	r3, r3, #3
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d006      	beq.n	800fbaa <lv_ll_init+0x2e>
        node_size = node_size & (~0x3);
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	f023 0303 	bic.w	r3, r3, #3
 800fba2:	603b      	str	r3, [r7, #0]
        node_size += 4;
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	3304      	adds	r3, #4
 800fba8:	603b      	str	r3, [r7, #0]
    }
#endif

    ll_p->n_size = node_size;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	683a      	ldr	r2, [r7, #0]
 800fbae:	601a      	str	r2, [r3, #0]
}
 800fbb0:	bf00      	nop
 800fbb2:	370c      	adds	r7, #12
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bc80      	pop	{r7}
 800fbb8:	4770      	bx	lr

0800fbba <lv_ll_ins_head>:
 * Add a new head to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new head
 */
void * lv_ll_ins_head(lv_ll_t * ll_p)
{
 800fbba:	b580      	push	{r7, lr}
 800fbbc:	b084      	sub	sp, #16
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	3308      	adds	r3, #8
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f000 fa79 	bl	80100c0 <lv_mem_alloc>
 800fbce:	60f8      	str	r0, [r7, #12]

    if(n_new != NULL) {
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d020      	beq.n	800fc18 <lv_ll_ins_head+0x5e>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	68f9      	ldr	r1, [r7, #12]
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f000 fa03 	bl	800ffe6 <node_set_prev>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	68f9      	ldr	r1, [r7, #12]
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f000 fa22 	bl	8010032 <node_set_next>

        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d006      	beq.n	800fc04 <lv_ll_ins_head+0x4a>
            node_set_prev(ll_p, ll_p->head, n_new);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	685b      	ldr	r3, [r3, #4]
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 f9f1 	bl	800ffe6 <node_set_prev>
        }

        ll_p->head = n_new;      /*Set the new head in the dsc.*/
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	68fa      	ldr	r2, [r7, #12]
 800fc08:	605a      	str	r2, [r3, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	689b      	ldr	r3, [r3, #8]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d102      	bne.n	800fc18 <lv_ll_ins_head+0x5e>
            ll_p->tail = n_new;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	68fa      	ldr	r2, [r7, #12]
 800fc16:	609a      	str	r2, [r3, #8]
        }
    }

    return n_new;
 800fc18:	68fb      	ldr	r3, [r7, #12]
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3710      	adds	r7, #16
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}

0800fc22 <lv_ll_ins_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the new head
 */
void * lv_ll_ins_prev(lv_ll_t * ll_p, void * n_act)
{
 800fc22:	b580      	push	{r7, lr}
 800fc24:	b084      	sub	sp, #16
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	6078      	str	r0, [r7, #4]
 800fc2a:	6039      	str	r1, [r7, #0]
    lv_ll_node_t * n_new;
    lv_ll_node_t * n_prev;

    if(NULL == ll_p || NULL == n_act) return NULL;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d002      	beq.n	800fc38 <lv_ll_ins_prev+0x16>
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d101      	bne.n	800fc3c <lv_ll_ins_prev+0x1a>
 800fc38:	2300      	movs	r3, #0
 800fc3a:	e035      	b.n	800fca8 <lv_ll_ins_prev+0x86>

    if(lv_ll_get_head(ll_p) == n_act) {
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f000 f91e 	bl	800fe7e <lv_ll_get_head>
 800fc42:	4602      	mov	r2, r0
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d108      	bne.n	800fc5c <lv_ll_ins_prev+0x3a>
        n_new = lv_ll_ins_head(ll_p);
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f7ff ffb5 	bl	800fbba <lv_ll_ins_head>
 800fc50:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d126      	bne.n	800fca6 <lv_ll_ins_prev+0x84>
 800fc58:	2300      	movs	r3, #0
 800fc5a:	e025      	b.n	800fca8 <lv_ll_ins_prev+0x86>
    } else {
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	3308      	adds	r3, #8
 800fc62:	4618      	mov	r0, r3
 800fc64:	f000 fa2c 	bl	80100c0 <lv_mem_alloc>
 800fc68:	60f8      	str	r0, [r7, #12]
        if(n_new == NULL) return NULL;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d101      	bne.n	800fc74 <lv_ll_ins_prev+0x52>
 800fc70:	2300      	movs	r3, #0
 800fc72:	e019      	b.n	800fca8 <lv_ll_ins_prev+0x86>

        n_prev = lv_ll_get_prev(ll_p, n_act);
 800fc74:	6839      	ldr	r1, [r7, #0]
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 f93e 	bl	800fef8 <lv_ll_get_prev>
 800fc7c:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_new);
 800fc7e:	68fa      	ldr	r2, [r7, #12]
 800fc80:	68b9      	ldr	r1, [r7, #8]
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f000 f9d5 	bl	8010032 <node_set_next>
        node_set_prev(ll_p, n_new, n_prev);
 800fc88:	68ba      	ldr	r2, [r7, #8]
 800fc8a:	68f9      	ldr	r1, [r7, #12]
 800fc8c:	6878      	ldr	r0, [r7, #4]
 800fc8e:	f000 f9aa 	bl	800ffe6 <node_set_prev>
        node_set_prev(ll_p, n_act, n_new);
 800fc92:	68fa      	ldr	r2, [r7, #12]
 800fc94:	6839      	ldr	r1, [r7, #0]
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f000 f9a5 	bl	800ffe6 <node_set_prev>
        node_set_next(ll_p, n_new, n_act);
 800fc9c:	683a      	ldr	r2, [r7, #0]
 800fc9e:	68f9      	ldr	r1, [r7, #12]
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f000 f9c6 	bl	8010032 <node_set_next>
    }

    return n_new;
 800fca6:	68fb      	ldr	r3, [r7, #12]
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3710      	adds	r7, #16
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <lv_ll_ins_tail>:
 * Add a new tail to a linked list
 * @param ll_p pointer to linked list
 * @return pointer to the new tail
 */
void * lv_ll_ins_tail(lv_ll_t * ll_p)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
    lv_ll_node_t * n_new;

    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	3308      	adds	r3, #8
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f000 f9fe 	bl	80100c0 <lv_mem_alloc>
 800fcc4:	60f8      	str	r0, [r7, #12]
    if(n_new == NULL) return NULL;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d101      	bne.n	800fcd0 <lv_ll_ins_tail+0x20>
 800fccc:	2300      	movs	r3, #0
 800fcce:	e024      	b.n	800fd1a <lv_ll_ins_tail+0x6a>

    if(n_new != NULL) {
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d020      	beq.n	800fd18 <lv_ll_ins_tail+0x68>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	68f9      	ldr	r1, [r7, #12]
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 f9a9 	bl	8010032 <node_set_next>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is tho old tail*/
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	689b      	ldr	r3, [r3, #8]
 800fce4:	461a      	mov	r2, r3
 800fce6:	68f9      	ldr	r1, [r7, #12]
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f000 f97c 	bl	800ffe6 <node_set_prev>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d006      	beq.n	800fd04 <lv_ll_ins_tail+0x54>
            node_set_next(ll_p, ll_p->tail, n_new);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	689b      	ldr	r3, [r3, #8]
 800fcfa:	68fa      	ldr	r2, [r7, #12]
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 f997 	bl	8010032 <node_set_next>
        }

        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	68fa      	ldr	r2, [r7, #12]
 800fd08:	609a      	str	r2, [r3, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d102      	bne.n	800fd18 <lv_ll_ins_tail+0x68>
            ll_p->head = n_new;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	68fa      	ldr	r2, [r7, #12]
 800fd16:	605a      	str	r2, [r3, #4]
        }
    }

    return n_new;
 800fd18:	68fb      	ldr	r3, [r7, #12]
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3710      	adds	r7, #16
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}

0800fd22 <lv_ll_rem>:
 * It does not free the the memory of node.
 * @param ll_p pointer to the linked list of 'node_p'
 * @param node_p pointer to node in 'll_p' linked list
 */
void lv_ll_rem(lv_ll_t * ll_p, void * node_p)
{
 800fd22:	b580      	push	{r7, lr}
 800fd24:	b084      	sub	sp, #16
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
 800fd2a:	6039      	str	r1, [r7, #0]
    if(lv_ll_get_head(ll_p) == node_p) {
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f000 f8a6 	bl	800fe7e <lv_ll_get_head>
 800fd32:	4602      	mov	r2, r0
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	4293      	cmp	r3, r2
 800fd38:	d116      	bne.n	800fd68 <lv_ll_rem+0x46>
        /*The new head will be the node after 'n_act'*/
        ll_p->head = lv_ll_get_next(ll_p, node_p);
 800fd3a:	6839      	ldr	r1, [r7, #0]
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f000 f8c2 	bl	800fec6 <lv_ll_get_next>
 800fd42:	4602      	mov	r2, r0
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	605a      	str	r2, [r3, #4]
        if(ll_p->head == NULL) {
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d103      	bne.n	800fd58 <lv_ll_rem+0x36>
            ll_p->tail = NULL;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2200      	movs	r2, #0
 800fd54:	609a      	str	r2, [r3, #8]
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);

        node_set_next(ll_p, n_prev, n_next);
        node_set_prev(ll_p, n_next, n_prev);
    }
}
 800fd56:	e039      	b.n	800fdcc <lv_ll_rem+0xaa>
            node_set_prev(ll_p, ll_p->head, NULL);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	4619      	mov	r1, r3
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 f940 	bl	800ffe6 <node_set_prev>
}
 800fd66:	e031      	b.n	800fdcc <lv_ll_rem+0xaa>
    } else if(lv_ll_get_tail(ll_p) == node_p) {
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 f89a 	bl	800fea2 <lv_ll_get_tail>
 800fd6e:	4602      	mov	r2, r0
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	4293      	cmp	r3, r2
 800fd74:	d116      	bne.n	800fda4 <lv_ll_rem+0x82>
        ll_p->tail = lv_ll_get_prev(ll_p, node_p);
 800fd76:	6839      	ldr	r1, [r7, #0]
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f000 f8bd 	bl	800fef8 <lv_ll_get_prev>
 800fd7e:	4602      	mov	r2, r0
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	609a      	str	r2, [r3, #8]
        if(ll_p->tail == NULL) {
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	689b      	ldr	r3, [r3, #8]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d103      	bne.n	800fd94 <lv_ll_rem+0x72>
            ll_p->head = NULL;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2200      	movs	r2, #0
 800fd90:	605a      	str	r2, [r3, #4]
}
 800fd92:	e01b      	b.n	800fdcc <lv_ll_rem+0xaa>
            node_set_next(ll_p, ll_p->tail, NULL);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	689b      	ldr	r3, [r3, #8]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	4619      	mov	r1, r3
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f000 f948 	bl	8010032 <node_set_next>
}
 800fda2:	e013      	b.n	800fdcc <lv_ll_rem+0xaa>
        lv_ll_node_t * n_prev = lv_ll_get_prev(ll_p, node_p);
 800fda4:	6839      	ldr	r1, [r7, #0]
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 f8a6 	bl	800fef8 <lv_ll_get_prev>
 800fdac:	60f8      	str	r0, [r7, #12]
        lv_ll_node_t * n_next = lv_ll_get_next(ll_p, node_p);
 800fdae:	6839      	ldr	r1, [r7, #0]
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f000 f888 	bl	800fec6 <lv_ll_get_next>
 800fdb6:	60b8      	str	r0, [r7, #8]
        node_set_next(ll_p, n_prev, n_next);
 800fdb8:	68ba      	ldr	r2, [r7, #8]
 800fdba:	68f9      	ldr	r1, [r7, #12]
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f000 f938 	bl	8010032 <node_set_next>
        node_set_prev(ll_p, n_next, n_prev);
 800fdc2:	68fa      	ldr	r2, [r7, #12]
 800fdc4:	68b9      	ldr	r1, [r7, #8]
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f000 f90d 	bl	800ffe6 <node_set_prev>
}
 800fdcc:	bf00      	nop
 800fdce:	3710      	adds	r7, #16
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}

0800fdd4 <lv_ll_chg_list>:
 * @param node pointer to a node
 * @param head true: be the head in the new list
 *             false be the head in the new list
 */
void lv_ll_chg_list(lv_ll_t * ll_ori_p, lv_ll_t * ll_new_p, void * node, bool head)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b084      	sub	sp, #16
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	607a      	str	r2, [r7, #4]
 800fde0:	70fb      	strb	r3, [r7, #3]
    lv_ll_rem(ll_ori_p, node);
 800fde2:	6879      	ldr	r1, [r7, #4]
 800fde4:	68f8      	ldr	r0, [r7, #12]
 800fde6:	f7ff ff9c 	bl	800fd22 <lv_ll_rem>

    if(head) {
 800fdea:	78fb      	ldrb	r3, [r7, #3]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d021      	beq.n	800fe34 <lv_ll_chg_list+0x60>
        /*Set node as head*/
        node_set_prev(ll_new_p, node, NULL);
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	6879      	ldr	r1, [r7, #4]
 800fdf4:	68b8      	ldr	r0, [r7, #8]
 800fdf6:	f000 f8f6 	bl	800ffe6 <node_set_prev>
        node_set_next(ll_new_p, node, ll_new_p->head);
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	685b      	ldr	r3, [r3, #4]
 800fdfe:	461a      	mov	r2, r3
 800fe00:	6879      	ldr	r1, [r7, #4]
 800fe02:	68b8      	ldr	r0, [r7, #8]
 800fe04:	f000 f915 	bl	8010032 <node_set_next>

        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d006      	beq.n	800fe1e <lv_ll_chg_list+0x4a>
            node_set_prev(ll_new_p, ll_new_p->head, node);
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	4619      	mov	r1, r3
 800fe18:	68b8      	ldr	r0, [r7, #8]
 800fe1a:	f000 f8e4 	bl	800ffe6 <node_set_prev>
        }

        ll_new_p->head = node;       /*Set the new head in the dsc.*/
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	605a      	str	r2, [r3, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	689b      	ldr	r3, [r3, #8]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d124      	bne.n	800fe76 <lv_ll_chg_list+0xa2>
            ll_new_p->tail = node;
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	609a      	str	r2, [r3, #8]
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
            ll_new_p->head = node;
        }
    }
}
 800fe32:	e020      	b.n	800fe76 <lv_ll_chg_list+0xa2>
        node_set_prev(ll_new_p, node, ll_new_p->tail);
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	689b      	ldr	r3, [r3, #8]
 800fe38:	461a      	mov	r2, r3
 800fe3a:	6879      	ldr	r1, [r7, #4]
 800fe3c:	68b8      	ldr	r0, [r7, #8]
 800fe3e:	f000 f8d2 	bl	800ffe6 <node_set_prev>
        node_set_next(ll_new_p, node, NULL);
 800fe42:	2200      	movs	r2, #0
 800fe44:	6879      	ldr	r1, [r7, #4]
 800fe46:	68b8      	ldr	r0, [r7, #8]
 800fe48:	f000 f8f3 	bl	8010032 <node_set_next>
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	689b      	ldr	r3, [r3, #8]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d006      	beq.n	800fe62 <lv_ll_chg_list+0x8e>
            node_set_next(ll_new_p, ll_new_p->tail, node);
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	689b      	ldr	r3, [r3, #8]
 800fe58:	687a      	ldr	r2, [r7, #4]
 800fe5a:	4619      	mov	r1, r3
 800fe5c:	68b8      	ldr	r0, [r7, #8]
 800fe5e:	f000 f8e8 	bl	8010032 <node_set_next>
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	609a      	str	r2, [r3, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	685b      	ldr	r3, [r3, #4]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d102      	bne.n	800fe76 <lv_ll_chg_list+0xa2>
            ll_new_p->head = node;
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	605a      	str	r2, [r3, #4]
}
 800fe76:	bf00      	nop
 800fe78:	3710      	adds	r7, #16
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}

0800fe7e <lv_ll_get_head>:
 * Return with head node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * lv_ll_get_head(const lv_ll_t * ll_p)
{
 800fe7e:	b480      	push	{r7}
 800fe80:	b085      	sub	sp, #20
 800fe82:	af00      	add	r7, sp, #0
 800fe84:	6078      	str	r0, [r7, #4]
    void * head = NULL;
 800fe86:	2300      	movs	r3, #0
 800fe88:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d002      	beq.n	800fe96 <lv_ll_get_head+0x18>
        head = ll_p->head;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	60fb      	str	r3, [r7, #12]
    }

    return head;
 800fe96:	68fb      	ldr	r3, [r7, #12]
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	3714      	adds	r7, #20
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bc80      	pop	{r7}
 800fea0:	4770      	bx	lr

0800fea2 <lv_ll_get_tail>:
 * Return with tail node of the linked list
 * @param ll_p pointer to linked list
 * @return pointer to the head of 'll_p'
 */
void * lv_ll_get_tail(const lv_ll_t * ll_p)
{
 800fea2:	b480      	push	{r7}
 800fea4:	b085      	sub	sp, #20
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	6078      	str	r0, [r7, #4]
    void * tail = NULL;
 800feaa:	2300      	movs	r3, #0
 800feac:	60fb      	str	r3, [r7, #12]

    if(ll_p != NULL) {
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d002      	beq.n	800feba <lv_ll_get_tail+0x18>
        tail = ll_p->tail;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	689b      	ldr	r3, [r3, #8]
 800feb8:	60fb      	str	r3, [r7, #12]
    }

    return tail;
 800feba:	68fb      	ldr	r3, [r7, #12]
}
 800febc:	4618      	mov	r0, r3
 800febe:	3714      	adds	r7, #20
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bc80      	pop	{r7}
 800fec4:	4770      	bx	lr

0800fec6 <lv_ll_get_next>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the next node
 */
void * lv_ll_get_next(const lv_ll_t * ll_p, const void * n_act)
{
 800fec6:	b480      	push	{r7}
 800fec8:	b085      	sub	sp, #20
 800feca:	af00      	add	r7, sp, #0
 800fecc:	6078      	str	r0, [r7, #4]
 800fece:	6039      	str	r1, [r7, #0]
    void * next = NULL;
 800fed0:	2300      	movs	r3, #0
 800fed2:	60bb      	str	r3, [r7, #8]

    if(ll_p != NULL) {
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d008      	beq.n	800feec <lv_ll_get_next+0x26>
        const lv_ll_node_t * n_act_d = n_act;
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	60fb      	str	r3, [r7, #12]
        memcpy(&next, n_act_d + LL_NEXT_P_OFFSET(ll_p), sizeof(void *));
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	3304      	adds	r3, #4
 800fee4:	68fa      	ldr	r2, [r7, #12]
 800fee6:	4413      	add	r3, r2
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	60bb      	str	r3, [r7, #8]
    }

    return next;
 800feec:	68bb      	ldr	r3, [r7, #8]
}
 800feee:	4618      	mov	r0, r3
 800fef0:	3714      	adds	r7, #20
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bc80      	pop	{r7}
 800fef6:	4770      	bx	lr

0800fef8 <lv_ll_get_prev>:
 * @param ll_p pointer to linked list
 * @param n_act pointer a node
 * @return pointer to the previous node
 */
void * lv_ll_get_prev(const lv_ll_t * ll_p, const void * n_act)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b085      	sub	sp, #20
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
    void * prev = NULL;
 800ff02:	2300      	movs	r3, #0
 800ff04:	60bb      	str	r3, [r7, #8]

    if(ll_p != NULL) {
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d007      	beq.n	800ff1c <lv_ll_get_prev+0x24>
        const lv_ll_node_t * n_act_d = n_act;
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	60fb      	str	r3, [r7, #12]
        memcpy(&prev, n_act_d + LL_PREV_P_OFFSET(ll_p), sizeof(void *));
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	68fa      	ldr	r2, [r7, #12]
 800ff16:	4413      	add	r3, r2
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	60bb      	str	r3, [r7, #8]
    }

    return prev;
 800ff1c:	68bb      	ldr	r3, [r7, #8]
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3714      	adds	r7, #20
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bc80      	pop	{r7}
 800ff26:	4770      	bx	lr

0800ff28 <lv_ll_move_before>:
 * @param ll_p pointer to a linked list
 * @param n_act pointer to node to move
 * @param n_after pointer to a node which should be after `n_act`
 */
void lv_ll_move_before(lv_ll_t * ll_p, void * n_act, void * n_after)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b086      	sub	sp, #24
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	60f8      	str	r0, [r7, #12]
 800ff30:	60b9      	str	r1, [r7, #8]
 800ff32:	607a      	str	r2, [r7, #4]
    if(n_act == n_after) return; /*Can't move before itself*/
 800ff34:	68ba      	ldr	r2, [r7, #8]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d035      	beq.n	800ffa8 <lv_ll_move_before+0x80>

    void * n_before;
    if(n_after != NULL)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d005      	beq.n	800ff4e <lv_ll_move_before+0x26>
        n_before = lv_ll_get_prev(ll_p, n_after);
 800ff42:	6879      	ldr	r1, [r7, #4]
 800ff44:	68f8      	ldr	r0, [r7, #12]
 800ff46:	f7ff ffd7 	bl	800fef8 <lv_ll_get_prev>
 800ff4a:	6178      	str	r0, [r7, #20]
 800ff4c:	e003      	b.n	800ff56 <lv_ll_move_before+0x2e>
    else
        n_before = lv_ll_get_tail(ll_p); /*if `n_after` is NULL `n_act` should be the new tail*/
 800ff4e:	68f8      	ldr	r0, [r7, #12]
 800ff50:	f7ff ffa7 	bl	800fea2 <lv_ll_get_tail>
 800ff54:	6178      	str	r0, [r7, #20]

    if(n_act == n_before) return; /*Already before `n_after`*/
 800ff56:	68ba      	ldr	r2, [r7, #8]
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d026      	beq.n	800ffac <lv_ll_move_before+0x84>

    /*It's much easier to remove from the list and add again*/
    lv_ll_rem(ll_p, n_act);
 800ff5e:	68b9      	ldr	r1, [r7, #8]
 800ff60:	68f8      	ldr	r0, [r7, #12]
 800ff62:	f7ff fede 	bl	800fd22 <lv_ll_rem>

    /*Add again by setting the prev. and next nodes*/
    node_set_next(ll_p, n_before, n_act);
 800ff66:	68ba      	ldr	r2, [r7, #8]
 800ff68:	6979      	ldr	r1, [r7, #20]
 800ff6a:	68f8      	ldr	r0, [r7, #12]
 800ff6c:	f000 f861 	bl	8010032 <node_set_next>
    node_set_prev(ll_p, n_act, n_before);
 800ff70:	697a      	ldr	r2, [r7, #20]
 800ff72:	68b9      	ldr	r1, [r7, #8]
 800ff74:	68f8      	ldr	r0, [r7, #12]
 800ff76:	f000 f836 	bl	800ffe6 <node_set_prev>
    node_set_prev(ll_p, n_after, n_act);
 800ff7a:	68ba      	ldr	r2, [r7, #8]
 800ff7c:	6879      	ldr	r1, [r7, #4]
 800ff7e:	68f8      	ldr	r0, [r7, #12]
 800ff80:	f000 f831 	bl	800ffe6 <node_set_prev>
    node_set_next(ll_p, n_act, n_after);
 800ff84:	687a      	ldr	r2, [r7, #4]
 800ff86:	68b9      	ldr	r1, [r7, #8]
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f000 f852 	bl	8010032 <node_set_next>

    /*If `n_act` was moved before NULL then it become the new tail*/
    if(n_after == NULL) ll_p->tail = n_act;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d102      	bne.n	800ff9a <lv_ll_move_before+0x72>
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	68ba      	ldr	r2, [r7, #8]
 800ff98:	609a      	str	r2, [r3, #8]

    /*If `n_act` was moved before `NULL` then it's the new head*/
    if(n_before == NULL) ll_p->head = n_act;
 800ff9a:	697b      	ldr	r3, [r7, #20]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d106      	bne.n	800ffae <lv_ll_move_before+0x86>
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	68ba      	ldr	r2, [r7, #8]
 800ffa4:	605a      	str	r2, [r3, #4]
 800ffa6:	e002      	b.n	800ffae <lv_ll_move_before+0x86>
    if(n_act == n_after) return; /*Can't move before itself*/
 800ffa8:	bf00      	nop
 800ffaa:	e000      	b.n	800ffae <lv_ll_move_before+0x86>
    if(n_act == n_before) return; /*Already before `n_after`*/
 800ffac:	bf00      	nop
}
 800ffae:	3718      	adds	r7, #24
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd80      	pop	{r7, pc}

0800ffb4 <lv_ll_is_empty>:
 * Check if a linked list is empty
 * @param ll_p pointer to a linked list
 * @return true: the linked list is empty; false: not empty
 */
bool lv_ll_is_empty(lv_ll_t * ll_p)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b083      	sub	sp, #12
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
    if(ll_p == NULL) return true;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d101      	bne.n	800ffc6 <lv_ll_is_empty+0x12>
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	e00a      	b.n	800ffdc <lv_ll_is_empty+0x28>

    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	685b      	ldr	r3, [r3, #4]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d105      	bne.n	800ffda <lv_ll_is_empty+0x26>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	689b      	ldr	r3, [r3, #8]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d101      	bne.n	800ffda <lv_ll_is_empty+0x26>
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	e000      	b.n	800ffdc <lv_ll_is_empty+0x28>

    return false;
 800ffda:	2300      	movs	r3, #0
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	370c      	adds	r7, #12
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bc80      	pop	{r7}
 800ffe4:	4770      	bx	lr

0800ffe6 <node_set_prev>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
 800ffe6:	b580      	push	{r7, lr}
 800ffe8:	b086      	sub	sp, #24
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	60f8      	str	r0, [r7, #12]
 800ffee:	60b9      	str	r1, [r7, #8]
 800fff0:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d018      	beq.n	801002a <node_set_prev+0x44>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
 800fff8:	2304      	movs	r3, #4
 800fffa:	617b      	str	r3, [r7, #20]
    if(prev)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d009      	beq.n	8010016 <node_set_prev+0x30>
        memcpy(act + LL_PREV_P_OFFSET(ll_p), &prev, node_p_size);
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	68ba      	ldr	r2, [r7, #8]
 8010008:	4413      	add	r3, r2
 801000a:	1d39      	adds	r1, r7, #4
 801000c:	697a      	ldr	r2, [r7, #20]
 801000e:	4618      	mov	r0, r3
 8010010:	f00b fceb 	bl	801b9ea <memcpy>
 8010014:	e00a      	b.n	801002c <node_set_prev+0x46>
    else
        memset(act + LL_PREV_P_OFFSET(ll_p), 0, node_p_size);
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	68ba      	ldr	r2, [r7, #8]
 801001c:	4413      	add	r3, r2
 801001e:	697a      	ldr	r2, [r7, #20]
 8010020:	2100      	movs	r1, #0
 8010022:	4618      	mov	r0, r3
 8010024:	f00b fc5d 	bl	801b8e2 <memset>
 8010028:	e000      	b.n	801002c <node_set_prev+0x46>
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
 801002a:	bf00      	nop
}
 801002c:	3718      	adds	r7, #24
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}

08010032 <node_set_next>:
 * @param ll_p pointer to linked list
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
 8010032:	b580      	push	{r7, lr}
 8010034:	b086      	sub	sp, #24
 8010036:	af00      	add	r7, sp, #0
 8010038:	60f8      	str	r0, [r7, #12]
 801003a:	60b9      	str	r1, [r7, #8]
 801003c:	607a      	str	r2, [r7, #4]
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d01a      	beq.n	801007a <node_set_next+0x48>

    uint32_t node_p_size = sizeof(lv_ll_node_t *);
 8010044:	2304      	movs	r3, #4
 8010046:	617b      	str	r3, [r7, #20]
    if(next)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d00a      	beq.n	8010064 <node_set_next+0x32>
        memcpy(act + LL_NEXT_P_OFFSET(ll_p), &next, node_p_size);
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	3304      	adds	r3, #4
 8010054:	68ba      	ldr	r2, [r7, #8]
 8010056:	4413      	add	r3, r2
 8010058:	1d39      	adds	r1, r7, #4
 801005a:	697a      	ldr	r2, [r7, #20]
 801005c:	4618      	mov	r0, r3
 801005e:	f00b fcc4 	bl	801b9ea <memcpy>
 8010062:	e00b      	b.n	801007c <node_set_next+0x4a>
    else
        memset(act + LL_NEXT_P_OFFSET(ll_p), 0, node_p_size);
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	3304      	adds	r3, #4
 801006a:	68ba      	ldr	r2, [r7, #8]
 801006c:	4413      	add	r3, r2
 801006e:	697a      	ldr	r2, [r7, #20]
 8010070:	2100      	movs	r1, #0
 8010072:	4618      	mov	r0, r3
 8010074:	f00b fc35 	bl	801b8e2 <memset>
 8010078:	e000      	b.n	801007c <node_set_next+0x4a>
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
 801007a:	bf00      	nop
}
 801007c:	3718      	adds	r7, #24
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
	...

08010084 <lv_mem_init>:

/**
 * Initiaiize the dyn_mem module (work memory and other variables)
 */
void lv_mem_init(void)
{
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
#if LV_MEM_CUSTOM == 0

#if LV_MEM_ADR == 0
    /*Allocate a large array to store the dynamically allocated data*/
    static LV_MEM_ATTR MEM_UNIT work_mem_int[LV_MEM_SIZE / sizeof(MEM_UNIT)];
    work_mem = (uint8_t *)work_mem_int;
 801008a:	4b0b      	ldr	r3, [pc, #44]	@ (80100b8 <lv_mem_init+0x34>)
 801008c:	4a0b      	ldr	r2, [pc, #44]	@ (80100bc <lv_mem_init+0x38>)
 801008e:	601a      	str	r2, [r3, #0]
#else
    work_mem = (uint8_t *)LV_MEM_ADR;
#endif

    lv_mem_ent_t * full = (lv_mem_ent_t *)work_mem;
 8010090:	4b09      	ldr	r3, [pc, #36]	@ (80100b8 <lv_mem_init+0x34>)
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	607b      	str	r3, [r7, #4]
    full->header.s.used = 0;
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	7813      	ldrb	r3, [r2, #0]
 801009a:	f36f 0300 	bfc	r3, #0, #1
 801009e:	7013      	strb	r3, [r2, #0]
    /*The total mem size id reduced by the first header and the close patterns */
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
 80100a0:	687a      	ldr	r2, [r7, #4]
 80100a2:	6813      	ldr	r3, [r2, #0]
 80100a4:	f647 71fc 	movw	r1, #32764	@ 0x7ffc
 80100a8:	f361 035f 	bfi	r3, r1, #1, #31
 80100ac:	6013      	str	r3, [r2, #0]
#endif
}
 80100ae:	bf00      	nop
 80100b0:	370c      	adds	r7, #12
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bc80      	pop	{r7}
 80100b6:	4770      	bx	lr
 80100b8:	20002d64 	.word	0x20002d64
 80100bc:	20002d6c 	.word	0x20002d6c

080100c0 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(uint32_t size)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b084      	sub	sp, #16
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
    if(size == 0) {
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d101      	bne.n	80100d2 <lv_mem_alloc+0x12>
        return &zero_mem;
 80100ce:	4b18      	ldr	r3, [pc, #96]	@ (8010130 <lv_mem_alloc+0x70>)
 80100d0:	e02a      	b.n	8010128 <lv_mem_alloc+0x68>
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f003 0303 	and.w	r3, r3, #3
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d006      	beq.n	80100ea <lv_mem_alloc+0x2a>
        size = size & (~0x3);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f023 0303 	bic.w	r3, r3, #3
 80100e2:	607b      	str	r3, [r7, #4]
        size += 4;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	3304      	adds	r3, #4
 80100e8:	607b      	str	r3, [r7, #4]
    }
#endif
    void * alloc = NULL;
 80100ea:	2300      	movs	r3, #0
 80100ec:	60fb      	str	r3, [r7, #12]

#if LV_MEM_CUSTOM == 0
    /*Use the built-in allocators*/
    lv_mem_ent_t * e = NULL;
 80100ee:	2300      	movs	r3, #0
 80100f0:	60bb      	str	r3, [r7, #8]

    // Search for a appropriate entry
    do {
        // Get the next entry
        e = ent_get_next(e);
 80100f2:	68b8      	ldr	r0, [r7, #8]
 80100f4:	f000 f8d4 	bl	80102a0 <ent_get_next>
 80100f8:	60b8      	str	r0, [r7, #8]

        /*If there is next entry then try to allocate there*/
        if(e != NULL) {
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d004      	beq.n	801010a <lv_mem_alloc+0x4a>
            alloc = ent_alloc(e, size);
 8010100:	6879      	ldr	r1, [r7, #4]
 8010102:	68b8      	ldr	r0, [r7, #8]
 8010104:	f000 f8f6 	bl	80102f4 <ent_alloc>
 8010108:	60f8      	str	r0, [r7, #12]
        }
        // End if there is not next entry OR the alloc. is successful
    } while(e != NULL && alloc == NULL);
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d002      	beq.n	8010116 <lv_mem_alloc+0x56>
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d0ed      	beq.n	80100f2 <lv_mem_alloc+0x32>
    }
#endif                /* LV_ENABLE_GC */
#endif                /* LV_MEM_CUSTOM */

#if LV_MEM_ADD_JUNK
    if(alloc != NULL) memset(alloc, 0xaa, size);
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d004      	beq.n	8010126 <lv_mem_alloc+0x66>
 801011c:	687a      	ldr	r2, [r7, #4]
 801011e:	21aa      	movs	r1, #170	@ 0xaa
 8010120:	68f8      	ldr	r0, [r7, #12]
 8010122:	f00b fbde 	bl	801b8e2 <memset>
#endif

    if(alloc == NULL) LV_LOG_WARN("Couldn't allocate memory");

    return alloc;
 8010126:	68fb      	ldr	r3, [r7, #12]
}
 8010128:	4618      	mov	r0, r3
 801012a:	3710      	adds	r7, #16
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}
 8010130:	20002d68 	.word	0x20002d68

08010134 <lv_mem_free>:
/**
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b084      	sub	sp, #16
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
    if(data == &zero_mem) return;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	4a22      	ldr	r2, [pc, #136]	@ (80101c8 <lv_mem_free+0x94>)
 8010140:	4293      	cmp	r3, r2
 8010142:	d039      	beq.n	80101b8 <lv_mem_free+0x84>
    if(data == NULL) return;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d038      	beq.n	80101bc <lv_mem_free+0x88>

#if LV_MEM_ADD_JUNK
    memset((void *)data, 0xbb, lv_mem_get_size(data));
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f000 f88a 	bl	8010264 <lv_mem_get_size>
 8010150:	4603      	mov	r3, r0
 8010152:	461a      	mov	r2, r3
 8010154:	21bb      	movs	r1, #187	@ 0xbb
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f00b fbc3 	bl	801b8e2 <memset>
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	3b04      	subs	r3, #4
 8010160:	60bb      	str	r3, [r7, #8]
    e->header.s.used = 0;
 8010162:	68ba      	ldr	r2, [r7, #8]
 8010164:	7813      	ldrb	r3, [r2, #0]
 8010166:	f36f 0300 	bfc	r3, #0, #1
 801016a:	7013      	strb	r3, [r2, #0]
#if LV_MEM_CUSTOM == 0
#if LV_MEM_AUTO_DEFRAG
    /* Make a simple defrag.
     * Join the following free entries after this*/
    lv_mem_ent_t * e_next;
    e_next = ent_get_next(e);
 801016c:	68b8      	ldr	r0, [r7, #8]
 801016e:	f000 f897 	bl	80102a0 <ent_get_next>
 8010172:	60f8      	str	r0, [r7, #12]
    while(e_next != NULL) {
 8010174:	e01c      	b.n	80101b0 <lv_mem_free+0x7c>
        if(e_next->header.s.used == 0) {
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	f003 0301 	and.w	r3, r3, #1
 801017e:	b2db      	uxtb	r3, r3
 8010180:	2b00      	cmp	r3, #0
 8010182:	d11d      	bne.n	80101c0 <lv_mem_free+0x8c>
            e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801018c:	461a      	mov	r2, r3
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f3c3 035e 	ubfx	r3, r3, #1, #31
 8010196:	4413      	add	r3, r2
 8010198:	3304      	adds	r3, #4
 801019a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801019e:	68ba      	ldr	r2, [r7, #8]
 80101a0:	6813      	ldr	r3, [r2, #0]
 80101a2:	f361 035f 	bfi	r3, r1, #1, #31
 80101a6:	6013      	str	r3, [r2, #0]
        } else {
            break;
        }
        e_next = ent_get_next(e_next);
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f000 f879 	bl	80102a0 <ent_get_next>
 80101ae:	60f8      	str	r0, [r7, #12]
    while(e_next != NULL) {
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1df      	bne.n	8010176 <lv_mem_free+0x42>
 80101b6:	e004      	b.n	80101c2 <lv_mem_free+0x8e>
    if(data == &zero_mem) return;
 80101b8:	bf00      	nop
 80101ba:	e002      	b.n	80101c2 <lv_mem_free+0x8e>
    if(data == NULL) return;
 80101bc:	bf00      	nop
 80101be:	e000      	b.n	80101c2 <lv_mem_free+0x8e>
            break;
 80101c0:	bf00      	nop
    LV_MEM_CUSTOM_FREE(e);
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
 80101c2:	3710      	adds	r7, #16
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}
 80101c8:	20002d68 	.word	0x20002d68

080101cc <lv_mem_realloc>:
 */

#if LV_ENABLE_GC == 0

void * lv_mem_realloc(void * data_p, uint32_t new_size)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b086      	sub	sp, #24
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	6039      	str	r1, [r7, #0]
    /*data_p could be previously freed pointer (in this case it is invalid)*/
    if(data_p != NULL) {
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d00b      	beq.n	80101f4 <lv_mem_realloc+0x28>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	3b04      	subs	r3, #4
 80101e0:	617b      	str	r3, [r7, #20]
        if(e->header.s.used == 0) {
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	f003 0301 	and.w	r3, r3, #1
 80101ea:	b2db      	uxtb	r3, r3
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d101      	bne.n	80101f4 <lv_mem_realloc+0x28>
            data_p = NULL;
 80101f0:	2300      	movs	r3, #0
 80101f2:	607b      	str	r3, [r7, #4]
        }
    }

    uint32_t old_size = lv_mem_get_size(data_p);
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f000 f835 	bl	8010264 <lv_mem_get_size>
 80101fa:	6138      	str	r0, [r7, #16]
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
 80101fc:	693a      	ldr	r2, [r7, #16]
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	429a      	cmp	r2, r3
 8010202:	d101      	bne.n	8010208 <lv_mem_realloc+0x3c>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	e028      	b.n	801025a <lv_mem_realloc+0x8e>

#if LV_MEM_CUSTOM == 0
    /* Truncate the memory if the new size is smaller. */
    if(new_size < old_size) {
 8010208:	683a      	ldr	r2, [r7, #0]
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	429a      	cmp	r2, r3
 801020e:	d209      	bcs.n	8010224 <lv_mem_realloc+0x58>
        lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data_p - sizeof(lv_mem_header_t));
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	3b04      	subs	r3, #4
 8010214:	60bb      	str	r3, [r7, #8]
        ent_trunc(e, new_size);
 8010216:	6839      	ldr	r1, [r7, #0]
 8010218:	68b8      	ldr	r0, [r7, #8]
 801021a:	f000 f892 	bl	8010342 <ent_trunc>
        return &e->first_data;
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	3304      	adds	r3, #4
 8010222:	e01a      	b.n	801025a <lv_mem_realloc+0x8e>
    }
#endif

    void * new_p;
    new_p = lv_mem_alloc(new_size);
 8010224:	6838      	ldr	r0, [r7, #0]
 8010226:	f7ff ff4b 	bl	80100c0 <lv_mem_alloc>
 801022a:	60f8      	str	r0, [r7, #12]

    if(new_p != NULL && data_p != NULL) {
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d012      	beq.n	8010258 <lv_mem_realloc+0x8c>
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d00f      	beq.n	8010258 <lv_mem_realloc+0x8c>
        /*Copy the old data to the new. Use the smaller size*/
        if(old_size != 0) {
 8010238:	693b      	ldr	r3, [r7, #16]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d00c      	beq.n	8010258 <lv_mem_realloc+0x8c>
            memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
 801023e:	693a      	ldr	r2, [r7, #16]
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	4293      	cmp	r3, r2
 8010244:	bf28      	it	cs
 8010246:	4613      	movcs	r3, r2
 8010248:	461a      	mov	r2, r3
 801024a:	6879      	ldr	r1, [r7, #4]
 801024c:	68f8      	ldr	r0, [r7, #12]
 801024e:	f00b fbcc 	bl	801b9ea <memcpy>
            lv_mem_free(data_p);
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f7ff ff6e 	bl	8010134 <lv_mem_free>
        }
    }

    if(new_p == NULL) LV_LOG_WARN("Couldn't allocate memory");

    return new_p;
 8010258:	68fb      	ldr	r3, [r7, #12]
}
 801025a:	4618      	mov	r0, r3
 801025c:	3718      	adds	r7, #24
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}
	...

08010264 <lv_mem_get_size>:
 */

#if LV_ENABLE_GC == 0

uint32_t lv_mem_get_size(const void * data)
{
 8010264:	b480      	push	{r7}
 8010266:	b085      	sub	sp, #20
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
    if(data == NULL) return 0;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d101      	bne.n	8010276 <lv_mem_get_size+0x12>
 8010272:	2300      	movs	r3, #0
 8010274:	e00c      	b.n	8010290 <lv_mem_get_size+0x2c>
    if(data == &zero_mem) return 0;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4a08      	ldr	r2, [pc, #32]	@ (801029c <lv_mem_get_size+0x38>)
 801027a:	4293      	cmp	r3, r2
 801027c:	d101      	bne.n	8010282 <lv_mem_get_size+0x1e>
 801027e:	2300      	movs	r3, #0
 8010280:	e006      	b.n	8010290 <lv_mem_get_size+0x2c>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	3b04      	subs	r3, #4
 8010286:	60fb      	str	r3, [r7, #12]

    return e->header.s.d_size;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	f3c3 035e 	ubfx	r3, r3, #1, #31
}
 8010290:	4618      	mov	r0, r3
 8010292:	3714      	adds	r7, #20
 8010294:	46bd      	mov	sp, r7
 8010296:	bc80      	pop	{r7}
 8010298:	4770      	bx	lr
 801029a:	bf00      	nop
 801029c:	20002d68 	.word	0x20002d68

080102a0 <ent_get_next>:
 * Give the next entry after 'act_e'
 * @param act_e pointer to an entry
 * @return pointer to an entry after 'act_e'
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b085      	sub	sp, #20
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
    lv_mem_ent_t * next_e = NULL;
 80102a8:	2300      	movs	r3, #0
 80102aa:	60fb      	str	r3, [r7, #12]

    if(act_e == NULL) { /*NULL means: get the first entry*/
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d103      	bne.n	80102ba <ent_get_next+0x1a>
        next_e = (lv_mem_ent_t *)work_mem;
 80102b2:	4b0f      	ldr	r3, [pc, #60]	@ (80102f0 <ent_get_next+0x50>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	60fb      	str	r3, [r7, #12]
 80102b8:	e014      	b.n	80102e4 <ent_get_next+0x44>
    } else { /*Get the next entry */
        uint8_t * data = &act_e->first_data;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	3304      	adds	r3, #4
 80102be:	60bb      	str	r3, [r7, #8]
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	f3c3 035e 	ubfx	r3, r3, #1, #31
 80102c8:	461a      	mov	r2, r3
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	4413      	add	r3, r2
 80102ce:	60fb      	str	r3, [r7, #12]

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	1d1a      	adds	r2, r3, #4
 80102d4:	4b06      	ldr	r3, [pc, #24]	@ (80102f0 <ent_get_next+0x50>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80102dc:	429a      	cmp	r2, r3
 80102de:	d301      	bcc.n	80102e4 <ent_get_next+0x44>
 80102e0:	2300      	movs	r3, #0
 80102e2:	60fb      	str	r3, [r7, #12]
    }

    return next_e;
 80102e4:	68fb      	ldr	r3, [r7, #12]
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3714      	adds	r7, #20
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bc80      	pop	{r7}
 80102ee:	4770      	bx	lr
 80102f0:	20002d64 	.word	0x20002d64

080102f4 <ent_alloc>:
 * @param e try to allocate to this entry
 * @param size size of the new memory in bytes
 * @return pointer to the allocated memory or NULL if not enough memory in the entry
 */
static void * ent_alloc(lv_mem_ent_t * e, uint32_t size)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b084      	sub	sp, #16
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
    void * alloc = NULL;
 80102fe:	2300      	movs	r3, #0
 8010300:	60fb      	str	r3, [r7, #12]

    /*If the memory is free and big enough then use it */
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	781b      	ldrb	r3, [r3, #0]
 8010306:	f003 0301 	and.w	r3, r3, #1
 801030a:	b2db      	uxtb	r3, r3
 801030c:	2b00      	cmp	r3, #0
 801030e:	d113      	bne.n	8010338 <ent_alloc+0x44>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	f3c3 035e 	ubfx	r3, r3, #1, #31
 8010318:	461a      	mov	r2, r3
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	4293      	cmp	r3, r2
 801031e:	d80b      	bhi.n	8010338 <ent_alloc+0x44>
        /*Truncate the entry to the desired size */
        ent_trunc(e, size),
 8010320:	6839      	ldr	r1, [r7, #0]
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f000 f80d 	bl	8010342 <ent_trunc>

            e->header.s.used = 1;
 8010328:	687a      	ldr	r2, [r7, #4]
 801032a:	7813      	ldrb	r3, [r2, #0]
 801032c:	f043 0301 	orr.w	r3, r3, #1
 8010330:	7013      	strb	r3, [r2, #0]

        /*Save the allocated data*/
        alloc = &e->first_data;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	3304      	adds	r3, #4
 8010336:	60fb      	str	r3, [r7, #12]
    }

    return alloc;
 8010338:	68fb      	ldr	r3, [r7, #12]
}
 801033a:	4618      	mov	r0, r3
 801033c:	3710      	adds	r7, #16
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}

08010342 <ent_trunc>:
 * Truncate the data of entry to the given size
 * @param e Pointer to an entry
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, uint32_t size)
{
 8010342:	b480      	push	{r7}
 8010344:	b085      	sub	sp, #20
 8010346:	af00      	add	r7, sp, #0
 8010348:	6078      	str	r0, [r7, #4]
 801034a:	6039      	str	r1, [r7, #0]
        size = size & (~0x7);
        size += 8;
    }
#else
    /*Round the size up to 4*/
    if(size & 0x3) {
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	f003 0303 	and.w	r3, r3, #3
 8010352:	2b00      	cmp	r3, #0
 8010354:	d006      	beq.n	8010364 <ent_trunc+0x22>
        size = size & (~0x3);
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	f023 0303 	bic.w	r3, r3, #3
 801035c:	603b      	str	r3, [r7, #0]
        size += 4;
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	3304      	adds	r3, #4
 8010362:	603b      	str	r3, [r7, #0]
    }
#endif

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801036c:	461a      	mov	r2, r3
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	3304      	adds	r3, #4
 8010372:	429a      	cmp	r2, r3
 8010374:	d104      	bne.n	8010380 <ent_trunc+0x3e>
        size = e->header.s.d_size;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	f3c3 035e 	ubfx	r3, r3, #1, #31
 801037e:	603b      	str	r3, [r7, #0]
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f3c3 035e 	ubfx	r3, r3, #1, #31
 8010388:	461a      	mov	r2, r3
 801038a:	683b      	ldr	r3, [r7, #0]
 801038c:	4293      	cmp	r3, r2
 801038e:	d01a      	beq.n	80103c6 <ent_trunc+0x84>
        uint8_t * e_data             = &e->first_data;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	3304      	adds	r3, #4
 8010394:	60fb      	str	r3, [r7, #12]
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
 8010396:	68fa      	ldr	r2, [r7, #12]
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	4413      	add	r3, r2
 801039c:	60bb      	str	r3, [r7, #8]
        after_new_e->header.s.used   = 0;
 801039e:	68ba      	ldr	r2, [r7, #8]
 80103a0:	7813      	ldrb	r3, [r2, #0]
 80103a2:	f36f 0300 	bfc	r3, #0, #1
 80103a6:	7013      	strb	r3, [r2, #0]
        after_new_e->header.s.d_size = e->header.s.d_size - size - sizeof(lv_mem_header_t);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	f3c3 035e 	ubfx	r3, r3, #1, #31
 80103b0:	461a      	mov	r2, r3
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	1ad3      	subs	r3, r2, r3
 80103b6:	3b04      	subs	r3, #4
 80103b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80103bc:	68ba      	ldr	r2, [r7, #8]
 80103be:	6813      	ldr	r3, [r2, #0]
 80103c0:	f361 035f 	bfi	r3, r1, #1, #31
 80103c4:	6013      	str	r3, [r2, #0]
    }

    /* Set the new size for the original entry */
    e->header.s.d_size = size;
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80103cc:	687a      	ldr	r2, [r7, #4]
 80103ce:	6813      	ldr	r3, [r2, #0]
 80103d0:	f361 035f 	bfi	r3, r1, #1, #31
 80103d4:	6013      	str	r3, [r2, #0]
}
 80103d6:	bf00      	nop
 80103d8:	3714      	adds	r7, #20
 80103da:	46bd      	mov	sp, r7
 80103dc:	bc80      	pop	{r7}
 80103de:	4770      	bx	lr

080103e0 <lv_task_core_init>:

/**
 * Init the lv_task module
 */
void lv_task_core_init(void)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	af00      	add	r7, sp, #0
    lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
 80103e4:	2114      	movs	r1, #20
 80103e6:	4804      	ldr	r0, [pc, #16]	@ (80103f8 <lv_task_core_init+0x18>)
 80103e8:	f7ff fbc8 	bl	800fb7c <lv_ll_init>

    /*Initially enable the lv_task handling*/
    lv_task_enable(true);
 80103ec:	2001      	movs	r0, #1
 80103ee:	f000 fa25 	bl	801083c <lv_task_enable>
}
 80103f2:	bf00      	nop
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	20002d08 	.word	0x20002d08

080103fc <lv_task_handler>:

/**
 * Call it  periodically to handle lv_tasks.
 */
LV_ATTRIBUTE_TASK_HANDLER void lv_task_handler(void)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b084      	sub	sp, #16
 8010400:	af00      	add	r7, sp, #0
    LV_LOG_TRACE("lv_task_handler started");

    /*Avoid concurrent running of the task handler*/
    static bool task_handler_mutex = false;
    if(task_handler_mutex) return;
 8010402:	4b6b      	ldr	r3, [pc, #428]	@ (80105b0 <lv_task_handler+0x1b4>)
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	f040 80cd 	bne.w	80105a6 <lv_task_handler+0x1aa>
    task_handler_mutex = true;
 801040c:	4b68      	ldr	r3, [pc, #416]	@ (80105b0 <lv_task_handler+0x1b4>)
 801040e:	2201      	movs	r2, #1
 8010410:	701a      	strb	r2, [r3, #0]

    static uint32_t idle_period_start = 0;
    static uint32_t handler_start     = 0;
    static uint32_t busy_time         = 0;

    if(lv_task_run == false) {
 8010412:	4b68      	ldr	r3, [pc, #416]	@ (80105b4 <lv_task_handler+0x1b8>)
 8010414:	781b      	ldrb	r3, [r3, #0]
 8010416:	f083 0301 	eor.w	r3, r3, #1
 801041a:	b2db      	uxtb	r3, r3
 801041c:	2b00      	cmp	r3, #0
 801041e:	d003      	beq.n	8010428 <lv_task_handler+0x2c>
        task_handler_mutex = false; /*Release mutex*/
 8010420:	4b63      	ldr	r3, [pc, #396]	@ (80105b0 <lv_task_handler+0x1b4>)
 8010422:	2200      	movs	r2, #0
 8010424:	701a      	strb	r2, [r3, #0]
        return;
 8010426:	e0bf      	b.n	80105a8 <lv_task_handler+0x1ac>
    }

    handler_start = lv_tick_get();
 8010428:	f7fe fd8c 	bl	800ef44 <lv_tick_get>
 801042c:	4603      	mov	r3, r0
 801042e:	4a62      	ldr	r2, [pc, #392]	@ (80105b8 <lv_task_handler+0x1bc>)
 8010430:	6013      	str	r3, [r2, #0]

    /* Run all task from the highest to the lowest priority
     * If a lower priority task is executed check task again from the highest priority
     * but on the priority of executed tasks don't run tasks before the executed*/
    lv_task_t * task_interrupter = NULL;
 8010432:	2300      	movs	r3, #0
 8010434:	60fb      	str	r3, [r7, #12]
    lv_task_t * next;
    bool end_flag;
    do {
        end_flag                 = true;
 8010436:	2301      	movs	r3, #1
 8010438:	72fb      	strb	r3, [r7, #11]
        task_deleted             = false;
 801043a:	4b60      	ldr	r3, [pc, #384]	@ (80105bc <lv_task_handler+0x1c0>)
 801043c:	2200      	movs	r2, #0
 801043e:	701a      	strb	r2, [r3, #0]
        task_created             = false;
 8010440:	4b5f      	ldr	r3, [pc, #380]	@ (80105c0 <lv_task_handler+0x1c4>)
 8010442:	2200      	movs	r2, #0
 8010444:	701a      	strb	r2, [r3, #0]
        LV_GC_ROOT(_lv_task_act) = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 8010446:	485f      	ldr	r0, [pc, #380]	@ (80105c4 <lv_task_handler+0x1c8>)
 8010448:	f7ff fd19 	bl	800fe7e <lv_ll_get_head>
 801044c:	4603      	mov	r3, r0
 801044e:	4a5e      	ldr	r2, [pc, #376]	@ (80105c8 <lv_task_handler+0x1cc>)
 8010450:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 8010452:	e05e      	b.n	8010512 <lv_task_handler+0x116>
            /* The task might be deleted if it runs only once ('once = 1')
             * So get next element until the current is surely valid*/
            next = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
 8010454:	4b5c      	ldr	r3, [pc, #368]	@ (80105c8 <lv_task_handler+0x1cc>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4619      	mov	r1, r3
 801045a:	485a      	ldr	r0, [pc, #360]	@ (80105c4 <lv_task_handler+0x1c8>)
 801045c:	f7ff fd33 	bl	800fec6 <lv_ll_get_next>
 8010460:	6078      	str	r0, [r7, #4]

            /*We reach priority of the turned off task. There is nothing more to do.*/
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
 8010462:	4b59      	ldr	r3, [pc, #356]	@ (80105c8 <lv_task_handler+0x1cc>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	7c1b      	ldrb	r3, [r3, #16]
 8010468:	f003 0307 	and.w	r3, r3, #7
 801046c:	b2db      	uxtb	r3, r3
 801046e:	2b00      	cmp	r3, #0
 8010470:	d054      	beq.n	801051c <lv_task_handler+0x120>
                break;
            }

            /*Here is the interrupter task. Don't execute it again.*/
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
 8010472:	4b55      	ldr	r3, [pc, #340]	@ (80105c8 <lv_task_handler+0x1cc>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	68fa      	ldr	r2, [r7, #12]
 8010478:	429a      	cmp	r2, r3
 801047a:	d105      	bne.n	8010488 <lv_task_handler+0x8c>
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
 801047c:	2300      	movs	r3, #0
 801047e:	60fb      	str	r3, [r7, #12]
                                            the interrupter is not interesting anymore*/
                LV_GC_ROOT(_lv_task_act) = next;
 8010480:	4a51      	ldr	r2, [pc, #324]	@ (80105c8 <lv_task_handler+0x1cc>)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6013      	str	r3, [r2, #0]
                continue; /*Load the next task*/
 8010486:	e044      	b.n	8010512 <lv_task_handler+0x116>
            }

            /*Just try to run the tasks with highest priority.*/
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
 8010488:	4b4f      	ldr	r3, [pc, #316]	@ (80105c8 <lv_task_handler+0x1cc>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	7c1b      	ldrb	r3, [r3, #16]
 801048e:	f003 0307 	and.w	r3, r3, #7
 8010492:	b2db      	uxtb	r3, r3
 8010494:	2b05      	cmp	r3, #5
 8010496:	d105      	bne.n	80104a4 <lv_task_handler+0xa8>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
 8010498:	4b4b      	ldr	r3, [pc, #300]	@ (80105c8 <lv_task_handler+0x1cc>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4618      	mov	r0, r3
 801049e:	f000 f9dd 	bl	801085c <lv_task_exec>
 80104a2:	e02b      	b.n	80104fc <lv_task_handler+0x100>
            }
            /*Tasks with higher priority then the interrupted shall be run in every case*/
            else if(task_interrupter) {
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d01a      	beq.n	80104e0 <lv_task_handler+0xe4>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
 80104aa:	4b47      	ldr	r3, [pc, #284]	@ (80105c8 <lv_task_handler+0x1cc>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	7c1b      	ldrb	r3, [r3, #16]
 80104b0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80104b4:	b2da      	uxtb	r2, r3
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	7c1b      	ldrb	r3, [r3, #16]
 80104ba:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80104be:	b2db      	uxtb	r3, r3
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d91b      	bls.n	80104fc <lv_task_handler+0x100>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 80104c4:	4b40      	ldr	r3, [pc, #256]	@ (80105c8 <lv_task_handler+0x1cc>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	4618      	mov	r0, r3
 80104ca:	f000 f9c7 	bl	801085c <lv_task_exec>
 80104ce:	4603      	mov	r3, r0
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d013      	beq.n	80104fc <lv_task_handler+0x100>
                        task_interrupter =
 80104d4:	4b3c      	ldr	r3, [pc, #240]	@ (80105c8 <lv_task_handler+0x1cc>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	60fb      	str	r3, [r7, #12]
                            LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
                        end_flag = false;
 80104da:	2300      	movs	r3, #0
 80104dc:	72fb      	strb	r3, [r7, #11]
                        break;
 80104de:	e022      	b.n	8010526 <lv_task_handler+0x12a>
                }
            }
            /* It is no interrupter task or we already reached it earlier.
             * Just run the remaining tasks*/
            else {
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
 80104e0:	4b39      	ldr	r3, [pc, #228]	@ (80105c8 <lv_task_handler+0x1cc>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	4618      	mov	r0, r3
 80104e6:	f000 f9b9 	bl	801085c <lv_task_exec>
 80104ea:	4603      	mov	r3, r0
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d005      	beq.n	80104fc <lv_task_handler+0x100>
                    task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
 80104f0:	4b35      	ldr	r3, [pc, #212]	@ (80105c8 <lv_task_handler+0x1cc>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	60fb      	str	r3, [r7, #12]
                    end_flag         = false;
 80104f6:	2300      	movs	r3, #0
 80104f8:	72fb      	strb	r3, [r7, #11]
                    break;
 80104fa:	e014      	b.n	8010526 <lv_task_handler+0x12a>
                }
            }

            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 80104fc:	4b2f      	ldr	r3, [pc, #188]	@ (80105bc <lv_task_handler+0x1c0>)
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d10d      	bne.n	8010520 <lv_task_handler+0x124>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 8010504:	4b2e      	ldr	r3, [pc, #184]	@ (80105c0 <lv_task_handler+0x1c4>)
 8010506:	781b      	ldrb	r3, [r3, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d10b      	bne.n	8010524 <lv_task_handler+0x128>

            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
 801050c:	4a2e      	ldr	r2, [pc, #184]	@ (80105c8 <lv_task_handler+0x1cc>)
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6013      	str	r3, [r2, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
 8010512:	4b2d      	ldr	r3, [pc, #180]	@ (80105c8 <lv_task_handler+0x1cc>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d19c      	bne.n	8010454 <lv_task_handler+0x58>
 801051a:	e004      	b.n	8010526 <lv_task_handler+0x12a>
                break;
 801051c:	bf00      	nop
 801051e:	e002      	b.n	8010526 <lv_task_handler+0x12a>
            if(task_deleted) break; /*If a task was deleted then this or the next item might be corrupted*/
 8010520:	bf00      	nop
 8010522:	e000      	b.n	8010526 <lv_task_handler+0x12a>
            if(task_created) break; /*If a task was created then this or the next item might be corrupted*/
 8010524:	bf00      	nop
        }
    } while(!end_flag);
 8010526:	7afb      	ldrb	r3, [r7, #11]
 8010528:	f083 0301 	eor.w	r3, r3, #1
 801052c:	b2db      	uxtb	r3, r3
 801052e:	2b00      	cmp	r3, #0
 8010530:	d181      	bne.n	8010436 <lv_task_handler+0x3a>

    busy_time += lv_tick_elaps(handler_start);
 8010532:	4b21      	ldr	r3, [pc, #132]	@ (80105b8 <lv_task_handler+0x1bc>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	4618      	mov	r0, r3
 8010538:	f7fe fd0b 	bl	800ef52 <lv_tick_elaps>
 801053c:	4602      	mov	r2, r0
 801053e:	4b23      	ldr	r3, [pc, #140]	@ (80105cc <lv_task_handler+0x1d0>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	4413      	add	r3, r2
 8010544:	4a21      	ldr	r2, [pc, #132]	@ (80105cc <lv_task_handler+0x1d0>)
 8010546:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
 8010548:	4b21      	ldr	r3, [pc, #132]	@ (80105d0 <lv_task_handler+0x1d4>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	4618      	mov	r0, r3
 801054e:	f7fe fd00 	bl	800ef52 <lv_tick_elaps>
 8010552:	6038      	str	r0, [r7, #0]
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801055a:	d320      	bcc.n	801059e <lv_task_handler+0x1a2>

        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
 801055c:	4b1b      	ldr	r3, [pc, #108]	@ (80105cc <lv_task_handler+0x1d0>)
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	2264      	movs	r2, #100	@ 0x64
 8010562:	fb02 f303 	mul.w	r3, r2, r3
 8010566:	4a1b      	ldr	r2, [pc, #108]	@ (80105d4 <lv_task_handler+0x1d8>)
 8010568:	fba2 2303 	umull	r2, r3, r2, r3
 801056c:	095b      	lsrs	r3, r3, #5
 801056e:	b2da      	uxtb	r2, r3
 8010570:	4b19      	ldr	r3, [pc, #100]	@ (80105d8 <lv_task_handler+0x1dc>)
 8010572:	701a      	strb	r2, [r3, #0]
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
 8010574:	4b18      	ldr	r3, [pc, #96]	@ (80105d8 <lv_task_handler+0x1dc>)
 8010576:	781b      	ldrb	r3, [r3, #0]
 8010578:	2b64      	cmp	r3, #100	@ 0x64
 801057a:	d805      	bhi.n	8010588 <lv_task_handler+0x18c>
 801057c:	4b16      	ldr	r3, [pc, #88]	@ (80105d8 <lv_task_handler+0x1dc>)
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8010584:	b2db      	uxtb	r3, r3
 8010586:	e000      	b.n	801058a <lv_task_handler+0x18e>
 8010588:	2300      	movs	r3, #0
 801058a:	4a13      	ldr	r2, [pc, #76]	@ (80105d8 <lv_task_handler+0x1dc>)
 801058c:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
 801058e:	4b0f      	ldr	r3, [pc, #60]	@ (80105cc <lv_task_handler+0x1d0>)
 8010590:	2200      	movs	r2, #0
 8010592:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
 8010594:	f7fe fcd6 	bl	800ef44 <lv_tick_get>
 8010598:	4603      	mov	r3, r0
 801059a:	4a0d      	ldr	r2, [pc, #52]	@ (80105d0 <lv_task_handler+0x1d4>)
 801059c:	6013      	str	r3, [r2, #0]
    }

    task_handler_mutex = false; /*Release the mutex*/
 801059e:	4b04      	ldr	r3, [pc, #16]	@ (80105b0 <lv_task_handler+0x1b4>)
 80105a0:	2200      	movs	r2, #0
 80105a2:	701a      	strb	r2, [r3, #0]
 80105a4:	e000      	b.n	80105a8 <lv_task_handler+0x1ac>
    if(task_handler_mutex) return;
 80105a6:	bf00      	nop

    LV_LOG_TRACE("lv_task_handler ready");
}
 80105a8:	3710      	adds	r7, #16
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	2000ad70 	.word	0x2000ad70
 80105b4:	2000ad6c 	.word	0x2000ad6c
 80105b8:	2000ad74 	.word	0x2000ad74
 80105bc:	2000ad6e 	.word	0x2000ad6e
 80105c0:	2000ad6f 	.word	0x2000ad6f
 80105c4:	20002d08 	.word	0x20002d08
 80105c8:	20002d60 	.word	0x20002d60
 80105cc:	2000ad78 	.word	0x2000ad78
 80105d0:	2000ad7c 	.word	0x2000ad7c
 80105d4:	10624dd3 	.word	0x10624dd3
 80105d8:	2000ad6d 	.word	0x2000ad6d

080105dc <lv_task_create_basic>:
 * Create an "empty" task. It needs to initialzed with at least
 * `lv_task_set_cb` and `lv_task_set_period`
 * @return pointer to the craeted task
 */
lv_task_t * lv_task_create_basic(void)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
    lv_task_t * new_task = NULL;
 80105e2:	2300      	movs	r3, #0
 80105e4:	607b      	str	r3, [r7, #4]
    lv_task_t * tmp;

    /*Create task lists in order of priority from high to low*/
    tmp = lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
 80105e6:	4834      	ldr	r0, [pc, #208]	@ (80106b8 <lv_task_create_basic+0xdc>)
 80105e8:	f7ff fc49 	bl	800fe7e <lv_ll_get_head>
 80105ec:	6038      	str	r0, [r7, #0]

    /*It's the first task*/
    if(NULL == tmp) {
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d10d      	bne.n	8010610 <lv_task_create_basic+0x34>
        new_task = lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
 80105f4:	4830      	ldr	r0, [pc, #192]	@ (80106b8 <lv_task_create_basic+0xdc>)
 80105f6:	f7ff fae0 	bl	800fbba <lv_ll_ins_head>
 80105fa:	6078      	str	r0, [r7, #4]
        lv_mem_assert(new_task);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d101      	bne.n	8010606 <lv_task_create_basic+0x2a>
 8010602:	bf00      	nop
 8010604:	e7fd      	b.n	8010602 <lv_task_create_basic+0x26>
        if(new_task == NULL) return NULL;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d132      	bne.n	8010672 <lv_task_create_basic+0x96>
 801060c:	2300      	movs	r3, #0
 801060e:	e04e      	b.n	80106ae <lv_task_create_basic+0xd2>
    }
    /*Insert the new task to proper place according to its priority*/
    else {
        do {
            if(tmp->prio <= DEF_PRIO) {
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	7c1b      	ldrb	r3, [r3, #16]
 8010614:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8010618:	b2db      	uxtb	r3, r3
 801061a:	2b03      	cmp	r3, #3
 801061c:	d80e      	bhi.n	801063c <lv_task_create_basic+0x60>
                new_task = lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
 801061e:	6839      	ldr	r1, [r7, #0]
 8010620:	4825      	ldr	r0, [pc, #148]	@ (80106b8 <lv_task_create_basic+0xdc>)
 8010622:	f7ff fafe 	bl	800fc22 <lv_ll_ins_prev>
 8010626:	6078      	str	r0, [r7, #4]
                lv_mem_assert(new_task);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d101      	bne.n	8010632 <lv_task_create_basic+0x56>
 801062e:	bf00      	nop
 8010630:	e7fd      	b.n	801062e <lv_task_create_basic+0x52>
                if(new_task == NULL) return NULL;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d10a      	bne.n	801064e <lv_task_create_basic+0x72>
 8010638:	2300      	movs	r3, #0
 801063a:	e038      	b.n	80106ae <lv_task_create_basic+0xd2>
                break;
            }
            tmp = lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
 801063c:	6839      	ldr	r1, [r7, #0]
 801063e:	481e      	ldr	r0, [pc, #120]	@ (80106b8 <lv_task_create_basic+0xdc>)
 8010640:	f7ff fc41 	bl	800fec6 <lv_ll_get_next>
 8010644:	6038      	str	r0, [r7, #0]
        } while(tmp != NULL);
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d1e1      	bne.n	8010610 <lv_task_create_basic+0x34>
 801064c:	e000      	b.n	8010650 <lv_task_create_basic+0x74>
                break;
 801064e:	bf00      	nop

        /*Only too high priority tasks were found. Add the task to the end*/
        if(tmp == NULL) {
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d10d      	bne.n	8010672 <lv_task_create_basic+0x96>
            new_task = lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
 8010656:	4818      	ldr	r0, [pc, #96]	@ (80106b8 <lv_task_create_basic+0xdc>)
 8010658:	f7ff fb2a 	bl	800fcb0 <lv_ll_ins_tail>
 801065c:	6078      	str	r0, [r7, #4]
            lv_mem_assert(new_task);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d101      	bne.n	8010668 <lv_task_create_basic+0x8c>
 8010664:	bf00      	nop
 8010666:	e7fd      	b.n	8010664 <lv_task_create_basic+0x88>
            if(new_task == NULL) return NULL;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d101      	bne.n	8010672 <lv_task_create_basic+0x96>
 801066e:	2300      	movs	r3, #0
 8010670:	e01d      	b.n	80106ae <lv_task_create_basic+0xd2>
        }
    }

    new_task->period  = DEF_PERIOD;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8010678:	601a      	str	r2, [r3, #0]
    new_task->task_cb = NULL;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2200      	movs	r2, #0
 801067e:	609a      	str	r2, [r3, #8]
    new_task->prio    = DEF_PRIO;
 8010680:	687a      	ldr	r2, [r7, #4]
 8010682:	7c13      	ldrb	r3, [r2, #16]
 8010684:	2103      	movs	r1, #3
 8010686:	f361 0302 	bfi	r3, r1, #0, #3
 801068a:	7413      	strb	r3, [r2, #16]

    new_task->once     = 0;
 801068c:	687a      	ldr	r2, [r7, #4]
 801068e:	7c13      	ldrb	r3, [r2, #16]
 8010690:	f36f 03c3 	bfc	r3, #3, #1
 8010694:	7413      	strb	r3, [r2, #16]
    new_task->last_run = lv_tick_get();
 8010696:	f7fe fc55 	bl	800ef44 <lv_tick_get>
 801069a:	4602      	mov	r2, r0
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	605a      	str	r2, [r3, #4]

    new_task->user_data = NULL;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2200      	movs	r2, #0
 80106a4:	60da      	str	r2, [r3, #12]

    task_created = true;
 80106a6:	4b05      	ldr	r3, [pc, #20]	@ (80106bc <lv_task_create_basic+0xe0>)
 80106a8:	2201      	movs	r2, #1
 80106aa:	701a      	strb	r2, [r3, #0]

    return new_task;
 80106ac:	687b      	ldr	r3, [r7, #4]
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3708      	adds	r7, #8
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}
 80106b6:	bf00      	nop
 80106b8:	20002d08 	.word	0x20002d08
 80106bc:	2000ad6f 	.word	0x2000ad6f

080106c0 <lv_task_create>:
 * @param prio priority of the task (LV_TASK_PRIO_OFF means the task is stopped)
 * @param user_data custom parameter
 * @return pointer to the new task
 */
lv_task_t * lv_task_create(lv_task_cb_t task_cb, uint32_t period, lv_task_prio_t prio, void * user_data)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b086      	sub	sp, #24
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	60f8      	str	r0, [r7, #12]
 80106c8:	60b9      	str	r1, [r7, #8]
 80106ca:	603b      	str	r3, [r7, #0]
 80106cc:	4613      	mov	r3, r2
 80106ce:	71fb      	strb	r3, [r7, #7]
    lv_task_t * new_task = lv_task_create_basic();
 80106d0:	f7ff ff84 	bl	80105dc <lv_task_create_basic>
 80106d4:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_task);
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d101      	bne.n	80106e0 <lv_task_create+0x20>
 80106dc:	bf00      	nop
 80106de:	e7fd      	b.n	80106dc <lv_task_create+0x1c>
    if(new_task == NULL) return NULL;
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d101      	bne.n	80106ea <lv_task_create+0x2a>
 80106e6:	2300      	movs	r3, #0
 80106e8:	e010      	b.n	801070c <lv_task_create+0x4c>

    lv_task_set_cb(new_task, task_cb);
 80106ea:	68f9      	ldr	r1, [r7, #12]
 80106ec:	6978      	ldr	r0, [r7, #20]
 80106ee:	f000 f811 	bl	8010714 <lv_task_set_cb>
    lv_task_set_period(new_task, period);
 80106f2:	68b9      	ldr	r1, [r7, #8]
 80106f4:	6978      	ldr	r0, [r7, #20]
 80106f6:	f000 f883 	bl	8010800 <lv_task_set_period>
    lv_task_set_prio(new_task, prio);
 80106fa:	79fb      	ldrb	r3, [r7, #7]
 80106fc:	4619      	mov	r1, r3
 80106fe:	6978      	ldr	r0, [r7, #20]
 8010700:	f000 f834 	bl	801076c <lv_task_set_prio>
    new_task->user_data = user_data;
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	683a      	ldr	r2, [r7, #0]
 8010708:	60da      	str	r2, [r3, #12]

    return new_task;
 801070a:	697b      	ldr	r3, [r7, #20]
}
 801070c:	4618      	mov	r0, r3
 801070e:	3718      	adds	r7, #24
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <lv_task_set_cb>:
 * Set the callback the task (the function to call periodically)
 * @param task pointer to a task
 * @param task_cb teh function to call periodically
 */
void lv_task_set_cb(lv_task_t * task, lv_task_cb_t task_cb)
{
 8010714:	b480      	push	{r7}
 8010716:	b083      	sub	sp, #12
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
    task->task_cb = task_cb;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	683a      	ldr	r2, [r7, #0]
 8010722:	609a      	str	r2, [r3, #8]
}
 8010724:	bf00      	nop
 8010726:	370c      	adds	r7, #12
 8010728:	46bd      	mov	sp, r7
 801072a:	bc80      	pop	{r7}
 801072c:	4770      	bx	lr
	...

08010730 <lv_task_del>:
/**
 * Delete a lv_task
 * @param task pointer to task created by task
 */
void lv_task_del(lv_task_t * task)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
    lv_ll_rem(&LV_GC_ROOT(_lv_task_ll), task);
 8010738:	6879      	ldr	r1, [r7, #4]
 801073a:	4809      	ldr	r0, [pc, #36]	@ (8010760 <lv_task_del+0x30>)
 801073c:	f7ff faf1 	bl	800fd22 <lv_ll_rem>

    lv_mem_free(task);
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f7ff fcf7 	bl	8010134 <lv_mem_free>

    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
 8010746:	4b07      	ldr	r3, [pc, #28]	@ (8010764 <lv_task_del+0x34>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	687a      	ldr	r2, [r7, #4]
 801074c:	429a      	cmp	r2, r3
 801074e:	d102      	bne.n	8010756 <lv_task_del+0x26>
 8010750:	4b05      	ldr	r3, [pc, #20]	@ (8010768 <lv_task_del+0x38>)
 8010752:	2201      	movs	r2, #1
 8010754:	701a      	strb	r2, [r3, #0]
}
 8010756:	bf00      	nop
 8010758:	3708      	adds	r7, #8
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	20002d08 	.word	0x20002d08
 8010764:	20002d60 	.word	0x20002d60
 8010768:	2000ad6e 	.word	0x2000ad6e

0801076c <lv_task_set_prio>:
 * Set new priority for a lv_task
 * @param task pointer to a lv_task
 * @param prio the new priority
 */
void lv_task_set_prio(lv_task_t * task, lv_task_prio_t prio)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b084      	sub	sp, #16
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	460b      	mov	r3, r1
 8010776:	70fb      	strb	r3, [r7, #3]
    if(task->prio == prio) return;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	7c1b      	ldrb	r3, [r3, #16]
 801077c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8010780:	b2db      	uxtb	r3, r3
 8010782:	461a      	mov	r2, r3
 8010784:	78fb      	ldrb	r3, [r7, #3]
 8010786:	429a      	cmp	r2, r3
 8010788:	d033      	beq.n	80107f2 <lv_task_set_prio+0x86>

    /*Find the tasks with new priority*/
    lv_task_t * i;
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 801078a:	481c      	ldr	r0, [pc, #112]	@ (80107fc <lv_task_set_prio+0x90>)
 801078c:	f7ff fb77 	bl	800fe7e <lv_ll_get_head>
 8010790:	60f8      	str	r0, [r7, #12]
 8010792:	e017      	b.n	80107c4 <lv_task_set_prio+0x58>
    {
        if(i->prio <= prio) {
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	7c1b      	ldrb	r3, [r3, #16]
 8010798:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801079c:	b2db      	uxtb	r3, r3
 801079e:	461a      	mov	r2, r3
 80107a0:	78fb      	ldrb	r3, [r7, #3]
 80107a2:	429a      	cmp	r2, r3
 80107a4:	dc09      	bgt.n	80107ba <lv_task_set_prio+0x4e>
            if(i != task) lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
 80107a6:	68fa      	ldr	r2, [r7, #12]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d00e      	beq.n	80107cc <lv_task_set_prio+0x60>
 80107ae:	68fa      	ldr	r2, [r7, #12]
 80107b0:	6879      	ldr	r1, [r7, #4]
 80107b2:	4812      	ldr	r0, [pc, #72]	@ (80107fc <lv_task_set_prio+0x90>)
 80107b4:	f7ff fbb8 	bl	800ff28 <lv_ll_move_before>
            break;
 80107b8:	e008      	b.n	80107cc <lv_task_set_prio+0x60>
    LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i)
 80107ba:	68f9      	ldr	r1, [r7, #12]
 80107bc:	480f      	ldr	r0, [pc, #60]	@ (80107fc <lv_task_set_prio+0x90>)
 80107be:	f7ff fb82 	bl	800fec6 <lv_ll_get_next>
 80107c2:	60f8      	str	r0, [r7, #12]
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d1e4      	bne.n	8010794 <lv_task_set_prio+0x28>
 80107ca:	e000      	b.n	80107ce <lv_task_set_prio+0x62>
            break;
 80107cc:	bf00      	nop
        }
    }

    /*There was no such a low priority so far then add the node to the tail*/
    if(i == NULL) {
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d104      	bne.n	80107de <lv_task_set_prio+0x72>
        lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
 80107d4:	2200      	movs	r2, #0
 80107d6:	6879      	ldr	r1, [r7, #4]
 80107d8:	4808      	ldr	r0, [pc, #32]	@ (80107fc <lv_task_set_prio+0x90>)
 80107da:	f7ff fba5 	bl	800ff28 <lv_ll_move_before>
    }

    task->prio = prio;
 80107de:	78fb      	ldrb	r3, [r7, #3]
 80107e0:	f003 0307 	and.w	r3, r3, #7
 80107e4:	b2d9      	uxtb	r1, r3
 80107e6:	687a      	ldr	r2, [r7, #4]
 80107e8:	7c13      	ldrb	r3, [r2, #16]
 80107ea:	f361 0302 	bfi	r3, r1, #0, #3
 80107ee:	7413      	strb	r3, [r2, #16]
 80107f0:	e000      	b.n	80107f4 <lv_task_set_prio+0x88>
    if(task->prio == prio) return;
 80107f2:	bf00      	nop
}
 80107f4:	3710      	adds	r7, #16
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}
 80107fa:	bf00      	nop
 80107fc:	20002d08 	.word	0x20002d08

08010800 <lv_task_set_period>:
 * Set new period for a lv_task
 * @param task pointer to a lv_task
 * @param period the new period
 */
void lv_task_set_period(lv_task_t * task, uint32_t period)
{
 8010800:	b480      	push	{r7}
 8010802:	b083      	sub	sp, #12
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
    task->period = period;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	683a      	ldr	r2, [r7, #0]
 801080e:	601a      	str	r2, [r3, #0]
}
 8010810:	bf00      	nop
 8010812:	370c      	adds	r7, #12
 8010814:	46bd      	mov	sp, r7
 8010816:	bc80      	pop	{r7}
 8010818:	4770      	bx	lr

0801081a <lv_task_ready>:
/**
 * Make a lv_task ready. It will not wait its period.
 * @param task pointer to a lv_task.
 */
void lv_task_ready(lv_task_t * task)
{
 801081a:	b580      	push	{r7, lr}
 801081c:	b082      	sub	sp, #8
 801081e:	af00      	add	r7, sp, #0
 8010820:	6078      	str	r0, [r7, #4]
    task->last_run = lv_tick_get() - task->period - 1;
 8010822:	f7fe fb8f 	bl	800ef44 <lv_tick_get>
 8010826:	4602      	mov	r2, r0
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	1ad3      	subs	r3, r2, r3
 801082e:	1e5a      	subs	r2, r3, #1
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	605a      	str	r2, [r3, #4]
}
 8010834:	bf00      	nop
 8010836:	3708      	adds	r7, #8
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <lv_task_enable>:
/**
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
 801083c:	b480      	push	{r7}
 801083e:	b083      	sub	sp, #12
 8010840:	af00      	add	r7, sp, #0
 8010842:	4603      	mov	r3, r0
 8010844:	71fb      	strb	r3, [r7, #7]
    lv_task_run = en;
 8010846:	4a04      	ldr	r2, [pc, #16]	@ (8010858 <lv_task_enable+0x1c>)
 8010848:	79fb      	ldrb	r3, [r7, #7]
 801084a:	7013      	strb	r3, [r2, #0]
}
 801084c:	bf00      	nop
 801084e:	370c      	adds	r7, #12
 8010850:	46bd      	mov	sp, r7
 8010852:	bc80      	pop	{r7}
 8010854:	4770      	bx	lr
 8010856:	bf00      	nop
 8010858:	2000ad6c 	.word	0x2000ad6c

0801085c <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b084      	sub	sp, #16
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
    bool exec = false;
 8010864:	2300      	movs	r3, #0
 8010866:	73fb      	strb	r3, [r7, #15]

    /*Execute if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	685b      	ldr	r3, [r3, #4]
 801086c:	4618      	mov	r0, r3
 801086e:	f7fe fb70 	bl	800ef52 <lv_tick_elaps>
 8010872:	60b8      	str	r0, [r7, #8]
    if(elp >= task->period) {
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	68ba      	ldr	r2, [r7, #8]
 801087a:	429a      	cmp	r2, r3
 801087c:	d325      	bcc.n	80108ca <lv_task_exec+0x6e>
        task->last_run = lv_tick_get();
 801087e:	f7fe fb61 	bl	800ef44 <lv_tick_get>
 8010882:	4602      	mov	r2, r0
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	605a      	str	r2, [r3, #4]
        task_deleted   = false;
 8010888:	4b12      	ldr	r3, [pc, #72]	@ (80108d4 <lv_task_exec+0x78>)
 801088a:	2200      	movs	r2, #0
 801088c:	701a      	strb	r2, [r3, #0]
        task_created   = false;
 801088e:	4b12      	ldr	r3, [pc, #72]	@ (80108d8 <lv_task_exec+0x7c>)
 8010890:	2200      	movs	r2, #0
 8010892:	701a      	strb	r2, [r3, #0]
        if(task->task_cb) task->task_cb(task);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	689b      	ldr	r3, [r3, #8]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d003      	beq.n	80108a4 <lv_task_exec+0x48>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	689b      	ldr	r3, [r3, #8]
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	4798      	blx	r3

        /*Delete if it was a one shot lv_task*/
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
 80108a4:	4b0b      	ldr	r3, [pc, #44]	@ (80108d4 <lv_task_exec+0x78>)
 80108a6:	781b      	ldrb	r3, [r3, #0]
 80108a8:	f083 0301 	eor.w	r3, r3, #1
 80108ac:	b2db      	uxtb	r3, r3
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d009      	beq.n	80108c6 <lv_task_exec+0x6a>
            if(task->once != 0) {
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	7c1b      	ldrb	r3, [r3, #16]
 80108b6:	f003 0308 	and.w	r3, r3, #8
 80108ba:	b2db      	uxtb	r3, r3
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d002      	beq.n	80108c6 <lv_task_exec+0x6a>
                lv_task_del(task);
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f7ff ff35 	bl	8010730 <lv_task_del>
            }
        }
        exec = true;
 80108c6:	2301      	movs	r3, #1
 80108c8:	73fb      	strb	r3, [r7, #15]
    }

    return exec;
 80108ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3710      	adds	r7, #16
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	2000ad6e 	.word	0x2000ad6e
 80108d8:	2000ad6f 	.word	0x2000ad6f

080108dc <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
 80108dc:	b480      	push	{r7}
 80108de:	b083      	sub	sp, #12
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	7a1b      	ldrb	r3, [r3, #8]
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	370c      	adds	r7, #12
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bc80      	pop	{r7}
 80108f0:	4770      	bx	lr

080108f2 <lv_txt_get_size>:
 * @param max_width max with of the text (break the lines to fit this size) Set CORD_MAX to avoid
 * line breaks
 */
void lv_txt_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, lv_coord_t letter_space,
                     lv_coord_t line_space, lv_coord_t max_width, lv_txt_flag_t flag)
{
 80108f2:	b580      	push	{r7, lr}
 80108f4:	b08a      	sub	sp, #40	@ 0x28
 80108f6:	af02      	add	r7, sp, #8
 80108f8:	60f8      	str	r0, [r7, #12]
 80108fa:	60b9      	str	r1, [r7, #8]
 80108fc:	607a      	str	r2, [r7, #4]
 80108fe:	807b      	strh	r3, [r7, #2]
    size_res->x = 0;
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	2200      	movs	r2, #0
 8010904:	801a      	strh	r2, [r3, #0]
    size_res->y = 0;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	2200      	movs	r2, #0
 801090a:	805a      	strh	r2, [r3, #2]

    if(text == NULL) return;
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	2b00      	cmp	r3, #0
 8010910:	f000 809a 	beq.w	8010a48 <lv_txt_get_size+0x156>
    if(font == NULL) return;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2b00      	cmp	r3, #0
 8010918:	f000 8098 	beq.w	8010a4c <lv_txt_get_size+0x15a>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 801091c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010920:	f003 0302 	and.w	r3, r3, #2
 8010924:	2b00      	cmp	r3, #0
 8010926:	d002      	beq.n	801092e <lv_txt_get_size+0x3c>
 8010928:	f647 4318 	movw	r3, #31768	@ 0x7c18
 801092c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    uint32_t line_start     = 0;
 801092e:	2300      	movs	r3, #0
 8010930:	61fb      	str	r3, [r7, #28]
    uint32_t new_line_start = 0;
 8010932:	2300      	movs	r3, #0
 8010934:	61bb      	str	r3, [r7, #24]
    lv_coord_t act_line_length;
    uint8_t letter_height = lv_font_get_line_height(font);
 8010936:	6878      	ldr	r0, [r7, #4]
 8010938:	f7ff ffd0 	bl	80108dc <lv_font_get_line_height>
 801093c:	4603      	mov	r3, r0
 801093e:	75fb      	strb	r3, [r7, #23]

    /*Calc. the height and longest line*/
    while(text[line_start] != '\0') {
 8010940:	e048      	b.n	80109d4 <lv_txt_get_size+0xe2>
        new_line_start += lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
 8010942:	68ba      	ldr	r2, [r7, #8]
 8010944:	69fb      	ldr	r3, [r7, #28]
 8010946:	18d0      	adds	r0, r2, r3
 8010948:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 801094c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010950:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010954:	9300      	str	r3, [sp, #0]
 8010956:	460b      	mov	r3, r1
 8010958:	6879      	ldr	r1, [r7, #4]
 801095a:	f000 f87b 	bl	8010a54 <lv_txt_get_next_line>
 801095e:	4603      	mov	r3, r0
 8010960:	461a      	mov	r2, r3
 8010962:	69bb      	ldr	r3, [r7, #24]
 8010964:	4413      	add	r3, r2
 8010966:	61bb      	str	r3, [r7, #24]
        size_res->y += letter_height;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801096e:	b29a      	uxth	r2, r3
 8010970:	7dfb      	ldrb	r3, [r7, #23]
 8010972:	b29b      	uxth	r3, r3
 8010974:	4413      	add	r3, r2
 8010976:	b29b      	uxth	r3, r3
 8010978:	b21a      	sxth	r2, r3
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	805a      	strh	r2, [r3, #2]
        size_res->y += line_space;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010984:	b29a      	uxth	r2, r3
 8010986:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010988:	4413      	add	r3, r2
 801098a:	b29b      	uxth	r3, r3
 801098c:	b21a      	sxth	r2, r3
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	805a      	strh	r2, [r3, #2]

        /*Calculate the the longest line*/
        act_line_length = lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space, flag);
 8010992:	68ba      	ldr	r2, [r7, #8]
 8010994:	69fb      	ldr	r3, [r7, #28]
 8010996:	18d0      	adds	r0, r2, r3
 8010998:	69bb      	ldr	r3, [r7, #24]
 801099a:	b29a      	uxth	r2, r3
 801099c:	69fb      	ldr	r3, [r7, #28]
 801099e:	b29b      	uxth	r3, r3
 80109a0:	1ad3      	subs	r3, r2, r3
 80109a2:	b299      	uxth	r1, r3
 80109a4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80109a8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80109ac:	9300      	str	r3, [sp, #0]
 80109ae:	4613      	mov	r3, r2
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	f000 f903 	bl	8010bbc <lv_txt_get_width>
 80109b6:	4603      	mov	r3, r0
 80109b8:	82bb      	strh	r3, [r7, #20]

        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80109c0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80109c4:	4293      	cmp	r3, r2
 80109c6:	bfb8      	it	lt
 80109c8:	4613      	movlt	r3, r2
 80109ca:	b21a      	sxth	r2, r3
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	801a      	strh	r2, [r3, #0]
        line_start  = new_line_start;
 80109d0:	69bb      	ldr	r3, [r7, #24]
 80109d2:	61fb      	str	r3, [r7, #28]
    while(text[line_start] != '\0') {
 80109d4:	68ba      	ldr	r2, [r7, #8]
 80109d6:	69fb      	ldr	r3, [r7, #28]
 80109d8:	4413      	add	r3, r2
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d1b0      	bne.n	8010942 <lv_txt_get_size+0x50>
    }

    /*Ma ke the text one line taller if the last character is '\n' or '\r'*/
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
 80109e0:	69fb      	ldr	r3, [r7, #28]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d01b      	beq.n	8010a1e <lv_txt_get_size+0x12c>
 80109e6:	69fb      	ldr	r3, [r7, #28]
 80109e8:	3b01      	subs	r3, #1
 80109ea:	68ba      	ldr	r2, [r7, #8]
 80109ec:	4413      	add	r3, r2
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	2b0a      	cmp	r3, #10
 80109f2:	d006      	beq.n	8010a02 <lv_txt_get_size+0x110>
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	3b01      	subs	r3, #1
 80109f8:	68ba      	ldr	r2, [r7, #8]
 80109fa:	4413      	add	r3, r2
 80109fc:	781b      	ldrb	r3, [r3, #0]
 80109fe:	2b0d      	cmp	r3, #13
 8010a00:	d10d      	bne.n	8010a1e <lv_txt_get_size+0x12c>
        size_res->y += letter_height + line_space;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010a08:	b29a      	uxth	r2, r3
 8010a0a:	7dfb      	ldrb	r3, [r7, #23]
 8010a0c:	b299      	uxth	r1, r3
 8010a0e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010a10:	440b      	add	r3, r1
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	4413      	add	r3, r2
 8010a16:	b29b      	uxth	r3, r3
 8010a18:	b21a      	sxth	r2, r3
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	805a      	strh	r2, [r3, #2]
    }

    /*Correction with the last line space or set the height manually if the text is empty*/
    if(size_res->y == 0)
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d104      	bne.n	8010a32 <lv_txt_get_size+0x140>
        size_res->y = letter_height;
 8010a28:	7dfb      	ldrb	r3, [r7, #23]
 8010a2a:	b21a      	sxth	r2, r3
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	805a      	strh	r2, [r3, #2]
 8010a30:	e00d      	b.n	8010a4e <lv_txt_get_size+0x15c>
    else
        size_res->y -= line_space;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010a38:	b29a      	uxth	r2, r3
 8010a3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010a3c:	1ad3      	subs	r3, r2, r3
 8010a3e:	b29b      	uxth	r3, r3
 8010a40:	b21a      	sxth	r2, r3
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	805a      	strh	r2, [r3, #2]
 8010a46:	e002      	b.n	8010a4e <lv_txt_get_size+0x15c>
    if(text == NULL) return;
 8010a48:	bf00      	nop
 8010a4a:	e000      	b.n	8010a4e <lv_txt_get_size+0x15c>
    if(font == NULL) return;
 8010a4c:	bf00      	nop
}
 8010a4e:	3720      	adds	r7, #32
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}

08010a54 <lv_txt_get_next_line>:
 * @param flags settings for the text from 'txt_flag_type' enum
 * @return the index of the first char of the new line (in byte index not letter index. With UTF-8 they are different)
 */
uint16_t lv_txt_get_next_line(const char * txt, const lv_font_t * font, lv_coord_t letter_space, lv_coord_t max_width,
                              lv_txt_flag_t flag)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b08c      	sub	sp, #48	@ 0x30
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	60f8      	str	r0, [r7, #12]
 8010a5c:	60b9      	str	r1, [r7, #8]
 8010a5e:	4611      	mov	r1, r2
 8010a60:	461a      	mov	r2, r3
 8010a62:	460b      	mov	r3, r1
 8010a64:	80fb      	strh	r3, [r7, #6]
 8010a66:	4613      	mov	r3, r2
 8010a68:	80bb      	strh	r3, [r7, #4]
    if(txt == NULL) return 0;
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d101      	bne.n	8010a74 <lv_txt_get_next_line+0x20>
 8010a70:	2300      	movs	r3, #0
 8010a72:	e09a      	b.n	8010baa <lv_txt_get_next_line+0x156>
    if(font == NULL) return 0;
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d101      	bne.n	8010a7e <lv_txt_get_next_line+0x2a>
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	e095      	b.n	8010baa <lv_txt_get_next_line+0x156>

    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
 8010a7e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8010a82:	f003 0302 	and.w	r3, r3, #2
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d002      	beq.n	8010a90 <lv_txt_get_next_line+0x3c>
 8010a8a:	f647 4318 	movw	r3, #31768	@ 0x7c18
 8010a8e:	80bb      	strh	r3, [r7, #4]

    uint32_t i                   = 0;
 8010a90:	2300      	movs	r3, #0
 8010a92:	61bb      	str	r3, [r7, #24]
    uint32_t i_next              = 0;
 8010a94:	2300      	movs	r3, #0
 8010a96:	617b      	str	r3, [r7, #20]
    lv_coord_t cur_w             = 0;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint32_t last_break          = NO_BREAK_FOUND;
 8010a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8010aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	74fb      	strb	r3, [r7, #19]
    uint32_t letter_w;
    uint32_t letter      = 0;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	623b      	str	r3, [r7, #32]
    uint32_t letter_next = 0;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	627b      	str	r3, [r7, #36]	@ 0x24

    letter_next = lv_txt_encoded_next(txt, &i_next);
 8010aae:	4b41      	ldr	r3, [pc, #260]	@ (8010bb4 <lv_txt_get_next_line+0x160>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	f107 0214 	add.w	r2, r7, #20
 8010ab6:	4611      	mov	r1, r2
 8010ab8:	68f8      	ldr	r0, [r7, #12]
 8010aba:	4798      	blx	r3
 8010abc:	6278      	str	r0, [r7, #36]	@ 0x24

    while(txt[i] != '\0') {
 8010abe:	e06c      	b.n	8010b9a <lv_txt_get_next_line+0x146>
        letter      = letter_next;
 8010ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac2:	623b      	str	r3, [r7, #32]
        i           = i_next;
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	61bb      	str	r3, [r7, #24]
        letter_next = lv_txt_encoded_next(txt, &i_next);
 8010ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8010bb4 <lv_txt_get_next_line+0x160>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f107 0214 	add.w	r2, r7, #20
 8010ad0:	4611      	mov	r1, r2
 8010ad2:	68f8      	ldr	r0, [r7, #12]
 8010ad4:	4798      	blx	r3
 8010ad6:	6278      	str	r0, [r7, #36]	@ 0x24

        /*Handle the recolor command*/
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8010ad8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8010adc:	f003 0301 	and.w	r3, r3, #1
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d008      	beq.n	8010af6 <lv_txt_get_next_line+0xa2>
            if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8010ae4:	f107 0313 	add.w	r3, r7, #19
 8010ae8:	6a39      	ldr	r1, [r7, #32]
 8010aea:	4618      	mov	r0, r3
 8010aec:	f000 f8d0 	bl	8010c90 <lv_txt_is_cmd>
 8010af0:	4603      	mov	r3, r0
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d150      	bne.n	8010b98 <lv_txt_get_next_line+0x144>
                continue; /*Skip the letter is it is part of a command*/
            }
        }

        /*Check for new line chars*/
        if(letter == '\n' || letter == '\r') {
 8010af6:	6a3b      	ldr	r3, [r7, #32]
 8010af8:	2b0a      	cmp	r3, #10
 8010afa:	d002      	beq.n	8010b02 <lv_txt_get_next_line+0xae>
 8010afc:	6a3b      	ldr	r3, [r7, #32]
 8010afe:	2b0d      	cmp	r3, #13
 8010b00:	d10b      	bne.n	8010b1a <lv_txt_get_next_line+0xc6>
            /*Return with the first letter of the next line*/
            if(letter == '\r' && letter_next == '\n')
 8010b02:	6a3b      	ldr	r3, [r7, #32]
 8010b04:	2b0d      	cmp	r3, #13
 8010b06:	d105      	bne.n	8010b14 <lv_txt_get_next_line+0xc0>
 8010b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b0a:	2b0a      	cmp	r3, #10
 8010b0c:	d102      	bne.n	8010b14 <lv_txt_get_next_line+0xc0>
                return i_next;
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	e04a      	b.n	8010baa <lv_txt_get_next_line+0x156>
            else
                return i;
 8010b14:	69bb      	ldr	r3, [r7, #24]
 8010b16:	b29b      	uxth	r3, r3
 8010b18:	e047      	b.n	8010baa <lv_txt_get_next_line+0x156>
        } else { /*Check the actual length*/
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
 8010b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010b1c:	6a39      	ldr	r1, [r7, #32]
 8010b1e:	68b8      	ldr	r0, [r7, #8]
 8010b20:	f7fd fc7a 	bl	800e418 <lv_font_get_glyph_width>
 8010b24:	4603      	mov	r3, r0
 8010b26:	61fb      	str	r3, [r7, #28]
            cur_w += letter_w;
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	b29a      	uxth	r2, r3
 8010b2c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010b2e:	4413      	add	r3, r2
 8010b30:	b29b      	uxth	r3, r3
 8010b32:	85fb      	strh	r3, [r7, #46]	@ 0x2e

            /*If the txt is too long then finish, this is the line end*/
            if(cur_w > max_width) {
 8010b34:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8010b38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	dd1a      	ble.n	8010b76 <lv_txt_get_next_line+0x122>
                /*If a break character was already found break there*/
                if(last_break != NO_BREAK_FOUND) {
 8010b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b46:	d002      	beq.n	8010b4e <lv_txt_get_next_line+0xfa>
                    i = last_break;
 8010b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b4a:	61bb      	str	r3, [r7, #24]
 8010b4c:	e006      	b.n	8010b5c <lv_txt_get_next_line+0x108>
                } else {
                    /* Now this character is out of the area so it will be first character of the next line*/
                    /* But 'i' already points to the next character (because of lv_txt_utf8_next) step beck one*/
                    lv_txt_encoded_prev(txt, &i);
 8010b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8010bb8 <lv_txt_get_next_line+0x164>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	f107 0218 	add.w	r2, r7, #24
 8010b56:	4611      	mov	r1, r2
 8010b58:	68f8      	ldr	r0, [r7, #12]
 8010b5a:	4798      	blx	r3
                }

                /* Do not let to return without doing nothing.
                 * Find at least one character (Avoid infinite loop )*/
                if(i == 0) lv_txt_encoded_next(txt, &i);
 8010b5c:	69bb      	ldr	r3, [r7, #24]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d106      	bne.n	8010b70 <lv_txt_get_next_line+0x11c>
 8010b62:	4b14      	ldr	r3, [pc, #80]	@ (8010bb4 <lv_txt_get_next_line+0x160>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f107 0218 	add.w	r2, r7, #24
 8010b6a:	4611      	mov	r1, r2
 8010b6c:	68f8      	ldr	r0, [r7, #12]
 8010b6e:	4798      	blx	r3

                return i;
 8010b70:	69bb      	ldr	r3, [r7, #24]
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	e019      	b.n	8010baa <lv_txt_get_next_line+0x156>
            }
            /*If this char still can fit to this line then check if
             * txt can be broken here later */
            else if(is_break_char(letter)) {
 8010b76:	6a38      	ldr	r0, [r7, #32]
 8010b78:	f000 fb9a 	bl	80112b0 <is_break_char>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d001      	beq.n	8010b86 <lv_txt_get_next_line+0x132>
                last_break = i; /*Save the first char index after break*/
 8010b82:	69bb      	ldr	r3, [r7, #24]
 8010b84:	62bb      	str	r3, [r7, #40]	@ 0x28
            }
        }

        if(letter_w > 0) {
 8010b86:	69fb      	ldr	r3, [r7, #28]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d006      	beq.n	8010b9a <lv_txt_get_next_line+0x146>
            cur_w += letter_space;
 8010b8c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010b8e:	88fb      	ldrh	r3, [r7, #6]
 8010b90:	4413      	add	r3, r2
 8010b92:	b29b      	uxth	r3, r3
 8010b94:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8010b96:	e000      	b.n	8010b9a <lv_txt_get_next_line+0x146>
                continue; /*Skip the letter is it is part of a command*/
 8010b98:	bf00      	nop
    while(txt[i] != '\0') {
 8010b9a:	69bb      	ldr	r3, [r7, #24]
 8010b9c:	68fa      	ldr	r2, [r7, #12]
 8010b9e:	4413      	add	r3, r2
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d18c      	bne.n	8010ac0 <lv_txt_get_next_line+0x6c>
        }
    }

    return i;
 8010ba6:	69bb      	ldr	r3, [r7, #24]
 8010ba8:	b29b      	uxth	r3, r3
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3730      	adds	r7, #48	@ 0x30
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	20000ca0 	.word	0x20000ca0
 8010bb8:	20000ca4 	.word	0x20000ca4

08010bbc <lv_txt_get_width>:
 * @param flags settings for the text from 'txt_flag_t' enum
 * @return length of a char_num long text
 */
lv_coord_t lv_txt_get_width(const char * txt, uint16_t length, const lv_font_t * font, lv_coord_t letter_space,
                            lv_txt_flag_t flag)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b08a      	sub	sp, #40	@ 0x28
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	60f8      	str	r0, [r7, #12]
 8010bc4:	607a      	str	r2, [r7, #4]
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	460b      	mov	r3, r1
 8010bca:	817b      	strh	r3, [r7, #10]
 8010bcc:	4613      	mov	r3, r2
 8010bce:	813b      	strh	r3, [r7, #8]
    if(txt == NULL) return 0;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d101      	bne.n	8010bda <lv_txt_get_width+0x1e>
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	e054      	b.n	8010c84 <lv_txt_get_width+0xc8>
    if(font == NULL) return 0;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d101      	bne.n	8010be4 <lv_txt_get_width+0x28>
 8010be0:	2300      	movs	r3, #0
 8010be2:	e04f      	b.n	8010c84 <lv_txt_get_width+0xc8>

    uint32_t i                   = 0;
 8010be4:	2300      	movs	r3, #0
 8010be6:	617b      	str	r3, [r7, #20]
    lv_coord_t width             = 0;
 8010be8:	2300      	movs	r3, #0
 8010bea:	84fb      	strh	r3, [r7, #38]	@ 0x26
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8010bec:	2300      	movs	r3, #0
 8010bee:	74fb      	strb	r3, [r7, #19]
    uint32_t letter;
    uint32_t letter_next;

    if(length != 0) {
 8010bf0:	897b      	ldrh	r3, [r7, #10]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d044      	beq.n	8010c80 <lv_txt_get_width+0xc4>
        while(i < length) {
 8010bf6:	e036      	b.n	8010c66 <lv_txt_get_width+0xaa>
            letter      = lv_txt_encoded_next(txt, &i);
 8010bf8:	4b24      	ldr	r3, [pc, #144]	@ (8010c8c <lv_txt_get_width+0xd0>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	f107 0214 	add.w	r2, r7, #20
 8010c00:	4611      	mov	r1, r2
 8010c02:	68f8      	ldr	r0, [r7, #12]
 8010c04:	4798      	blx	r3
 8010c06:	6238      	str	r0, [r7, #32]
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 8010c08:	4b20      	ldr	r3, [pc, #128]	@ (8010c8c <lv_txt_get_width+0xd0>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	697a      	ldr	r2, [r7, #20]
 8010c0e:	68f9      	ldr	r1, [r7, #12]
 8010c10:	440a      	add	r2, r1
 8010c12:	2100      	movs	r1, #0
 8010c14:	4610      	mov	r0, r2
 8010c16:	4798      	blx	r3
 8010c18:	61f8      	str	r0, [r7, #28]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 8010c1a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8010c1e:	f003 0301 	and.w	r3, r3, #1
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d008      	beq.n	8010c38 <lv_txt_get_width+0x7c>
                if(lv_txt_is_cmd(&cmd_state, letter) != false) {
 8010c26:	f107 0313 	add.w	r3, r7, #19
 8010c2a:	6a39      	ldr	r1, [r7, #32]
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f000 f82f 	bl	8010c90 <lv_txt_is_cmd>
 8010c32:	4603      	mov	r3, r0
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d115      	bne.n	8010c64 <lv_txt_get_width+0xa8>
                    continue;
                }
            }

            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
 8010c38:	69fa      	ldr	r2, [r7, #28]
 8010c3a:	6a39      	ldr	r1, [r7, #32]
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f7fd fbeb 	bl	800e418 <lv_font_get_glyph_width>
 8010c42:	4603      	mov	r3, r0
 8010c44:	837b      	strh	r3, [r7, #26]
            if(char_width > 0) {
 8010c46:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	dd0b      	ble.n	8010c66 <lv_txt_get_width+0xaa>
                width += char_width;
 8010c4e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010c50:	8b7b      	ldrh	r3, [r7, #26]
 8010c52:	4413      	add	r3, r2
 8010c54:	b29b      	uxth	r3, r3
 8010c56:	84fb      	strh	r3, [r7, #38]	@ 0x26
                width += letter_space;
 8010c58:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010c5a:	893b      	ldrh	r3, [r7, #8]
 8010c5c:	4413      	add	r3, r2
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010c62:	e000      	b.n	8010c66 <lv_txt_get_width+0xaa>
                    continue;
 8010c64:	bf00      	nop
        while(i < length) {
 8010c66:	897a      	ldrh	r2, [r7, #10]
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d8c4      	bhi.n	8010bf8 <lv_txt_get_width+0x3c>
            }
        }

        if(width > 0) {
 8010c6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	dd04      	ble.n	8010c80 <lv_txt_get_width+0xc4>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
 8010c76:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010c78:	893b      	ldrh	r3, [r7, #8]
 8010c7a:	1ad3      	subs	r3, r2, r3
 8010c7c:	b29b      	uxth	r3, r3
 8010c7e:	84fb      	strh	r3, [r7, #38]	@ 0x26
                                      aligned */
        }
    }

    return width;
 8010c80:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3728      	adds	r7, #40	@ 0x28
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	20000ca0 	.word	0x20000ca0

08010c90 <lv_txt_is_cmd>:
 * @param c the current character
 * @return true: the character is part of a command and should not be written,
 *         false: the character should be written
 */
bool lv_txt_is_cmd(lv_txt_cmd_state_t * state, uint32_t c)
{
 8010c90:	b480      	push	{r7}
 8010c92:	b085      	sub	sp, #20
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	6039      	str	r1, [r7, #0]
    bool ret = false;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	73fb      	strb	r3, [r7, #15]

    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
 8010c9e:	2323      	movs	r3, #35	@ 0x23
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d11a      	bne.n	8010cde <lv_txt_is_cmd+0x4e>
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d105      	bne.n	8010cbc <lv_txt_is_cmd+0x2c>
            *state = LV_TXT_CMD_STATE_PAR;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	701a      	strb	r2, [r3, #0]
            ret    = true;
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	73fb      	strb	r3, [r7, #15]
 8010cba:	e010      	b.n	8010cde <lv_txt_is_cmd+0x4e>
        }
        /*Other start char in parameter is escaped cmd. char */
        else if(*state == LV_TXT_CMD_STATE_PAR) {
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	2b01      	cmp	r3, #1
 8010cc2:	d103      	bne.n	8010ccc <lv_txt_is_cmd+0x3c>
            *state = LV_TXT_CMD_STATE_WAIT;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	701a      	strb	r2, [r3, #0]
 8010cca:	e008      	b.n	8010cde <lv_txt_is_cmd+0x4e>
        }
        /*Command end */
        else if(*state == LV_TXT_CMD_STATE_IN) {
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	781b      	ldrb	r3, [r3, #0]
 8010cd0:	2b02      	cmp	r3, #2
 8010cd2:	d104      	bne.n	8010cde <lv_txt_is_cmd+0x4e>
            *state = LV_TXT_CMD_STATE_WAIT;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	701a      	strb	r2, [r3, #0]
            ret    = true;
 8010cda:	2301      	movs	r3, #1
 8010cdc:	73fb      	strb	r3, [r7, #15]
        }
    }

    /*Skip the color parameter and wait the space after it*/
    if(*state == LV_TXT_CMD_STATE_PAR) {
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	781b      	ldrb	r3, [r3, #0]
 8010ce2:	2b01      	cmp	r3, #1
 8010ce4:	d107      	bne.n	8010cf6 <lv_txt_is_cmd+0x66>
        if(c == ' ') {
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	2b20      	cmp	r3, #32
 8010cea:	d102      	bne.n	8010cf2 <lv_txt_is_cmd+0x62>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2202      	movs	r2, #2
 8010cf0:	701a      	strb	r2, [r3, #0]
        }
        ret = true;
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	73fb      	strb	r3, [r7, #15]
    }

    return ret;
 8010cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3714      	adds	r7, #20
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bc80      	pop	{r7}
 8010d00:	4770      	bx	lr
	...

08010d04 <lv_txt_ins>:
 * @param pos position to insert. Expressed in character index and not byte index (Different in
 * UTF-8) 0: before the original text, 1: after the first char etc.
 * @param ins_txt text to insert
 */
void lv_txt_ins(char * txt_buf, uint32_t pos, const char * ins_txt)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b088      	sub	sp, #32
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	607a      	str	r2, [r7, #4]
    uint32_t old_len = strlen(txt_buf);
 8010d10:	68f8      	ldr	r0, [r7, #12]
 8010d12:	f7ef fa91 	bl	8000238 <strlen>
 8010d16:	61b8      	str	r0, [r7, #24]
    uint32_t ins_len = strlen(ins_txt);
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f7ef fa8d 	bl	8000238 <strlen>
 8010d1e:	6178      	str	r0, [r7, #20]
    uint32_t new_len = ins_len + old_len;
 8010d20:	697a      	ldr	r2, [r7, #20]
 8010d22:	69bb      	ldr	r3, [r7, #24]
 8010d24:	4413      	add	r3, r2
 8010d26:	613b      	str	r3, [r7, #16]
    pos              = lv_txt_encoded_get_byte_id(txt_buf, pos); /*Convert to byte index instead of letter index*/
 8010d28:	4b13      	ldr	r3, [pc, #76]	@ (8010d78 <lv_txt_ins+0x74>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	68b9      	ldr	r1, [r7, #8]
 8010d2e:	68f8      	ldr	r0, [r7, #12]
 8010d30:	4798      	blx	r3
 8010d32:	60b8      	str	r0, [r7, #8]

    /*Copy the second part into the end to make place to text to insert*/
    uint32_t i;
    for(i = new_len; i >= pos + ins_len; i--) {
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	61fb      	str	r3, [r7, #28]
 8010d38:	e00c      	b.n	8010d54 <lv_txt_ins+0x50>
        txt_buf[i] = txt_buf[i - ins_len];
 8010d3a:	69fa      	ldr	r2, [r7, #28]
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	1ad3      	subs	r3, r2, r3
 8010d40:	68fa      	ldr	r2, [r7, #12]
 8010d42:	441a      	add	r2, r3
 8010d44:	68f9      	ldr	r1, [r7, #12]
 8010d46:	69fb      	ldr	r3, [r7, #28]
 8010d48:	440b      	add	r3, r1
 8010d4a:	7812      	ldrb	r2, [r2, #0]
 8010d4c:	701a      	strb	r2, [r3, #0]
    for(i = new_len; i >= pos + ins_len; i--) {
 8010d4e:	69fb      	ldr	r3, [r7, #28]
 8010d50:	3b01      	subs	r3, #1
 8010d52:	61fb      	str	r3, [r7, #28]
 8010d54:	68ba      	ldr	r2, [r7, #8]
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	4413      	add	r3, r2
 8010d5a:	69fa      	ldr	r2, [r7, #28]
 8010d5c:	429a      	cmp	r2, r3
 8010d5e:	d2ec      	bcs.n	8010d3a <lv_txt_ins+0x36>
    }

    /* Copy the text into the new space*/
    memcpy(txt_buf + pos, ins_txt, ins_len);
 8010d60:	68fa      	ldr	r2, [r7, #12]
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	4413      	add	r3, r2
 8010d66:	697a      	ldr	r2, [r7, #20]
 8010d68:	6879      	ldr	r1, [r7, #4]
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f00a fe3d 	bl	801b9ea <memcpy>
}
 8010d70:	bf00      	nop
 8010d72:	3720      	adds	r7, #32
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	20000ca8 	.word	0x20000ca8

08010d7c <lv_txt_cut>:
 * @param pos position where to start the deleting (0: before the first char, 1: after the first
 * char etc.)
 * @param len number of characters to delete
 */
void lv_txt_cut(char * txt, uint32_t pos, uint32_t len)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b086      	sub	sp, #24
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	60f8      	str	r0, [r7, #12]
 8010d84:	60b9      	str	r1, [r7, #8]
 8010d86:	607a      	str	r2, [r7, #4]

    uint32_t old_len = strlen(txt);
 8010d88:	68f8      	ldr	r0, [r7, #12]
 8010d8a:	f7ef fa55 	bl	8000238 <strlen>
 8010d8e:	6138      	str	r0, [r7, #16]

    pos = lv_txt_encoded_get_byte_id(txt, pos); /*Convert to byte index instead of letter index*/
 8010d90:	4b14      	ldr	r3, [pc, #80]	@ (8010de4 <lv_txt_cut+0x68>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	68b9      	ldr	r1, [r7, #8]
 8010d96:	68f8      	ldr	r0, [r7, #12]
 8010d98:	4798      	blx	r3
 8010d9a:	60b8      	str	r0, [r7, #8]
    len = lv_txt_encoded_get_byte_id(&txt[pos], len);
 8010d9c:	4b11      	ldr	r3, [pc, #68]	@ (8010de4 <lv_txt_cut+0x68>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	68f9      	ldr	r1, [r7, #12]
 8010da2:	68ba      	ldr	r2, [r7, #8]
 8010da4:	440a      	add	r2, r1
 8010da6:	6879      	ldr	r1, [r7, #4]
 8010da8:	4610      	mov	r0, r2
 8010daa:	4798      	blx	r3
 8010dac:	6078      	str	r0, [r7, #4]

    /*Copy the second part into the end to make place to text to insert*/
    uint32_t i;
    for(i = pos; i <= old_len - len; i++) {
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	617b      	str	r3, [r7, #20]
 8010db2:	e00c      	b.n	8010dce <lv_txt_cut+0x52>
        txt[i] = txt[i + len];
 8010db4:	697a      	ldr	r2, [r7, #20]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	4413      	add	r3, r2
 8010dba:	68fa      	ldr	r2, [r7, #12]
 8010dbc:	441a      	add	r2, r3
 8010dbe:	68f9      	ldr	r1, [r7, #12]
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	440b      	add	r3, r1
 8010dc4:	7812      	ldrb	r2, [r2, #0]
 8010dc6:	701a      	strb	r2, [r3, #0]
    for(i = pos; i <= old_len - len; i++) {
 8010dc8:	697b      	ldr	r3, [r7, #20]
 8010dca:	3301      	adds	r3, #1
 8010dcc:	617b      	str	r3, [r7, #20]
 8010dce:	693a      	ldr	r2, [r7, #16]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	1ad3      	subs	r3, r2, r3
 8010dd4:	697a      	ldr	r2, [r7, #20]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d9ec      	bls.n	8010db4 <lv_txt_cut+0x38>
    }
}
 8010dda:	bf00      	nop
 8010ddc:	bf00      	nop
 8010dde:	3718      	adds	r7, #24
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}
 8010de4:	20000ca8 	.word	0x20000ca8

08010de8 <lv_txt_utf8_size>:
 * Give the size of an UTF-8 coded character
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
 8010de8:	b480      	push	{r7}
 8010dea:	b083      	sub	sp, #12
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
    if((str[0] & 0x80) == 0)
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	781b      	ldrb	r3, [r3, #0]
 8010df4:	b25b      	sxtb	r3, r3
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	db01      	blt.n	8010dfe <lv_txt_utf8_size+0x16>
        return 1;
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	e018      	b.n	8010e30 <lv_txt_utf8_size+0x48>
    else if((str[0] & 0xE0) == 0xC0)
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	781b      	ldrb	r3, [r3, #0]
 8010e02:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8010e06:	2bc0      	cmp	r3, #192	@ 0xc0
 8010e08:	d101      	bne.n	8010e0e <lv_txt_utf8_size+0x26>
        return 2;
 8010e0a:	2302      	movs	r3, #2
 8010e0c:	e010      	b.n	8010e30 <lv_txt_utf8_size+0x48>
    else if((str[0] & 0xF0) == 0xE0)
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	781b      	ldrb	r3, [r3, #0]
 8010e12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010e16:	2be0      	cmp	r3, #224	@ 0xe0
 8010e18:	d101      	bne.n	8010e1e <lv_txt_utf8_size+0x36>
        return 3;
 8010e1a:	2303      	movs	r3, #3
 8010e1c:	e008      	b.n	8010e30 <lv_txt_utf8_size+0x48>
    else if((str[0] & 0xF8) == 0xF0)
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	781b      	ldrb	r3, [r3, #0]
 8010e22:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8010e26:	2bf0      	cmp	r3, #240	@ 0xf0
 8010e28:	d101      	bne.n	8010e2e <lv_txt_utf8_size+0x46>
        return 4;
 8010e2a:	2304      	movs	r3, #4
 8010e2c:	e000      	b.n	8010e30 <lv_txt_utf8_size+0x48>
    return 1; /*If the char was invalid step tell it's 1 byte long*/
 8010e2e:	2301      	movs	r3, #1
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	370c      	adds	r7, #12
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bc80      	pop	{r7}
 8010e38:	4770      	bx	lr

08010e3a <lv_txt_unicode_to_utf8>:
 * Convert an Unicode letter to UTF-8.
 * @param letter_uni an Unicode letter
 * @return UTF-8 coded character in Little Endian to be compatible with C chars (e.g. 'Á', 'Ű')
 */
static uint32_t lv_txt_unicode_to_utf8(uint32_t letter_uni)
{
 8010e3a:	b480      	push	{r7}
 8010e3c:	b085      	sub	sp, #20
 8010e3e:	af00      	add	r7, sp, #0
 8010e40:	6078      	str	r0, [r7, #4]
    if(letter_uni < 128) return letter_uni;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2b7f      	cmp	r3, #127	@ 0x7f
 8010e46:	d801      	bhi.n	8010e4c <lv_txt_unicode_to_utf8+0x12>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	e06f      	b.n	8010f2c <lv_txt_unicode_to_utf8+0xf2>
    uint8_t bytes[4];

    if(letter_uni < 0x0800) {
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010e52:	d217      	bcs.n	8010e84 <lv_txt_unicode_to_utf8+0x4a>
        bytes[0] = ((letter_uni >> 6) & 0x1F) | 0xC0;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	099b      	lsrs	r3, r3, #6
 8010e58:	b2db      	uxtb	r3, r3
 8010e5a:	f003 031f 	and.w	r3, r3, #31
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8010e64:	b2db      	uxtb	r3, r3
 8010e66:	723b      	strb	r3, [r7, #8]
        bytes[1] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	b2db      	uxtb	r3, r3
 8010e6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010e70:	b2db      	uxtb	r3, r3
 8010e72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010e76:	b2db      	uxtb	r3, r3
 8010e78:	727b      	strb	r3, [r7, #9]
        bytes[2] = 0;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	72bb      	strb	r3, [r7, #10]
        bytes[3] = 0;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	72fb      	strb	r3, [r7, #11]
 8010e82:	e04e      	b.n	8010f22 <lv_txt_unicode_to_utf8+0xe8>
    } else if(letter_uni < 0x010000) {
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010e8a:	d21f      	bcs.n	8010ecc <lv_txt_unicode_to_utf8+0x92>
        bytes[0] = ((letter_uni >> 12) & 0x0F) | 0xE0;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	0b1b      	lsrs	r3, r3, #12
 8010e90:	b2db      	uxtb	r3, r3
 8010e92:	f003 030f 	and.w	r3, r3, #15
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	f063 031f 	orn	r3, r3, #31
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	723b      	strb	r3, [r7, #8]
        bytes[1] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	099b      	lsrs	r3, r3, #6
 8010ea4:	b2db      	uxtb	r3, r3
 8010ea6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010eaa:	b2db      	uxtb	r3, r3
 8010eac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010eb0:	b2db      	uxtb	r3, r3
 8010eb2:	727b      	strb	r3, [r7, #9]
        bytes[2] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	b2db      	uxtb	r3, r3
 8010eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010ebc:	b2db      	uxtb	r3, r3
 8010ebe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010ec2:	b2db      	uxtb	r3, r3
 8010ec4:	72bb      	strb	r3, [r7, #10]
        bytes[3] = 0;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	72fb      	strb	r3, [r7, #11]
 8010eca:	e02a      	b.n	8010f22 <lv_txt_unicode_to_utf8+0xe8>
    } else if(letter_uni < 0x110000) {
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8010ed2:	d226      	bcs.n	8010f22 <lv_txt_unicode_to_utf8+0xe8>
        bytes[0] = ((letter_uni >> 18) & 0x07) | 0xF0;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	0c9b      	lsrs	r3, r3, #18
 8010ed8:	b2db      	uxtb	r3, r3
 8010eda:	f003 0307 	and.w	r3, r3, #7
 8010ede:	b2db      	uxtb	r3, r3
 8010ee0:	f063 030f 	orn	r3, r3, #15
 8010ee4:	b2db      	uxtb	r3, r3
 8010ee6:	723b      	strb	r3, [r7, #8]
        bytes[1] = ((letter_uni >> 12) & 0x3F) | 0x80;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	0b1b      	lsrs	r3, r3, #12
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010ef2:	b2db      	uxtb	r3, r3
 8010ef4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010ef8:	b2db      	uxtb	r3, r3
 8010efa:	727b      	strb	r3, [r7, #9]
        bytes[2] = ((letter_uni >> 6) & 0x3F) | 0x80;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	099b      	lsrs	r3, r3, #6
 8010f00:	b2db      	uxtb	r3, r3
 8010f02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010f06:	b2db      	uxtb	r3, r3
 8010f08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010f0c:	b2db      	uxtb	r3, r3
 8010f0e:	72bb      	strb	r3, [r7, #10]
        bytes[3] = ((letter_uni >> 0) & 0x3F) | 0x80;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010f18:	b2db      	uxtb	r3, r3
 8010f1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010f1e:	b2db      	uxtb	r3, r3
 8010f20:	72fb      	strb	r3, [r7, #11]
    }

    uint32_t * res_p = (uint32_t *)bytes;
 8010f22:	f107 0308 	add.w	r3, r7, #8
 8010f26:	60fb      	str	r3, [r7, #12]
    return *res_p;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	681b      	ldr	r3, [r3, #0]
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3714      	adds	r7, #20
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bc80      	pop	{r7}
 8010f34:	4770      	bx	lr

08010f36 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
 8010f36:	b480      	push	{r7}
 8010f38:	b085      	sub	sp, #20
 8010f3a:	af00      	add	r7, sp, #0
 8010f3c:	6078      	str	r0, [r7, #4]
 8010f3e:	6039      	str	r1, [r7, #0]
     * 00000000 00000000 00000yyy yyxxxxxx -> 110yyyyy 10xxxxxx
     * 00000000 00000000 zzzzyyyy yyxxxxxx -> 1110zzzz 10yyyyyy 10xxxxxx
     * 00000000 000wwwzz zzzzyyyy yyxxxxxx -> 11110www 10zzzzzz 10yyyyyy 10xxxxxx
     * */

    uint32_t result = 0;
 8010f40:	2300      	movs	r3, #0
 8010f42:	60fb      	str	r3, [r7, #12]

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
 8010f44:	2300      	movs	r3, #0
 8010f46:	60bb      	str	r3, [r7, #8]
    if(i == NULL) i = &i_tmp;
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d102      	bne.n	8010f54 <lv_txt_utf8_next+0x1e>
 8010f4e:	f107 0308 	add.w	r3, r7, #8
 8010f52:	603b      	str	r3, [r7, #0]

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	687a      	ldr	r2, [r7, #4]
 8010f5a:	4413      	add	r3, r2
 8010f5c:	781b      	ldrb	r3, [r3, #0]
 8010f5e:	b25b      	sxtb	r3, r3
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	db0b      	blt.n	8010f7c <lv_txt_utf8_next+0x46>
        result = txt[*i];
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	687a      	ldr	r2, [r7, #4]
 8010f6a:	4413      	add	r3, r2
 8010f6c:	781b      	ldrb	r3, [r3, #0]
 8010f6e:	60fb      	str	r3, [r7, #12]
        (*i)++;
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	1c5a      	adds	r2, r3, #1
 8010f76:	683b      	ldr	r3, [r7, #0]
 8010f78:	601a      	str	r2, [r3, #0]
 8010f7a:	e0ea      	b.n	8011152 <lv_txt_utf8_next+0x21c>
    }
    /*Real UTF-8 decode*/
    else {
        /*2 bytes UTF-8 code*/
        if((txt[*i] & 0xE0) == 0xC0) {
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	4413      	add	r3, r2
 8010f84:	781b      	ldrb	r3, [r3, #0]
 8010f86:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8010f8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8010f8c:	d128      	bne.n	8010fe0 <lv_txt_utf8_next+0xaa>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	687a      	ldr	r2, [r7, #4]
 8010f94:	4413      	add	r3, r2
 8010f96:	781b      	ldrb	r3, [r3, #0]
 8010f98:	019b      	lsls	r3, r3, #6
 8010f9a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8010f9e:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	1c5a      	adds	r2, r3, #1
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	601a      	str	r2, [r3, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	687a      	ldr	r2, [r7, #4]
 8010fb0:	4413      	add	r3, r2
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8010fb8:	2b80      	cmp	r3, #128	@ 0x80
 8010fba:	d001      	beq.n	8010fc0 <lv_txt_utf8_next+0x8a>
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	e0c9      	b.n	8011154 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	4413      	add	r3, r2
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010fce:	68fa      	ldr	r2, [r7, #12]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	1c5a      	adds	r2, r3, #1
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	601a      	str	r2, [r3, #0]
 8010fde:	e0b8      	b.n	8011152 <lv_txt_utf8_next+0x21c>
        }
        /*3 bytes UTF-8 code*/
        else if((txt[*i] & 0xF0) == 0xE0) {
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	687a      	ldr	r2, [r7, #4]
 8010fe6:	4413      	add	r3, r2
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010fee:	2be0      	cmp	r3, #224	@ 0xe0
 8010ff0:	d142      	bne.n	8011078 <lv_txt_utf8_next+0x142>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	687a      	ldr	r2, [r7, #4]
 8010ff8:	4413      	add	r3, r2
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	031b      	lsls	r3, r3, #12
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	1c5a      	adds	r2, r3, #1
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	687a      	ldr	r2, [r7, #4]
 8011012:	4413      	add	r3, r2
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801101a:	2b80      	cmp	r3, #128	@ 0x80
 801101c:	d001      	beq.n	8011022 <lv_txt_utf8_next+0xec>
 801101e:	2300      	movs	r3, #0
 8011020:	e098      	b.n	8011154 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	687a      	ldr	r2, [r7, #4]
 8011028:	4413      	add	r3, r2
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	019b      	lsls	r3, r3, #6
 801102e:	f403 637c 	and.w	r3, r3, #4032	@ 0xfc0
 8011032:	68fa      	ldr	r2, [r7, #12]
 8011034:	4413      	add	r3, r2
 8011036:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	1c5a      	adds	r2, r3, #1
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	687a      	ldr	r2, [r7, #4]
 8011048:	4413      	add	r3, r2
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011050:	2b80      	cmp	r3, #128	@ 0x80
 8011052:	d001      	beq.n	8011058 <lv_txt_utf8_next+0x122>
 8011054:	2300      	movs	r3, #0
 8011056:	e07d      	b.n	8011154 <lv_txt_utf8_next+0x21e>
            result += (txt[*i] & 0x3F);
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	687a      	ldr	r2, [r7, #4]
 801105e:	4413      	add	r3, r2
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011066:	68fa      	ldr	r2, [r7, #12]
 8011068:	4413      	add	r3, r2
 801106a:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	1c5a      	adds	r2, r3, #1
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	601a      	str	r2, [r3, #0]
 8011076:	e06c      	b.n	8011152 <lv_txt_utf8_next+0x21c>
        }
        /*4 bytes UTF-8 code*/
        else if((txt[*i] & 0xF8) == 0xF0) {
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	687a      	ldr	r2, [r7, #4]
 801107e:	4413      	add	r3, r2
 8011080:	781b      	ldrb	r3, [r3, #0]
 8011082:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8011086:	2bf0      	cmp	r3, #240	@ 0xf0
 8011088:	d15e      	bne.n	8011148 <lv_txt_utf8_next+0x212>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	687a      	ldr	r2, [r7, #4]
 8011090:	4413      	add	r3, r2
 8011092:	781b      	ldrb	r3, [r3, #0]
 8011094:	049b      	lsls	r3, r3, #18
 8011096:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 801109a:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	1c5a      	adds	r2, r3, #1
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80110a6:	683b      	ldr	r3, [r7, #0]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	687a      	ldr	r2, [r7, #4]
 80110ac:	4413      	add	r3, r2
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80110b4:	2b80      	cmp	r3, #128	@ 0x80
 80110b6:	d001      	beq.n	80110bc <lv_txt_utf8_next+0x186>
 80110b8:	2300      	movs	r3, #0
 80110ba:	e04b      	b.n	8011154 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	687a      	ldr	r2, [r7, #4]
 80110c2:	4413      	add	r3, r2
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	031b      	lsls	r3, r3, #12
 80110c8:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
 80110cc:	68fa      	ldr	r2, [r7, #12]
 80110ce:	4413      	add	r3, r2
 80110d0:	60fb      	str	r3, [r7, #12]
            (*i)++;
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	1c5a      	adds	r2, r3, #1
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	687a      	ldr	r2, [r7, #4]
 80110e2:	4413      	add	r3, r2
 80110e4:	781b      	ldrb	r3, [r3, #0]
 80110e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80110ea:	2b80      	cmp	r3, #128	@ 0x80
 80110ec:	d001      	beq.n	80110f2 <lv_txt_utf8_next+0x1bc>
 80110ee:	2300      	movs	r3, #0
 80110f0:	e030      	b.n	8011154 <lv_txt_utf8_next+0x21e>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	687a      	ldr	r2, [r7, #4]
 80110f8:	4413      	add	r3, r2
 80110fa:	781b      	ldrb	r3, [r3, #0]
 80110fc:	019b      	lsls	r3, r3, #6
 80110fe:	f403 637c 	and.w	r3, r3, #4032	@ 0xfc0
 8011102:	68fa      	ldr	r2, [r7, #12]
 8011104:	4413      	add	r3, r2
 8011106:	60fb      	str	r3, [r7, #12]
            (*i)++;
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	1c5a      	adds	r2, r3, #1
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	601a      	str	r2, [r3, #0]

            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	687a      	ldr	r2, [r7, #4]
 8011118:	4413      	add	r3, r2
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011120:	2b80      	cmp	r3, #128	@ 0x80
 8011122:	d001      	beq.n	8011128 <lv_txt_utf8_next+0x1f2>
 8011124:	2300      	movs	r3, #0
 8011126:	e015      	b.n	8011154 <lv_txt_utf8_next+0x21e>
            result += txt[*i] & 0x3F;
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	687a      	ldr	r2, [r7, #4]
 801112e:	4413      	add	r3, r2
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011136:	68fa      	ldr	r2, [r7, #12]
 8011138:	4413      	add	r3, r2
 801113a:	60fb      	str	r3, [r7, #12]
            (*i)++;
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	1c5a      	adds	r2, r3, #1
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	601a      	str	r2, [r3, #0]
 8011146:	e004      	b.n	8011152 <lv_txt_utf8_next+0x21c>
        } else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	1c5a      	adds	r2, r3, #1
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	601a      	str	r2, [r3, #0]
        }
    }
    return result;
 8011152:	68fb      	ldr	r3, [r7, #12]
}
 8011154:	4618      	mov	r0, r3
 8011156:	3714      	adds	r7, #20
 8011158:	46bd      	mov	sp, r7
 801115a:	bc80      	pop	{r7}
 801115c:	4770      	bx	lr
	...

08011160 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b086      	sub	sp, #24
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	6039      	str	r1, [r7, #0]
    uint8_t c_size;
    uint8_t cnt = 0;
 801116a:	2300      	movs	r3, #0
 801116c:	75fb      	strb	r3, [r7, #23]

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	1e5a      	subs	r2, r3, #1
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	601a      	str	r2, [r3, #0]
    do {
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
 8011178:	7dfb      	ldrb	r3, [r7, #23]
 801117a:	2b03      	cmp	r3, #3
 801117c:	d901      	bls.n	8011182 <lv_txt_utf8_prev+0x22>
 801117e:	2300      	movs	r3, #0
 8011180:	e02a      	b.n	80111d8 <lv_txt_utf8_prev+0x78>

        c_size = lv_txt_encoded_size(&txt[*i]);
 8011182:	4b17      	ldr	r3, [pc, #92]	@ (80111e0 <lv_txt_utf8_prev+0x80>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	683a      	ldr	r2, [r7, #0]
 8011188:	6812      	ldr	r2, [r2, #0]
 801118a:	6879      	ldr	r1, [r7, #4]
 801118c:	440a      	add	r2, r1
 801118e:	4610      	mov	r0, r2
 8011190:	4798      	blx	r3
 8011192:	4603      	mov	r3, r0
 8011194:	75bb      	strb	r3, [r7, #22]
        if(c_size == 0) {
 8011196:	7dbb      	ldrb	r3, [r7, #22]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d10b      	bne.n	80111b4 <lv_txt_utf8_prev+0x54>
            if(*i != 0)
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d005      	beq.n	80111b0 <lv_txt_utf8_prev+0x50>
                (*i)--;
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	1e5a      	subs	r2, r3, #1
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	601a      	str	r2, [r3, #0]
 80111ae:	e001      	b.n	80111b4 <lv_txt_utf8_prev+0x54>
            else
                return 0;
 80111b0:	2300      	movs	r3, #0
 80111b2:	e011      	b.n	80111d8 <lv_txt_utf8_prev+0x78>
        }
        cnt++;
 80111b4:	7dfb      	ldrb	r3, [r7, #23]
 80111b6:	3301      	adds	r3, #1
 80111b8:	75fb      	strb	r3, [r7, #23]
    } while(c_size == 0);
 80111ba:	7dbb      	ldrb	r3, [r7, #22]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d0db      	beq.n	8011178 <lv_txt_utf8_prev+0x18>

    uint32_t i_tmp  = *i;
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	60fb      	str	r3, [r7, #12]
    uint32_t letter = lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
 80111c6:	4b07      	ldr	r3, [pc, #28]	@ (80111e4 <lv_txt_utf8_prev+0x84>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	f107 020c 	add.w	r2, r7, #12
 80111ce:	4611      	mov	r1, r2
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	4798      	blx	r3
 80111d4:	6138      	str	r0, [r7, #16]

    return letter;
 80111d6:	693b      	ldr	r3, [r7, #16]
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3718      	adds	r7, #24
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}
 80111e0:	20000c98 	.word	0x20000c98
 80111e4:	20000ca0 	.word	0x20000ca0

080111e8 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b084      	sub	sp, #16
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
 80111f0:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint32_t byte_cnt = 0;
 80111f2:	2300      	movs	r3, #0
 80111f4:	60bb      	str	r3, [r7, #8]
    for(i = 0; i < utf8_id; i++) {
 80111f6:	2300      	movs	r3, #0
 80111f8:	60fb      	str	r3, [r7, #12]
 80111fa:	e00e      	b.n	801121a <lv_txt_utf8_get_byte_id+0x32>
        byte_cnt += lv_txt_encoded_size(&txt[byte_cnt]);
 80111fc:	4b0b      	ldr	r3, [pc, #44]	@ (801122c <lv_txt_utf8_get_byte_id+0x44>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	6879      	ldr	r1, [r7, #4]
 8011202:	68ba      	ldr	r2, [r7, #8]
 8011204:	440a      	add	r2, r1
 8011206:	4610      	mov	r0, r2
 8011208:	4798      	blx	r3
 801120a:	4603      	mov	r3, r0
 801120c:	461a      	mov	r2, r3
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	4413      	add	r3, r2
 8011212:	60bb      	str	r3, [r7, #8]
    for(i = 0; i < utf8_id; i++) {
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	3301      	adds	r3, #1
 8011218:	60fb      	str	r3, [r7, #12]
 801121a:	68fa      	ldr	r2, [r7, #12]
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	429a      	cmp	r2, r3
 8011220:	d3ec      	bcc.n	80111fc <lv_txt_utf8_get_byte_id+0x14>
    }

    return byte_cnt;
 8011222:	68bb      	ldr	r3, [r7, #8]
}
 8011224:	4618      	mov	r0, r3
 8011226:	3710      	adds	r7, #16
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}
 801122c:	20000c98 	.word	0x20000c98

08011230 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b084      	sub	sp, #16
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
 8011238:	6039      	str	r1, [r7, #0]
    uint32_t i        = 0;
 801123a:	2300      	movs	r3, #0
 801123c:	60bb      	str	r3, [r7, #8]
    uint32_t char_cnt = 0;
 801123e:	2300      	movs	r3, #0
 8011240:	60fb      	str	r3, [r7, #12]

    while(i < byte_id) {
 8011242:	e009      	b.n	8011258 <lv_txt_utf8_get_char_id+0x28>
        lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
 8011244:	4b09      	ldr	r3, [pc, #36]	@ (801126c <lv_txt_utf8_get_char_id+0x3c>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f107 0208 	add.w	r2, r7, #8
 801124c:	4611      	mov	r1, r2
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	4798      	blx	r3
        char_cnt++;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	3301      	adds	r3, #1
 8011256:	60fb      	str	r3, [r7, #12]
    while(i < byte_id) {
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	683a      	ldr	r2, [r7, #0]
 801125c:	429a      	cmp	r2, r3
 801125e:	d8f1      	bhi.n	8011244 <lv_txt_utf8_get_char_id+0x14>
    }

    return char_cnt;
 8011260:	68fb      	ldr	r3, [r7, #12]
}
 8011262:	4618      	mov	r0, r3
 8011264:	3710      	adds	r7, #16
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}
 801126a:	bf00      	nop
 801126c:	20000ca0 	.word	0x20000ca0

08011270 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b084      	sub	sp, #16
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
    uint32_t len = 0;
 8011278:	2300      	movs	r3, #0
 801127a:	60fb      	str	r3, [r7, #12]
    uint32_t i   = 0;
 801127c:	2300      	movs	r3, #0
 801127e:	60bb      	str	r3, [r7, #8]

    while(txt[i] != '\0') {
 8011280:	e009      	b.n	8011296 <lv_txt_utf8_get_length+0x26>
        lv_txt_encoded_next(txt, &i);
 8011282:	4b0a      	ldr	r3, [pc, #40]	@ (80112ac <lv_txt_utf8_get_length+0x3c>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	f107 0208 	add.w	r2, r7, #8
 801128a:	4611      	mov	r1, r2
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	4798      	blx	r3
        len++;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	3301      	adds	r3, #1
 8011294:	60fb      	str	r3, [r7, #12]
    while(txt[i] != '\0') {
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	687a      	ldr	r2, [r7, #4]
 801129a:	4413      	add	r3, r2
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d1ef      	bne.n	8011282 <lv_txt_utf8_get_length+0x12>
    }

    return len;
 80112a2:	68fb      	ldr	r3, [r7, #12]
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	3710      	adds	r7, #16
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}
 80112ac:	20000ca0 	.word	0x20000ca0

080112b0 <is_break_char>:
 * Test if char is break char or not (a text can broken here or not)
 * @param letter a letter
 * @return false: 'letter' is not break char
 */
static inline bool is_break_char(uint32_t letter)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b085      	sub	sp, #20
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
    uint8_t i;
    bool ret = false;
 80112b8:	2300      	movs	r3, #0
 80112ba:	73bb      	strb	r3, [r7, #14]

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80112bc:	2300      	movs	r3, #0
 80112be:	73fb      	strb	r3, [r7, #15]
 80112c0:	e00c      	b.n	80112dc <is_break_char+0x2c>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
 80112c2:	7bfb      	ldrb	r3, [r7, #15]
 80112c4:	4a0b      	ldr	r2, [pc, #44]	@ (80112f4 <is_break_char+0x44>)
 80112c6:	5cd3      	ldrb	r3, [r2, r3]
 80112c8:	461a      	mov	r2, r3
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	4293      	cmp	r3, r2
 80112ce:	d102      	bne.n	80112d6 <is_break_char+0x26>
            ret = true; /*If match then it is break char*/
 80112d0:	2301      	movs	r3, #1
 80112d2:	73bb      	strb	r3, [r7, #14]
            break;
 80112d4:	e007      	b.n	80112e6 <is_break_char+0x36>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
 80112d6:	7bfb      	ldrb	r3, [r7, #15]
 80112d8:	3301      	adds	r3, #1
 80112da:	73fb      	strb	r3, [r7, #15]
 80112dc:	7bfb      	ldrb	r3, [r7, #15]
 80112de:	4a05      	ldr	r2, [pc, #20]	@ (80112f4 <is_break_char+0x44>)
 80112e0:	5cd3      	ldrb	r3, [r2, r3]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d1ed      	bne.n	80112c2 <is_break_char+0x12>
        }
    }

    return ret;
 80112e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3714      	adds	r7, #20
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bc80      	pop	{r7}
 80112f0:	4770      	bx	lr
 80112f2:	bf00      	nop
 80112f4:	0801c634 	.word	0x0801c634

080112f8 <lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                        int32_t (*cmp)(const void * pRef, const void * pElement))
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b086      	sub	sp, #24
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	60f8      	str	r0, [r7, #12]
 8011300:	60b9      	str	r1, [r7, #8]
 8011302:	607a      	str	r2, [r7, #4]
 8011304:	603b      	str	r3, [r7, #0]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	617b      	str	r3, [r7, #20]
 801130a:	e02d      	b.n	8011368 <lv_utils_bsearch+0x70>
        middle += (n / 2) * size;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	085b      	lsrs	r3, r3, #1
 8011310:	683a      	ldr	r2, [r7, #0]
 8011312:	fb02 f303 	mul.w	r3, r2, r3
 8011316:	697a      	ldr	r2, [r7, #20]
 8011318:	4413      	add	r3, r2
 801131a:	617b      	str	r3, [r7, #20]
        if((c = (*cmp)(key, middle)) > 0) {
 801131c:	6a3b      	ldr	r3, [r7, #32]
 801131e:	6979      	ldr	r1, [r7, #20]
 8011320:	68f8      	ldr	r0, [r7, #12]
 8011322:	4798      	blx	r3
 8011324:	6138      	str	r0, [r7, #16]
 8011326:	693b      	ldr	r3, [r7, #16]
 8011328:	2b00      	cmp	r3, #0
 801132a:	dd12      	ble.n	8011352 <lv_utils_bsearch+0x5a>
            n    = (n / 2) - ((n & 1) == 0);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	085b      	lsrs	r3, r3, #1
 8011330:	687a      	ldr	r2, [r7, #4]
 8011332:	f002 0201 	and.w	r2, r2, #1
 8011336:	2a00      	cmp	r2, #0
 8011338:	bf0c      	ite	eq
 801133a:	2201      	moveq	r2, #1
 801133c:	2200      	movne	r2, #0
 801133e:	b2d2      	uxtb	r2, r2
 8011340:	1a9b      	subs	r3, r3, r2
 8011342:	607b      	str	r3, [r7, #4]
            base = (middle += size);
 8011344:	697a      	ldr	r2, [r7, #20]
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	4413      	add	r3, r2
 801134a:	617b      	str	r3, [r7, #20]
 801134c:	697b      	ldr	r3, [r7, #20]
 801134e:	60bb      	str	r3, [r7, #8]
 8011350:	e00a      	b.n	8011368 <lv_utils_bsearch+0x70>
        } else if(c < 0) {
 8011352:	693b      	ldr	r3, [r7, #16]
 8011354:	2b00      	cmp	r3, #0
 8011356:	da05      	bge.n	8011364 <lv_utils_bsearch+0x6c>
            n /= 2;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	085b      	lsrs	r3, r3, #1
 801135c:	607b      	str	r3, [r7, #4]
            middle = base;
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	617b      	str	r3, [r7, #20]
 8011362:	e001      	b.n	8011368 <lv_utils_bsearch+0x70>
        } else {
            return (char *)middle;
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	e003      	b.n	8011370 <lv_utils_bsearch+0x78>
    for(middle = base; n != 0;) {
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d1ce      	bne.n	801130c <lv_utils_bsearch+0x14>
        }
    }
    return NULL;
 801136e:	2300      	movs	r3, #0
}
 8011370:	4618      	mov	r0, r3
 8011372:	3718      	adds	r7, #24
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8011382:	2208      	movs	r2, #8
 8011384:	6839      	ldr	r1, [r7, #0]
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f00a fb2f 	bl	801b9ea <memcpy>
}
 801138c:	bf00      	nop
 801138e:	3708      	adds	r7, #8
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8011394:	b480      	push	{r7}
 8011396:	b083      	sub	sp, #12
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	1ad3      	subs	r3, r2, r3
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	3301      	adds	r3, #1
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	b21b      	sxth	r3, r3
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	370c      	adds	r7, #12
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bc80      	pop	{r7}
 80113be:	4770      	bx	lr

080113c0 <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80113ce:	b29a      	uxth	r2, r3
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80113d6:	b29b      	uxth	r3, r3
 80113d8:	1ad3      	subs	r3, r2, r3
 80113da:	b29b      	uxth	r3, r3
 80113dc:	3301      	adds	r3, #1
 80113de:	b29b      	uxth	r3, r3
 80113e0:	b21b      	sxth	r3, r3
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	370c      	adds	r7, #12
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bc80      	pop	{r7}
 80113ea:	4770      	bx	lr

080113ec <lv_btnm_create>:
 * @param copy pointer to a button matrix object, if not NULL then the new object will be copied
 * from it
 * @return pointer to the created button matrix
 */
lv_obj_t * lv_btnm_create(lv_obj_t * par, const lv_obj_t * copy)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b086      	sub	sp, #24
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("button matrix create started");

    /*Create the ancestor object*/
    lv_obj_t * new_btnm = lv_obj_create(par, copy);
 80113f6:	6839      	ldr	r1, [r7, #0]
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f7f3 fc8b 	bl	8004d14 <lv_obj_create>
 80113fe:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_btnm);
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d101      	bne.n	801140a <lv_btnm_create+0x1e>
 8011406:	bf00      	nop
 8011408:	e7fd      	b.n	8011406 <lv_btnm_create+0x1a>
    if(new_btnm == NULL) return NULL;
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d101      	bne.n	8011414 <lv_btnm_create+0x28>
 8011410:	2300      	movs	r3, #0
 8011412:	e0ba      	b.n	801158a <lv_btnm_create+0x19e>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_btnm);
 8011414:	4b5f      	ldr	r3, [pc, #380]	@ (8011594 <lv_btnm_create+0x1a8>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d105      	bne.n	8011428 <lv_btnm_create+0x3c>
 801141c:	6978      	ldr	r0, [r7, #20]
 801141e:	f7f5 fa65 	bl	80068ec <lv_obj_get_signal_cb>
 8011422:	4603      	mov	r3, r0
 8011424:	4a5b      	ldr	r2, [pc, #364]	@ (8011594 <lv_btnm_create+0x1a8>)
 8011426:	6013      	str	r3, [r2, #0]

    /*Allocate the object type specific extended data*/
    lv_btnm_ext_t * ext = lv_obj_allocate_ext_attr(new_btnm, sizeof(lv_btnm_ext_t));
 8011428:	2128      	movs	r1, #40	@ 0x28
 801142a:	6978      	ldr	r0, [r7, #20]
 801142c:	f7f5 f812 	bl	8006454 <lv_obj_allocate_ext_attr>
 8011430:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d101      	bne.n	801143c <lv_btnm_create+0x50>
 8011438:	bf00      	nop
 801143a:	e7fd      	b.n	8011438 <lv_btnm_create+0x4c>
    if(ext == NULL) return NULL;
 801143c:	693b      	ldr	r3, [r7, #16]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d101      	bne.n	8011446 <lv_btnm_create+0x5a>
 8011442:	2300      	movs	r3, #0
 8011444:	e0a1      	b.n	801158a <lv_btnm_create+0x19e>

    ext->btn_cnt                          = 0;
 8011446:	693b      	ldr	r3, [r7, #16]
 8011448:	2200      	movs	r2, #0
 801144a:	841a      	strh	r2, [r3, #32]
    ext->btn_id_pr                        = LV_BTNM_BTN_NONE;
 801144c:	693b      	ldr	r3, [r7, #16]
 801144e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011452:	845a      	strh	r2, [r3, #34]	@ 0x22
    ext->btn_id_act                       = LV_BTNM_BTN_NONE;
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801145a:	849a      	strh	r2, [r3, #36]	@ 0x24
    ext->button_areas                     = NULL;
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	2200      	movs	r2, #0
 8011460:	605a      	str	r2, [r3, #4]
    ext->ctrl_bits                        = NULL;
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	2200      	movs	r2, #0
 8011466:	609a      	str	r2, [r3, #8]
    ext->map_p                            = NULL;
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	2200      	movs	r2, #0
 801146c:	601a      	str	r2, [r3, #0]
    ext->recolor                          = 0;
 801146e:	693a      	ldr	r2, [r7, #16]
 8011470:	f892 3026 	ldrb.w	r3, [r2, #38]	@ 0x26
 8011474:	f36f 0300 	bfc	r3, #0, #1
 8011478:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
    ext->one_toggle                       = 0;
 801147c:	693a      	ldr	r2, [r7, #16]
 801147e:	f892 3026 	ldrb.w	r3, [r2, #38]	@ 0x26
 8011482:	f36f 0341 	bfc	r3, #1, #1
 8011486:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
    ext->styles_btn[LV_BTN_STATE_REL]     = &lv_style_btn_rel;
 801148a:	693b      	ldr	r3, [r7, #16]
 801148c:	4a42      	ldr	r2, [pc, #264]	@ (8011598 <lv_btnm_create+0x1ac>)
 801148e:	60da      	str	r2, [r3, #12]
    ext->styles_btn[LV_BTN_STATE_PR]      = &lv_style_btn_pr;
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	4a42      	ldr	r2, [pc, #264]	@ (801159c <lv_btnm_create+0x1b0>)
 8011494:	611a      	str	r2, [r3, #16]
    ext->styles_btn[LV_BTN_STATE_TGL_REL] = &lv_style_btn_tgl_rel;
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	4a41      	ldr	r2, [pc, #260]	@ (80115a0 <lv_btnm_create+0x1b4>)
 801149a:	615a      	str	r2, [r3, #20]
    ext->styles_btn[LV_BTN_STATE_TGL_PR]  = &lv_style_btn_tgl_pr;
 801149c:	693b      	ldr	r3, [r7, #16]
 801149e:	4a41      	ldr	r2, [pc, #260]	@ (80115a4 <lv_btnm_create+0x1b8>)
 80114a0:	619a      	str	r2, [r3, #24]
    ext->styles_btn[LV_BTN_STATE_INA]     = &lv_style_btn_ina;
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	4a40      	ldr	r2, [pc, #256]	@ (80115a8 <lv_btnm_create+0x1bc>)
 80114a6:	61da      	str	r2, [r3, #28]

    if(ancestor_design_f == NULL) ancestor_design_f = lv_obj_get_design_cb(new_btnm);
 80114a8:	4b40      	ldr	r3, [pc, #256]	@ (80115ac <lv_btnm_create+0x1c0>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d105      	bne.n	80114bc <lv_btnm_create+0xd0>
 80114b0:	6978      	ldr	r0, [r7, #20]
 80114b2:	f7f5 fa26 	bl	8006902 <lv_obj_get_design_cb>
 80114b6:	4603      	mov	r3, r0
 80114b8:	4a3c      	ldr	r2, [pc, #240]	@ (80115ac <lv_btnm_create+0x1c0>)
 80114ba:	6013      	str	r3, [r2, #0]

    lv_obj_set_signal_cb(new_btnm, lv_btnm_signal);
 80114bc:	493c      	ldr	r1, [pc, #240]	@ (80115b0 <lv_btnm_create+0x1c4>)
 80114be:	6978      	ldr	r0, [r7, #20]
 80114c0:	f7f4 ffae 	bl	8006420 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_btnm, lv_btnm_design);
 80114c4:	493b      	ldr	r1, [pc, #236]	@ (80115b4 <lv_btnm_create+0x1c8>)
 80114c6:	6978      	ldr	r0, [r7, #20]
 80114c8:	f7f4 ffb7 	bl	800643a <lv_obj_set_design_cb>

    /*Init the new button matrix object*/
    if(copy == NULL) {
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d145      	bne.n	801155e <lv_btnm_create+0x172>
        lv_obj_set_size(new_btnm, LV_DPI * 3, LV_DPI * 2);
 80114d2:	22c8      	movs	r2, #200	@ 0xc8
 80114d4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80114d8:	6978      	ldr	r0, [r7, #20]
 80114da:	f7f4 f8f3 	bl	80056c4 <lv_obj_set_size>
        lv_btnm_set_map(new_btnm, lv_btnm_def_map);
 80114de:	4936      	ldr	r1, [pc, #216]	@ (80115b8 <lv_btnm_create+0x1cc>)
 80114e0:	6978      	ldr	r0, [r7, #20]
 80114e2:	f000 f86d 	bl	80115c0 <lv_btnm_set_map>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 80114e6:	f008 ff45 	bl	801a374 <lv_theme_get_current>
 80114ea:	60b8      	str	r0, [r7, #8]
        if(th) {
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d030      	beq.n	8011554 <lv_btnm_create+0x168>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BG, th->style.btnm.bg);
 80114f2:	68bb      	ldr	r3, [r7, #8]
 80114f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80114f8:	461a      	mov	r2, r3
 80114fa:	2100      	movs	r1, #0
 80114fc:	6978      	ldr	r0, [r7, #20]
 80114fe:	f000 fa25 	bl	801194c <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_REL, th->style.btnm.btn.rel);
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8011508:	461a      	mov	r2, r3
 801150a:	2101      	movs	r1, #1
 801150c:	6978      	ldr	r0, [r7, #20]
 801150e:	f000 fa1d 	bl	801194c <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_PR, th->style.btnm.btn.pr);
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8011518:	461a      	mov	r2, r3
 801151a:	2102      	movs	r1, #2
 801151c:	6978      	ldr	r0, [r7, #20]
 801151e:	f000 fa15 	bl	801194c <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_REL, th->style.btnm.btn.tgl_rel);
 8011522:	68bb      	ldr	r3, [r7, #8]
 8011524:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8011528:	461a      	mov	r2, r3
 801152a:	2103      	movs	r1, #3
 801152c:	6978      	ldr	r0, [r7, #20]
 801152e:	f000 fa0d 	bl	801194c <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_TGL_PR, th->style.btnm.btn.tgl_pr);
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011538:	461a      	mov	r2, r3
 801153a:	2104      	movs	r1, #4
 801153c:	6978      	ldr	r0, [r7, #20]
 801153e:	f000 fa05 	bl	801194c <lv_btnm_set_style>
            lv_btnm_set_style(new_btnm, LV_BTNM_STYLE_BTN_INA, th->style.btnm.btn.ina);
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011548:	461a      	mov	r2, r3
 801154a:	2105      	movs	r1, #5
 801154c:	6978      	ldr	r0, [r7, #20]
 801154e:	f000 f9fd 	bl	801194c <lv_btnm_set_style>
 8011552:	e019      	b.n	8011588 <lv_btnm_create+0x19c>
        } else {
            lv_obj_set_style(new_btnm, &lv_style_pretty);
 8011554:	4919      	ldr	r1, [pc, #100]	@ (80115bc <lv_btnm_create+0x1d0>)
 8011556:	6978      	ldr	r0, [r7, #20]
 8011558:	f7f4 fdfd 	bl	8006156 <lv_obj_set_style>
 801155c:	e014      	b.n	8011588 <lv_btnm_create+0x19c>
        }
    }
    /*Copy an existing object*/
    else {
        lv_btnm_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 801155e:	6838      	ldr	r0, [r7, #0]
 8011560:	f7f5 f9da 	bl	8006918 <lv_obj_get_ext_attr>
 8011564:	60f8      	str	r0, [r7, #12]
        memcpy(ext->styles_btn, copy_ext->styles_btn, sizeof(ext->styles_btn));
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	f103 000c 	add.w	r0, r3, #12
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	330c      	adds	r3, #12
 8011570:	2214      	movs	r2, #20
 8011572:	4619      	mov	r1, r3
 8011574:	f00a fa39 	bl	801b9ea <memcpy>
        lv_btnm_set_map(new_btnm, lv_btnm_get_map_array(copy));
 8011578:	6838      	ldr	r0, [r7, #0]
 801157a:	f000 faaa 	bl	8011ad2 <lv_btnm_get_map_array>
 801157e:	4603      	mov	r3, r0
 8011580:	4619      	mov	r1, r3
 8011582:	6978      	ldr	r0, [r7, #20]
 8011584:	f000 f81c 	bl	80115c0 <lv_btnm_set_map>
    }

    LV_LOG_INFO("button matrix created");

    return new_btnm;
 8011588:	697b      	ldr	r3, [r7, #20]
}
 801158a:	4618      	mov	r0, r3
 801158c:	3718      	adds	r7, #24
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	2000ad84 	.word	0x2000ad84
 8011598:	20002bbc 	.word	0x20002bbc
 801159c:	20002bf8 	.word	0x20002bf8
 80115a0:	20002c34 	.word	0x20002c34
 80115a4:	20002c70 	.word	0x20002c70
 80115a8:	20002cac 	.word	0x20002cac
 80115ac:	2000ad80 	.word	0x2000ad80
 80115b0:	080120fd 	.word	0x080120fd
 80115b4:	08011c95 	.word	0x08011c95
 80115b8:	20000cb4 	.word	0x20000cb4
 80115bc:	20002b44 	.word	0x20002b44

080115c0 <lv_btnm_set_map>:
 * be deallocated during the life of the matrix.
 * @param btnm pointer to a button matrix object
 * @param map pointer a string array. The last string has to be: "". Use "\n" to make a line break.
 */
void lv_btnm_set_map(const lv_obj_t * btnm, const char * map[])
{
 80115c0:	b590      	push	{r4, r7, lr}
 80115c2:	b091      	sub	sp, #68	@ 0x44
 80115c4:	af02      	add	r7, sp, #8
 80115c6:	6078      	str	r0, [r7, #4]
 80115c8:	6039      	str	r1, [r7, #0]
    if(map == NULL) return;
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	f000 819a 	beq.w	8011906 <lv_btnm_set_map+0x346>
     * to hidden/longpress/disabled states after the map was originally set.
     *
     * TODO: separate all map set/allocation from layout code below and skip
     * set/allocation when map hasn't changed.
     */
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f7f5 f9a0 	bl	8006918 <lv_obj_get_ext_attr>
 80115d8:	61f8      	str	r0, [r7, #28]
    if(!maps_are_identical(ext->map_p, map)) {
 80115da:	69fb      	ldr	r3, [r7, #28]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	6839      	ldr	r1, [r7, #0]
 80115e0:	4618      	mov	r0, r3
 80115e2:	f001 fb0c 	bl	8012bfe <maps_are_identical>
 80115e6:	4603      	mov	r3, r0
 80115e8:	f083 0301 	eor.w	r3, r3, #1
 80115ec:	b2db      	uxtb	r3, r3
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d003      	beq.n	80115fa <lv_btnm_set_map+0x3a>

        /*Analyze the map and create the required number of buttons*/
        allocate_btn_areas_and_controls(btnm, map);
 80115f2:	6839      	ldr	r1, [r7, #0]
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f001 f947 	bl	8012888 <allocate_btn_areas_and_controls>
    }
    ext->map_p = map;
 80115fa:	69fb      	ldr	r3, [r7, #28]
 80115fc:	683a      	ldr	r2, [r7, #0]
 80115fe:	601a      	str	r2, [r3, #0]

    /*Set size and positions of the buttons*/
    const lv_style_t * style_bg = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 8011600:	2100      	movs	r1, #0
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 fb06 	bl	8011c14 <lv_btnm_get_style>
 8011608:	61b8      	str	r0, [r7, #24]
    lv_coord_t max_w            = lv_obj_get_width(btnm) - style_bg->body.padding.left - style_bg->body.padding.right;
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f7f5 f803 	bl	8006616 <lv_obj_get_width>
 8011610:	4603      	mov	r3, r0
 8011612:	b29a      	uxth	r2, r3
 8011614:	69bb      	ldr	r3, [r7, #24]
 8011616:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801161a:	b29b      	uxth	r3, r3
 801161c:	1ad3      	subs	r3, r2, r3
 801161e:	b29a      	uxth	r2, r3
 8011620:	69bb      	ldr	r3, [r7, #24]
 8011622:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8011626:	b29b      	uxth	r3, r3
 8011628:	1ad3      	subs	r3, r2, r3
 801162a:	b29b      	uxth	r3, r3
 801162c:	82fb      	strh	r3, [r7, #22]
    lv_coord_t max_h            = lv_obj_get_height(btnm) - style_bg->body.padding.top - style_bg->body.padding.bottom;
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f7f4 ffff 	bl	8006632 <lv_obj_get_height>
 8011634:	4603      	mov	r3, r0
 8011636:	b29a      	uxth	r2, r3
 8011638:	69bb      	ldr	r3, [r7, #24]
 801163a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801163e:	b29b      	uxth	r3, r3
 8011640:	1ad3      	subs	r3, r2, r3
 8011642:	b29a      	uxth	r2, r3
 8011644:	69bb      	ldr	r3, [r7, #24]
 8011646:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801164a:	b29b      	uxth	r3, r3
 801164c:	1ad3      	subs	r3, r2, r3
 801164e:	b29b      	uxth	r3, r3
 8011650:	82bb      	strh	r3, [r7, #20]
    lv_coord_t act_y            = style_bg->body.padding.top;
 8011652:	69bb      	ldr	r3, [r7, #24]
 8011654:	8adb      	ldrh	r3, [r3, #22]
 8011656:	86fb      	strh	r3, [r7, #54]	@ 0x36

    /*Count the lines to calculate button height*/
    uint8_t line_cnt = 1;
 8011658:	2301      	movs	r3, #1
 801165a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    uint8_t li;
    for(li = 0; strlen(map[li]) != 0; li++) {
 801165e:	2300      	movs	r3, #0
 8011660:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8011664:	e016      	b.n	8011694 <lv_btnm_set_map+0xd4>
        if(strcmp(map[li], "\n") == 0) line_cnt++;
 8011666:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801166a:	009b      	lsls	r3, r3, #2
 801166c:	683a      	ldr	r2, [r7, #0]
 801166e:	4413      	add	r3, r2
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	49a7      	ldr	r1, [pc, #668]	@ (8011910 <lv_btnm_set_map+0x350>)
 8011674:	4618      	mov	r0, r3
 8011676:	f7ee fdd5 	bl	8000224 <strcmp>
 801167a:	4603      	mov	r3, r0
 801167c:	2b00      	cmp	r3, #0
 801167e:	d104      	bne.n	801168a <lv_btnm_set_map+0xca>
 8011680:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8011684:	3301      	adds	r3, #1
 8011686:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    for(li = 0; strlen(map[li]) != 0; li++) {
 801168a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801168e:	3301      	adds	r3, #1
 8011690:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8011694:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8011698:	009b      	lsls	r3, r3, #2
 801169a:	683a      	ldr	r2, [r7, #0]
 801169c:	4413      	add	r3, r2
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d1df      	bne.n	8011666 <lv_btnm_set_map+0xa6>
    }

    lv_coord_t btn_h = max_h - ((line_cnt - 1) * style_bg->body.padding.inner);
 80116a6:	8aba      	ldrh	r2, [r7, #20]
 80116a8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80116ac:	3b01      	subs	r3, #1
 80116ae:	b29b      	uxth	r3, r3
 80116b0:	69b9      	ldr	r1, [r7, #24]
 80116b2:	f9b1 101e 	ldrsh.w	r1, [r1, #30]
 80116b6:	b289      	uxth	r1, r1
 80116b8:	fb01 f303 	mul.w	r3, r1, r3
 80116bc:	b29b      	uxth	r3, r3
 80116be:	1ad3      	subs	r3, r2, r3
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	867b      	strh	r3, [r7, #50]	@ 0x32
    btn_h            = btn_h / line_cnt;
 80116c4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 80116c8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80116cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80116d0:	867b      	strh	r3, [r7, #50]	@ 0x32
    btn_h--; /*-1 because e.g. height = 100 means 101 pixels (0..100)*/
 80116d2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	3b01      	subs	r3, #1
 80116da:	b29b      	uxth	r3, r3
 80116dc:	867b      	strh	r3, [r7, #50]	@ 0x32
    /* Count the units and the buttons in a line
     * (A button can be 1,2,3... unit wide)*/
    uint16_t unit_cnt;           /*Number of units in a row*/
    uint16_t unit_act_cnt;       /*Number of units currently put in a row*/
    uint16_t btn_cnt;            /*Number of buttons in a row*/
    uint16_t i_tot          = 0; /*Act. index in the str map*/
 80116de:	2300      	movs	r3, #0
 80116e0:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint16_t btn_i          = 0; /*Act. index of button areas*/
 80116e2:	2300      	movs	r3, #0
 80116e4:	853b      	strh	r3, [r7, #40]	@ 0x28
    const char ** map_p_tmp = map;
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	627b      	str	r3, [r7, #36]	@ 0x24

    /*Count the units and the buttons in a line*/
    while(1) {
        unit_cnt = 0;
 80116ea:	2300      	movs	r3, #0
 80116ec:	863b      	strh	r3, [r7, #48]	@ 0x30
        btn_cnt  = 0;
 80116ee:	2300      	movs	r3, #0
 80116f0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        /*Count the buttons in a line*/
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 80116f2:	e012      	b.n	801171a <lv_btnm_set_map+0x15a>
            unit_cnt += get_button_width(ext->ctrl_bits[btn_i + btn_cnt]);
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	689a      	ldr	r2, [r3, #8]
 80116f8:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80116fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80116fc:	440b      	add	r3, r1
 80116fe:	005b      	lsls	r3, r3, #1
 8011700:	4413      	add	r3, r2
 8011702:	881b      	ldrh	r3, [r3, #0]
 8011704:	4618      	mov	r0, r3
 8011706:	f001 f937 	bl	8012978 <get_button_width>
 801170a:	4603      	mov	r3, r0
 801170c:	461a      	mov	r2, r3
 801170e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011710:	4413      	add	r3, r2
 8011712:	863b      	strh	r3, [r7, #48]	@ 0x30
            btn_cnt++;
 8011714:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011716:	3301      	adds	r3, #1
 8011718:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        while(strcmp(map_p_tmp[btn_cnt], "\n") != 0 && strlen(map_p_tmp[btn_cnt]) != 0) { /*Check a line*/
 801171a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801171c:	009b      	lsls	r3, r3, #2
 801171e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011720:	4413      	add	r3, r2
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	497a      	ldr	r1, [pc, #488]	@ (8011910 <lv_btnm_set_map+0x350>)
 8011726:	4618      	mov	r0, r3
 8011728:	f7ee fd7c 	bl	8000224 <strcmp>
 801172c:	4603      	mov	r3, r0
 801172e:	2b00      	cmp	r3, #0
 8011730:	d007      	beq.n	8011742 <lv_btnm_set_map+0x182>
 8011732:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011734:	009b      	lsls	r3, r3, #2
 8011736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011738:	4413      	add	r3, r2
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d1d8      	bne.n	80116f4 <lv_btnm_set_map+0x134>
        }

        /*Make sure the last row is at the bottom of 'btnm'*/
        if(map_p_tmp[btn_cnt][0] == '\0') { /*Last row?*/
 8011742:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011744:	009b      	lsls	r3, r3, #2
 8011746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011748:	4413      	add	r3, r2
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	781b      	ldrb	r3, [r3, #0]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d10c      	bne.n	801176c <lv_btnm_set_map+0x1ac>
            btn_h = max_h - act_y + style_bg->body.padding.bottom - 1;
 8011752:	8aba      	ldrh	r2, [r7, #20]
 8011754:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011756:	1ad3      	subs	r3, r2, r3
 8011758:	b29a      	uxth	r2, r3
 801175a:	69bb      	ldr	r3, [r7, #24]
 801175c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8011760:	b29b      	uxth	r3, r3
 8011762:	4413      	add	r3, r2
 8011764:	b29b      	uxth	r3, r3
 8011766:	3b01      	subs	r3, #1
 8011768:	b29b      	uxth	r3, r3
 801176a:	867b      	strh	r3, [r7, #50]	@ 0x32
        }

        /*Only deal with the non empty lines*/
        if(btn_cnt != 0) {
 801176c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801176e:	2b00      	cmp	r3, #0
 8011770:	f000 80a7 	beq.w	80118c2 <lv_btnm_set_map+0x302>
            /*Calculate the width of all units*/
            lv_coord_t all_unit_w = max_w - ((btn_cnt - 1) * style_bg->body.padding.inner);
 8011774:	8afa      	ldrh	r2, [r7, #22]
 8011776:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011778:	3b01      	subs	r3, #1
 801177a:	b29b      	uxth	r3, r3
 801177c:	69b9      	ldr	r1, [r7, #24]
 801177e:	f9b1 101e 	ldrsh.w	r1, [r1, #30]
 8011782:	b289      	uxth	r1, r1
 8011784:	fb01 f303 	mul.w	r3, r1, r3
 8011788:	b29b      	uxth	r3, r3
 801178a:	1ad3      	subs	r3, r2, r3
 801178c:	b29b      	uxth	r3, r3
 801178e:	827b      	strh	r3, [r7, #18]

            /*Set the button size and positions and set the texts*/
            uint16_t i;
            lv_coord_t act_x = style_bg->body.padding.left;
 8011790:	69bb      	ldr	r3, [r7, #24]
 8011792:	8b5b      	ldrh	r3, [r3, #26]
 8011794:	823b      	strh	r3, [r7, #16]
            lv_coord_t act_unit_w;
            unit_act_cnt = 0;
 8011796:	2300      	movs	r3, #0
 8011798:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            for(i = 0; i < btn_cnt; i++) {
 801179a:	2300      	movs	r3, #0
 801179c:	847b      	strh	r3, [r7, #34]	@ 0x22
 801179e:	e08b      	b.n	80118b8 <lv_btnm_set_map+0x2f8>
                /* one_unit_w = all_unit_w / unit_cnt
                 * act_unit_w = one_unit_w * button_width
                 * do this two operations but the multiply first to divide a greater number */
                act_unit_w = (all_unit_w * get_button_width(ext->ctrl_bits[btn_i])) / unit_cnt;
 80117a0:	f9b7 4012 	ldrsh.w	r4, [r7, #18]
 80117a4:	69fb      	ldr	r3, [r7, #28]
 80117a6:	689a      	ldr	r2, [r3, #8]
 80117a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80117aa:	005b      	lsls	r3, r3, #1
 80117ac:	4413      	add	r3, r2
 80117ae:	881b      	ldrh	r3, [r3, #0]
 80117b0:	4618      	mov	r0, r3
 80117b2:	f001 f8e1 	bl	8012978 <get_button_width>
 80117b6:	4603      	mov	r3, r0
 80117b8:	fb03 f204 	mul.w	r2, r3, r4
 80117bc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80117be:	fb92 f3f3 	sdiv	r3, r2, r3
 80117c2:	81fb      	strh	r3, [r7, #14]
                act_unit_w--; /*-1 because e.g. width = 100 means 101 pixels (0..100)*/
 80117c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	3b01      	subs	r3, #1
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	81fb      	strh	r3, [r7, #14]

                /*Always recalculate act_x because of rounding errors */
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 80117d0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80117d2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80117d6:	fb03 f202 	mul.w	r2, r3, r2
 80117da:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80117dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80117e0:	b29a      	uxth	r2, r3
 80117e2:	69bb      	ldr	r3, [r7, #24]
 80117e4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80117e8:	b29b      	uxth	r3, r3
 80117ea:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80117ec:	fb01 f303 	mul.w	r3, r1, r3
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	4413      	add	r3, r2
 80117f4:	b29a      	uxth	r2, r3
                        style_bg->body.padding.left;
 80117f6:	69bb      	ldr	r3, [r7, #24]
 80117f8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80117fc:	b29b      	uxth	r3, r3
                act_x = (unit_act_cnt * all_unit_w) / unit_cnt + i * style_bg->body.padding.inner +
 80117fe:	4413      	add	r3, r2
 8011800:	b29b      	uxth	r3, r3
 8011802:	823b      	strh	r3, [r7, #16]

                /* Set the button's area.
                 * If inner padding is zero then use the prev. button x2 as x1 to avoid rounding
                 * errors*/
                if(style_bg->body.padding.inner == 0 && act_x != style_bg->body.padding.left) {
 8011804:	69bb      	ldr	r3, [r7, #24]
 8011806:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d126      	bne.n	801185c <lv_btnm_set_map+0x29c>
 801180e:	69bb      	ldr	r3, [r7, #24]
 8011810:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8011814:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8011818:	429a      	cmp	r2, r3
 801181a:	d01f      	beq.n	801185c <lv_btnm_set_map+0x29c>
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
 801181c:	69fb      	ldr	r3, [r7, #28]
 801181e:	685a      	ldr	r2, [r3, #4]
 8011820:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011822:	00db      	lsls	r3, r3, #3
 8011824:	18d0      	adds	r0, r2, r3
 8011826:	69fb      	ldr	r3, [r7, #28]
 8011828:	685a      	ldr	r2, [r3, #4]
 801182a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801182c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8011830:	3b01      	subs	r3, #1
 8011832:	00db      	lsls	r3, r3, #3
 8011834:	4413      	add	r3, r2
 8011836:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801183a:	8a3a      	ldrh	r2, [r7, #16]
 801183c:	89fb      	ldrh	r3, [r7, #14]
 801183e:	4413      	add	r3, r2
 8011840:	b29b      	uxth	r3, r3
 8011842:	b21c      	sxth	r4, r3
                                act_y + btn_h);
 8011844:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8011846:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011848:	4413      	add	r3, r2
 801184a:	b29b      	uxth	r3, r3
                    lv_area_set(&ext->button_areas[btn_i], ext->button_areas[btn_i - 1].x2, act_y, act_x + act_unit_w,
 801184c:	b21b      	sxth	r3, r3
 801184e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8011852:	9300      	str	r3, [sp, #0]
 8011854:	4623      	mov	r3, r4
 8011856:	f7fd fded 	bl	800f434 <lv_area_set>
 801185a:	e016      	b.n	801188a <lv_btnm_set_map+0x2ca>
                } else {
                    lv_area_set(&ext->button_areas[btn_i], act_x, act_y, act_x + act_unit_w, act_y + btn_h);
 801185c:	69fb      	ldr	r3, [r7, #28]
 801185e:	685a      	ldr	r2, [r3, #4]
 8011860:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011862:	00db      	lsls	r3, r3, #3
 8011864:	18d0      	adds	r0, r2, r3
 8011866:	8a3a      	ldrh	r2, [r7, #16]
 8011868:	89fb      	ldrh	r3, [r7, #14]
 801186a:	4413      	add	r3, r2
 801186c:	b29b      	uxth	r3, r3
 801186e:	b21c      	sxth	r4, r3
 8011870:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8011872:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011874:	4413      	add	r3, r2
 8011876:	b29b      	uxth	r3, r3
 8011878:	b21b      	sxth	r3, r3
 801187a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 801187e:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8011882:	9300      	str	r3, [sp, #0]
 8011884:	4623      	mov	r3, r4
 8011886:	f7fd fdd5 	bl	800f434 <lv_area_set>
                }

                unit_act_cnt += get_button_width(ext->ctrl_bits[btn_i]);
 801188a:	69fb      	ldr	r3, [r7, #28]
 801188c:	689a      	ldr	r2, [r3, #8]
 801188e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011890:	005b      	lsls	r3, r3, #1
 8011892:	4413      	add	r3, r2
 8011894:	881b      	ldrh	r3, [r3, #0]
 8011896:	4618      	mov	r0, r3
 8011898:	f001 f86e 	bl	8012978 <get_button_width>
 801189c:	4603      	mov	r3, r0
 801189e:	461a      	mov	r2, r3
 80118a0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80118a2:	4413      	add	r3, r2
 80118a4:	85fb      	strh	r3, [r7, #46]	@ 0x2e

                i_tot++;
 80118a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80118a8:	3301      	adds	r3, #1
 80118aa:	857b      	strh	r3, [r7, #42]	@ 0x2a
                btn_i++;
 80118ac:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80118ae:	3301      	adds	r3, #1
 80118b0:	853b      	strh	r3, [r7, #40]	@ 0x28
            for(i = 0; i < btn_cnt; i++) {
 80118b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80118b4:	3301      	adds	r3, #1
 80118b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80118b8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80118ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80118bc:	429a      	cmp	r2, r3
 80118be:	f4ff af6f 	bcc.w	80117a0 <lv_btnm_set_map+0x1e0>
            }
        }
        act_y += btn_h + style_bg->body.padding.inner;
 80118c2:	69bb      	ldr	r3, [r7, #24]
 80118c4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80118cc:	4413      	add	r3, r2
 80118ce:	b29a      	uxth	r2, r3
 80118d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80118d2:	4413      	add	r3, r2
 80118d4:	b29b      	uxth	r3, r3
 80118d6:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 80118d8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80118da:	009b      	lsls	r3, r3, #2
 80118dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118de:	4413      	add	r3, r2
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	781b      	ldrb	r3, [r3, #0]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d009      	beq.n	80118fc <lv_btnm_set_map+0x33c>
        map_p_tmp = &map_p_tmp[btn_cnt + 1];       /*Set the map to the next line*/
 80118e8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80118ea:	3301      	adds	r3, #1
 80118ec:	009b      	lsls	r3, r3, #2
 80118ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118f0:	4413      	add	r3, r2
 80118f2:	627b      	str	r3, [r7, #36]	@ 0x24
        i_tot++;                                   /*Skip the '\n'*/
 80118f4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80118f6:	3301      	adds	r3, #1
 80118f8:	857b      	strh	r3, [r7, #42]	@ 0x2a
        unit_cnt = 0;
 80118fa:	e6f6      	b.n	80116ea <lv_btnm_set_map+0x12a>
        if(strlen(map_p_tmp[btn_cnt]) == 0) break; /*Break on end of map*/
 80118fc:	bf00      	nop
    }

    lv_obj_invalidate(btnm);
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f7f3 fd2c 	bl	800535c <lv_obj_invalidate>
 8011904:	e000      	b.n	8011908 <lv_btnm_set_map+0x348>
    if(map == NULL) return;
 8011906:	bf00      	nop
}
 8011908:	373c      	adds	r7, #60	@ 0x3c
 801190a:	46bd      	mov	sp, r7
 801190c:	bd90      	pop	{r4, r7, pc}
 801190e:	bf00      	nop
 8011910:	0801c654 	.word	0x0801c654

08011914 <lv_btnm_set_ctrl_map>:
 *                 newline entries).
 *                 An element of the map should look like e.g.:
 *                 `ctrl_map[0] = width | LV_BTNM_CTRL_NO_REPEAT |  LV_BTNM_CTRL_TGL_ENABLE`
 */
void lv_btnm_set_ctrl_map(const lv_obj_t * btnm, const lv_btnm_ctrl_t ctrl_map[])
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b084      	sub	sp, #16
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801191e:	6878      	ldr	r0, [r7, #4]
 8011920:	f7f4 fffa 	bl	8006918 <lv_obj_get_ext_attr>
 8011924:	60f8      	str	r0, [r7, #12]
    memcpy(ext->ctrl_bits, ctrl_map, sizeof(lv_btnm_ctrl_t) * ext->btn_cnt);
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	6898      	ldr	r0, [r3, #8]
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	8c1b      	ldrh	r3, [r3, #32]
 801192e:	005b      	lsls	r3, r3, #1
 8011930:	461a      	mov	r2, r3
 8011932:	6839      	ldr	r1, [r7, #0]
 8011934:	f00a f859 	bl	801b9ea <memcpy>

    lv_btnm_set_map(btnm, ext->map_p);
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	4619      	mov	r1, r3
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f7ff fe3e 	bl	80115c0 <lv_btnm_set_map>
}
 8011944:	bf00      	nop
 8011946:	3710      	adds	r7, #16
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <lv_btnm_set_style>:
 * @param btnm pointer to a button matrix object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_btnm_set_style(lv_obj_t * btnm, lv_btnm_style_t type, const lv_style_t * style)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b086      	sub	sp, #24
 8011950:	af00      	add	r7, sp, #0
 8011952:	60f8      	str	r0, [r7, #12]
 8011954:	460b      	mov	r3, r1
 8011956:	607a      	str	r2, [r7, #4]
 8011958:	72fb      	strb	r3, [r7, #11]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801195a:	68f8      	ldr	r0, [r7, #12]
 801195c:	f7f4 ffdc 	bl	8006918 <lv_obj_get_ext_attr>
 8011960:	6178      	str	r0, [r7, #20]

    switch(type) {
 8011962:	7afb      	ldrb	r3, [r7, #11]
 8011964:	2b05      	cmp	r3, #5
 8011966:	d837      	bhi.n	80119d8 <lv_btnm_set_style+0x8c>
 8011968:	a201      	add	r2, pc, #4	@ (adr r2, 8011970 <lv_btnm_set_style+0x24>)
 801196a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801196e:	bf00      	nop
 8011970:	08011989 	.word	0x08011989
 8011974:	08011993 	.word	0x08011993
 8011978:	080119a1 	.word	0x080119a1
 801197c:	080119af 	.word	0x080119af
 8011980:	080119bd 	.word	0x080119bd
 8011984:	080119cb 	.word	0x080119cb
        case LV_BTNM_STYLE_BG: lv_obj_set_style(btnm, style); break;
 8011988:	6879      	ldr	r1, [r7, #4]
 801198a:	68f8      	ldr	r0, [r7, #12]
 801198c:	f7f4 fbe3 	bl	8006156 <lv_obj_set_style>
 8011990:	e022      	b.n	80119d8 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_REL:
            ext->styles_btn[LV_BTN_STATE_REL] = style;
 8011992:	697b      	ldr	r3, [r7, #20]
 8011994:	687a      	ldr	r2, [r7, #4]
 8011996:	60da      	str	r2, [r3, #12]
            lv_obj_invalidate(btnm);
 8011998:	68f8      	ldr	r0, [r7, #12]
 801199a:	f7f3 fcdf 	bl	800535c <lv_obj_invalidate>
            break;
 801199e:	e01b      	b.n	80119d8 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_PR:
            ext->styles_btn[LV_BTN_STATE_PR] = style;
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	687a      	ldr	r2, [r7, #4]
 80119a4:	611a      	str	r2, [r3, #16]
            lv_obj_invalidate(btnm);
 80119a6:	68f8      	ldr	r0, [r7, #12]
 80119a8:	f7f3 fcd8 	bl	800535c <lv_obj_invalidate>
            break;
 80119ac:	e014      	b.n	80119d8 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_TGL_REL:
            ext->styles_btn[LV_BTN_STATE_TGL_REL] = style;
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	687a      	ldr	r2, [r7, #4]
 80119b2:	615a      	str	r2, [r3, #20]
            lv_obj_invalidate(btnm);
 80119b4:	68f8      	ldr	r0, [r7, #12]
 80119b6:	f7f3 fcd1 	bl	800535c <lv_obj_invalidate>
            break;
 80119ba:	e00d      	b.n	80119d8 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_TGL_PR:
            ext->styles_btn[LV_BTN_STATE_TGL_PR] = style;
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	687a      	ldr	r2, [r7, #4]
 80119c0:	619a      	str	r2, [r3, #24]
            lv_obj_invalidate(btnm);
 80119c2:	68f8      	ldr	r0, [r7, #12]
 80119c4:	f7f3 fcca 	bl	800535c <lv_obj_invalidate>
            break;
 80119c8:	e006      	b.n	80119d8 <lv_btnm_set_style+0x8c>
        case LV_BTNM_STYLE_BTN_INA:
            ext->styles_btn[LV_BTN_STATE_INA] = style;
 80119ca:	697b      	ldr	r3, [r7, #20]
 80119cc:	687a      	ldr	r2, [r7, #4]
 80119ce:	61da      	str	r2, [r3, #28]
            lv_obj_invalidate(btnm);
 80119d0:	68f8      	ldr	r0, [r7, #12]
 80119d2:	f7f3 fcc3 	bl	800535c <lv_obj_invalidate>
            break;
 80119d6:	bf00      	nop
    }
}
 80119d8:	bf00      	nop
 80119da:	3718      	adds	r7, #24
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}

080119e0 <lv_btnm_set_btn_ctrl>:
 * Set the attributes of a button of the button matrix
 * @param btnm pointer to button matrix object
 * @param btn_id 0 based index of the button to modify. (Not counting new lines)
 */
void lv_btnm_set_btn_ctrl(const lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b084      	sub	sp, #16
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
 80119e8:	460b      	mov	r3, r1
 80119ea:	807b      	strh	r3, [r7, #2]
 80119ec:	4613      	mov	r3, r2
 80119ee:	803b      	strh	r3, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f7f4 ff91 	bl	8006918 <lv_obj_get_ext_attr>
 80119f6:	60f8      	str	r0, [r7, #12]

    if(btn_id >= ext->btn_cnt) return;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	8c1b      	ldrh	r3, [r3, #32]
 80119fc:	887a      	ldrh	r2, [r7, #2]
 80119fe:	429a      	cmp	r2, r3
 8011a00:	d214      	bcs.n	8011a2c <lv_btnm_set_btn_ctrl+0x4c>

    ext->ctrl_bits[btn_id] |= ctrl;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	689a      	ldr	r2, [r3, #8]
 8011a06:	887b      	ldrh	r3, [r7, #2]
 8011a08:	005b      	lsls	r3, r3, #1
 8011a0a:	4413      	add	r3, r2
 8011a0c:	8819      	ldrh	r1, [r3, #0]
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	689a      	ldr	r2, [r3, #8]
 8011a12:	887b      	ldrh	r3, [r7, #2]
 8011a14:	005b      	lsls	r3, r3, #1
 8011a16:	4413      	add	r3, r2
 8011a18:	883a      	ldrh	r2, [r7, #0]
 8011a1a:	430a      	orrs	r2, r1
 8011a1c:	b292      	uxth	r2, r2
 8011a1e:	801a      	strh	r2, [r3, #0]
    invalidate_button_area(btnm, btn_id);
 8011a20:	887b      	ldrh	r3, [r7, #2]
 8011a22:	4619      	mov	r1, r3
 8011a24:	6878      	ldr	r0, [r7, #4]
 8011a26:	f001 f893 	bl	8012b50 <invalidate_button_area>
 8011a2a:	e000      	b.n	8011a2e <lv_btnm_set_btn_ctrl+0x4e>
    if(btn_id >= ext->btn_cnt) return;
 8011a2c:	bf00      	nop
}
 8011a2e:	3710      	adds	r7, #16
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}

08011a34 <lv_btnm_clear_btn_ctrl>:
 * Clear the attributes of a button of the button matrix
 * @param btnm pointer to button matrix object
 * @param btn_id 0 based index of the button to modify. (Not counting new lines)
 */
void lv_btnm_clear_btn_ctrl(const lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b084      	sub	sp, #16
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
 8011a3c:	460b      	mov	r3, r1
 8011a3e:	807b      	strh	r3, [r7, #2]
 8011a40:	4613      	mov	r3, r2
 8011a42:	803b      	strh	r3, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011a44:	6878      	ldr	r0, [r7, #4]
 8011a46:	f7f4 ff67 	bl	8006918 <lv_obj_get_ext_attr>
 8011a4a:	60f8      	str	r0, [r7, #12]

    if(btn_id >= ext->btn_cnt) return;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	8c1b      	ldrh	r3, [r3, #32]
 8011a50:	887a      	ldrh	r2, [r7, #2]
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d219      	bcs.n	8011a8a <lv_btnm_clear_btn_ctrl+0x56>

    ext->ctrl_bits[btn_id] &= (~ctrl);
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	689a      	ldr	r2, [r3, #8]
 8011a5a:	887b      	ldrh	r3, [r7, #2]
 8011a5c:	005b      	lsls	r3, r3, #1
 8011a5e:	4413      	add	r3, r2
 8011a60:	881b      	ldrh	r3, [r3, #0]
 8011a62:	b21a      	sxth	r2, r3
 8011a64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011a68:	43db      	mvns	r3, r3
 8011a6a:	b21b      	sxth	r3, r3
 8011a6c:	4013      	ands	r3, r2
 8011a6e:	b219      	sxth	r1, r3
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	689a      	ldr	r2, [r3, #8]
 8011a74:	887b      	ldrh	r3, [r7, #2]
 8011a76:	005b      	lsls	r3, r3, #1
 8011a78:	4413      	add	r3, r2
 8011a7a:	b28a      	uxth	r2, r1
 8011a7c:	801a      	strh	r2, [r3, #0]
    invalidate_button_area(btnm, btn_id);
 8011a7e:	887b      	ldrh	r3, [r7, #2]
 8011a80:	4619      	mov	r1, r3
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	f001 f864 	bl	8012b50 <invalidate_button_area>
 8011a88:	e000      	b.n	8011a8c <lv_btnm_clear_btn_ctrl+0x58>
    if(btn_id >= ext->btn_cnt) return;
 8011a8a:	bf00      	nop
}
 8011a8c:	3710      	adds	r7, #16
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}

08011a92 <lv_btnm_clear_btn_ctrl_all>:
 * @param btnm pointer to a button matrix object
 * @param ctrl attribute(s) to set from `lv_btnm_ctrl_t`. Values can be ORed.
 * @param en true: set the attributes; false: clear the attributes
 */
void lv_btnm_clear_btn_ctrl_all(lv_obj_t * btnm, lv_btnm_ctrl_t ctrl)
{
 8011a92:	b580      	push	{r7, lr}
 8011a94:	b084      	sub	sp, #16
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	6078      	str	r0, [r7, #4]
 8011a9a:	460b      	mov	r3, r1
 8011a9c:	807b      	strh	r3, [r7, #2]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f7f4 ff3a 	bl	8006918 <lv_obj_get_ext_attr>
 8011aa4:	60b8      	str	r0, [r7, #8]
    uint16_t i;
    for(i = 0; i < ext->btn_cnt; i++) {
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	81fb      	strh	r3, [r7, #14]
 8011aaa:	e008      	b.n	8011abe <lv_btnm_clear_btn_ctrl_all+0x2c>
        lv_btnm_clear_btn_ctrl(btnm, i, ctrl);
 8011aac:	887a      	ldrh	r2, [r7, #2]
 8011aae:	89fb      	ldrh	r3, [r7, #14]
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f7ff ffbe 	bl	8011a34 <lv_btnm_clear_btn_ctrl>
    for(i = 0; i < ext->btn_cnt; i++) {
 8011ab8:	89fb      	ldrh	r3, [r7, #14]
 8011aba:	3301      	adds	r3, #1
 8011abc:	81fb      	strh	r3, [r7, #14]
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	8c1b      	ldrh	r3, [r3, #32]
 8011ac2:	89fa      	ldrh	r2, [r7, #14]
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d3f1      	bcc.n	8011aac <lv_btnm_clear_btn_ctrl_all+0x1a>
    }
}
 8011ac8:	bf00      	nop
 8011aca:	bf00      	nop
 8011acc:	3710      	adds	r7, #16
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}

08011ad2 <lv_btnm_get_map_array>:
 * Get the current map of a button matrix
 * @param btnm pointer to a button matrix object
 * @return the current map
 */
const char ** lv_btnm_get_map_array(const lv_obj_t * btnm)
{
 8011ad2:	b580      	push	{r7, lr}
 8011ad4:	b084      	sub	sp, #16
 8011ad6:	af00      	add	r7, sp, #0
 8011ad8:	6078      	str	r0, [r7, #4]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f7f4 ff1c 	bl	8006918 <lv_obj_get_ext_attr>
 8011ae0:	60f8      	str	r0, [r7, #12]
    return ext->map_p;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	681b      	ldr	r3, [r3, #0]
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3710      	adds	r7, #16
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}

08011aee <lv_btnm_get_active_btn>:
 * Useful in the the `event_cb` to get the text of the button, check if hidden etc.
 * @param btnm pointer to button matrix object
 * @return  index of the last released button (LV_BTNM_BTN_NONE: if unset)
 */
uint16_t lv_btnm_get_active_btn(const lv_obj_t * btnm)
{
 8011aee:	b580      	push	{r7, lr}
 8011af0:	b084      	sub	sp, #16
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6078      	str	r0, [r7, #4]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f7f4 ff0e 	bl	8006918 <lv_obj_get_ext_attr>
 8011afc:	60f8      	str	r0, [r7, #12]
    return ext->btn_id_act;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3710      	adds	r7, #16
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}

08011b0a <lv_btnm_get_active_btn_text>:
 * Useful in the the `event_cb`
 * @param btnm pointer to button matrix object
 * @return text of the last released button (NULL: if unset)
 */
const char * lv_btnm_get_active_btn_text(const lv_obj_t * btnm)
{
 8011b0a:	b580      	push	{r7, lr}
 8011b0c:	b084      	sub	sp, #16
 8011b0e:	af00      	add	r7, sp, #0
 8011b10:	6078      	str	r0, [r7, #4]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011b12:	6878      	ldr	r0, [r7, #4]
 8011b14:	f7f4 ff00 	bl	8006918 <lv_obj_get_ext_attr>
 8011b18:	60f8      	str	r0, [r7, #12]
    if(ext->btn_id_act != LV_BTNM_BTN_NONE) {
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011b1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011b22:	4293      	cmp	r3, r2
 8011b24:	d007      	beq.n	8011b36 <lv_btnm_get_active_btn_text+0x2c>
        return lv_btnm_get_btn_text(btnm, ext->btn_id_act);
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011b2a:	4619      	mov	r1, r3
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f000 f807 	bl	8011b40 <lv_btnm_get_btn_text>
 8011b32:	4603      	mov	r3, r0
 8011b34:	e000      	b.n	8011b38 <lv_btnm_get_active_btn_text+0x2e>
    } else {
        return NULL;
 8011b36:	2300      	movs	r3, #0
    }
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3710      	adds	r7, #16
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	bd80      	pop	{r7, pc}

08011b40 <lv_btnm_get_btn_text>:
 * @param btn_id the index a button not counting new line characters. (The return value of
 * lv_btnm_get_pressed/released)
 * @return  text of btn_index` button
 */
const char * lv_btnm_get_btn_text(const lv_obj_t * btnm, uint16_t btn_id)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b084      	sub	sp, #16
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	460b      	mov	r3, r1
 8011b4a:	807b      	strh	r3, [r7, #2]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f7f4 fee3 	bl	8006918 <lv_obj_get_ext_attr>
 8011b52:	60b8      	str	r0, [r7, #8]
    if(btn_id > ext->btn_cnt) return NULL;
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	8c1b      	ldrh	r3, [r3, #32]
 8011b58:	887a      	ldrh	r2, [r7, #2]
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d901      	bls.n	8011b62 <lv_btnm_get_btn_text+0x22>
 8011b5e:	2300      	movs	r3, #0
 8011b60:	e02b      	b.n	8011bba <lv_btnm_get_btn_text+0x7a>

    uint16_t txt_i = 0;
 8011b62:	2300      	movs	r3, #0
 8011b64:	81fb      	strh	r3, [r7, #14]
    uint16_t btn_i = 0;
 8011b66:	2300      	movs	r3, #0
 8011b68:	81bb      	strh	r3, [r7, #12]

    /* Search the text of ext->btn_pr the buttons text in the map
     * Skip "\n"-s*/
    while(btn_i != btn_id) {
 8011b6a:	e015      	b.n	8011b98 <lv_btnm_get_btn_text+0x58>
        btn_i++;
 8011b6c:	89bb      	ldrh	r3, [r7, #12]
 8011b6e:	3301      	adds	r3, #1
 8011b70:	81bb      	strh	r3, [r7, #12]
        txt_i++;
 8011b72:	89fb      	ldrh	r3, [r7, #14]
 8011b74:	3301      	adds	r3, #1
 8011b76:	81fb      	strh	r3, [r7, #14]
        if(strcmp(ext->map_p[txt_i], "\n") == 0) txt_i++;
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	681a      	ldr	r2, [r3, #0]
 8011b7c:	89fb      	ldrh	r3, [r7, #14]
 8011b7e:	009b      	lsls	r3, r3, #2
 8011b80:	4413      	add	r3, r2
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	490f      	ldr	r1, [pc, #60]	@ (8011bc4 <lv_btnm_get_btn_text+0x84>)
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7ee fb4c 	bl	8000224 <strcmp>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d102      	bne.n	8011b98 <lv_btnm_get_btn_text+0x58>
 8011b92:	89fb      	ldrh	r3, [r7, #14]
 8011b94:	3301      	adds	r3, #1
 8011b96:	81fb      	strh	r3, [r7, #14]
    while(btn_i != btn_id) {
 8011b98:	89ba      	ldrh	r2, [r7, #12]
 8011b9a:	887b      	ldrh	r3, [r7, #2]
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d1e5      	bne.n	8011b6c <lv_btnm_get_btn_text+0x2c>
    }

    if(btn_i == ext->btn_cnt) return NULL;
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	8c1b      	ldrh	r3, [r3, #32]
 8011ba4:	89ba      	ldrh	r2, [r7, #12]
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d101      	bne.n	8011bae <lv_btnm_get_btn_text+0x6e>
 8011baa:	2300      	movs	r3, #0
 8011bac:	e005      	b.n	8011bba <lv_btnm_get_btn_text+0x7a>

    return ext->map_p[txt_i];
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	681a      	ldr	r2, [r3, #0]
 8011bb2:	89fb      	ldrh	r3, [r7, #14]
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	4413      	add	r3, r2
 8011bb8:	681b      	ldr	r3, [r3, #0]
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3710      	adds	r7, #16
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	0801c654 	.word	0x0801c654

08011bc8 <lv_btnm_get_btn_ctrl>:
 * lv_btnm_get_pressed/released)
 * @param ctrl control values to check (ORed value can be used)
 * @return true: long press repeat is disabled; false: long press repeat enabled
 */
bool lv_btnm_get_btn_ctrl(lv_obj_t * btnm, uint16_t btn_id, lv_btnm_ctrl_t ctrl)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	460b      	mov	r3, r1
 8011bd2:	807b      	strh	r3, [r7, #2]
 8011bd4:	4613      	mov	r3, r2
 8011bd6:	803b      	strh	r3, [r7, #0]
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f7f4 fe9d 	bl	8006918 <lv_obj_get_ext_attr>
 8011bde:	60f8      	str	r0, [r7, #12]
    if(btn_id >= ext->btn_cnt) return false;
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	8c1b      	ldrh	r3, [r3, #32]
 8011be4:	887a      	ldrh	r2, [r7, #2]
 8011be6:	429a      	cmp	r2, r3
 8011be8:	d301      	bcc.n	8011bee <lv_btnm_get_btn_ctrl+0x26>
 8011bea:	2300      	movs	r3, #0
 8011bec:	e00d      	b.n	8011c0a <lv_btnm_get_btn_ctrl+0x42>

    return ext->ctrl_bits[btn_id] & ctrl ? true : false;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	689a      	ldr	r2, [r3, #8]
 8011bf2:	887b      	ldrh	r3, [r7, #2]
 8011bf4:	005b      	lsls	r3, r3, #1
 8011bf6:	4413      	add	r3, r2
 8011bf8:	881a      	ldrh	r2, [r3, #0]
 8011bfa:	883b      	ldrh	r3, [r7, #0]
 8011bfc:	4013      	ands	r3, r2
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	bf14      	ite	ne
 8011c04:	2301      	movne	r3, #1
 8011c06:	2300      	moveq	r3, #0
 8011c08:	b2db      	uxtb	r3, r3
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3710      	adds	r7, #16
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
	...

08011c14 <lv_btnm_get_style>:
 * @param btnm pointer to a button matrix object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_btnm_get_style(const lv_obj_t * btnm, lv_btnm_style_t type)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b084      	sub	sp, #16
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	460b      	mov	r3, r1
 8011c1e:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 8011c20:	2300      	movs	r3, #0
 8011c22:	60fb      	str	r3, [r7, #12]
    lv_btnm_ext_t * ext      = lv_obj_get_ext_attr(btnm);
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f7f4 fe77 	bl	8006918 <lv_obj_get_ext_attr>
 8011c2a:	60b8      	str	r0, [r7, #8]

    switch(type) {
 8011c2c:	78fb      	ldrb	r3, [r7, #3]
 8011c2e:	2b05      	cmp	r3, #5
 8011c30:	d827      	bhi.n	8011c82 <lv_btnm_get_style+0x6e>
 8011c32:	a201      	add	r2, pc, #4	@ (adr r2, 8011c38 <lv_btnm_get_style+0x24>)
 8011c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c38:	08011c51 	.word	0x08011c51
 8011c3c:	08011c5b 	.word	0x08011c5b
 8011c40:	08011c63 	.word	0x08011c63
 8011c44:	08011c6b 	.word	0x08011c6b
 8011c48:	08011c73 	.word	0x08011c73
 8011c4c:	08011c7b 	.word	0x08011c7b
        case LV_BTNM_STYLE_BG: style = lv_obj_get_style(btnm); break;
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f7f4 fd4b 	bl	80066ec <lv_obj_get_style>
 8011c56:	60f8      	str	r0, [r7, #12]
 8011c58:	e016      	b.n	8011c88 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_REL: style = ext->styles_btn[LV_BTN_STATE_REL]; break;
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	68db      	ldr	r3, [r3, #12]
 8011c5e:	60fb      	str	r3, [r7, #12]
 8011c60:	e012      	b.n	8011c88 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_PR: style = ext->styles_btn[LV_BTN_STATE_PR]; break;
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	691b      	ldr	r3, [r3, #16]
 8011c66:	60fb      	str	r3, [r7, #12]
 8011c68:	e00e      	b.n	8011c88 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_TGL_REL: style = ext->styles_btn[LV_BTN_STATE_TGL_REL]; break;
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	695b      	ldr	r3, [r3, #20]
 8011c6e:	60fb      	str	r3, [r7, #12]
 8011c70:	e00a      	b.n	8011c88 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_TGL_PR: style = ext->styles_btn[LV_BTN_STATE_TGL_PR]; break;
 8011c72:	68bb      	ldr	r3, [r7, #8]
 8011c74:	699b      	ldr	r3, [r3, #24]
 8011c76:	60fb      	str	r3, [r7, #12]
 8011c78:	e006      	b.n	8011c88 <lv_btnm_get_style+0x74>
        case LV_BTNM_STYLE_BTN_INA: style = ext->styles_btn[LV_BTN_STATE_INA]; break;
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	69db      	ldr	r3, [r3, #28]
 8011c7e:	60fb      	str	r3, [r7, #12]
 8011c80:	e002      	b.n	8011c88 <lv_btnm_get_style+0x74>
        default: style = NULL; break;
 8011c82:	2300      	movs	r3, #0
 8011c84:	60fb      	str	r3, [r7, #12]
 8011c86:	bf00      	nop
    }

    return style;
 8011c88:	68fb      	ldr	r3, [r7, #12]
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3710      	adds	r7, #16
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd80      	pop	{r7, pc}
 8011c92:	bf00      	nop

08011c94 <lv_btnm_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_btnm_design(lv_obj_t * btnm, const lv_area_t * mask, lv_design_mode_t mode)
{
 8011c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c96:	b0a7      	sub	sp, #156	@ 0x9c
 8011c98:	af06      	add	r7, sp, #24
 8011c9a:	60f8      	str	r0, [r7, #12]
 8011c9c:	60b9      	str	r1, [r7, #8]
 8011c9e:	4613      	mov	r3, r2
 8011ca0:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 8011ca2:	79fb      	ldrb	r3, [r7, #7]
 8011ca4:	2b02      	cmp	r3, #2
 8011ca6:	d107      	bne.n	8011cb8 <lv_btnm_design+0x24>
        return ancestor_design_f(btnm, mask, mode);
 8011ca8:	4ba5      	ldr	r3, [pc, #660]	@ (8011f40 <lv_btnm_design+0x2ac>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	79fa      	ldrb	r2, [r7, #7]
 8011cae:	68b9      	ldr	r1, [r7, #8]
 8011cb0:	68f8      	ldr	r0, [r7, #12]
 8011cb2:	4798      	blx	r3
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	e21b      	b.n	80120f0 <lv_btnm_design+0x45c>
        /*Return false if the object is not covers the mask_p area*/
    }
    /*Draw the object*/
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 8011cb8:	79fb      	ldrb	r3, [r7, #7]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	f040 8217 	bne.w	80120ee <lv_btnm_design+0x45a>

        ancestor_design_f(btnm, mask, mode);
 8011cc0:	4b9f      	ldr	r3, [pc, #636]	@ (8011f40 <lv_btnm_design+0x2ac>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	79fa      	ldrb	r2, [r7, #7]
 8011cc6:	68b9      	ldr	r1, [r7, #8]
 8011cc8:	68f8      	ldr	r0, [r7, #12]
 8011cca:	4798      	blx	r3

        lv_btnm_ext_t * ext         = lv_obj_get_ext_attr(btnm);
 8011ccc:	68f8      	ldr	r0, [r7, #12]
 8011cce:	f7f4 fe23 	bl	8006918 <lv_obj_get_ext_attr>
 8011cd2:	6738      	str	r0, [r7, #112]	@ 0x70
        const lv_style_t * bg_style = lv_obj_get_style(btnm);
 8011cd4:	68f8      	ldr	r0, [r7, #12]
 8011cd6:	f7f4 fd09 	bl	80066ec <lv_obj_get_style>
 8011cda:	66f8      	str	r0, [r7, #108]	@ 0x6c
        const lv_style_t * btn_style;
        lv_opa_t opa_scale = lv_obj_get_opa_scale(btnm);
 8011cdc:	68f8      	ldr	r0, [r7, #12]
 8011cde:	f7f4 fdd0 	bl	8006882 <lv_obj_get_opa_scale>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

        lv_area_t area_btnm;
        lv_obj_get_coords(btnm, &area_btnm);
 8011ce8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8011cec:	4619      	mov	r1, r3
 8011cee:	68f8      	ldr	r0, [r7, #12]
 8011cf0:	f7f4 fc50 	bl	8006594 <lv_obj_get_coords>

        lv_area_t area_tmp;
        lv_coord_t btn_w;
        lv_coord_t btn_h;

        uint16_t btn_i = 0;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        uint16_t txt_i = 0;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
        lv_style_t style_tmp;
        lv_txt_flag_t txt_flag = LV_TXT_FLAG_NONE;
 8011d00:	2300      	movs	r3, #0
 8011d02:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

        if(ext->recolor) txt_flag = LV_TXT_FLAG_RECOLOR;
 8011d06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011d08:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8011d0c:	f003 0301 	and.w	r3, r3, #1
 8011d10:	b2db      	uxtb	r3, r3
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d002      	beq.n	8011d1c <lv_btnm_design+0x88>
 8011d16:	2301      	movs	r3, #1
 8011d18:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8011d22:	e1dd      	b.n	80120e0 <lv_btnm_design+0x44c>
            /*Search the next valid text in the map*/
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
                txt_i++;
 8011d24:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8011d28:	3301      	adds	r3, #1
 8011d2a:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
            while(strcmp(ext->map_p[txt_i], "\n") == 0) {
 8011d2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8011d36:	009b      	lsls	r3, r3, #2
 8011d38:	4413      	add	r3, r2
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	4981      	ldr	r1, [pc, #516]	@ (8011f44 <lv_btnm_design+0x2b0>)
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f7ee fa70 	bl	8000224 <strcmp>
 8011d44:	4603      	mov	r3, r0
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d0ec      	beq.n	8011d24 <lv_btnm_design+0x90>
            }

            /*Skip hidden buttons*/
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
 8011d4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011d4c:	689a      	ldr	r2, [r3, #8]
 8011d4e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8011d52:	005b      	lsls	r3, r3, #1
 8011d54:	4413      	add	r3, r2
 8011d56:	881b      	ldrh	r3, [r3, #0]
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f000 fe22 	bl	80129a2 <button_is_hidden>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	f040 81b2 	bne.w	80120ca <lv_btnm_design+0x436>

            lv_area_copy(&area_tmp, &ext->button_areas[btn_i]);
 8011d66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011d68:	685a      	ldr	r2, [r3, #4]
 8011d6a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8011d6e:	00db      	lsls	r3, r3, #3
 8011d70:	441a      	add	r2, r3
 8011d72:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011d76:	4611      	mov	r1, r2
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f7ff fafd 	bl	8011378 <lv_area_copy>
            area_tmp.x1 += area_btnm.x1;
 8011d7e:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 8011d82:	b29a      	uxth	r2, r3
 8011d84:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8011d88:	b29b      	uxth	r3, r3
 8011d8a:	4413      	add	r3, r2
 8011d8c:	b29b      	uxth	r3, r3
 8011d8e:	b21b      	sxth	r3, r3
 8011d90:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
            area_tmp.y1 += area_btnm.y1;
 8011d94:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 8011d98:	b29a      	uxth	r2, r3
 8011d9a:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	4413      	add	r3, r2
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	b21b      	sxth	r3, r3
 8011da6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
            area_tmp.x2 += area_btnm.x1;
 8011daa:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 8011dae:	b29a      	uxth	r2, r3
 8011db0:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8011db4:	b29b      	uxth	r3, r3
 8011db6:	4413      	add	r3, r2
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	b21b      	sxth	r3, r3
 8011dbc:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
            area_tmp.y2 += area_btnm.y1;
 8011dc0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8011dc4:	b29a      	uxth	r2, r3
 8011dc6:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8011dca:	b29b      	uxth	r3, r3
 8011dcc:	4413      	add	r3, r2
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	b21b      	sxth	r3, r3
 8011dd2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

            btn_w = lv_area_get_width(&area_tmp);
 8011dd6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f7ff fada 	bl	8011394 <lv_area_get_width>
 8011de0:	4603      	mov	r3, r0
 8011de2:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
            btn_h = lv_area_get_height(&area_tmp);
 8011de6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7ff fae8 	bl	80113c0 <lv_area_get_height>
 8011df0:	4603      	mov	r3, r0
 8011df2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

            /*Load the style*/
            bool tgl_state = button_get_tgl_state(ext->ctrl_bits[btn_i]);
 8011df6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011df8:	689a      	ldr	r2, [r3, #8]
 8011dfa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8011dfe:	005b      	lsls	r3, r3, #1
 8011e00:	4413      	add	r3, r2
 8011e02:	881b      	ldrh	r3, [r3, #0]
 8011e04:	4618      	mov	r0, r3
 8011e06:	f000 fe2b 	bl	8012a60 <button_get_tgl_state>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
            if(button_is_inactive(ext->ctrl_bits[btn_i]))
 8011e10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011e12:	689a      	ldr	r2, [r3, #8]
 8011e14:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8011e18:	005b      	lsls	r3, r3, #1
 8011e1a:	4413      	add	r3, r2
 8011e1c:	881b      	ldrh	r3, [r3, #0]
 8011e1e:	4618      	mov	r0, r3
 8011e20:	f000 fde5 	bl	80129ee <button_is_inactive>
 8011e24:	4603      	mov	r3, r0
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d005      	beq.n	8011e36 <lv_btnm_design+0x1a2>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_INA);
 8011e2a:	2105      	movs	r1, #5
 8011e2c:	68f8      	ldr	r0, [r7, #12]
 8011e2e:	f7ff fef1 	bl	8011c14 <lv_btnm_get_style>
 8011e32:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8011e34:	e04a      	b.n	8011ecc <lv_btnm_design+0x238>
            else if(btn_i != ext->btn_id_pr && tgl_state == false)
 8011e36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011e38:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8011e3a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d00c      	beq.n	8011e5c <lv_btnm_design+0x1c8>
 8011e42:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8011e46:	f083 0301 	eor.w	r3, r3, #1
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d005      	beq.n	8011e5c <lv_btnm_design+0x1c8>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL);
 8011e50:	2101      	movs	r1, #1
 8011e52:	68f8      	ldr	r0, [r7, #12]
 8011e54:	f7ff fede 	bl	8011c14 <lv_btnm_get_style>
 8011e58:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8011e5a:	e037      	b.n	8011ecc <lv_btnm_design+0x238>
            else if(btn_i == ext->btn_id_pr && tgl_state == false)
 8011e5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011e5e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8011e60:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8011e64:	429a      	cmp	r2, r3
 8011e66:	d10c      	bne.n	8011e82 <lv_btnm_design+0x1ee>
 8011e68:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8011e6c:	f083 0301 	eor.w	r3, r3, #1
 8011e70:	b2db      	uxtb	r3, r3
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d005      	beq.n	8011e82 <lv_btnm_design+0x1ee>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_PR);
 8011e76:	2102      	movs	r1, #2
 8011e78:	68f8      	ldr	r0, [r7, #12]
 8011e7a:	f7ff fecb 	bl	8011c14 <lv_btnm_get_style>
 8011e7e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8011e80:	e024      	b.n	8011ecc <lv_btnm_design+0x238>
            else if(btn_i != ext->btn_id_pr && tgl_state == true)
 8011e82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011e84:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8011e86:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	d009      	beq.n	8011ea2 <lv_btnm_design+0x20e>
 8011e8e:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d005      	beq.n	8011ea2 <lv_btnm_design+0x20e>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_TGL_REL);
 8011e96:	2103      	movs	r1, #3
 8011e98:	68f8      	ldr	r0, [r7, #12]
 8011e9a:	f7ff febb 	bl	8011c14 <lv_btnm_get_style>
 8011e9e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8011ea0:	e014      	b.n	8011ecc <lv_btnm_design+0x238>
            else if(btn_i == ext->btn_id_pr && tgl_state == true)
 8011ea2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011ea4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8011ea6:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	d109      	bne.n	8011ec2 <lv_btnm_design+0x22e>
 8011eae:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d005      	beq.n	8011ec2 <lv_btnm_design+0x22e>
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_TGL_PR);
 8011eb6:	2104      	movs	r1, #4
 8011eb8:	68f8      	ldr	r0, [r7, #12]
 8011eba:	f7ff feab 	bl	8011c14 <lv_btnm_get_style>
 8011ebe:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8011ec0:	e004      	b.n	8011ecc <lv_btnm_design+0x238>
            else
                btn_style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BTN_REL); /*Not possible option, just to be sure*/
 8011ec2:	2101      	movs	r1, #1
 8011ec4:	68f8      	ldr	r0, [r7, #12]
 8011ec6:	f7ff fea5 	bl	8011c14 <lv_btnm_get_style>
 8011eca:	67f8      	str	r0, [r7, #124]	@ 0x7c

            lv_style_copy(&style_tmp, btn_style);
 8011ecc:	f107 0310 	add.w	r3, r7, #16
 8011ed0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7f5 ff90 	bl	8007df8 <lv_style_copy>

            /*Remove borders on the edges if `LV_BORDER_INTERNAL`*/
            if(style_tmp.body.border.part & LV_BORDER_INTERNAL) {
 8011ed8:	7fbb      	ldrb	r3, [r7, #30]
 8011eda:	f003 0310 	and.w	r3, r3, #16
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d067      	beq.n	8011fb2 <lv_btnm_design+0x31e>
                if(area_tmp.y1 == btnm->coords.y1 + bg_style->body.padding.top) {
 8011ee2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 8011ee6:	461a      	mov	r2, r3
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8011eee:	4619      	mov	r1, r3
 8011ef0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011ef2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8011ef6:	440b      	add	r3, r1
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d104      	bne.n	8011f06 <lv_btnm_design+0x272>
                    style_tmp.body.border.part &= ~LV_BORDER_TOP;
 8011efc:	7fbb      	ldrb	r3, [r7, #30]
 8011efe:	f023 0302 	bic.w	r3, r3, #2
 8011f02:	b2db      	uxtb	r3, r3
 8011f04:	77bb      	strb	r3, [r7, #30]
                }
                if(area_tmp.y2 == btnm->coords.y2 - bg_style->body.padding.bottom) {
 8011f06:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8011f12:	4619      	mov	r1, r3
 8011f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f16:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8011f1a:	1acb      	subs	r3, r1, r3
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d104      	bne.n	8011f2a <lv_btnm_design+0x296>
                    style_tmp.body.border.part &= ~LV_BORDER_BOTTOM;
 8011f20:	7fbb      	ldrb	r3, [r7, #30]
 8011f22:	f023 0301 	bic.w	r3, r3, #1
 8011f26:	b2db      	uxtb	r3, r3
 8011f28:	77bb      	strb	r3, [r7, #30]
                }

                if(txt_i == 0) {
 8011f2a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d10a      	bne.n	8011f48 <lv_btnm_design+0x2b4>
                    style_tmp.body.border.part &= ~LV_BORDER_LEFT;
 8011f32:	7fbb      	ldrb	r3, [r7, #30]
 8011f34:	f023 0304 	bic.w	r3, r3, #4
 8011f38:	b2db      	uxtb	r3, r3
 8011f3a:	77bb      	strb	r3, [r7, #30]
 8011f3c:	e01a      	b.n	8011f74 <lv_btnm_design+0x2e0>
 8011f3e:	bf00      	nop
 8011f40:	2000ad80 	.word	0x2000ad80
 8011f44:	0801c654 	.word	0x0801c654
                } else if(strcmp(ext->map_p[txt_i - 1], "\n") == 0) {
 8011f48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011f4a:	681a      	ldr	r2, [r3, #0]
 8011f4c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8011f50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8011f54:	3b01      	subs	r3, #1
 8011f56:	009b      	lsls	r3, r3, #2
 8011f58:	4413      	add	r3, r2
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	4966      	ldr	r1, [pc, #408]	@ (80120f8 <lv_btnm_design+0x464>)
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7ee f960 	bl	8000224 <strcmp>
 8011f64:	4603      	mov	r3, r0
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d104      	bne.n	8011f74 <lv_btnm_design+0x2e0>
                    style_tmp.body.border.part &= ~LV_BORDER_LEFT;
 8011f6a:	7fbb      	ldrb	r3, [r7, #30]
 8011f6c:	f023 0304 	bic.w	r3, r3, #4
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	77bb      	strb	r3, [r7, #30]
                }

                if(ext->map_p[txt_i + 1][0] == '\0' || strcmp(ext->map_p[txt_i + 1], "\n") == 0) {
 8011f74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011f76:	681a      	ldr	r2, [r3, #0]
 8011f78:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8011f7c:	3301      	adds	r3, #1
 8011f7e:	009b      	lsls	r3, r3, #2
 8011f80:	4413      	add	r3, r2
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d00e      	beq.n	8011fa8 <lv_btnm_design+0x314>
 8011f8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011f8c:	681a      	ldr	r2, [r3, #0]
 8011f8e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8011f92:	3301      	adds	r3, #1
 8011f94:	009b      	lsls	r3, r3, #2
 8011f96:	4413      	add	r3, r2
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	4957      	ldr	r1, [pc, #348]	@ (80120f8 <lv_btnm_design+0x464>)
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7ee f941 	bl	8000224 <strcmp>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d104      	bne.n	8011fb2 <lv_btnm_design+0x31e>
                    style_tmp.body.border.part &= ~LV_BORDER_RIGHT;
 8011fa8:	7fbb      	ldrb	r3, [r7, #30]
 8011faa:	f023 0308 	bic.w	r3, r3, #8
 8011fae:	b2db      	uxtb	r3, r3
 8011fb0:	77bb      	strb	r3, [r7, #30]
                }
            }
            lv_draw_rect(&area_tmp, mask, &style_tmp, opa_scale);
 8011fb2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8011fb6:	f107 0210 	add.w	r2, r7, #16
 8011fba:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8011fbe:	68b9      	ldr	r1, [r7, #8]
 8011fc0:	f7f7 fa54 	bl	800946c <lv_draw_rect>

            /*Calculate the size of the text*/
            if(btn_style->glass) btn_style = bg_style;
 8011fc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011fc6:	781b      	ldrb	r3, [r3, #0]
 8011fc8:	f003 0301 	and.w	r3, r3, #1
 8011fcc:	b2db      	uxtb	r3, r3
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d001      	beq.n	8011fd6 <lv_btnm_design+0x342>
 8011fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011fd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
            const lv_font_t * font = btn_style->text.font;
 8011fd6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011fda:	663b      	str	r3, [r7, #96]	@ 0x60
            lv_point_t txt_size;
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font, btn_style->text.letter_space,
 8011fdc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8011fe4:	009b      	lsls	r3, r3, #2
 8011fe6:	4413      	add	r3, r2
 8011fe8:	681d      	ldr	r5, [r3, #0]
 8011fea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011fec:	f9b3 6028 	ldrsh.w	r6, [r3, #40]	@ 0x28
                            btn_style->text.line_space, lv_area_get_width(&area_btnm), txt_flag);
 8011ff0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011ff2:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	@ 0x2a
            lv_txt_get_size(&txt_size, ext->map_p[txt_i], font, btn_style->text.letter_space,
 8011ff6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7ff f9ca 	bl	8011394 <lv_area_get_width>
 8012000:	4603      	mov	r3, r0
 8012002:	461a      	mov	r2, r3
 8012004:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8012008:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801200c:	9302      	str	r3, [sp, #8]
 801200e:	9201      	str	r2, [sp, #4]
 8012010:	9400      	str	r4, [sp, #0]
 8012012:	4633      	mov	r3, r6
 8012014:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8012016:	4629      	mov	r1, r5
 8012018:	f7fe fc6b 	bl	80108f2 <lv_txt_get_size>

            area_tmp.x1 += (btn_w - txt_size.x) / 2;
 801201c:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 8012020:	b29a      	uxth	r2, r3
 8012022:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8012026:	f9b7 104c 	ldrsh.w	r1, [r7, #76]	@ 0x4c
 801202a:	1a5b      	subs	r3, r3, r1
 801202c:	0fd9      	lsrs	r1, r3, #31
 801202e:	440b      	add	r3, r1
 8012030:	105b      	asrs	r3, r3, #1
 8012032:	b29b      	uxth	r3, r3
 8012034:	4413      	add	r3, r2
 8012036:	b29b      	uxth	r3, r3
 8012038:	b21b      	sxth	r3, r3
 801203a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
            area_tmp.y1 += (btn_h - txt_size.y) / 2;
 801203e:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 8012042:	b29a      	uxth	r2, r3
 8012044:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	@ 0x66
 8012048:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	@ 0x4e
 801204c:	1a5b      	subs	r3, r3, r1
 801204e:	0fd9      	lsrs	r1, r3, #31
 8012050:	440b      	add	r3, r1
 8012052:	105b      	asrs	r3, r3, #1
 8012054:	b29b      	uxth	r3, r3
 8012056:	4413      	add	r3, r2
 8012058:	b29b      	uxth	r3, r3
 801205a:	b21b      	sxth	r3, r3
 801205c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
            area_tmp.x2 = area_tmp.x1 + txt_size.x;
 8012060:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 8012064:	b29a      	uxth	r2, r3
 8012066:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 801206a:	b29b      	uxth	r3, r3
 801206c:	4413      	add	r3, r2
 801206e:	b29b      	uxth	r3, r3
 8012070:	b21b      	sxth	r3, r3
 8012072:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
            area_tmp.y2 = area_tmp.y1 + txt_size.y;
 8012076:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 801207a:	b29a      	uxth	r2, r3
 801207c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8012080:	b29b      	uxth	r3, r3
 8012082:	4413      	add	r3, r2
 8012084:	b29b      	uxth	r3, r3
 8012086:	b21b      	sxth	r3, r3
 8012088:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

            lv_draw_label(&area_tmp, mask, btn_style, opa_scale, ext->map_p[txt_i], txt_flag, NULL, -1, -1, NULL);
 801208c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8012094:	009b      	lsls	r3, r3, #2
 8012096:	4413      	add	r3, r2
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	f897 106b 	ldrb.w	r1, [r7, #107]	@ 0x6b
 801209e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80120a2:	2200      	movs	r2, #0
 80120a4:	9205      	str	r2, [sp, #20]
 80120a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80120aa:	9204      	str	r2, [sp, #16]
 80120ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80120b0:	9203      	str	r2, [sp, #12]
 80120b2:	2200      	movs	r2, #0
 80120b4:	9202      	str	r2, [sp, #8]
 80120b6:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80120ba:	9201      	str	r2, [sp, #4]
 80120bc:	9300      	str	r3, [sp, #0]
 80120be:	460b      	mov	r3, r1
 80120c0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80120c2:	68b9      	ldr	r1, [r7, #8]
 80120c4:	f7f6 fd42 	bl	8008b4c <lv_draw_label>
 80120c8:	e000      	b.n	80120cc <lv_btnm_design+0x438>
            if(button_is_hidden(ext->ctrl_bits[btn_i])) continue;
 80120ca:	bf00      	nop
        for(btn_i = 0; btn_i < ext->btn_cnt; btn_i++, txt_i++) {
 80120cc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80120d0:	3301      	adds	r3, #1
 80120d2:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80120d6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80120da:	3301      	adds	r3, #1
 80120dc:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 80120e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80120e2:	8c1b      	ldrh	r3, [r3, #32]
 80120e4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80120e8:	429a      	cmp	r2, r3
 80120ea:	f4ff ae20 	bcc.w	8011d2e <lv_btnm_design+0x9a>
        }
    }
    return true;
 80120ee:	2301      	movs	r3, #1
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3784      	adds	r7, #132	@ 0x84
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120f8:	0801c654 	.word	0x0801c654

080120fc <lv_btnm_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_btnm_signal(lv_obj_t * btnm, lv_signal_t sign, void * param)
{
 80120fc:	b590      	push	{r4, r7, lr}
 80120fe:	b09b      	sub	sp, #108	@ 0x6c
 8012100:	af00      	add	r7, sp, #0
 8012102:	60f8      	str	r0, [r7, #12]
 8012104:	460b      	mov	r3, r1
 8012106:	607a      	str	r2, [r7, #4]
 8012108:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btnm, sign, param);
 801210a:	4b93      	ldr	r3, [pc, #588]	@ (8012358 <lv_btnm_signal+0x25c>)
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	7af9      	ldrb	r1, [r7, #11]
 8012110:	687a      	ldr	r2, [r7, #4]
 8012112:	68f8      	ldr	r0, [r7, #12]
 8012114:	4798      	blx	r3
 8012116:	4603      	mov	r3, r0
 8012118:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if(res != LV_RES_OK) return res;
 801211c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012120:	2b01      	cmp	r3, #1
 8012122:	d002      	beq.n	801212a <lv_btnm_signal+0x2e>
 8012124:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8012128:	e3a7      	b.n	801287a <lv_btnm_signal+0x77e>

    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 801212a:	68f8      	ldr	r0, [r7, #12]
 801212c:	f7f4 fbf4 	bl	8006918 <lv_obj_get_ext_attr>
 8012130:	65f8      	str	r0, [r7, #92]	@ 0x5c
    lv_point_t p;
    if(sign == LV_SIGNAL_CLEANUP) {
 8012132:	7afb      	ldrb	r3, [r7, #11]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d10a      	bne.n	801214e <lv_btnm_signal+0x52>
        lv_mem_free(ext->button_areas);
 8012138:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801213a:	685b      	ldr	r3, [r3, #4]
 801213c:	4618      	mov	r0, r3
 801213e:	f7fd fff9 	bl	8010134 <lv_mem_free>
        lv_mem_free(ext->ctrl_bits);
 8012142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012144:	689b      	ldr	r3, [r3, #8]
 8012146:	4618      	mov	r0, r3
 8012148:	f7fd fff4 	bl	8010134 <lv_mem_free>
 801214c:	e393      	b.n	8012876 <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_STYLE_CHG || sign == LV_SIGNAL_CORD_CHG) {
 801214e:	7afb      	ldrb	r3, [r7, #11]
 8012150:	2b04      	cmp	r3, #4
 8012152:	d002      	beq.n	801215a <lv_btnm_signal+0x5e>
 8012154:	7afb      	ldrb	r3, [r7, #11]
 8012156:	2b02      	cmp	r3, #2
 8012158:	d106      	bne.n	8012168 <lv_btnm_signal+0x6c>
        lv_btnm_set_map(btnm, ext->map_p);
 801215a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	4619      	mov	r1, r3
 8012160:	68f8      	ldr	r0, [r7, #12]
 8012162:	f7ff fa2d 	bl	80115c0 <lv_btnm_set_map>
 8012166:	e386      	b.n	8012876 <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_PRESSED) {
 8012168:	7afb      	ldrb	r3, [r7, #11]
 801216a:	2b07      	cmp	r3, #7
 801216c:	d176      	bne.n	801225c <lv_btnm_signal+0x160>
        lv_indev_t * indev = lv_indev_get_act();
 801216e:	f7f0 ffb3 	bl	80030d8 <lv_indev_get_act>
 8012172:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if(lv_indev_get_type(indev) == LV_INDEV_TYPE_POINTER || lv_indev_get_type(indev) == LV_INDEV_TYPE_BUTTON) {
 8012174:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012176:	f7f0 ffb9 	bl	80030ec <lv_indev_get_type>
 801217a:	4603      	mov	r3, r0
 801217c:	2b01      	cmp	r3, #1
 801217e:	d005      	beq.n	801218c <lv_btnm_signal+0x90>
 8012180:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012182:	f7f0 ffb3 	bl	80030ec <lv_indev_get_type>
 8012186:	4603      	mov	r3, r0
 8012188:	2b03      	cmp	r3, #3
 801218a:	d11f      	bne.n	80121cc <lv_btnm_signal+0xd0>
            uint16_t btn_pr;
            /*Search the pressed area*/
            lv_indev_get_point(param, &p);
 801218c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012190:	4619      	mov	r1, r3
 8012192:	6878      	ldr	r0, [r7, #4]
 8012194:	f7f0 fff9 	bl	800318a <lv_indev_get_point>
            btn_pr = get_button_from_point(btnm, &p);
 8012198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801219c:	4619      	mov	r1, r3
 801219e:	68f8      	ldr	r0, [r7, #12]
 80121a0:	f000 fc71 	bl	8012a86 <get_button_from_point>
 80121a4:	4603      	mov	r3, r0
 80121a6:	857b      	strh	r3, [r7, #42]	@ 0x2a

            invalidate_button_area(btnm, ext->btn_id_pr) /*Invalidate the old area*/;
 80121a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121aa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80121ac:	4619      	mov	r1, r3
 80121ae:	68f8      	ldr	r0, [r7, #12]
 80121b0:	f000 fcce 	bl	8012b50 <invalidate_button_area>
            ext->btn_id_pr  = btn_pr;
 80121b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121b6:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80121b8:	845a      	strh	r2, [r3, #34]	@ 0x22
            ext->btn_id_act = btn_pr;
 80121ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121bc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80121be:	849a      	strh	r2, [r3, #36]	@ 0x24
            invalidate_button_area(btnm, ext->btn_id_pr); /*Invalidate the new area*/
 80121c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121c2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80121c4:	4619      	mov	r1, r3
 80121c6:	68f8      	ldr	r0, [r7, #12]
 80121c8:	f000 fcc2 	bl	8012b50 <invalidate_button_area>
        }
        if(ext->btn_id_act != LV_BTNM_BTN_NONE) {
 80121cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80121d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80121d4:	4293      	cmp	r3, r2
 80121d6:	f000 834e 	beq.w	8012876 <lv_btnm_signal+0x77a>
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == false &&
 80121da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121dc:	689a      	ldr	r2, [r3, #8]
 80121de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80121e2:	005b      	lsls	r3, r3, #1
 80121e4:	4413      	add	r3, r2
 80121e6:	881b      	ldrh	r3, [r3, #0]
 80121e8:	4618      	mov	r0, r3
 80121ea:	f000 fc13 	bl	8012a14 <button_is_click_trig>
 80121ee:	4603      	mov	r3, r0
 80121f0:	f083 0301 	eor.w	r3, r3, #1
 80121f4:	b2db      	uxtb	r3, r3
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	f000 833d 	beq.w	8012876 <lv_btnm_signal+0x77a>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 80121fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121fe:	689a      	ldr	r2, [r3, #8]
 8012200:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012202:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012204:	005b      	lsls	r3, r3, #1
 8012206:	4413      	add	r3, r2
 8012208:	881b      	ldrh	r3, [r3, #0]
 801220a:	4618      	mov	r0, r3
 801220c:	f000 fbef 	bl	80129ee <button_is_inactive>
 8012210:	4603      	mov	r3, r0
 8012212:	f083 0301 	eor.w	r3, r3, #1
 8012216:	b2db      	uxtb	r3, r3
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8012218:	2b00      	cmp	r3, #0
 801221a:	f000 832c 	beq.w	8012876 <lv_btnm_signal+0x77a>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
 801221e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012220:	689a      	ldr	r2, [r3, #8]
 8012222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012224:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012226:	005b      	lsls	r3, r3, #1
 8012228:	4413      	add	r3, r2
 801222a:	881b      	ldrh	r3, [r3, #0]
 801222c:	4618      	mov	r0, r3
 801222e:	f000 fbb8 	bl	80129a2 <button_is_hidden>
 8012232:	4603      	mov	r3, r0
 8012234:	f083 0301 	eor.w	r3, r3, #1
 8012238:	b2db      	uxtb	r3, r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801223a:	2b00      	cmp	r3, #0
 801223c:	f000 831b 	beq.w	8012876 <lv_btnm_signal+0x77a>
                uint32_t b = ext->btn_id_act;
 8012240:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012242:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012244:	623b      	str	r3, [r7, #32]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 8012246:	f107 0320 	add.w	r3, r7, #32
 801224a:	461a      	mov	r2, r3
 801224c:	210e      	movs	r1, #14
 801224e:	68f8      	ldr	r0, [r7, #12]
 8012250:	f7f4 f858 	bl	8006304 <lv_event_send>
 8012254:	4603      	mov	r3, r0
 8012256:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801225a:	e30c      	b.n	8012876 <lv_btnm_signal+0x77a>
            }
        }
    } else if(sign == LV_SIGNAL_PRESSING) {
 801225c:	7afb      	ldrb	r3, [r7, #11]
 801225e:	2b08      	cmp	r3, #8
 8012260:	d143      	bne.n	80122ea <lv_btnm_signal+0x1ee>
        uint16_t btn_pr;
        /*Search the pressed area*/
        lv_indev_get_point(param, &p);
 8012262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012266:	4619      	mov	r1, r3
 8012268:	6878      	ldr	r0, [r7, #4]
 801226a:	f7f0 ff8e 	bl	800318a <lv_indev_get_point>
        btn_pr = get_button_from_point(btnm, &p);
 801226e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012272:	4619      	mov	r1, r3
 8012274:	68f8      	ldr	r0, [r7, #12]
 8012276:	f000 fc06 	bl	8012a86 <get_button_from_point>
 801227a:	4603      	mov	r3, r0
 801227c:	867b      	strh	r3, [r7, #50]	@ 0x32
        /*Invalidate to old and the new areas*/;
        if(btn_pr != ext->btn_id_pr) {
 801227e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012280:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012282:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8012284:	429a      	cmp	r2, r3
 8012286:	d029      	beq.n	80122dc <lv_btnm_signal+0x1e0>
            lv_indev_reset_long_press(param); /*Start the log press time again on the new button*/
 8012288:	6878      	ldr	r0, [r7, #4]
 801228a:	f7f0 ff65 	bl	8003158 <lv_indev_reset_long_press>
            if(ext->btn_id_pr != LV_BTNM_BTN_NONE) {
 801228e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012290:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012292:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012296:	4293      	cmp	r3, r2
 8012298:	d005      	beq.n	80122a6 <lv_btnm_signal+0x1aa>
                invalidate_button_area(btnm, ext->btn_id_pr);
 801229a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801229c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801229e:	4619      	mov	r1, r3
 80122a0:	68f8      	ldr	r0, [r7, #12]
 80122a2:	f000 fc55 	bl	8012b50 <invalidate_button_area>
            }
            if(btn_pr != LV_BTNM_BTN_NONE) {
 80122a6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80122a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80122ac:	4293      	cmp	r3, r2
 80122ae:	d015      	beq.n	80122dc <lv_btnm_signal+0x1e0>
                uint32_t b = ext->btn_id_act;
 80122b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80122b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80122b4:	61fb      	str	r3, [r7, #28]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 80122b6:	f107 031c 	add.w	r3, r7, #28
 80122ba:	461a      	mov	r2, r3
 80122bc:	210e      	movs	r1, #14
 80122be:	68f8      	ldr	r0, [r7, #12]
 80122c0:	f7f4 f820 	bl	8006304 <lv_event_send>
 80122c4:	4603      	mov	r3, r0
 80122c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                if(res == LV_RES_OK) {
 80122ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80122ce:	2b01      	cmp	r3, #1
 80122d0:	d104      	bne.n	80122dc <lv_btnm_signal+0x1e0>
                    invalidate_button_area(btnm, btn_pr);
 80122d2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80122d4:	4619      	mov	r1, r3
 80122d6:	68f8      	ldr	r0, [r7, #12]
 80122d8:	f000 fc3a 	bl	8012b50 <invalidate_button_area>
                }
            }
        }

        ext->btn_id_pr  = btn_pr;
 80122dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80122de:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80122e0:	845a      	strh	r2, [r3, #34]	@ 0x22
        ext->btn_id_act = btn_pr;
 80122e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80122e4:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80122e6:	849a      	strh	r2, [r3, #36]	@ 0x24
 80122e8:	e2c5      	b.n	8012876 <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_RELEASED) {
 80122ea:	7afb      	ldrb	r3, [r7, #11]
 80122ec:	2b0a      	cmp	r3, #10
 80122ee:	f040 80a7 	bne.w	8012440 <lv_btnm_signal+0x344>
        if(ext->btn_id_pr != LV_BTNM_BTN_NONE) {
 80122f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80122f4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80122f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80122fa:	4293      	cmp	r3, r2
 80122fc:	f000 82bb 	beq.w	8012876 <lv_btnm_signal+0x77a>
            /*Toggle the button if enabled*/
            if(button_is_tgl_enabled(ext->ctrl_bits[ext->btn_id_pr])) {
 8012300:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012302:	689a      	ldr	r2, [r3, #8]
 8012304:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012306:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012308:	005b      	lsls	r3, r3, #1
 801230a:	4413      	add	r3, r2
 801230c:	881b      	ldrh	r3, [r3, #0]
 801230e:	4618      	mov	r0, r3
 8012310:	f000 fb93 	bl	8012a3a <button_is_tgl_enabled>
 8012314:	4603      	mov	r3, r0
 8012316:	2b00      	cmp	r3, #0
 8012318:	d03f      	beq.n	801239a <lv_btnm_signal+0x29e>
                if(button_get_tgl_state(ext->ctrl_bits[ext->btn_id_pr])) {
 801231a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801231c:	689a      	ldr	r2, [r3, #8]
 801231e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012320:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012322:	005b      	lsls	r3, r3, #1
 8012324:	4413      	add	r3, r2
 8012326:	881b      	ldrh	r3, [r3, #0]
 8012328:	4618      	mov	r0, r3
 801232a:	f000 fb99 	bl	8012a60 <button_get_tgl_state>
 801232e:	4603      	mov	r3, r0
 8012330:	2b00      	cmp	r3, #0
 8012332:	d013      	beq.n	801235c <lv_btnm_signal+0x260>
                    ext->ctrl_bits[ext->btn_id_pr] &= (~LV_BTNM_CTRL_TGL_STATE);
 8012334:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012336:	689a      	ldr	r2, [r3, #8]
 8012338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801233a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801233c:	005b      	lsls	r3, r3, #1
 801233e:	4413      	add	r3, r2
 8012340:	881a      	ldrh	r2, [r3, #0]
 8012342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012344:	6899      	ldr	r1, [r3, #8]
 8012346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012348:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801234a:	005b      	lsls	r3, r3, #1
 801234c:	440b      	add	r3, r1
 801234e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8012352:	b292      	uxth	r2, r2
 8012354:	801a      	strh	r2, [r3, #0]
 8012356:	e012      	b.n	801237e <lv_btnm_signal+0x282>
 8012358:	2000ad84 	.word	0x2000ad84
                } else {
                    ext->ctrl_bits[ext->btn_id_pr] |= LV_BTNM_CTRL_TGL_STATE;
 801235c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801235e:	689a      	ldr	r2, [r3, #8]
 8012360:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012362:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012364:	005b      	lsls	r3, r3, #1
 8012366:	4413      	add	r3, r2
 8012368:	881a      	ldrh	r2, [r3, #0]
 801236a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801236c:	6899      	ldr	r1, [r3, #8]
 801236e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012370:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012372:	005b      	lsls	r3, r3, #1
 8012374:	440b      	add	r3, r1
 8012376:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801237a:	b292      	uxth	r2, r2
 801237c:	801a      	strh	r2, [r3, #0]
                }
                if(ext->one_toggle) make_one_button_toggled(btnm, ext->btn_id_pr);
 801237e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012380:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8012384:	f003 0302 	and.w	r3, r3, #2
 8012388:	b2db      	uxtb	r3, r3
 801238a:	2b00      	cmp	r3, #0
 801238c:	d005      	beq.n	801239a <lv_btnm_signal+0x29e>
 801238e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012390:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012392:	4619      	mov	r1, r3
 8012394:	68f8      	ldr	r0, [r7, #12]
 8012396:	f000 fc8d 	bl	8012cb4 <make_one_button_toggled>
            }

            /*Invalidate to old pressed area*/;
            invalidate_button_area(btnm, ext->btn_id_pr);
 801239a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801239c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801239e:	4619      	mov	r1, r3
 80123a0:	68f8      	ldr	r0, [r7, #12]
 80123a2:	f000 fbd5 	bl	8012b50 <invalidate_button_area>

#if LV_USE_GROUP
            /*Leave the clicked button when releases if this not the focused object in a group*/
            lv_group_t * g = lv_obj_get_group(btnm);
 80123a6:	68f8      	ldr	r0, [r7, #12]
 80123a8:	f7f4 fac1 	bl	800692e <lv_obj_get_group>
 80123ac:	6378      	str	r0, [r7, #52]	@ 0x34
            if(lv_group_get_focused(g) != btnm) {
 80123ae:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80123b0:	f7f0 fc78 	bl	8002ca4 <lv_group_get_focused>
 80123b4:	4602      	mov	r2, r0
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	4293      	cmp	r3, r2
 80123ba:	d003      	beq.n	80123c4 <lv_btnm_signal+0x2c8>
                ext->btn_id_pr = LV_BTNM_BTN_NONE;
 80123bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80123be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80123c2:	845a      	strh	r2, [r3, #34]	@ 0x22
            }
#else
            ext->btn_id_pr = LV_BTNM_BTN_NONE;
#endif

            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 80123c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80123c6:	689a      	ldr	r2, [r3, #8]
 80123c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80123ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80123cc:	005b      	lsls	r3, r3, #1
 80123ce:	4413      	add	r3, r2
 80123d0:	881b      	ldrh	r3, [r3, #0]
 80123d2:	4618      	mov	r0, r3
 80123d4:	f000 fb1e 	bl	8012a14 <button_is_click_trig>
 80123d8:	4603      	mov	r3, r0
 80123da:	2b00      	cmp	r3, #0
 80123dc:	f000 824b 	beq.w	8012876 <lv_btnm_signal+0x77a>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 80123e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80123e2:	689a      	ldr	r2, [r3, #8]
 80123e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80123e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80123e8:	005b      	lsls	r3, r3, #1
 80123ea:	4413      	add	r3, r2
 80123ec:	881b      	ldrh	r3, [r3, #0]
 80123ee:	4618      	mov	r0, r3
 80123f0:	f000 fafd 	bl	80129ee <button_is_inactive>
 80123f4:	4603      	mov	r3, r0
 80123f6:	f083 0301 	eor.w	r3, r3, #1
 80123fa:	b2db      	uxtb	r3, r3
            if(button_is_click_trig(ext->ctrl_bits[ext->btn_id_act]) == true &&
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	f000 823a 	beq.w	8012876 <lv_btnm_signal+0x77a>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
 8012402:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012404:	689a      	ldr	r2, [r3, #8]
 8012406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012408:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801240a:	005b      	lsls	r3, r3, #1
 801240c:	4413      	add	r3, r2
 801240e:	881b      	ldrh	r3, [r3, #0]
 8012410:	4618      	mov	r0, r3
 8012412:	f000 fac6 	bl	80129a2 <button_is_hidden>
 8012416:	4603      	mov	r3, r0
 8012418:	f083 0301 	eor.w	r3, r3, #1
 801241c:	b2db      	uxtb	r3, r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 801241e:	2b00      	cmp	r3, #0
 8012420:	f000 8229 	beq.w	8012876 <lv_btnm_signal+0x77a>
                uint32_t b = ext->btn_id_act;
 8012424:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012426:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012428:	61bb      	str	r3, [r7, #24]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 801242a:	f107 0318 	add.w	r3, r7, #24
 801242e:	461a      	mov	r2, r3
 8012430:	210e      	movs	r1, #14
 8012432:	68f8      	ldr	r0, [r7, #12]
 8012434:	f7f3 ff66 	bl	8006304 <lv_event_send>
 8012438:	4603      	mov	r3, r0
 801243a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801243e:	e21a      	b.n	8012876 <lv_btnm_signal+0x77a>
            }
        }
    } else if(sign == LV_SIGNAL_LONG_PRESS_REP) {
 8012440:	7afb      	ldrb	r3, [r7, #11]
 8012442:	2b0c      	cmp	r3, #12
 8012444:	d147      	bne.n	80124d6 <lv_btnm_signal+0x3da>
        if(ext->btn_id_act != LV_BTNM_BTN_NONE) {
 8012446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012448:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801244a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801244e:	4293      	cmp	r3, r2
 8012450:	f000 8211 	beq.w	8012876 <lv_btnm_signal+0x77a>
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8012454:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012456:	689a      	ldr	r2, [r3, #8]
 8012458:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801245a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801245c:	005b      	lsls	r3, r3, #1
 801245e:	4413      	add	r3, r2
 8012460:	881b      	ldrh	r3, [r3, #0]
 8012462:	4618      	mov	r0, r3
 8012464:	f000 fab0 	bl	80129c8 <button_is_repeat_disabled>
 8012468:	4603      	mov	r3, r0
 801246a:	f083 0301 	eor.w	r3, r3, #1
 801246e:	b2db      	uxtb	r3, r3
 8012470:	2b00      	cmp	r3, #0
 8012472:	f000 8200 	beq.w	8012876 <lv_btnm_signal+0x77a>
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8012476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012478:	689a      	ldr	r2, [r3, #8]
 801247a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801247c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801247e:	005b      	lsls	r3, r3, #1
 8012480:	4413      	add	r3, r2
 8012482:	881b      	ldrh	r3, [r3, #0]
 8012484:	4618      	mov	r0, r3
 8012486:	f000 fab2 	bl	80129ee <button_is_inactive>
 801248a:	4603      	mov	r3, r0
 801248c:	f083 0301 	eor.w	r3, r3, #1
 8012490:	b2db      	uxtb	r3, r3
            if(button_is_repeat_disabled(ext->ctrl_bits[ext->btn_id_act]) == false &&
 8012492:	2b00      	cmp	r3, #0
 8012494:	f000 81ef 	beq.w	8012876 <lv_btnm_signal+0x77a>
               button_is_hidden(ext->ctrl_bits[ext->btn_id_act]) == false) {
 8012498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801249a:	689a      	ldr	r2, [r3, #8]
 801249c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801249e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80124a0:	005b      	lsls	r3, r3, #1
 80124a2:	4413      	add	r3, r2
 80124a4:	881b      	ldrh	r3, [r3, #0]
 80124a6:	4618      	mov	r0, r3
 80124a8:	f000 fa7b 	bl	80129a2 <button_is_hidden>
 80124ac:	4603      	mov	r3, r0
 80124ae:	f083 0301 	eor.w	r3, r3, #1
 80124b2:	b2db      	uxtb	r3, r3
               button_is_inactive(ext->ctrl_bits[ext->btn_id_act]) == false &&
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	f000 81de 	beq.w	8012876 <lv_btnm_signal+0x77a>
                uint32_t b = ext->btn_id_act;
 80124ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80124bc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80124be:	617b      	str	r3, [r7, #20]
                res        = lv_event_send(btnm, LV_EVENT_VALUE_CHANGED, &b);
 80124c0:	f107 0314 	add.w	r3, r7, #20
 80124c4:	461a      	mov	r2, r3
 80124c6:	210e      	movs	r1, #14
 80124c8:	68f8      	ldr	r0, [r7, #12]
 80124ca:	f7f3 ff1b 	bl	8006304 <lv_event_send>
 80124ce:	4603      	mov	r3, r0
 80124d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80124d4:	e1cf      	b.n	8012876 <lv_btnm_signal+0x77a>
            }
        }
    } else if(sign == LV_SIGNAL_PRESS_LOST || sign == LV_SIGNAL_DEFOCUS) {
 80124d6:	7afb      	ldrb	r3, [r7, #11]
 80124d8:	2b09      	cmp	r3, #9
 80124da:	d002      	beq.n	80124e2 <lv_btnm_signal+0x3e6>
 80124dc:	7afb      	ldrb	r3, [r7, #11]
 80124de:	2b10      	cmp	r3, #16
 80124e0:	d10b      	bne.n	80124fa <lv_btnm_signal+0x3fe>
        ext->btn_id_pr  = LV_BTNM_BTN_NONE;
 80124e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80124e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80124e8:	845a      	strh	r2, [r3, #34]	@ 0x22
        ext->btn_id_act = LV_BTNM_BTN_NONE;
 80124ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80124ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80124f0:	849a      	strh	r2, [r3, #36]	@ 0x24
        lv_obj_invalidate(btnm);
 80124f2:	68f8      	ldr	r0, [r7, #12]
 80124f4:	f7f2 ff32 	bl	800535c <lv_obj_invalidate>
 80124f8:	e1bd      	b.n	8012876 <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_FOCUS) {
 80124fa:	7afb      	ldrb	r3, [r7, #11]
 80124fc:	2b0f      	cmp	r3, #15
 80124fe:	d140      	bne.n	8012582 <lv_btnm_signal+0x486>
#if LV_USE_GROUP
        lv_indev_t * indev         = lv_indev_get_act();
 8012500:	f7f0 fdea 	bl	80030d8 <lv_indev_get_act>
 8012504:	63f8      	str	r0, [r7, #60]	@ 0x3c
        lv_indev_type_t indev_type = lv_indev_get_type(indev);
 8012506:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012508:	f7f0 fdf0 	bl	80030ec <lv_indev_get_type>
 801250c:	4603      	mov	r3, r0
 801250e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if(indev_type == LV_INDEV_TYPE_POINTER) {
 8012512:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012516:	2b01      	cmp	r3, #1
 8012518:	d111      	bne.n	801253e <lv_btnm_signal+0x442>
            /*Select the clicked button*/
            lv_point_t p1;
            lv_indev_get_point(indev, &p1);
 801251a:	f107 0310 	add.w	r3, r7, #16
 801251e:	4619      	mov	r1, r3
 8012520:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012522:	f7f0 fe32 	bl	800318a <lv_indev_get_point>
            uint16_t btn_i = get_button_from_point(btnm, &p1);
 8012526:	f107 0310 	add.w	r3, r7, #16
 801252a:	4619      	mov	r1, r3
 801252c:	68f8      	ldr	r0, [r7, #12]
 801252e:	f000 faaa 	bl	8012a86 <get_button_from_point>
 8012532:	4603      	mov	r3, r0
 8012534:	873b      	strh	r3, [r7, #56]	@ 0x38
            ext->btn_id_pr = btn_i;
 8012536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012538:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801253a:	845a      	strh	r2, [r3, #34]	@ 0x22
 801253c:	e019      	b.n	8012572 <lv_btnm_signal+0x476>

        } else if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801253e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012542:	2b04      	cmp	r3, #4
 8012544:	d112      	bne.n	801256c <lv_btnm_signal+0x470>
            /*In navigation mode don't select any button but in edit mode select the fist*/
            if(lv_group_get_editing(lv_obj_get_group(btnm)))
 8012546:	68f8      	ldr	r0, [r7, #12]
 8012548:	f7f4 f9f1 	bl	800692e <lv_obj_get_group>
 801254c:	4603      	mov	r3, r0
 801254e:	4618      	mov	r0, r3
 8012550:	f7f0 fbbf 	bl	8002cd2 <lv_group_get_editing>
 8012554:	4603      	mov	r3, r0
 8012556:	2b00      	cmp	r3, #0
 8012558:	d003      	beq.n	8012562 <lv_btnm_signal+0x466>
                ext->btn_id_pr = 0;
 801255a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801255c:	2200      	movs	r2, #0
 801255e:	845a      	strh	r2, [r3, #34]	@ 0x22
 8012560:	e007      	b.n	8012572 <lv_btnm_signal+0x476>
            else
                ext->btn_id_pr = LV_BTNM_BTN_NONE;
 8012562:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012564:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012568:	845a      	strh	r2, [r3, #34]	@ 0x22
 801256a:	e002      	b.n	8012572 <lv_btnm_signal+0x476>
        } else {
            ext->btn_id_pr = 0;
 801256c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801256e:	2200      	movs	r2, #0
 8012570:	845a      	strh	r2, [r3, #34]	@ 0x22
        }
#else
        ext->btn_id_pr = 0;
#endif

        ext->btn_id_act = ext->btn_id_pr;
 8012572:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012574:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8012576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012578:	849a      	strh	r2, [r3, #36]	@ 0x24
        lv_obj_invalidate(btnm);
 801257a:	68f8      	ldr	r0, [r7, #12]
 801257c:	f7f2 feee 	bl	800535c <lv_obj_invalidate>
 8012580:	e179      	b.n	8012876 <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_CONTROL) {
 8012582:	7afb      	ldrb	r3, [r7, #11]
 8012584:	2b11      	cmp	r3, #17
 8012586:	f040 814c 	bne.w	8012822 <lv_btnm_signal+0x726>
        char c = *((char *)param);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        if(c == LV_KEY_RIGHT) {
 8012592:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8012596:	2b13      	cmp	r3, #19
 8012598:	d125      	bne.n	80125e6 <lv_btnm_signal+0x4ea>
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE)
 801259a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801259c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801259e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80125a2:	4293      	cmp	r3, r2
 80125a4:	d103      	bne.n	80125ae <lv_btnm_signal+0x4b2>
                ext->btn_id_pr = 0;
 80125a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80125a8:	2200      	movs	r2, #0
 80125aa:	845a      	strh	r2, [r3, #34]	@ 0x22
 80125ac:	e005      	b.n	80125ba <lv_btnm_signal+0x4be>
            else
                ext->btn_id_pr++;
 80125ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80125b0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80125b2:	3301      	adds	r3, #1
 80125b4:	b29a      	uxth	r2, r3
 80125b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80125b8:	845a      	strh	r2, [r3, #34]	@ 0x22
            if(ext->btn_id_pr >= ext->btn_cnt - 1) ext->btn_id_pr = ext->btn_cnt - 1;
 80125ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80125bc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80125be:	461a      	mov	r2, r3
 80125c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80125c2:	8c1b      	ldrh	r3, [r3, #32]
 80125c4:	3b01      	subs	r3, #1
 80125c6:	429a      	cmp	r2, r3
 80125c8:	db05      	blt.n	80125d6 <lv_btnm_signal+0x4da>
 80125ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80125cc:	8c1b      	ldrh	r3, [r3, #32]
 80125ce:	3b01      	subs	r3, #1
 80125d0:	b29a      	uxth	r2, r3
 80125d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80125d4:	845a      	strh	r2, [r3, #34]	@ 0x22
            ext->btn_id_act = ext->btn_id_pr;
 80125d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80125d8:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 80125da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80125dc:	849a      	strh	r2, [r3, #36]	@ 0x24
            lv_obj_invalidate(btnm);
 80125de:	68f8      	ldr	r0, [r7, #12]
 80125e0:	f7f2 febc 	bl	800535c <lv_obj_invalidate>
 80125e4:	e147      	b.n	8012876 <lv_btnm_signal+0x77a>
        } else if(c == LV_KEY_LEFT) {
 80125e6:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80125ea:	2b14      	cmp	r3, #20
 80125ec:	d11a      	bne.n	8012624 <lv_btnm_signal+0x528>
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) ext->btn_id_pr = 0;
 80125ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80125f0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80125f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80125f6:	4293      	cmp	r3, r2
 80125f8:	d102      	bne.n	8012600 <lv_btnm_signal+0x504>
 80125fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80125fc:	2200      	movs	r2, #0
 80125fe:	845a      	strh	r2, [r3, #34]	@ 0x22
            if(ext->btn_id_pr > 0) ext->btn_id_pr--;
 8012600:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012602:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012604:	2b00      	cmp	r3, #0
 8012606:	d005      	beq.n	8012614 <lv_btnm_signal+0x518>
 8012608:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801260a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801260c:	3b01      	subs	r3, #1
 801260e:	b29a      	uxth	r2, r3
 8012610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012612:	845a      	strh	r2, [r3, #34]	@ 0x22
            ext->btn_id_act = ext->btn_id_pr;
 8012614:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012616:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8012618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801261a:	849a      	strh	r2, [r3, #36]	@ 0x24
            lv_obj_invalidate(btnm);
 801261c:	68f8      	ldr	r0, [r7, #12]
 801261e:	f7f2 fe9d 	bl	800535c <lv_obj_invalidate>
 8012622:	e128      	b.n	8012876 <lv_btnm_signal+0x77a>
        } else if(c == LV_KEY_DOWN) {
 8012624:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8012628:	2b12      	cmp	r3, #18
 801262a:	d17b      	bne.n	8012724 <lv_btnm_signal+0x628>
            const lv_style_t * style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 801262c:	2100      	movs	r1, #0
 801262e:	68f8      	ldr	r0, [r7, #12]
 8012630:	f7ff faf0 	bl	8011c14 <lv_btnm_get_style>
 8012634:	6478      	str	r0, [r7, #68]	@ 0x44
            /*Find the area below the the current*/
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) {
 8012636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012638:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801263a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801263e:	4293      	cmp	r3, r2
 8012640:	d103      	bne.n	801264a <lv_btnm_signal+0x54e>
                ext->btn_id_pr = 0;
 8012642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012644:	2200      	movs	r2, #0
 8012646:	845a      	strh	r2, [r3, #34]	@ 0x22
 8012648:	e064      	b.n	8012714 <lv_btnm_signal+0x618>
            } else {
                uint16_t area_below;
                lv_coord_t pr_center =
                    ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 801264a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801264c:	685a      	ldr	r2, [r3, #4]
 801264e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012650:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012652:	00db      	lsls	r3, r3, #3
 8012654:	4413      	add	r3, r2
 8012656:	f9b3 3000 	ldrsh.w	r3, [r3]
 801265a:	b29c      	uxth	r4, r3
 801265c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801265e:	685a      	ldr	r2, [r3, #4]
 8012660:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012662:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012664:	00db      	lsls	r3, r3, #3
 8012666:	4413      	add	r3, r2
 8012668:	4618      	mov	r0, r3
 801266a:	f7fe fe93 	bl	8011394 <lv_area_get_width>
 801266e:	4603      	mov	r3, r0
 8012670:	105b      	asrs	r3, r3, #1
 8012672:	b21b      	sxth	r3, r3
 8012674:	b29b      	uxth	r3, r3
 8012676:	4423      	add	r3, r4
 8012678:	b29b      	uxth	r3, r3
                lv_coord_t pr_center =
 801267a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below++) {
 801267e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012680:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012682:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8012686:	e033      	b.n	80126f0 <lv_btnm_signal+0x5f4>
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_pr].y1 &&
 8012688:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801268a:	685a      	ldr	r2, [r3, #4]
 801268c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8012690:	00db      	lsls	r3, r3, #3
 8012692:	4413      	add	r3, r2
 8012694:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801269a:	6859      	ldr	r1, [r3, #4]
 801269c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801269e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80126a0:	00db      	lsls	r3, r3, #3
 80126a2:	440b      	add	r3, r1
 80126a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80126a8:	429a      	cmp	r2, r3
 80126aa:	dd1c      	ble.n	80126e6 <lv_btnm_signal+0x5ea>
                       pr_center >= ext->button_areas[area_below].x1 &&
 80126ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80126ae:	685a      	ldr	r2, [r3, #4]
 80126b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80126b4:	00db      	lsls	r3, r3, #3
 80126b6:	4413      	add	r3, r2
 80126b8:	f9b3 3000 	ldrsh.w	r3, [r3]
                    if(ext->button_areas[area_below].y1 > ext->button_areas[ext->btn_id_pr].y1 &&
 80126bc:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 80126c0:	429a      	cmp	r2, r3
 80126c2:	db10      	blt.n	80126e6 <lv_btnm_signal+0x5ea>
                       pr_center <= ext->button_areas[area_below].x2 + style->body.padding.left) {
 80126c4:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 80126c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80126ca:	6859      	ldr	r1, [r3, #4]
 80126cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80126d0:	00db      	lsls	r3, r3, #3
 80126d2:	440b      	add	r3, r1
 80126d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80126d8:	4619      	mov	r1, r3
 80126da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126dc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80126e0:	440b      	add	r3, r1
                       pr_center >= ext->button_areas[area_below].x1 &&
 80126e2:	429a      	cmp	r2, r3
 80126e4:	dd0b      	ble.n	80126fe <lv_btnm_signal+0x602>
                for(area_below = ext->btn_id_pr; area_below < ext->btn_cnt; area_below++) {
 80126e6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80126ea:	3301      	adds	r3, #1
 80126ec:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80126f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80126f2:	8c1b      	ldrh	r3, [r3, #32]
 80126f4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d3c5      	bcc.n	8012688 <lv_btnm_signal+0x58c>
 80126fc:	e000      	b.n	8012700 <lv_btnm_signal+0x604>
                        break;
 80126fe:	bf00      	nop
                    }
                }

                if(area_below < ext->btn_cnt) ext->btn_id_pr = area_below;
 8012700:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012702:	8c1b      	ldrh	r3, [r3, #32]
 8012704:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8012708:	429a      	cmp	r2, r3
 801270a:	d203      	bcs.n	8012714 <lv_btnm_signal+0x618>
 801270c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801270e:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8012712:	845a      	strh	r2, [r3, #34]	@ 0x22
            }
            ext->btn_id_act = ext->btn_id_pr;
 8012714:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012716:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8012718:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801271a:	849a      	strh	r2, [r3, #36]	@ 0x24
            lv_obj_invalidate(btnm);
 801271c:	68f8      	ldr	r0, [r7, #12]
 801271e:	f7f2 fe1d 	bl	800535c <lv_obj_invalidate>
 8012722:	e0a8      	b.n	8012876 <lv_btnm_signal+0x77a>
        } else if(c == LV_KEY_UP) {
 8012724:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8012728:	2b11      	cmp	r3, #17
 801272a:	f040 80a4 	bne.w	8012876 <lv_btnm_signal+0x77a>
            const lv_style_t * style = lv_btnm_get_style(btnm, LV_BTNM_STYLE_BG);
 801272e:	2100      	movs	r1, #0
 8012730:	68f8      	ldr	r0, [r7, #12]
 8012732:	f7ff fa6f 	bl	8011c14 <lv_btnm_get_style>
 8012736:	64f8      	str	r0, [r7, #76]	@ 0x4c
            /*Find the area below the the current*/
            if(ext->btn_id_pr == LV_BTNM_BTN_NONE) {
 8012738:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801273a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801273c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012740:	4293      	cmp	r3, r2
 8012742:	d103      	bne.n	801274c <lv_btnm_signal+0x650>
                ext->btn_id_pr = 0;
 8012744:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012746:	2200      	movs	r2, #0
 8012748:	845a      	strh	r2, [r3, #34]	@ 0x22
 801274a:	e062      	b.n	8012812 <lv_btnm_signal+0x716>
            } else {
                int16_t area_above;
                lv_coord_t pr_center =
                    ext->button_areas[ext->btn_id_pr].x1 + (lv_area_get_width(&ext->button_areas[ext->btn_id_pr]) >> 1);
 801274c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801274e:	685a      	ldr	r2, [r3, #4]
 8012750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012752:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012754:	00db      	lsls	r3, r3, #3
 8012756:	4413      	add	r3, r2
 8012758:	f9b3 3000 	ldrsh.w	r3, [r3]
 801275c:	b29c      	uxth	r4, r3
 801275e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012760:	685a      	ldr	r2, [r3, #4]
 8012762:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012764:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012766:	00db      	lsls	r3, r3, #3
 8012768:	4413      	add	r3, r2
 801276a:	4618      	mov	r0, r3
 801276c:	f7fe fe12 	bl	8011394 <lv_area_get_width>
 8012770:	4603      	mov	r3, r0
 8012772:	105b      	asrs	r3, r3, #1
 8012774:	b21b      	sxth	r3, r3
 8012776:	b29b      	uxth	r3, r3
 8012778:	4423      	add	r3, r4
 801277a:	b29b      	uxth	r3, r3
                lv_coord_t pr_center =
 801277c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

                for(area_above = ext->btn_id_pr; area_above >= 0; area_above--) {
 8012780:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012782:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012784:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8012788:	e035      	b.n	80127f6 <lv_btnm_signal+0x6fa>
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 801278a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801278c:	685a      	ldr	r2, [r3, #4]
 801278e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 8012792:	00db      	lsls	r3, r3, #3
 8012794:	4413      	add	r3, r2
 8012796:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801279a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801279c:	6859      	ldr	r1, [r3, #4]
 801279e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80127a0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80127a2:	00db      	lsls	r3, r3, #3
 80127a4:	440b      	add	r3, r1
 80127a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80127aa:	429a      	cmp	r2, r3
 80127ac:	da1c      	bge.n	80127e8 <lv_btnm_signal+0x6ec>
                       pr_center >= ext->button_areas[area_above].x1 - style->body.padding.left &&
 80127ae:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 80127b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80127b4:	6859      	ldr	r1, [r3, #4]
 80127b6:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 80127ba:	00db      	lsls	r3, r3, #3
 80127bc:	440b      	add	r3, r1
 80127be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127c2:	4619      	mov	r1, r3
 80127c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127c6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80127ca:	1acb      	subs	r3, r1, r3
                    if(ext->button_areas[area_above].y1 < ext->button_areas[ext->btn_id_pr].y1 &&
 80127cc:	429a      	cmp	r2, r3
 80127ce:	db0b      	blt.n	80127e8 <lv_btnm_signal+0x6ec>
                       pr_center <= ext->button_areas[area_above].x2) {
 80127d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80127d2:	685a      	ldr	r2, [r3, #4]
 80127d4:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 80127d8:	00db      	lsls	r3, r3, #3
 80127da:	4413      	add	r3, r2
 80127dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
                       pr_center >= ext->button_areas[area_above].x1 - style->body.padding.left &&
 80127e0:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 80127e4:	429a      	cmp	r2, r3
 80127e6:	dd0b      	ble.n	8012800 <lv_btnm_signal+0x704>
                for(area_above = ext->btn_id_pr; area_above >= 0; area_above--) {
 80127e8:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 80127ec:	b29b      	uxth	r3, r3
 80127ee:	3b01      	subs	r3, #1
 80127f0:	b29b      	uxth	r3, r3
 80127f2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80127f6:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	dac5      	bge.n	801278a <lv_btnm_signal+0x68e>
 80127fe:	e000      	b.n	8012802 <lv_btnm_signal+0x706>
                        break;
 8012800:	bf00      	nop
                    }
                }
                if(area_above >= 0) ext->btn_id_pr = area_above;
 8012802:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	@ 0x62
 8012806:	2b00      	cmp	r3, #0
 8012808:	db03      	blt.n	8012812 <lv_btnm_signal+0x716>
 801280a:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 801280e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012810:	845a      	strh	r2, [r3, #34]	@ 0x22
            }
            ext->btn_id_act = ext->btn_id_pr;
 8012812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012814:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8012816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012818:	849a      	strh	r2, [r3, #36]	@ 0x24
            lv_obj_invalidate(btnm);
 801281a:	68f8      	ldr	r0, [r7, #12]
 801281c:	f7f2 fd9e 	bl	800535c <lv_obj_invalidate>
 8012820:	e029      	b.n	8012876 <lv_btnm_signal+0x77a>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8012822:	7afb      	ldrb	r3, [r7, #11]
 8012824:	2b12      	cmp	r3, #18
 8012826:	d105      	bne.n	8012834 <lv_btnm_signal+0x738>
        bool * editable = (bool *)param;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	657b      	str	r3, [r7, #84]	@ 0x54
        *editable       = true;
 801282c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801282e:	2201      	movs	r2, #1
 8012830:	701a      	strb	r2, [r3, #0]
 8012832:	e020      	b.n	8012876 <lv_btnm_signal+0x77a>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8012834:	7afb      	ldrb	r3, [r7, #11]
 8012836:	2b06      	cmp	r3, #6
 8012838:	d11d      	bne.n	8012876 <lv_btnm_signal+0x77a>
        lv_obj_type_t * buf = param;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	65bb      	str	r3, [r7, #88]	@ 0x58
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801283e:	2300      	movs	r3, #0
 8012840:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 8012844:	e00b      	b.n	801285e <lv_btnm_signal+0x762>
            if(buf->type[i] == NULL) break;
 8012846:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 801284a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801284c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d009      	beq.n	8012868 <lv_btnm_signal+0x76c>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8012854:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8012858:	3301      	adds	r3, #1
 801285a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 801285e:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8012862:	2b06      	cmp	r3, #6
 8012864:	d9ef      	bls.n	8012846 <lv_btnm_signal+0x74a>
 8012866:	e000      	b.n	801286a <lv_btnm_signal+0x76e>
            if(buf->type[i] == NULL) break;
 8012868:	bf00      	nop
        }
        buf->type[i] = "lv_btnm";
 801286a:	f897 2061 	ldrb.w	r2, [r7, #97]	@ 0x61
 801286e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012870:	4904      	ldr	r1, [pc, #16]	@ (8012884 <lv_btnm_signal+0x788>)
 8012872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 8012876:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 801287a:	4618      	mov	r0, r3
 801287c:	376c      	adds	r7, #108	@ 0x6c
 801287e:	46bd      	mov	sp, r7
 8012880:	bd90      	pop	{r4, r7, pc}
 8012882:	bf00      	nop
 8012884:	0801c66c 	.word	0x0801c66c

08012888 <allocate_btn_areas_and_controls>:
 * Create the required number of buttons and control bytes according to a map
 * @param btnm pointer to button matrix object
 * @param map_p pointer to a string array
 */
static void allocate_btn_areas_and_controls(const lv_obj_t * btnm, const char ** map)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b084      	sub	sp, #16
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	6039      	str	r1, [r7, #0]
    /*Count the buttons in the map*/
    uint16_t btn_cnt = 0;
 8012892:	2300      	movs	r3, #0
 8012894:	81fb      	strh	r3, [r7, #14]
    uint16_t i       = 0;
 8012896:	2300      	movs	r3, #0
 8012898:	81bb      	strh	r3, [r7, #12]
    while(strlen(map[i]) != 0) {
 801289a:	e011      	b.n	80128c0 <allocate_btn_areas_and_controls+0x38>
        if(strcmp(map[i], "\n") != 0) { /*Do not count line breaks*/
 801289c:	89bb      	ldrh	r3, [r7, #12]
 801289e:	009b      	lsls	r3, r3, #2
 80128a0:	683a      	ldr	r2, [r7, #0]
 80128a2:	4413      	add	r3, r2
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	4933      	ldr	r1, [pc, #204]	@ (8012974 <allocate_btn_areas_and_controls+0xec>)
 80128a8:	4618      	mov	r0, r3
 80128aa:	f7ed fcbb 	bl	8000224 <strcmp>
 80128ae:	4603      	mov	r3, r0
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d002      	beq.n	80128ba <allocate_btn_areas_and_controls+0x32>
            btn_cnt++;
 80128b4:	89fb      	ldrh	r3, [r7, #14]
 80128b6:	3301      	adds	r3, #1
 80128b8:	81fb      	strh	r3, [r7, #14]
        }
        i++;
 80128ba:	89bb      	ldrh	r3, [r7, #12]
 80128bc:	3301      	adds	r3, #1
 80128be:	81bb      	strh	r3, [r7, #12]
    while(strlen(map[i]) != 0) {
 80128c0:	89bb      	ldrh	r3, [r7, #12]
 80128c2:	009b      	lsls	r3, r3, #2
 80128c4:	683a      	ldr	r2, [r7, #0]
 80128c6:	4413      	add	r3, r2
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d1e5      	bne.n	801289c <allocate_btn_areas_and_controls+0x14>
    }

    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f7f4 f821 	bl	8006918 <lv_obj_get_ext_attr>
 80128d6:	60b8      	str	r0, [r7, #8]

    if(ext->button_areas != NULL) {
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d007      	beq.n	80128f0 <allocate_btn_areas_and_controls+0x68>
        lv_mem_free(ext->button_areas);
 80128e0:	68bb      	ldr	r3, [r7, #8]
 80128e2:	685b      	ldr	r3, [r3, #4]
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7fd fc25 	bl	8010134 <lv_mem_free>
        ext->button_areas = NULL;
 80128ea:	68bb      	ldr	r3, [r7, #8]
 80128ec:	2200      	movs	r2, #0
 80128ee:	605a      	str	r2, [r3, #4]
    }
    if(ext->ctrl_bits != NULL) {
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	689b      	ldr	r3, [r3, #8]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d007      	beq.n	8012908 <allocate_btn_areas_and_controls+0x80>
        lv_mem_free(ext->ctrl_bits);
 80128f8:	68bb      	ldr	r3, [r7, #8]
 80128fa:	689b      	ldr	r3, [r3, #8]
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7fd fc19 	bl	8010134 <lv_mem_free>
        ext->ctrl_bits = NULL;
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	2200      	movs	r2, #0
 8012906:	609a      	str	r2, [r3, #8]
    }

    ext->button_areas = lv_mem_alloc(sizeof(lv_area_t) * btn_cnt);
 8012908:	89fb      	ldrh	r3, [r7, #14]
 801290a:	00db      	lsls	r3, r3, #3
 801290c:	4618      	mov	r0, r3
 801290e:	f7fd fbd7 	bl	80100c0 <lv_mem_alloc>
 8012912:	4602      	mov	r2, r0
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	605a      	str	r2, [r3, #4]
    lv_mem_assert(ext->button_areas);
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d101      	bne.n	8012924 <allocate_btn_areas_and_controls+0x9c>
 8012920:	bf00      	nop
 8012922:	e7fd      	b.n	8012920 <allocate_btn_areas_and_controls+0x98>
    ext->ctrl_bits = lv_mem_alloc(sizeof(lv_btnm_ctrl_t) * btn_cnt);
 8012924:	89fb      	ldrh	r3, [r7, #14]
 8012926:	005b      	lsls	r3, r3, #1
 8012928:	4618      	mov	r0, r3
 801292a:	f7fd fbc9 	bl	80100c0 <lv_mem_alloc>
 801292e:	4602      	mov	r2, r0
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	609a      	str	r2, [r3, #8]
    lv_mem_assert(ext->ctrl_bits);
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	689b      	ldr	r3, [r3, #8]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d101      	bne.n	8012940 <allocate_btn_areas_and_controls+0xb8>
 801293c:	bf00      	nop
 801293e:	e7fd      	b.n	801293c <allocate_btn_areas_and_controls+0xb4>
    if(ext->button_areas == NULL || ext->ctrl_bits == NULL) btn_cnt = 0;
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d003      	beq.n	8012950 <allocate_btn_areas_and_controls+0xc8>
 8012948:	68bb      	ldr	r3, [r7, #8]
 801294a:	689b      	ldr	r3, [r3, #8]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d101      	bne.n	8012954 <allocate_btn_areas_and_controls+0xcc>
 8012950:	2300      	movs	r3, #0
 8012952:	81fb      	strh	r3, [r7, #14]

    memset(ext->ctrl_bits, 0, sizeof(lv_btnm_ctrl_t) * btn_cnt);
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	6898      	ldr	r0, [r3, #8]
 8012958:	89fb      	ldrh	r3, [r7, #14]
 801295a:	005b      	lsls	r3, r3, #1
 801295c:	461a      	mov	r2, r3
 801295e:	2100      	movs	r1, #0
 8012960:	f008 ffbf 	bl	801b8e2 <memset>

    ext->btn_cnt = btn_cnt;
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	89fa      	ldrh	r2, [r7, #14]
 8012968:	841a      	strh	r2, [r3, #32]
}
 801296a:	bf00      	nop
 801296c:	3710      	adds	r7, #16
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}
 8012972:	bf00      	nop
 8012974:	0801c654 	.word	0x0801c654

08012978 <get_button_width>:
 * Get the width of a button in units (default is 1).
 * @param ctrl_bits least significant 3 bits used (1..7 valid values)
 * @return the width of the button in units
 */
static uint8_t get_button_width(lv_btnm_ctrl_t ctrl_bits)
{
 8012978:	b480      	push	{r7}
 801297a:	b085      	sub	sp, #20
 801297c:	af00      	add	r7, sp, #0
 801297e:	4603      	mov	r3, r0
 8012980:	80fb      	strh	r3, [r7, #6]
    uint8_t w = ctrl_bits & LV_BTNM_WIDTH_MASK;
 8012982:	88fb      	ldrh	r3, [r7, #6]
 8012984:	b2db      	uxtb	r3, r3
 8012986:	f003 0307 	and.w	r3, r3, #7
 801298a:	73fb      	strb	r3, [r7, #15]
    return w != 0 ? w : 1;
 801298c:	7bfb      	ldrb	r3, [r7, #15]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d001      	beq.n	8012996 <get_button_width+0x1e>
 8012992:	7bfb      	ldrb	r3, [r7, #15]
 8012994:	e000      	b.n	8012998 <get_button_width+0x20>
 8012996:	2301      	movs	r3, #1
}
 8012998:	4618      	mov	r0, r3
 801299a:	3714      	adds	r7, #20
 801299c:	46bd      	mov	sp, r7
 801299e:	bc80      	pop	{r7}
 80129a0:	4770      	bx	lr

080129a2 <button_is_hidden>:

static bool button_is_hidden(lv_btnm_ctrl_t ctrl_bits)
{
 80129a2:	b480      	push	{r7}
 80129a4:	b083      	sub	sp, #12
 80129a6:	af00      	add	r7, sp, #0
 80129a8:	4603      	mov	r3, r0
 80129aa:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_HIDDEN ? true : false;
 80129ac:	88fb      	ldrh	r3, [r7, #6]
 80129ae:	10db      	asrs	r3, r3, #3
 80129b0:	f003 0301 	and.w	r3, r3, #1
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	bf14      	ite	ne
 80129b8:	2301      	movne	r3, #1
 80129ba:	2300      	moveq	r3, #0
 80129bc:	b2db      	uxtb	r3, r3
}
 80129be:	4618      	mov	r0, r3
 80129c0:	370c      	adds	r7, #12
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bc80      	pop	{r7}
 80129c6:	4770      	bx	lr

080129c8 <button_is_repeat_disabled>:

static bool button_is_repeat_disabled(lv_btnm_ctrl_t ctrl_bits)
{
 80129c8:	b480      	push	{r7}
 80129ca:	b083      	sub	sp, #12
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	4603      	mov	r3, r0
 80129d0:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_NO_REPEAT ? true : false;
 80129d2:	88fb      	ldrh	r3, [r7, #6]
 80129d4:	111b      	asrs	r3, r3, #4
 80129d6:	f003 0301 	and.w	r3, r3, #1
 80129da:	2b00      	cmp	r3, #0
 80129dc:	bf14      	ite	ne
 80129de:	2301      	movne	r3, #1
 80129e0:	2300      	moveq	r3, #0
 80129e2:	b2db      	uxtb	r3, r3
}
 80129e4:	4618      	mov	r0, r3
 80129e6:	370c      	adds	r7, #12
 80129e8:	46bd      	mov	sp, r7
 80129ea:	bc80      	pop	{r7}
 80129ec:	4770      	bx	lr

080129ee <button_is_inactive>:

static bool button_is_inactive(lv_btnm_ctrl_t ctrl_bits)
{
 80129ee:	b480      	push	{r7}
 80129f0:	b083      	sub	sp, #12
 80129f2:	af00      	add	r7, sp, #0
 80129f4:	4603      	mov	r3, r0
 80129f6:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_INACTIVE ? true : false;
 80129f8:	88fb      	ldrh	r3, [r7, #6]
 80129fa:	115b      	asrs	r3, r3, #5
 80129fc:	f003 0301 	and.w	r3, r3, #1
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	bf14      	ite	ne
 8012a04:	2301      	movne	r3, #1
 8012a06:	2300      	moveq	r3, #0
 8012a08:	b2db      	uxtb	r3, r3
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	370c      	adds	r7, #12
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bc80      	pop	{r7}
 8012a12:	4770      	bx	lr

08012a14 <button_is_click_trig>:

static bool button_is_click_trig(lv_btnm_ctrl_t ctrl_bits)
{
 8012a14:	b480      	push	{r7}
 8012a16:	b083      	sub	sp, #12
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_CLICK_TRIG ? true : false;
 8012a1e:	88fb      	ldrh	r3, [r7, #6]
 8012a20:	121b      	asrs	r3, r3, #8
 8012a22:	f003 0301 	and.w	r3, r3, #1
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	bf14      	ite	ne
 8012a2a:	2301      	movne	r3, #1
 8012a2c:	2300      	moveq	r3, #0
 8012a2e:	b2db      	uxtb	r3, r3
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	370c      	adds	r7, #12
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bc80      	pop	{r7}
 8012a38:	4770      	bx	lr

08012a3a <button_is_tgl_enabled>:

static bool button_is_tgl_enabled(lv_btnm_ctrl_t ctrl_bits)
{
 8012a3a:	b480      	push	{r7}
 8012a3c:	b083      	sub	sp, #12
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	4603      	mov	r3, r0
 8012a42:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_TGL_ENABLE ? true : false;
 8012a44:	88fb      	ldrh	r3, [r7, #6]
 8012a46:	119b      	asrs	r3, r3, #6
 8012a48:	f003 0301 	and.w	r3, r3, #1
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	bf14      	ite	ne
 8012a50:	2301      	movne	r3, #1
 8012a52:	2300      	moveq	r3, #0
 8012a54:	b2db      	uxtb	r3, r3
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	370c      	adds	r7, #12
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bc80      	pop	{r7}
 8012a5e:	4770      	bx	lr

08012a60 <button_get_tgl_state>:

static bool button_get_tgl_state(lv_btnm_ctrl_t ctrl_bits)
{
 8012a60:	b480      	push	{r7}
 8012a62:	b083      	sub	sp, #12
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	4603      	mov	r3, r0
 8012a68:	80fb      	strh	r3, [r7, #6]
    return ctrl_bits & LV_BTNM_CTRL_TGL_STATE ? true : false;
 8012a6a:	88fb      	ldrh	r3, [r7, #6]
 8012a6c:	11db      	asrs	r3, r3, #7
 8012a6e:	f003 0301 	and.w	r3, r3, #1
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	bf14      	ite	ne
 8012a76:	2301      	movne	r3, #1
 8012a78:	2300      	moveq	r3, #0
 8012a7a:	b2db      	uxtb	r3, r3
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	370c      	adds	r7, #12
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bc80      	pop	{r7}
 8012a84:	4770      	bx	lr

08012a86 <get_button_from_point>:
 * @param btnm pointer to a button matrix object
 * @param p a point with absolute coordinates
 * @return the id of the button or LV_BTNM_BTN_NONE.
 */
static uint16_t get_button_from_point(lv_obj_t * btnm, lv_point_t * p)
{
 8012a86:	b580      	push	{r7, lr}
 8012a88:	b088      	sub	sp, #32
 8012a8a:	af00      	add	r7, sp, #0
 8012a8c:	6078      	str	r0, [r7, #4]
 8012a8e:	6039      	str	r1, [r7, #0]
    lv_area_t btnm_cords;
    lv_area_t btn_area;
    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f7f3 ff41 	bl	8006918 <lv_obj_get_ext_attr>
 8012a96:	61b8      	str	r0, [r7, #24]
    uint16_t i;
    lv_obj_get_coords(btnm, &btnm_cords);
 8012a98:	f107 0310 	add.w	r3, r7, #16
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f7f3 fd78 	bl	8006594 <lv_obj_get_coords>

    for(i = 0; i < ext->btn_cnt; i++) {
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	83fb      	strh	r3, [r7, #30]
 8012aa8:	e03e      	b.n	8012b28 <get_button_from_point+0xa2>
        lv_area_copy(&btn_area, &ext->button_areas[i]);
 8012aaa:	69bb      	ldr	r3, [r7, #24]
 8012aac:	685a      	ldr	r2, [r3, #4]
 8012aae:	8bfb      	ldrh	r3, [r7, #30]
 8012ab0:	00db      	lsls	r3, r3, #3
 8012ab2:	441a      	add	r2, r3
 8012ab4:	f107 0308 	add.w	r3, r7, #8
 8012ab8:	4611      	mov	r1, r2
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7fe fc5c 	bl	8011378 <lv_area_copy>
        btn_area.x1 += btnm_cords.x1;
 8012ac0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8012ac4:	b29a      	uxth	r2, r3
 8012ac6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012aca:	b29b      	uxth	r3, r3
 8012acc:	4413      	add	r3, r2
 8012ace:	b29b      	uxth	r3, r3
 8012ad0:	b21b      	sxth	r3, r3
 8012ad2:	813b      	strh	r3, [r7, #8]
        btn_area.y1 += btnm_cords.y1;
 8012ad4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012ad8:	b29a      	uxth	r2, r3
 8012ada:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012ade:	b29b      	uxth	r3, r3
 8012ae0:	4413      	add	r3, r2
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	b21b      	sxth	r3, r3
 8012ae6:	817b      	strh	r3, [r7, #10]
        btn_area.x2 += btnm_cords.x1;
 8012ae8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012aec:	b29a      	uxth	r2, r3
 8012aee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	4413      	add	r3, r2
 8012af6:	b29b      	uxth	r3, r3
 8012af8:	b21b      	sxth	r3, r3
 8012afa:	81bb      	strh	r3, [r7, #12]
        btn_area.y2 += btnm_cords.y1;
 8012afc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012b00:	b29a      	uxth	r2, r3
 8012b02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012b06:	b29b      	uxth	r3, r3
 8012b08:	4413      	add	r3, r2
 8012b0a:	b29b      	uxth	r3, r3
 8012b0c:	b21b      	sxth	r3, r3
 8012b0e:	81fb      	strh	r3, [r7, #14]
        if(lv_area_is_point_on(&btn_area, p) != false) {
 8012b10:	f107 0308 	add.w	r3, r7, #8
 8012b14:	6839      	ldr	r1, [r7, #0]
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7fc fdab 	bl	800f672 <lv_area_is_point_on>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d108      	bne.n	8012b34 <get_button_from_point+0xae>
    for(i = 0; i < ext->btn_cnt; i++) {
 8012b22:	8bfb      	ldrh	r3, [r7, #30]
 8012b24:	3301      	adds	r3, #1
 8012b26:	83fb      	strh	r3, [r7, #30]
 8012b28:	69bb      	ldr	r3, [r7, #24]
 8012b2a:	8c1b      	ldrh	r3, [r3, #32]
 8012b2c:	8bfa      	ldrh	r2, [r7, #30]
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d3bb      	bcc.n	8012aaa <get_button_from_point+0x24>
 8012b32:	e000      	b.n	8012b36 <get_button_from_point+0xb0>
            break;
 8012b34:	bf00      	nop
        }
    }

    if(i == ext->btn_cnt) i = LV_BTNM_BTN_NONE;
 8012b36:	69bb      	ldr	r3, [r7, #24]
 8012b38:	8c1b      	ldrh	r3, [r3, #32]
 8012b3a:	8bfa      	ldrh	r2, [r7, #30]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d102      	bne.n	8012b46 <get_button_from_point+0xc0>
 8012b40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012b44:	83fb      	strh	r3, [r7, #30]

    return i;
 8012b46:	8bfb      	ldrh	r3, [r7, #30]
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3720      	adds	r7, #32
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}

08012b50 <invalidate_button_area>:

static void invalidate_button_area(const lv_obj_t * btnm, uint16_t btn_idx)
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b088      	sub	sp, #32
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	460b      	mov	r3, r1
 8012b5a:	807b      	strh	r3, [r7, #2]
    if(btn_idx == LV_BTNM_BTN_NONE) return;
 8012b5c:	887b      	ldrh	r3, [r7, #2]
 8012b5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012b62:	4293      	cmp	r3, r2
 8012b64:	d047      	beq.n	8012bf6 <invalidate_button_area+0xa6>

    lv_area_t btn_area;
    lv_area_t btnm_area;

    lv_btnm_ext_t * ext = lv_obj_get_ext_attr(btnm);
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f7f3 fed6 	bl	8006918 <lv_obj_get_ext_attr>
 8012b6c:	61f8      	str	r0, [r7, #28]
    lv_area_copy(&btn_area, &ext->button_areas[btn_idx]);
 8012b6e:	69fb      	ldr	r3, [r7, #28]
 8012b70:	685a      	ldr	r2, [r3, #4]
 8012b72:	887b      	ldrh	r3, [r7, #2]
 8012b74:	00db      	lsls	r3, r3, #3
 8012b76:	441a      	add	r2, r3
 8012b78:	f107 0314 	add.w	r3, r7, #20
 8012b7c:	4611      	mov	r1, r2
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f7fe fbfa 	bl	8011378 <lv_area_copy>
    lv_obj_get_coords(btnm, &btnm_area);
 8012b84:	f107 030c 	add.w	r3, r7, #12
 8012b88:	4619      	mov	r1, r3
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f7f3 fd02 	bl	8006594 <lv_obj_get_coords>

    /* Convert relative coordinates to absolute */
    btn_area.x1 += btnm_area.x1;
 8012b90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012b94:	b29a      	uxth	r2, r3
 8012b96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012b9a:	b29b      	uxth	r3, r3
 8012b9c:	4413      	add	r3, r2
 8012b9e:	b29b      	uxth	r3, r3
 8012ba0:	b21b      	sxth	r3, r3
 8012ba2:	82bb      	strh	r3, [r7, #20]
    btn_area.y1 += btnm_area.y1;
 8012ba4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012ba8:	b29a      	uxth	r2, r3
 8012baa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	4413      	add	r3, r2
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	b21b      	sxth	r3, r3
 8012bb6:	82fb      	strh	r3, [r7, #22]
    btn_area.x2 += btnm_area.x1;
 8012bb8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8012bbc:	b29a      	uxth	r2, r3
 8012bbe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	4413      	add	r3, r2
 8012bc6:	b29b      	uxth	r3, r3
 8012bc8:	b21b      	sxth	r3, r3
 8012bca:	833b      	strh	r3, [r7, #24]
    btn_area.y2 += btnm_area.y1;
 8012bcc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8012bd0:	b29a      	uxth	r2, r3
 8012bd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012bd6:	b29b      	uxth	r3, r3
 8012bd8:	4413      	add	r3, r2
 8012bda:	b29b      	uxth	r3, r3
 8012bdc:	b21b      	sxth	r3, r3
 8012bde:	837b      	strh	r3, [r7, #26]

    lv_inv_area(lv_obj_get_disp(btnm), &btn_area);
 8012be0:	6878      	ldr	r0, [r7, #4]
 8012be2:	f7f3 fc75 	bl	80064d0 <lv_obj_get_disp>
 8012be6:	4602      	mov	r2, r0
 8012be8:	f107 0314 	add.w	r3, r7, #20
 8012bec:	4619      	mov	r1, r3
 8012bee:	4610      	mov	r0, r2
 8012bf0:	f7f4 f8e8 	bl	8006dc4 <lv_inv_area>
 8012bf4:	e000      	b.n	8012bf8 <invalidate_button_area+0xa8>
    if(btn_idx == LV_BTNM_BTN_NONE) return;
 8012bf6:	bf00      	nop
}
 8012bf8:	3720      	adds	r7, #32
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	bd80      	pop	{r7, pc}

08012bfe <maps_are_identical>:
 * @param map1 map to compare
 * @param map2 map to compare
 * @return true if maps are identical in length and content
 */
static bool maps_are_identical(const char ** map1, const char ** map2)
{
 8012bfe:	b580      	push	{r7, lr}
 8012c00:	b084      	sub	sp, #16
 8012c02:	af00      	add	r7, sp, #0
 8012c04:	6078      	str	r0, [r7, #4]
 8012c06:	6039      	str	r1, [r7, #0]
    if(map1 == map2) return true;
 8012c08:	687a      	ldr	r2, [r7, #4]
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d101      	bne.n	8012c14 <maps_are_identical+0x16>
 8012c10:	2301      	movs	r3, #1
 8012c12:	e04b      	b.n	8012cac <maps_are_identical+0xae>
    if(map1 == NULL || map2 == NULL) return map1 == map2;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d002      	beq.n	8012c20 <maps_are_identical+0x22>
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d107      	bne.n	8012c30 <maps_are_identical+0x32>
 8012c20:	687a      	ldr	r2, [r7, #4]
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	429a      	cmp	r2, r3
 8012c26:	bf0c      	ite	eq
 8012c28:	2301      	moveq	r3, #1
 8012c2a:	2300      	movne	r3, #0
 8012c2c:	b2db      	uxtb	r3, r3
 8012c2e:	e03d      	b.n	8012cac <maps_are_identical+0xae>

    uint16_t i = 0;
 8012c30:	2300      	movs	r3, #0
 8012c32:	81fb      	strh	r3, [r7, #14]
    while(map1[i][0] != '\0' && map2[i][0] != '\0') {
 8012c34:	e014      	b.n	8012c60 <maps_are_identical+0x62>
        if(strcmp(map1[i], map2[i]) != 0) return false;
 8012c36:	89fb      	ldrh	r3, [r7, #14]
 8012c38:	009b      	lsls	r3, r3, #2
 8012c3a:	687a      	ldr	r2, [r7, #4]
 8012c3c:	4413      	add	r3, r2
 8012c3e:	6818      	ldr	r0, [r3, #0]
 8012c40:	89fb      	ldrh	r3, [r7, #14]
 8012c42:	009b      	lsls	r3, r3, #2
 8012c44:	683a      	ldr	r2, [r7, #0]
 8012c46:	4413      	add	r3, r2
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	4619      	mov	r1, r3
 8012c4c:	f7ed faea 	bl	8000224 <strcmp>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d001      	beq.n	8012c5a <maps_are_identical+0x5c>
 8012c56:	2300      	movs	r3, #0
 8012c58:	e028      	b.n	8012cac <maps_are_identical+0xae>
        i++;
 8012c5a:	89fb      	ldrh	r3, [r7, #14]
 8012c5c:	3301      	adds	r3, #1
 8012c5e:	81fb      	strh	r3, [r7, #14]
    while(map1[i][0] != '\0' && map2[i][0] != '\0') {
 8012c60:	89fb      	ldrh	r3, [r7, #14]
 8012c62:	009b      	lsls	r3, r3, #2
 8012c64:	687a      	ldr	r2, [r7, #4]
 8012c66:	4413      	add	r3, r2
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	781b      	ldrb	r3, [r3, #0]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d007      	beq.n	8012c80 <maps_are_identical+0x82>
 8012c70:	89fb      	ldrh	r3, [r7, #14]
 8012c72:	009b      	lsls	r3, r3, #2
 8012c74:	683a      	ldr	r2, [r7, #0]
 8012c76:	4413      	add	r3, r2
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	781b      	ldrb	r3, [r3, #0]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d1da      	bne.n	8012c36 <maps_are_identical+0x38>
    }
    return map1[i][0] == '\0' && map2[i][0] == '\0';
 8012c80:	89fb      	ldrh	r3, [r7, #14]
 8012c82:	009b      	lsls	r3, r3, #2
 8012c84:	687a      	ldr	r2, [r7, #4]
 8012c86:	4413      	add	r3, r2
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	781b      	ldrb	r3, [r3, #0]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d109      	bne.n	8012ca4 <maps_are_identical+0xa6>
 8012c90:	89fb      	ldrh	r3, [r7, #14]
 8012c92:	009b      	lsls	r3, r3, #2
 8012c94:	683a      	ldr	r2, [r7, #0]
 8012c96:	4413      	add	r3, r2
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d101      	bne.n	8012ca4 <maps_are_identical+0xa6>
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	e000      	b.n	8012ca6 <maps_are_identical+0xa8>
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	f003 0301 	and.w	r3, r3, #1
 8012caa:	b2db      	uxtb	r3, r3
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	3710      	adds	r7, #16
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}

08012cb4 <make_one_button_toggled>:
 * It simply clears the toggle flag on other buttons.
 * @param btnm Button matrix object
 * @param btn_idx Button that should remain toggled
 */
static void make_one_button_toggled(lv_obj_t * btnm, uint16_t btn_idx)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b084      	sub	sp, #16
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
 8012cbc:	460b      	mov	r3, r1
 8012cbe:	807b      	strh	r3, [r7, #2]
    /*Save whether the button was toggled*/
    bool was_toggled = lv_btnm_get_btn_ctrl(btnm, btn_idx, LV_BTNM_CTRL_TGL_STATE);
 8012cc0:	887b      	ldrh	r3, [r7, #2]
 8012cc2:	2280      	movs	r2, #128	@ 0x80
 8012cc4:	4619      	mov	r1, r3
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f7fe ff7e 	bl	8011bc8 <lv_btnm_get_btn_ctrl>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	73fb      	strb	r3, [r7, #15]

    lv_btnm_clear_btn_ctrl_all(btnm, LV_BTNM_CTRL_TGL_STATE);
 8012cd0:	2180      	movs	r1, #128	@ 0x80
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f7fe fedd 	bl	8011a92 <lv_btnm_clear_btn_ctrl_all>

    if(was_toggled) lv_btnm_set_btn_ctrl(btnm, btn_idx, LV_BTNM_CTRL_TGL_STATE);
 8012cd8:	7bfb      	ldrb	r3, [r7, #15]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d005      	beq.n	8012cea <make_one_button_toggled+0x36>
 8012cde:	887b      	ldrh	r3, [r7, #2]
 8012ce0:	2280      	movs	r2, #128	@ 0x80
 8012ce2:	4619      	mov	r1, r3
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f7fe fe7b 	bl	80119e0 <lv_btnm_set_btn_ctrl>
}
 8012cea:	bf00      	nop
 8012cec:	3710      	adds	r7, #16
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}

08012cf2 <lv_area_copy>:
{
 8012cf2:	b580      	push	{r7, lr}
 8012cf4:	b082      	sub	sp, #8
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	6078      	str	r0, [r7, #4]
 8012cfa:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8012cfc:	2208      	movs	r2, #8
 8012cfe:	6839      	ldr	r1, [r7, #0]
 8012d00:	6878      	ldr	r0, [r7, #4]
 8012d02:	f008 fe72 	bl	801b9ea <memcpy>
}
 8012d06:	bf00      	nop
 8012d08:	3708      	adds	r7, #8
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}

08012d0e <lv_area_get_width>:
{
 8012d0e:	b480      	push	{r7}
 8012d10:	b083      	sub	sp, #12
 8012d12:	af00      	add	r7, sp, #0
 8012d14:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012d1c:	b29a      	uxth	r2, r3
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012d24:	b29b      	uxth	r3, r3
 8012d26:	1ad3      	subs	r3, r2, r3
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	3301      	adds	r3, #1
 8012d2c:	b29b      	uxth	r3, r3
 8012d2e:	b21b      	sxth	r3, r3
}
 8012d30:	4618      	mov	r0, r3
 8012d32:	370c      	adds	r7, #12
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bc80      	pop	{r7}
 8012d38:	4770      	bx	lr

08012d3a <lv_area_get_height>:
{
 8012d3a:	b480      	push	{r7}
 8012d3c:	b083      	sub	sp, #12
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012d48:	b29a      	uxth	r2, r3
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	1ad3      	subs	r3, r2, r3
 8012d54:	b29b      	uxth	r3, r3
 8012d56:	3301      	adds	r3, #1
 8012d58:	b29b      	uxth	r3, r3
 8012d5a:	b21b      	sxth	r3, r3
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	370c      	adds	r7, #12
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bc80      	pop	{r7}
 8012d64:	4770      	bx	lr

08012d66 <lv_cont_set_style>:
 * @param cont pointer to a container object
 * @param type which style should be set (can be only `LV_CONT_STYLE_MAIN`)
 * @param style pointer to the new style
 */
static inline void lv_cont_set_style(lv_obj_t * cont, lv_cont_style_t type, const lv_style_t * style)
{
 8012d66:	b580      	push	{r7, lr}
 8012d68:	b084      	sub	sp, #16
 8012d6a:	af00      	add	r7, sp, #0
 8012d6c:	60f8      	str	r0, [r7, #12]
 8012d6e:	460b      	mov	r3, r1
 8012d70:	607a      	str	r2, [r7, #4]
 8012d72:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(cont, style);
 8012d74:	6879      	ldr	r1, [r7, #4]
 8012d76:	68f8      	ldr	r0, [r7, #12]
 8012d78:	f7f3 f9ed 	bl	8006156 <lv_obj_set_style>
}
 8012d7c:	bf00      	nop
 8012d7e:	3710      	adds	r7, #16
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}

08012d84 <lv_cont_create>:
 * @param par pointer to an object, it will be the parent of the new container
 * @param copy pointer to a container object, if not NULL then the new object will be copied from it
 * @return pointer to the created container
 */
lv_obj_t * lv_cont_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b086      	sub	sp, #24
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
 8012d8c:	6039      	str	r1, [r7, #0]

    LV_LOG_TRACE("container create started");

    /*Create a basic object*/
    lv_obj_t * new_cont = lv_obj_create(par, copy);
 8012d8e:	6839      	ldr	r1, [r7, #0]
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f7f1 ffbf 	bl	8004d14 <lv_obj_create>
 8012d96:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_cont);
 8012d98:	697b      	ldr	r3, [r7, #20]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d101      	bne.n	8012da2 <lv_cont_create+0x1e>
 8012d9e:	bf00      	nop
 8012da0:	e7fd      	b.n	8012d9e <lv_cont_create+0x1a>
    if(new_cont == NULL) return NULL;
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d101      	bne.n	8012dac <lv_cont_create+0x28>
 8012da8:	2300      	movs	r3, #0
 8012daa:	e08c      	b.n	8012ec6 <lv_cont_create+0x142>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_cont);
 8012dac:	4b48      	ldr	r3, [pc, #288]	@ (8012ed0 <lv_cont_create+0x14c>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d105      	bne.n	8012dc0 <lv_cont_create+0x3c>
 8012db4:	6978      	ldr	r0, [r7, #20]
 8012db6:	f7f3 fd99 	bl	80068ec <lv_obj_get_signal_cb>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	4a44      	ldr	r2, [pc, #272]	@ (8012ed0 <lv_cont_create+0x14c>)
 8012dbe:	6013      	str	r3, [r2, #0]

    lv_obj_allocate_ext_attr(new_cont, sizeof(lv_cont_ext_t));
 8012dc0:	2102      	movs	r1, #2
 8012dc2:	6978      	ldr	r0, [r7, #20]
 8012dc4:	f7f3 fb46 	bl	8006454 <lv_obj_allocate_ext_attr>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(new_cont);
 8012dc8:	6978      	ldr	r0, [r7, #20]
 8012dca:	f7f3 fda5 	bl	8006918 <lv_obj_get_ext_attr>
 8012dce:	6138      	str	r0, [r7, #16]
    if(ext == NULL) return NULL;
 8012dd0:	693b      	ldr	r3, [r7, #16]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d101      	bne.n	8012dda <lv_cont_create+0x56>
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	e075      	b.n	8012ec6 <lv_cont_create+0x142>

    lv_mem_assert(ext);
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d101      	bne.n	8012de4 <lv_cont_create+0x60>
 8012de0:	bf00      	nop
 8012de2:	e7fd      	b.n	8012de0 <lv_cont_create+0x5c>
    ext->fit_left   = LV_FIT_NONE;
 8012de4:	693a      	ldr	r2, [r7, #16]
 8012de6:	7813      	ldrb	r3, [r2, #0]
 8012de8:	f36f 1305 	bfc	r3, #4, #2
 8012dec:	7013      	strb	r3, [r2, #0]
    ext->fit_right  = LV_FIT_NONE;
 8012dee:	693a      	ldr	r2, [r7, #16]
 8012df0:	7813      	ldrb	r3, [r2, #0]
 8012df2:	f36f 1387 	bfc	r3, #6, #2
 8012df6:	7013      	strb	r3, [r2, #0]
    ext->fit_top    = LV_FIT_NONE;
 8012df8:	693a      	ldr	r2, [r7, #16]
 8012dfa:	7853      	ldrb	r3, [r2, #1]
 8012dfc:	f36f 0301 	bfc	r3, #0, #2
 8012e00:	7053      	strb	r3, [r2, #1]
    ext->fit_bottom = LV_FIT_NONE;
 8012e02:	693a      	ldr	r2, [r7, #16]
 8012e04:	7853      	ldrb	r3, [r2, #1]
 8012e06:	f36f 0383 	bfc	r3, #2, #2
 8012e0a:	7053      	strb	r3, [r2, #1]
    ext->layout     = LV_LAYOUT_OFF;
 8012e0c:	693a      	ldr	r2, [r7, #16]
 8012e0e:	7813      	ldrb	r3, [r2, #0]
 8012e10:	f36f 0303 	bfc	r3, #0, #4
 8012e14:	7013      	strb	r3, [r2, #0]

    lv_obj_set_signal_cb(new_cont, lv_cont_signal);
 8012e16:	492f      	ldr	r1, [pc, #188]	@ (8012ed4 <lv_cont_create+0x150>)
 8012e18:	6978      	ldr	r0, [r7, #20]
 8012e1a:	f7f3 fb01 	bl	8006420 <lv_obj_set_signal_cb>

    /*Init the new container*/
    if(copy == NULL) {
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d116      	bne.n	8012e52 <lv_cont_create+0xce>
        /*Set the default styles if it's not screen*/
        if(par != NULL) {
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d04c      	beq.n	8012ec4 <lv_cont_create+0x140>
            lv_theme_t * th = lv_theme_get_current();
 8012e2a:	f007 faa3 	bl	801a374 <lv_theme_get_current>
 8012e2e:	60b8      	str	r0, [r7, #8]
            if(th) {
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d007      	beq.n	8012e46 <lv_cont_create+0xc2>
                lv_cont_set_style(new_cont, LV_CONT_STYLE_MAIN, th->style.cont);
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	68db      	ldr	r3, [r3, #12]
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	2100      	movs	r1, #0
 8012e3e:	6978      	ldr	r0, [r7, #20]
 8012e40:	f7ff ff91 	bl	8012d66 <lv_cont_set_style>
 8012e44:	e03e      	b.n	8012ec4 <lv_cont_create+0x140>
            } else {
                lv_cont_set_style(new_cont, LV_CONT_STYLE_MAIN, &lv_style_pretty);
 8012e46:	4a24      	ldr	r2, [pc, #144]	@ (8012ed8 <lv_cont_create+0x154>)
 8012e48:	2100      	movs	r1, #0
 8012e4a:	6978      	ldr	r0, [r7, #20]
 8012e4c:	f7ff ff8b 	bl	8012d66 <lv_cont_set_style>
 8012e50:	e038      	b.n	8012ec4 <lv_cont_create+0x140>
            }
        }
    }
    /*Copy an existing object*/
    else {
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8012e52:	6838      	ldr	r0, [r7, #0]
 8012e54:	f7f3 fd60 	bl	8006918 <lv_obj_get_ext_attr>
 8012e58:	60f8      	str	r0, [r7, #12]
        ext->fit_left            = copy_ext->fit_left;
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	781b      	ldrb	r3, [r3, #0]
 8012e5e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8012e62:	b2d9      	uxtb	r1, r3
 8012e64:	693a      	ldr	r2, [r7, #16]
 8012e66:	7813      	ldrb	r3, [r2, #0]
 8012e68:	f361 1305 	bfi	r3, r1, #4, #2
 8012e6c:	7013      	strb	r3, [r2, #0]
        ext->fit_right           = copy_ext->fit_right;
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	781b      	ldrb	r3, [r3, #0]
 8012e72:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8012e76:	b2d9      	uxtb	r1, r3
 8012e78:	693a      	ldr	r2, [r7, #16]
 8012e7a:	7813      	ldrb	r3, [r2, #0]
 8012e7c:	f361 1387 	bfi	r3, r1, #6, #2
 8012e80:	7013      	strb	r3, [r2, #0]
        ext->fit_top             = copy_ext->fit_top;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	785b      	ldrb	r3, [r3, #1]
 8012e86:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8012e8a:	b2d9      	uxtb	r1, r3
 8012e8c:	693a      	ldr	r2, [r7, #16]
 8012e8e:	7853      	ldrb	r3, [r2, #1]
 8012e90:	f361 0301 	bfi	r3, r1, #0, #2
 8012e94:	7053      	strb	r3, [r2, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	785b      	ldrb	r3, [r3, #1]
 8012e9a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8012e9e:	b2d9      	uxtb	r1, r3
 8012ea0:	693a      	ldr	r2, [r7, #16]
 8012ea2:	7853      	ldrb	r3, [r2, #1]
 8012ea4:	f361 0383 	bfi	r3, r1, #2, #2
 8012ea8:	7053      	strb	r3, [r2, #1]
        ext->layout              = copy_ext->layout;
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	781b      	ldrb	r3, [r3, #0]
 8012eae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012eb2:	b2d9      	uxtb	r1, r3
 8012eb4:	693a      	ldr	r2, [r7, #16]
 8012eb6:	7813      	ldrb	r3, [r2, #0]
 8012eb8:	f361 0303 	bfi	r3, r1, #0, #4
 8012ebc:	7013      	strb	r3, [r2, #0]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_cont);
 8012ebe:	6978      	ldr	r0, [r7, #20]
 8012ec0:	f7f3 f95b 	bl	800617a <lv_obj_refresh_style>
    }

    LV_LOG_INFO("container created");

    return new_cont;
 8012ec4:	697b      	ldr	r3, [r7, #20]
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	3718      	adds	r7, #24
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}
 8012ece:	bf00      	nop
 8012ed0:	2000ad88 	.word	0x2000ad88
 8012ed4:	08013011 	.word	0x08013011
 8012ed8:	20002b44 	.word	0x20002b44

08012edc <lv_cont_set_fit4>:
 * @param right right fit policy from `lv_fit_t`
 * @param top bottom fit policy from `lv_fit_t`
 * @param bottom bottom fit policy from `lv_fit_t`
 */
void lv_cont_set_fit4(lv_obj_t * cont, lv_fit_t left, lv_fit_t right, lv_fit_t top, lv_fit_t bottom)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
 8012ee4:	4608      	mov	r0, r1
 8012ee6:	4611      	mov	r1, r2
 8012ee8:	461a      	mov	r2, r3
 8012eea:	4603      	mov	r3, r0
 8012eec:	70fb      	strb	r3, [r7, #3]
 8012eee:	460b      	mov	r3, r1
 8012ef0:	70bb      	strb	r3, [r7, #2]
 8012ef2:	4613      	mov	r3, r2
 8012ef4:	707b      	strb	r3, [r7, #1]
    lv_obj_invalidate(cont);
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f7f2 fa30 	bl	800535c <lv_obj_invalidate>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f7f3 fd0b 	bl	8006918 <lv_obj_get_ext_attr>
 8012f02:	60f8      	str	r0, [r7, #12]
    if(ext->fit_left == left && ext->fit_right == right && ext->fit_top == top && ext->fit_bottom == bottom) {
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8012f0c:	b2db      	uxtb	r3, r3
 8012f0e:	461a      	mov	r2, r3
 8012f10:	78fb      	ldrb	r3, [r7, #3]
 8012f12:	429a      	cmp	r2, r3
 8012f14:	d11a      	bne.n	8012f4c <lv_cont_set_fit4+0x70>
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	781b      	ldrb	r3, [r3, #0]
 8012f1a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8012f1e:	b2db      	uxtb	r3, r3
 8012f20:	461a      	mov	r2, r3
 8012f22:	78bb      	ldrb	r3, [r7, #2]
 8012f24:	429a      	cmp	r2, r3
 8012f26:	d111      	bne.n	8012f4c <lv_cont_set_fit4+0x70>
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	785b      	ldrb	r3, [r3, #1]
 8012f2c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8012f30:	b2db      	uxtb	r3, r3
 8012f32:	461a      	mov	r2, r3
 8012f34:	787b      	ldrb	r3, [r7, #1]
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d108      	bne.n	8012f4c <lv_cont_set_fit4+0x70>
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	785b      	ldrb	r3, [r3, #1]
 8012f3e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8012f42:	b2db      	uxtb	r3, r3
 8012f44:	461a      	mov	r2, r3
 8012f46:	7e3b      	ldrb	r3, [r7, #24]
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d02a      	beq.n	8012fa2 <lv_cont_set_fit4+0xc6>
        return;
    }

    ext->fit_left   = left;
 8012f4c:	78fb      	ldrb	r3, [r7, #3]
 8012f4e:	f003 0303 	and.w	r3, r3, #3
 8012f52:	b2d9      	uxtb	r1, r3
 8012f54:	68fa      	ldr	r2, [r7, #12]
 8012f56:	7813      	ldrb	r3, [r2, #0]
 8012f58:	f361 1305 	bfi	r3, r1, #4, #2
 8012f5c:	7013      	strb	r3, [r2, #0]
    ext->fit_right  = right;
 8012f5e:	78bb      	ldrb	r3, [r7, #2]
 8012f60:	f003 0303 	and.w	r3, r3, #3
 8012f64:	b2d9      	uxtb	r1, r3
 8012f66:	68fa      	ldr	r2, [r7, #12]
 8012f68:	7813      	ldrb	r3, [r2, #0]
 8012f6a:	f361 1387 	bfi	r3, r1, #6, #2
 8012f6e:	7013      	strb	r3, [r2, #0]
    ext->fit_top    = top;
 8012f70:	787b      	ldrb	r3, [r7, #1]
 8012f72:	f003 0303 	and.w	r3, r3, #3
 8012f76:	b2d9      	uxtb	r1, r3
 8012f78:	68fa      	ldr	r2, [r7, #12]
 8012f7a:	7853      	ldrb	r3, [r2, #1]
 8012f7c:	f361 0301 	bfi	r3, r1, #0, #2
 8012f80:	7053      	strb	r3, [r2, #1]
    ext->fit_bottom = bottom;
 8012f82:	7e3b      	ldrb	r3, [r7, #24]
 8012f84:	f003 0303 	and.w	r3, r3, #3
 8012f88:	b2d9      	uxtb	r1, r3
 8012f8a:	68fa      	ldr	r2, [r7, #12]
 8012f8c:	7853      	ldrb	r3, [r2, #1]
 8012f8e:	f361 0383 	bfi	r3, r1, #2, #2
 8012f92:	7053      	strb	r3, [r2, #1]

    /*Send a signal to refresh the layout*/
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	69db      	ldr	r3, [r3, #28]
 8012f98:	2200      	movs	r2, #0
 8012f9a:	2101      	movs	r1, #1
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	4798      	blx	r3
 8012fa0:	e000      	b.n	8012fa4 <lv_cont_set_fit4+0xc8>
        return;
 8012fa2:	bf00      	nop
}
 8012fa4:	3710      	adds	r7, #16
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}

08012faa <lv_cont_get_layout>:
 * Get the layout of a container
 * @param cont pointer to container object
 * @return the layout from 'lv_cont_layout_t'
 */
lv_layout_t lv_cont_get_layout(const lv_obj_t * cont)
{
 8012faa:	b580      	push	{r7, lr}
 8012fac:	b084      	sub	sp, #16
 8012fae:	af00      	add	r7, sp, #0
 8012fb0:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f7f3 fcb0 	bl	8006918 <lv_obj_get_ext_attr>
 8012fb8:	60f8      	str	r0, [r7, #12]
    return ext->layout;
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8012fc2:	b2db      	uxtb	r3, r3
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	3710      	adds	r7, #16
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}

08012fcc <lv_cont_get_fit_left>:
 * Get left fit mode of a container
 * @param cont pointer to a container object
 * @return an element of `lv_fit_t`
 */
lv_fit_t lv_cont_get_fit_left(const lv_obj_t * cont)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b084      	sub	sp, #16
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f7f3 fc9f 	bl	8006918 <lv_obj_get_ext_attr>
 8012fda:	60f8      	str	r0, [r7, #12]
    return ext->fit_left;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	781b      	ldrb	r3, [r3, #0]
 8012fe0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8012fe4:	b2db      	uxtb	r3, r3
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3710      	adds	r7, #16
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}

08012fee <lv_cont_get_fit_top>:
 * Get top fit mode of a container
 * @param cont pointer to a container object
 * @return an element of `lv_fit_t`
 */
lv_fit_t lv_cont_get_fit_top(const lv_obj_t * cont)
{
 8012fee:	b580      	push	{r7, lr}
 8012ff0:	b084      	sub	sp, #16
 8012ff2:	af00      	add	r7, sp, #0
 8012ff4:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8012ff6:	6878      	ldr	r0, [r7, #4]
 8012ff8:	f7f3 fc8e 	bl	8006918 <lv_obj_get_ext_attr>
 8012ffc:	60f8      	str	r0, [r7, #12]
    return ext->fit_top;
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	785b      	ldrb	r3, [r3, #1]
 8013002:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8013006:	b2db      	uxtb	r3, r3
}
 8013008:	4618      	mov	r0, r3
 801300a:	3710      	adds	r7, #16
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}

08013010 <lv_cont_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_cont_signal(lv_obj_t * cont, lv_signal_t sign, void * param)
{
 8013010:	b590      	push	{r4, r7, lr}
 8013012:	b087      	sub	sp, #28
 8013014:	af00      	add	r7, sp, #0
 8013016:	60f8      	str	r0, [r7, #12]
 8013018:	460b      	mov	r3, r1
 801301a:	607a      	str	r2, [r7, #4]
 801301c:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(cont, sign, param);
 801301e:	4b34      	ldr	r3, [pc, #208]	@ (80130f0 <lv_cont_signal+0xe0>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	7af9      	ldrb	r1, [r7, #11]
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	68f8      	ldr	r0, [r7, #12]
 8013028:	4798      	blx	r3
 801302a:	4603      	mov	r3, r0
 801302c:	75bb      	strb	r3, [r7, #22]
    if(res != LV_RES_OK) return res;
 801302e:	7dbb      	ldrb	r3, [r7, #22]
 8013030:	2b01      	cmp	r3, #1
 8013032:	d001      	beq.n	8013038 <lv_cont_signal+0x28>
 8013034:	7dbb      	ldrb	r3, [r7, #22]
 8013036:	e056      	b.n	80130e6 <lv_cont_signal+0xd6>

    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
 8013038:	7afb      	ldrb	r3, [r7, #11]
 801303a:	2b04      	cmp	r3, #4
 801303c:	d106      	bne.n	801304c <lv_cont_signal+0x3c>
        lv_cont_refr_layout(cont);
 801303e:	68f8      	ldr	r0, [r7, #12]
 8013040:	f000 f85a 	bl	80130f8 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 8013044:	68f8      	ldr	r0, [r7, #12]
 8013046:	f000 fc9a 	bl	801397e <lv_cont_refr_autofit>
 801304a:	e04b      	b.n	80130e4 <lv_cont_signal+0xd4>
    } else if(sign == LV_SIGNAL_CHILD_CHG) {
 801304c:	7afb      	ldrb	r3, [r7, #11]
 801304e:	2b01      	cmp	r3, #1
 8013050:	d106      	bne.n	8013060 <lv_cont_signal+0x50>
        lv_cont_refr_layout(cont);
 8013052:	68f8      	ldr	r0, [r7, #12]
 8013054:	f000 f850 	bl	80130f8 <lv_cont_refr_layout>
        lv_cont_refr_autofit(cont);
 8013058:	68f8      	ldr	r0, [r7, #12]
 801305a:	f000 fc90 	bl	801397e <lv_cont_refr_autofit>
 801305e:	e041      	b.n	80130e4 <lv_cont_signal+0xd4>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8013060:	7afb      	ldrb	r3, [r7, #11]
 8013062:	2b02      	cmp	r3, #2
 8013064:	d11c      	bne.n	80130a0 <lv_cont_signal+0x90>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
 8013066:	68f8      	ldr	r0, [r7, #12]
 8013068:	f7f3 fad5 	bl	8006616 <lv_obj_get_width>
 801306c:	4603      	mov	r3, r0
 801306e:	461c      	mov	r4, r3
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f7ff fe4c 	bl	8012d0e <lv_area_get_width>
 8013076:	4603      	mov	r3, r0
 8013078:	429c      	cmp	r4, r3
 801307a:	d10a      	bne.n	8013092 <lv_cont_signal+0x82>
 801307c:	68f8      	ldr	r0, [r7, #12]
 801307e:	f7f3 fad8 	bl	8006632 <lv_obj_get_height>
 8013082:	4603      	mov	r3, r0
 8013084:	461c      	mov	r4, r3
 8013086:	6878      	ldr	r0, [r7, #4]
 8013088:	f7ff fe57 	bl	8012d3a <lv_area_get_height>
 801308c:	4603      	mov	r3, r0
 801308e:	429c      	cmp	r4, r3
 8013090:	d028      	beq.n	80130e4 <lv_cont_signal+0xd4>
            lv_cont_refr_layout(cont);
 8013092:	68f8      	ldr	r0, [r7, #12]
 8013094:	f000 f830 	bl	80130f8 <lv_cont_refr_layout>
            lv_cont_refr_autofit(cont);
 8013098:	68f8      	ldr	r0, [r7, #12]
 801309a:	f000 fc70 	bl	801397e <lv_cont_refr_autofit>
 801309e:	e021      	b.n	80130e4 <lv_cont_signal+0xd4>
        }
    } else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
 80130a0:	7afb      	ldrb	r3, [r7, #11]
 80130a2:	2b03      	cmp	r3, #3
 80130a4:	d103      	bne.n	80130ae <lv_cont_signal+0x9e>
        /*FLOOD and FILL fit needs to be refreshed if the parent size has changed*/
        lv_cont_refr_autofit(cont);
 80130a6:	68f8      	ldr	r0, [r7, #12]
 80130a8:	f000 fc69 	bl	801397e <lv_cont_refr_autofit>
 80130ac:	e01a      	b.n	80130e4 <lv_cont_signal+0xd4>

    } else if(sign == LV_SIGNAL_GET_TYPE) {
 80130ae:	7afb      	ldrb	r3, [r7, #11]
 80130b0:	2b06      	cmp	r3, #6
 80130b2:	d117      	bne.n	80130e4 <lv_cont_signal+0xd4>
        lv_obj_type_t * buf = param;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	613b      	str	r3, [r7, #16]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80130b8:	2300      	movs	r3, #0
 80130ba:	75fb      	strb	r3, [r7, #23]
 80130bc:	e008      	b.n	80130d0 <lv_cont_signal+0xc0>
            if(buf->type[i] == NULL) break;
 80130be:	7dfa      	ldrb	r2, [r7, #23]
 80130c0:	693b      	ldr	r3, [r7, #16]
 80130c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d006      	beq.n	80130d8 <lv_cont_signal+0xc8>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80130ca:	7dfb      	ldrb	r3, [r7, #23]
 80130cc:	3301      	adds	r3, #1
 80130ce:	75fb      	strb	r3, [r7, #23]
 80130d0:	7dfb      	ldrb	r3, [r7, #23]
 80130d2:	2b06      	cmp	r3, #6
 80130d4:	d9f3      	bls.n	80130be <lv_cont_signal+0xae>
 80130d6:	e000      	b.n	80130da <lv_cont_signal+0xca>
            if(buf->type[i] == NULL) break;
 80130d8:	bf00      	nop
        }
        buf->type[i] = "lv_cont";
 80130da:	7dfa      	ldrb	r2, [r7, #23]
 80130dc:	693b      	ldr	r3, [r7, #16]
 80130de:	4905      	ldr	r1, [pc, #20]	@ (80130f4 <lv_cont_signal+0xe4>)
 80130e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 80130e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80130e6:	4618      	mov	r0, r3
 80130e8:	371c      	adds	r7, #28
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd90      	pop	{r4, r7, pc}
 80130ee:	bf00      	nop
 80130f0:	2000ad88 	.word	0x2000ad88
 80130f4:	0801c674 	.word	0x0801c674

080130f8 <lv_cont_refr_layout>:
/**
 * Refresh the layout of a container
 * @param cont pointer to an object which layout should be refreshed
 */
static void lv_cont_refr_layout(lv_obj_t * cont)
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b084      	sub	sp, #16
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
    lv_layout_t type = lv_cont_get_layout(cont);
 8013100:	6878      	ldr	r0, [r7, #4]
 8013102:	f7ff ff52 	bl	8012faa <lv_cont_get_layout>
 8013106:	4603      	mov	r3, r0
 8013108:	73fb      	strb	r3, [r7, #15]

    /*'cont' has to be at least 1 child*/
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 801310a:	2100      	movs	r1, #0
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f7f3 fa24 	bl	800655a <lv_obj_get_child>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	d031      	beq.n	801317c <lv_cont_refr_layout+0x84>

    if(type == LV_LAYOUT_OFF) return;
 8013118:	7bfb      	ldrb	r3, [r7, #15]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d030      	beq.n	8013180 <lv_cont_refr_layout+0x88>

    if(type == LV_LAYOUT_CENTER) {
 801311e:	7bfb      	ldrb	r3, [r7, #15]
 8013120:	2b01      	cmp	r3, #1
 8013122:	d103      	bne.n	801312c <lv_cont_refr_layout+0x34>
        lv_cont_layout_center(cont);
 8013124:	6878      	ldr	r0, [r7, #4]
 8013126:	f000 f921 	bl	801336c <lv_cont_layout_center>
 801312a:	e02a      	b.n	8013182 <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_COL_L || type == LV_LAYOUT_COL_M || type == LV_LAYOUT_COL_R) {
 801312c:	7bfb      	ldrb	r3, [r7, #15]
 801312e:	2b02      	cmp	r3, #2
 8013130:	d005      	beq.n	801313e <lv_cont_refr_layout+0x46>
 8013132:	7bfb      	ldrb	r3, [r7, #15]
 8013134:	2b03      	cmp	r3, #3
 8013136:	d002      	beq.n	801313e <lv_cont_refr_layout+0x46>
 8013138:	7bfb      	ldrb	r3, [r7, #15]
 801313a:	2b04      	cmp	r3, #4
 801313c:	d103      	bne.n	8013146 <lv_cont_refr_layout+0x4e>
        lv_cont_layout_col(cont);
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f000 f822 	bl	8013188 <lv_cont_layout_col>
 8013144:	e01d      	b.n	8013182 <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_ROW_T || type == LV_LAYOUT_ROW_M || type == LV_LAYOUT_ROW_B) {
 8013146:	7bfb      	ldrb	r3, [r7, #15]
 8013148:	2b05      	cmp	r3, #5
 801314a:	d005      	beq.n	8013158 <lv_cont_refr_layout+0x60>
 801314c:	7bfb      	ldrb	r3, [r7, #15]
 801314e:	2b06      	cmp	r3, #6
 8013150:	d002      	beq.n	8013158 <lv_cont_refr_layout+0x60>
 8013152:	7bfb      	ldrb	r3, [r7, #15]
 8013154:	2b07      	cmp	r3, #7
 8013156:	d103      	bne.n	8013160 <lv_cont_refr_layout+0x68>
        lv_cont_layout_row(cont);
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f000 f88e 	bl	801327a <lv_cont_layout_row>
 801315e:	e010      	b.n	8013182 <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_PRETTY) {
 8013160:	7bfb      	ldrb	r3, [r7, #15]
 8013162:	2b08      	cmp	r3, #8
 8013164:	d103      	bne.n	801316e <lv_cont_refr_layout+0x76>
        lv_cont_layout_pretty(cont);
 8013166:	6878      	ldr	r0, [r7, #4]
 8013168:	f000 f9a2 	bl	80134b0 <lv_cont_layout_pretty>
 801316c:	e009      	b.n	8013182 <lv_cont_refr_layout+0x8a>
    } else if(type == LV_LAYOUT_GRID) {
 801316e:	7bfb      	ldrb	r3, [r7, #15]
 8013170:	2b09      	cmp	r3, #9
 8013172:	d106      	bne.n	8013182 <lv_cont_refr_layout+0x8a>
        lv_cont_layout_grid(cont);
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f000 fb3b 	bl	80137f0 <lv_cont_layout_grid>
 801317a:	e002      	b.n	8013182 <lv_cont_refr_layout+0x8a>
    if(lv_obj_get_child(cont, NULL) == NULL) return;
 801317c:	bf00      	nop
 801317e:	e000      	b.n	8013182 <lv_cont_refr_layout+0x8a>
    if(type == LV_LAYOUT_OFF) return;
 8013180:	bf00      	nop
    }
}
 8013182:	3710      	adds	r7, #16
 8013184:	46bd      	mov	sp, r7
 8013186:	bd80      	pop	{r7, pc}

08013188 <lv_cont_layout_col>:
/**
 * Handle column type layouts
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_col(lv_obj_t * cont)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b088      	sub	sp, #32
 801318c:	af02      	add	r7, sp, #8
 801318e:	6078      	str	r0, [r7, #4]
    lv_layout_t type = lv_cont_get_layout(cont);
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f7ff ff0a 	bl	8012faa <lv_cont_get_layout>
 8013196:	4603      	mov	r3, r0
 8013198:	737b      	strb	r3, [r7, #13]
    lv_obj_t * child;

    /*Adjust margin and get the alignment type*/
    lv_align_t align;
    const lv_style_t * style = lv_obj_get_style(cont);
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f7f3 faa6 	bl	80066ec <lv_obj_get_style>
 80131a0:	60b8      	str	r0, [r7, #8]
    lv_coord_t hpad_corr;

    switch(type) {
 80131a2:	7b7b      	ldrb	r3, [r7, #13]
 80131a4:	2b04      	cmp	r3, #4
 80131a6:	d011      	beq.n	80131cc <lv_cont_layout_col+0x44>
 80131a8:	2b04      	cmp	r3, #4
 80131aa:	dc19      	bgt.n	80131e0 <lv_cont_layout_col+0x58>
 80131ac:	2b02      	cmp	r3, #2
 80131ae:	d002      	beq.n	80131b6 <lv_cont_layout_col+0x2e>
 80131b0:	2b03      	cmp	r3, #3
 80131b2:	d006      	beq.n	80131c2 <lv_cont_layout_col+0x3a>
 80131b4:	e014      	b.n	80131e0 <lv_cont_layout_col+0x58>
        case LV_LAYOUT_COL_L:
            hpad_corr = style->body.padding.left;
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	8b5b      	ldrh	r3, [r3, #26]
 80131ba:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 80131bc:	2301      	movs	r3, #1
 80131be:	74fb      	strb	r3, [r7, #19]
            break;
 80131c0:	e013      	b.n	80131ea <lv_cont_layout_col+0x62>
        case LV_LAYOUT_COL_M:
            hpad_corr = 0;
 80131c2:	2300      	movs	r3, #0
 80131c4:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_MID;
 80131c6:	2302      	movs	r3, #2
 80131c8:	74fb      	strb	r3, [r7, #19]
            break;
 80131ca:	e00e      	b.n	80131ea <lv_cont_layout_col+0x62>
        case LV_LAYOUT_COL_R:
            hpad_corr = -style->body.padding.right;
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80131d2:	b29b      	uxth	r3, r3
 80131d4:	425b      	negs	r3, r3
 80131d6:	b29b      	uxth	r3, r3
 80131d8:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_RIGHT;
 80131da:	2303      	movs	r3, #3
 80131dc:	74fb      	strb	r3, [r7, #19]
            break;
 80131de:	e004      	b.n	80131ea <lv_cont_layout_col+0x62>
        default:
            hpad_corr = 0;
 80131e0:	2300      	movs	r3, #0
 80131e2:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 80131e4:	2301      	movs	r3, #1
 80131e6:	74fb      	strb	r3, [r7, #19]
            break;
 80131e8:	bf00      	nop
    }

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 80131ea:	2101      	movs	r1, #1
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	f7f3 f851 	bl	8006294 <lv_obj_set_protect>
    /* Align the children */
    lv_coord_t last_cord = style->body.padding.top;
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	8adb      	ldrh	r3, [r3, #22]
 80131f6:	81fb      	strh	r3, [r7, #14]
    LV_LL_READ_BACK(cont->child_ll, child)
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	3304      	adds	r3, #4
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7fc fe50 	bl	800fea2 <lv_ll_get_tail>
 8013202:	6178      	str	r0, [r7, #20]
 8013204:	e02e      	b.n	8013264 <lv_cont_layout_col+0xdc>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8013206:	6978      	ldr	r0, [r7, #20]
 8013208:	f7f3 fac8 	bl	800679c <lv_obj_get_hidden>
 801320c:	4603      	mov	r3, r0
 801320e:	2b00      	cmp	r3, #0
 8013210:	d120      	bne.n	8013254 <lv_cont_layout_col+0xcc>
 8013212:	2104      	movs	r1, #4
 8013214:	6978      	ldr	r0, [r7, #20]
 8013216:	f7f3 fb53 	bl	80068c0 <lv_obj_is_protected>
 801321a:	4603      	mov	r3, r0
 801321c:	2b00      	cmp	r3, #0
 801321e:	d119      	bne.n	8013254 <lv_cont_layout_col+0xcc>

        lv_obj_align(child, cont, align, hpad_corr, last_cord);
 8013220:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8013224:	7cfa      	ldrb	r2, [r7, #19]
 8013226:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801322a:	9300      	str	r3, [sp, #0]
 801322c:	460b      	mov	r3, r1
 801322e:	6879      	ldr	r1, [r7, #4]
 8013230:	6978      	ldr	r0, [r7, #20]
 8013232:	f7f2 faeb 	bl	800580c <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 8013236:	6978      	ldr	r0, [r7, #20]
 8013238:	f7f3 f9fb 	bl	8006632 <lv_obj_get_height>
 801323c:	4603      	mov	r3, r0
 801323e:	461a      	mov	r2, r3
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8013246:	4413      	add	r3, r2
 8013248:	b29a      	uxth	r2, r3
 801324a:	89fb      	ldrh	r3, [r7, #14]
 801324c:	4413      	add	r3, r2
 801324e:	b29b      	uxth	r3, r3
 8013250:	81fb      	strh	r3, [r7, #14]
 8013252:	e000      	b.n	8013256 <lv_cont_layout_col+0xce>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8013254:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	3304      	adds	r3, #4
 801325a:	6979      	ldr	r1, [r7, #20]
 801325c:	4618      	mov	r0, r3
 801325e:	f7fc fe4b 	bl	800fef8 <lv_ll_get_prev>
 8013262:	6178      	str	r0, [r7, #20]
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d1cd      	bne.n	8013206 <lv_cont_layout_col+0x7e>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801326a:	2101      	movs	r1, #1
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f7f3 f825 	bl	80062bc <lv_obj_clear_protect>
}
 8013272:	bf00      	nop
 8013274:	3718      	adds	r7, #24
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}

0801327a <lv_cont_layout_row>:
/**
 * Handle row type layouts
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_row(lv_obj_t * cont)
{
 801327a:	b580      	push	{r7, lr}
 801327c:	b088      	sub	sp, #32
 801327e:	af02      	add	r7, sp, #8
 8013280:	6078      	str	r0, [r7, #4]
    lv_layout_t type = lv_cont_get_layout(cont);
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f7ff fe91 	bl	8012faa <lv_cont_get_layout>
 8013288:	4603      	mov	r3, r0
 801328a:	737b      	strb	r3, [r7, #13]
    lv_obj_t * child;

    /*Adjust margin and get the alignment type*/
    lv_align_t align;
    const lv_style_t * style = lv_obj_get_style(cont);
 801328c:	6878      	ldr	r0, [r7, #4]
 801328e:	f7f3 fa2d 	bl	80066ec <lv_obj_get_style>
 8013292:	60b8      	str	r0, [r7, #8]
    lv_coord_t vpad_corr;

    switch(type) {
 8013294:	7b7b      	ldrb	r3, [r7, #13]
 8013296:	2b07      	cmp	r3, #7
 8013298:	d011      	beq.n	80132be <lv_cont_layout_row+0x44>
 801329a:	2b07      	cmp	r3, #7
 801329c:	dc19      	bgt.n	80132d2 <lv_cont_layout_row+0x58>
 801329e:	2b05      	cmp	r3, #5
 80132a0:	d002      	beq.n	80132a8 <lv_cont_layout_row+0x2e>
 80132a2:	2b06      	cmp	r3, #6
 80132a4:	d006      	beq.n	80132b4 <lv_cont_layout_row+0x3a>
 80132a6:	e014      	b.n	80132d2 <lv_cont_layout_row+0x58>
        case LV_LAYOUT_ROW_T:
            vpad_corr = style->body.padding.top;
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	8adb      	ldrh	r3, [r3, #22]
 80132ac:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 80132ae:	2301      	movs	r3, #1
 80132b0:	74fb      	strb	r3, [r7, #19]
            break;
 80132b2:	e013      	b.n	80132dc <lv_cont_layout_row+0x62>
        case LV_LAYOUT_ROW_M:
            vpad_corr = 0;
 80132b4:	2300      	movs	r3, #0
 80132b6:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_LEFT_MID;
 80132b8:	2307      	movs	r3, #7
 80132ba:	74fb      	strb	r3, [r7, #19]
            break;
 80132bc:	e00e      	b.n	80132dc <lv_cont_layout_row+0x62>
        case LV_LAYOUT_ROW_B:
            vpad_corr = -style->body.padding.bottom;
 80132be:	68bb      	ldr	r3, [r7, #8]
 80132c0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80132c4:	b29b      	uxth	r3, r3
 80132c6:	425b      	negs	r3, r3
 80132c8:	b29b      	uxth	r3, r3
 80132ca:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_BOTTOM_LEFT;
 80132cc:	2304      	movs	r3, #4
 80132ce:	74fb      	strb	r3, [r7, #19]
            break;
 80132d0:	e004      	b.n	80132dc <lv_cont_layout_row+0x62>
        default:
            vpad_corr = 0;
 80132d2:	2300      	movs	r3, #0
 80132d4:	823b      	strh	r3, [r7, #16]
            align     = LV_ALIGN_IN_TOP_LEFT;
 80132d6:	2301      	movs	r3, #1
 80132d8:	74fb      	strb	r3, [r7, #19]
            break;
 80132da:	bf00      	nop
    }

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 80132dc:	2101      	movs	r1, #1
 80132de:	6878      	ldr	r0, [r7, #4]
 80132e0:	f7f2 ffd8 	bl	8006294 <lv_obj_set_protect>

    /* Align the children */
    lv_coord_t last_cord = style->body.padding.left;
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	8b5b      	ldrh	r3, [r3, #26]
 80132e8:	81fb      	strh	r3, [r7, #14]
    LV_LL_READ_BACK(cont->child_ll, child)
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	3304      	adds	r3, #4
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7fc fdd7 	bl	800fea2 <lv_ll_get_tail>
 80132f4:	6178      	str	r0, [r7, #20]
 80132f6:	e02e      	b.n	8013356 <lv_cont_layout_row+0xdc>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80132f8:	6978      	ldr	r0, [r7, #20]
 80132fa:	f7f3 fa4f 	bl	800679c <lv_obj_get_hidden>
 80132fe:	4603      	mov	r3, r0
 8013300:	2b00      	cmp	r3, #0
 8013302:	d120      	bne.n	8013346 <lv_cont_layout_row+0xcc>
 8013304:	2104      	movs	r1, #4
 8013306:	6978      	ldr	r0, [r7, #20]
 8013308:	f7f3 fada 	bl	80068c0 <lv_obj_is_protected>
 801330c:	4603      	mov	r3, r0
 801330e:	2b00      	cmp	r3, #0
 8013310:	d119      	bne.n	8013346 <lv_cont_layout_row+0xcc>

        lv_obj_align(child, cont, align, last_cord, vpad_corr);
 8013312:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8013316:	7cfa      	ldrb	r2, [r7, #19]
 8013318:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801331c:	9300      	str	r3, [sp, #0]
 801331e:	460b      	mov	r3, r1
 8013320:	6879      	ldr	r1, [r7, #4]
 8013322:	6978      	ldr	r0, [r7, #20]
 8013324:	f7f2 fa72 	bl	800580c <lv_obj_align>
        last_cord += lv_obj_get_width(child) + style->body.padding.inner;
 8013328:	6978      	ldr	r0, [r7, #20]
 801332a:	f7f3 f974 	bl	8006616 <lv_obj_get_width>
 801332e:	4603      	mov	r3, r0
 8013330:	461a      	mov	r2, r3
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8013338:	4413      	add	r3, r2
 801333a:	b29a      	uxth	r2, r3
 801333c:	89fb      	ldrh	r3, [r7, #14]
 801333e:	4413      	add	r3, r2
 8013340:	b29b      	uxth	r3, r3
 8013342:	81fb      	strh	r3, [r7, #14]
 8013344:	e000      	b.n	8013348 <lv_cont_layout_row+0xce>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8013346:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	3304      	adds	r3, #4
 801334c:	6979      	ldr	r1, [r7, #20]
 801334e:	4618      	mov	r0, r3
 8013350:	f7fc fdd2 	bl	800fef8 <lv_ll_get_prev>
 8013354:	6178      	str	r0, [r7, #20]
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d1cd      	bne.n	80132f8 <lv_cont_layout_row+0x7e>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801335c:	2101      	movs	r1, #1
 801335e:	6878      	ldr	r0, [r7, #4]
 8013360:	f7f2 ffac 	bl	80062bc <lv_obj_clear_protect>
}
 8013364:	bf00      	nop
 8013366:	3718      	adds	r7, #24
 8013368:	46bd      	mov	sp, r7
 801336a:	bd80      	pop	{r7, pc}

0801336c <lv_cont_layout_center>:
/**
 * Handle the center layout
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_center(lv_obj_t * cont)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b088      	sub	sp, #32
 8013370:	af02      	add	r7, sp, #8
 8013372:	6078      	str	r0, [r7, #4]
    lv_obj_t * child;
    const lv_style_t * style = lv_obj_get_style(cont);
 8013374:	6878      	ldr	r0, [r7, #4]
 8013376:	f7f3 f9b9 	bl	80066ec <lv_obj_get_style>
 801337a:	60b8      	str	r0, [r7, #8]
    uint32_t obj_num         = 0;
 801337c:	2300      	movs	r3, #0
 801337e:	613b      	str	r3, [r7, #16]
    lv_coord_t h_tot         = 0;
 8013380:	2300      	movs	r3, #0
 8013382:	81fb      	strh	r3, [r7, #14]

    LV_LL_READ(cont->child_ll, child)
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	3304      	adds	r3, #4
 8013388:	4618      	mov	r0, r3
 801338a:	f7fc fd78 	bl	800fe7e <lv_ll_get_head>
 801338e:	6178      	str	r0, [r7, #20]
 8013390:	e026      	b.n	80133e0 <lv_cont_layout_center+0x74>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8013392:	6978      	ldr	r0, [r7, #20]
 8013394:	f7f3 fa02 	bl	800679c <lv_obj_get_hidden>
 8013398:	4603      	mov	r3, r0
 801339a:	2b00      	cmp	r3, #0
 801339c:	d118      	bne.n	80133d0 <lv_cont_layout_center+0x64>
 801339e:	2104      	movs	r1, #4
 80133a0:	6978      	ldr	r0, [r7, #20]
 80133a2:	f7f3 fa8d 	bl	80068c0 <lv_obj_is_protected>
 80133a6:	4603      	mov	r3, r0
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d111      	bne.n	80133d0 <lv_cont_layout_center+0x64>
        h_tot += lv_obj_get_height(child) + style->body.padding.inner;
 80133ac:	6978      	ldr	r0, [r7, #20]
 80133ae:	f7f3 f940 	bl	8006632 <lv_obj_get_height>
 80133b2:	4603      	mov	r3, r0
 80133b4:	461a      	mov	r2, r3
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80133bc:	4413      	add	r3, r2
 80133be:	b29a      	uxth	r2, r3
 80133c0:	89fb      	ldrh	r3, [r7, #14]
 80133c2:	4413      	add	r3, r2
 80133c4:	b29b      	uxth	r3, r3
 80133c6:	81fb      	strh	r3, [r7, #14]
        obj_num++;
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	3301      	adds	r3, #1
 80133cc:	613b      	str	r3, [r7, #16]
 80133ce:	e000      	b.n	80133d2 <lv_cont_layout_center+0x66>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80133d0:	bf00      	nop
    LV_LL_READ(cont->child_ll, child)
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	3304      	adds	r3, #4
 80133d6:	6979      	ldr	r1, [r7, #20]
 80133d8:	4618      	mov	r0, r3
 80133da:	f7fc fd74 	bl	800fec6 <lv_ll_get_next>
 80133de:	6178      	str	r0, [r7, #20]
 80133e0:	697b      	ldr	r3, [r7, #20]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d1d5      	bne.n	8013392 <lv_cont_layout_center+0x26>
    }

    if(obj_num == 0) return;
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d05c      	beq.n	80134a6 <lv_cont_layout_center+0x13a>

    h_tot -= style->body.padding.inner;
 80133ec:	89fa      	ldrh	r2, [r7, #14]
 80133ee:	68bb      	ldr	r3, [r7, #8]
 80133f0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	1ad3      	subs	r3, r2, r3
 80133f8:	b29b      	uxth	r3, r3
 80133fa:	81fb      	strh	r3, [r7, #14]

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 80133fc:	2101      	movs	r1, #1
 80133fe:	6878      	ldr	r0, [r7, #4]
 8013400:	f7f2 ff48 	bl	8006294 <lv_obj_set_protect>

    /* Align the children */
    lv_coord_t last_cord = -(h_tot / 2);
 8013404:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013408:	0fda      	lsrs	r2, r3, #31
 801340a:	4413      	add	r3, r2
 801340c:	105b      	asrs	r3, r3, #1
 801340e:	b21b      	sxth	r3, r3
 8013410:	b29b      	uxth	r3, r3
 8013412:	425b      	negs	r3, r3
 8013414:	b29b      	uxth	r3, r3
 8013416:	81bb      	strh	r3, [r7, #12]
    LV_LL_READ_BACK(cont->child_ll, child)
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	3304      	adds	r3, #4
 801341c:	4618      	mov	r0, r3
 801341e:	f7fc fd40 	bl	800fea2 <lv_ll_get_tail>
 8013422:	6178      	str	r0, [r7, #20]
 8013424:	e037      	b.n	8013496 <lv_cont_layout_center+0x12a>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8013426:	6978      	ldr	r0, [r7, #20]
 8013428:	f7f3 f9b8 	bl	800679c <lv_obj_get_hidden>
 801342c:	4603      	mov	r3, r0
 801342e:	2b00      	cmp	r3, #0
 8013430:	d129      	bne.n	8013486 <lv_cont_layout_center+0x11a>
 8013432:	2104      	movs	r1, #4
 8013434:	6978      	ldr	r0, [r7, #20]
 8013436:	f7f3 fa43 	bl	80068c0 <lv_obj_is_protected>
 801343a:	4603      	mov	r3, r0
 801343c:	2b00      	cmp	r3, #0
 801343e:	d122      	bne.n	8013486 <lv_cont_layout_center+0x11a>

        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
 8013440:	6978      	ldr	r0, [r7, #20]
 8013442:	f7f3 f8f6 	bl	8006632 <lv_obj_get_height>
 8013446:	4603      	mov	r3, r0
 8013448:	0fda      	lsrs	r2, r3, #31
 801344a:	4413      	add	r3, r2
 801344c:	105b      	asrs	r3, r3, #1
 801344e:	b21b      	sxth	r3, r3
 8013450:	b29a      	uxth	r2, r3
 8013452:	89bb      	ldrh	r3, [r7, #12]
 8013454:	4413      	add	r3, r2
 8013456:	b29b      	uxth	r3, r3
 8013458:	b21b      	sxth	r3, r3
 801345a:	9300      	str	r3, [sp, #0]
 801345c:	2300      	movs	r3, #0
 801345e:	2200      	movs	r2, #0
 8013460:	6879      	ldr	r1, [r7, #4]
 8013462:	6978      	ldr	r0, [r7, #20]
 8013464:	f7f2 f9d2 	bl	800580c <lv_obj_align>
        last_cord += lv_obj_get_height(child) + style->body.padding.inner;
 8013468:	6978      	ldr	r0, [r7, #20]
 801346a:	f7f3 f8e2 	bl	8006632 <lv_obj_get_height>
 801346e:	4603      	mov	r3, r0
 8013470:	461a      	mov	r2, r3
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8013478:	4413      	add	r3, r2
 801347a:	b29a      	uxth	r2, r3
 801347c:	89bb      	ldrh	r3, [r7, #12]
 801347e:	4413      	add	r3, r2
 8013480:	b29b      	uxth	r3, r3
 8013482:	81bb      	strh	r3, [r7, #12]
 8013484:	e000      	b.n	8013488 <lv_cont_layout_center+0x11c>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8013486:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	3304      	adds	r3, #4
 801348c:	6979      	ldr	r1, [r7, #20]
 801348e:	4618      	mov	r0, r3
 8013490:	f7fc fd32 	bl	800fef8 <lv_ll_get_prev>
 8013494:	6178      	str	r0, [r7, #20]
 8013496:	697b      	ldr	r3, [r7, #20]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d1c4      	bne.n	8013426 <lv_cont_layout_center+0xba>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801349c:	2101      	movs	r1, #1
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	f7f2 ff0c 	bl	80062bc <lv_obj_clear_protect>
 80134a4:	e000      	b.n	80134a8 <lv_cont_layout_center+0x13c>
    if(obj_num == 0) return;
 80134a6:	bf00      	nop
}
 80134a8:	3718      	adds	r7, #24
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd80      	pop	{r7, pc}
	...

080134b0 <lv_cont_layout_pretty>:
 * Handle the pretty layout. Put as many object as possible in row
 * then begin a new row
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_pretty(lv_obj_t * cont)
{
 80134b0:	b5b0      	push	{r4, r5, r7, lr}
 80134b2:	b090      	sub	sp, #64	@ 0x40
 80134b4:	af02      	add	r7, sp, #8
 80134b6:	6078      	str	r0, [r7, #4]
    lv_obj_t * child_rs;  /* Row starter child */
    lv_obj_t * child_rc;  /* Row closer child */
    lv_obj_t * child_tmp; /* Temporary child */
    const lv_style_t * style = lv_obj_get_style(cont);
 80134b8:	6878      	ldr	r0, [r7, #4]
 80134ba:	f7f3 f917 	bl	80066ec <lv_obj_get_style>
 80134be:	61b8      	str	r0, [r7, #24]
    lv_coord_t w_obj         = lv_obj_get_width(cont);
 80134c0:	6878      	ldr	r0, [r7, #4]
 80134c2:	f7f3 f8a8 	bl	8006616 <lv_obj_get_width>
 80134c6:	4603      	mov	r3, r0
 80134c8:	82fb      	strh	r3, [r7, #22]
    lv_coord_t act_y         = style->body.padding.top;
 80134ca:	69bb      	ldr	r3, [r7, #24]
 80134cc:	8adb      	ldrh	r3, [r3, #22]
 80134ce:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/

    child_rs = lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	3304      	adds	r3, #4
 80134d4:	4618      	mov	r0, r3
 80134d6:	f7fc fce4 	bl	800fea2 <lv_ll_get_tail>
 80134da:	6378      	str	r0, [r7, #52]	@ 0x34
    if(child_rs == NULL) return;                /*Return if no child*/
 80134dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134de:	2b00      	cmp	r3, #0
 80134e0:	f000 8180 	beq.w	80137e4 <lv_cont_layout_pretty+0x334>

    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 80134e4:	2101      	movs	r1, #1
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f7f2 fed4 	bl	8006294 <lv_obj_set_protect>

    child_rc = child_rs; /*Initially the the row starter and closer is the same*/
 80134ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80134ee:	633b      	str	r3, [r7, #48]	@ 0x30
    while(child_rs != NULL) {
 80134f0:	e16d      	b.n	80137ce <lv_cont_layout_pretty+0x31e>
        lv_coord_t h_row = 0;
 80134f2:	2300      	movs	r3, #0
 80134f4:	853b      	strh	r3, [r7, #40]	@ 0x28
        lv_coord_t w_row =
            style->body.padding.left + style->body.padding.right; /*The width is at least the left+right hpad*/
 80134f6:	69bb      	ldr	r3, [r7, #24]
 80134f8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80134fc:	b29a      	uxth	r2, r3
 80134fe:	69bb      	ldr	r3, [r7, #24]
 8013500:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013504:	b29b      	uxth	r3, r3
 8013506:	4413      	add	r3, r2
 8013508:	b29b      	uxth	r3, r3
        lv_coord_t w_row =
 801350a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        uint32_t obj_num = 0;
 801350c:	2300      	movs	r3, #0
 801350e:	623b      	str	r3, [r7, #32]

        /*Find the row closer object and collect some data*/
        do {
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
 8013510:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013512:	f7f3 f943 	bl	800679c <lv_obj_get_hidden>
 8013516:	4603      	mov	r3, r0
 8013518:	f083 0301 	eor.w	r3, r3, #1
 801351c:	b2db      	uxtb	r3, r3
 801351e:	2b00      	cmp	r3, #0
 8013520:	d04b      	beq.n	80135ba <lv_cont_layout_pretty+0x10a>
 8013522:	2104      	movs	r1, #4
 8013524:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013526:	f7f3 f9cb 	bl	80068c0 <lv_obj_is_protected>
 801352a:	4603      	mov	r3, r0
 801352c:	f083 0301 	eor.w	r3, r3, #1
 8013530:	b2db      	uxtb	r3, r3
 8013532:	2b00      	cmp	r3, #0
 8013534:	d041      	beq.n	80135ba <lv_cont_layout_pretty+0x10a>
                /*If this object is already not fit then break*/
                if(w_row + lv_obj_get_width(child_rc) > w_obj) {
 8013536:	f9b7 4026 	ldrsh.w	r4, [r7, #38]	@ 0x26
 801353a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801353c:	f7f3 f86b 	bl	8006616 <lv_obj_get_width>
 8013540:	4603      	mov	r3, r0
 8013542:	18e2      	adds	r2, r4, r3
 8013544:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013548:	429a      	cmp	r2, r3
 801354a:	dd0d      	ble.n	8013568 <lv_cont_layout_pretty+0xb8>
                    /*Step back one child because the last already not fit, so the previous is the
                     * closer*/
                    if(child_rc != NULL && obj_num != 0) {
 801354c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801354e:	2b00      	cmp	r3, #0
 8013550:	d043      	beq.n	80135da <lv_cont_layout_pretty+0x12a>
 8013552:	6a3b      	ldr	r3, [r7, #32]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d040      	beq.n	80135da <lv_cont_layout_pretty+0x12a>
                        child_rc = lv_ll_get_next(&cont->child_ll, child_rc);
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	3304      	adds	r3, #4
 801355c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801355e:	4618      	mov	r0, r3
 8013560:	f7fc fcb1 	bl	800fec6 <lv_ll_get_next>
 8013564:	6338      	str	r0, [r7, #48]	@ 0x30
                    }
                    break;
 8013566:	e038      	b.n	80135da <lv_cont_layout_pretty+0x12a>
                }
                w_row += lv_obj_get_width(child_rc) + style->body.padding.inner; /*Add the object width + opad*/
 8013568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801356a:	f7f3 f854 	bl	8006616 <lv_obj_get_width>
 801356e:	4603      	mov	r3, r0
 8013570:	461a      	mov	r2, r3
 8013572:	69bb      	ldr	r3, [r7, #24]
 8013574:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8013578:	4413      	add	r3, r2
 801357a:	b29a      	uxth	r2, r3
 801357c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801357e:	4413      	add	r3, r2
 8013580:	b29b      	uxth	r3, r3
 8013582:	84fb      	strh	r3, [r7, #38]	@ 0x26
                h_row = LV_MATH_MAX(h_row, lv_obj_get_height(child_rc));         /*Search the highest object*/
 8013584:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013586:	f7f3 f854 	bl	8006632 <lv_obj_get_height>
 801358a:	4603      	mov	r3, r0
 801358c:	461a      	mov	r2, r3
 801358e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8013592:	4293      	cmp	r3, r2
 8013594:	dc04      	bgt.n	80135a0 <lv_cont_layout_pretty+0xf0>
 8013596:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013598:	f7f3 f84b 	bl	8006632 <lv_obj_get_height>
 801359c:	4603      	mov	r3, r0
 801359e:	e001      	b.n	80135a4 <lv_cont_layout_pretty+0xf4>
 80135a0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80135a4:	853b      	strh	r3, [r7, #40]	@ 0x28
                obj_num++;
 80135a6:	6a3b      	ldr	r3, [r7, #32]
 80135a8:	3301      	adds	r3, #1
 80135aa:	623b      	str	r3, [r7, #32]
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
 80135ac:	2108      	movs	r1, #8
 80135ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80135b0:	f7f3 f986 	bl	80068c0 <lv_obj_is_protected>
 80135b4:	4603      	mov	r3, r0
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d111      	bne.n	80135de <lv_cont_layout_pretty+0x12e>
                    break; /*If can not be followed by an other object then break here*/
            }
            child_rc = lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	3304      	adds	r3, #4
 80135be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7fc fc99 	bl	800fef8 <lv_ll_get_prev>
 80135c6:	6338      	str	r0, [r7, #48]	@ 0x30
            if(obj_num == 0)
 80135c8:	6a3b      	ldr	r3, [r7, #32]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d101      	bne.n	80135d2 <lv_cont_layout_pretty+0x122>
                child_rs = child_rc; /*If the first object was hidden (or too long) then set the
 80135ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135d0:	637b      	str	r3, [r7, #52]	@ 0x34
                                        next as first */
        } while(child_rc != NULL);
 80135d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d19b      	bne.n	8013510 <lv_cont_layout_pretty+0x60>
 80135d8:	e002      	b.n	80135e0 <lv_cont_layout_pretty+0x130>
                    break;
 80135da:	bf00      	nop
 80135dc:	e000      	b.n	80135e0 <lv_cont_layout_pretty+0x130>
                    break; /*If can not be followed by an other object then break here*/
 80135de:	bf00      	nop

        /*If the object is too long  then align it to the middle*/
        if(obj_num == 0) {
 80135e0:	6a3b      	ldr	r3, [r7, #32]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d112      	bne.n	801360c <lv_cont_layout_pretty+0x15c>
            if(child_rc != NULL) {
 80135e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	f000 80d9 	beq.w	80137a0 <lv_cont_layout_pretty+0x2f0>
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 80135ee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80135f2:	9300      	str	r3, [sp, #0]
 80135f4:	2300      	movs	r3, #0
 80135f6:	2202      	movs	r2, #2
 80135f8:	6879      	ldr	r1, [r7, #4]
 80135fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80135fc:	f7f2 f906 	bl	800580c <lv_obj_align>
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
 8013600:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013602:	f7f3 f816 	bl	8006632 <lv_obj_get_height>
 8013606:	4603      	mov	r3, r0
 8013608:	853b      	strh	r3, [r7, #40]	@ 0x28
 801360a:	e0c9      	b.n	80137a0 <lv_cont_layout_pretty+0x2f0>
            }
        }
        /*If there is only one object in the row then align it to the middle*/
        else if(obj_num == 1) {
 801360c:	6a3b      	ldr	r3, [r7, #32]
 801360e:	2b01      	cmp	r3, #1
 8013610:	d109      	bne.n	8013626 <lv_cont_layout_pretty+0x176>
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID, 0, act_y);
 8013612:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8013616:	9300      	str	r3, [sp, #0]
 8013618:	2300      	movs	r3, #0
 801361a:	2202      	movs	r2, #2
 801361c:	6879      	ldr	r1, [r7, #4]
 801361e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013620:	f7f2 f8f4 	bl	800580c <lv_obj_align>
 8013624:	e0bc      	b.n	80137a0 <lv_cont_layout_pretty+0x2f0>
        }
        /*If there are two object in the row then align them proportionally*/
        else if(obj_num == 2) {
 8013626:	6a3b      	ldr	r3, [r7, #32]
 8013628:	2b02      	cmp	r3, #2
 801362a:	d153      	bne.n	80136d4 <lv_cont_layout_pretty+0x224>
            lv_obj_t * obj1 = child_rs;
 801362c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801362e:	613b      	str	r3, [r7, #16]
            lv_obj_t * obj2 = lv_ll_get_prev(&cont->child_ll, child_rs);
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	3304      	adds	r3, #4
 8013634:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013636:	4618      	mov	r0, r3
 8013638:	f7fc fc5e 	bl	800fef8 <lv_ll_get_prev>
 801363c:	60f8      	str	r0, [r7, #12]
            w_row           = lv_obj_get_width(obj1) + lv_obj_get_width(obj2);
 801363e:	6938      	ldr	r0, [r7, #16]
 8013640:	f7f2 ffe9 	bl	8006616 <lv_obj_get_width>
 8013644:	4603      	mov	r3, r0
 8013646:	b29c      	uxth	r4, r3
 8013648:	68f8      	ldr	r0, [r7, #12]
 801364a:	f7f2 ffe4 	bl	8006616 <lv_obj_get_width>
 801364e:	4603      	mov	r3, r0
 8013650:	b29b      	uxth	r3, r3
 8013652:	4423      	add	r3, r4
 8013654:	b29b      	uxth	r3, r3
 8013656:	84fb      	strh	r3, [r7, #38]	@ 0x26
            lv_coord_t pad  = (w_obj - w_row) / 3;
 8013658:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801365c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013660:	1ad3      	subs	r3, r2, r3
 8013662:	4a62      	ldr	r2, [pc, #392]	@ (80137ec <lv_cont_layout_pretty+0x33c>)
 8013664:	fb82 1203 	smull	r1, r2, r2, r3
 8013668:	17db      	asrs	r3, r3, #31
 801366a:	1ad3      	subs	r3, r2, r3
 801366c:	817b      	strh	r3, [r7, #10]
            lv_obj_align(obj1, cont, LV_ALIGN_IN_TOP_LEFT, pad, act_y + (h_row - lv_obj_get_height(obj1)) / 2);
 801366e:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	@ 0x28
 8013672:	6938      	ldr	r0, [r7, #16]
 8013674:	f7f2 ffdd 	bl	8006632 <lv_obj_get_height>
 8013678:	4603      	mov	r3, r0
 801367a:	1ae3      	subs	r3, r4, r3
 801367c:	0fda      	lsrs	r2, r3, #31
 801367e:	4413      	add	r3, r2
 8013680:	105b      	asrs	r3, r3, #1
 8013682:	b29a      	uxth	r2, r3
 8013684:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013686:	4413      	add	r3, r2
 8013688:	b29b      	uxth	r3, r3
 801368a:	b21b      	sxth	r3, r3
 801368c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013690:	9300      	str	r3, [sp, #0]
 8013692:	4613      	mov	r3, r2
 8013694:	2201      	movs	r2, #1
 8013696:	6879      	ldr	r1, [r7, #4]
 8013698:	6938      	ldr	r0, [r7, #16]
 801369a:	f7f2 f8b7 	bl	800580c <lv_obj_align>
            lv_obj_align(obj2, cont, LV_ALIGN_IN_TOP_RIGHT, -pad, act_y + (h_row - lv_obj_get_height(obj2)) / 2);
 801369e:	897b      	ldrh	r3, [r7, #10]
 80136a0:	425b      	negs	r3, r3
 80136a2:	b29b      	uxth	r3, r3
 80136a4:	b21d      	sxth	r5, r3
 80136a6:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	@ 0x28
 80136aa:	68f8      	ldr	r0, [r7, #12]
 80136ac:	f7f2 ffc1 	bl	8006632 <lv_obj_get_height>
 80136b0:	4603      	mov	r3, r0
 80136b2:	1ae3      	subs	r3, r4, r3
 80136b4:	0fda      	lsrs	r2, r3, #31
 80136b6:	4413      	add	r3, r2
 80136b8:	105b      	asrs	r3, r3, #1
 80136ba:	b29a      	uxth	r2, r3
 80136bc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80136be:	4413      	add	r3, r2
 80136c0:	b29b      	uxth	r3, r3
 80136c2:	b21b      	sxth	r3, r3
 80136c4:	9300      	str	r3, [sp, #0]
 80136c6:	462b      	mov	r3, r5
 80136c8:	2203      	movs	r2, #3
 80136ca:	6879      	ldr	r1, [r7, #4]
 80136cc:	68f8      	ldr	r0, [r7, #12]
 80136ce:	f7f2 f89d 	bl	800580c <lv_obj_align>
 80136d2:	e065      	b.n	80137a0 <lv_cont_layout_pretty+0x2f0>
        }
        /* Align the children (from child_rs to child_rc)*/
        else {
            w_row -= style->body.padding.inner * obj_num;
 80136d4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80136d6:	69bb      	ldr	r3, [r7, #24]
 80136d8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80136dc:	b29b      	uxth	r3, r3
 80136de:	6a39      	ldr	r1, [r7, #32]
 80136e0:	b289      	uxth	r1, r1
 80136e2:	fb01 f303 	mul.w	r3, r1, r3
 80136e6:	b29b      	uxth	r3, r3
 80136e8:	1ad3      	subs	r3, r2, r3
 80136ea:	b29b      	uxth	r3, r3
 80136ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
            lv_coord_t new_opad = (w_obj - w_row) / (obj_num - 1);
 80136ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80136f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80136f6:	1ad3      	subs	r3, r2, r3
 80136f8:	461a      	mov	r2, r3
 80136fa:	6a3b      	ldr	r3, [r7, #32]
 80136fc:	3b01      	subs	r3, #1
 80136fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8013702:	82bb      	strh	r3, [r7, #20]
            lv_coord_t act_x    = style->body.padding.left; /*x init*/
 8013704:	69bb      	ldr	r3, [r7, #24]
 8013706:	8b5b      	ldrh	r3, [r3, #26]
 8013708:	83fb      	strh	r3, [r7, #30]
            child_tmp           = child_rs;
 801370a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801370c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while(child_tmp != NULL) {
 801370e:	e042      	b.n	8013796 <lv_cont_layout_pretty+0x2e6>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
 8013710:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013712:	f7f3 f843 	bl	800679c <lv_obj_get_hidden>
 8013716:	4603      	mov	r3, r0
 8013718:	f083 0301 	eor.w	r3, r3, #1
 801371c:	b2db      	uxtb	r3, r3
 801371e:	2b00      	cmp	r3, #0
 8013720:	d02e      	beq.n	8013780 <lv_cont_layout_pretty+0x2d0>
 8013722:	2104      	movs	r1, #4
 8013724:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013726:	f7f3 f8cb 	bl	80068c0 <lv_obj_is_protected>
 801372a:	4603      	mov	r3, r0
 801372c:	f083 0301 	eor.w	r3, r3, #1
 8013730:	b2db      	uxtb	r3, r3
 8013732:	2b00      	cmp	r3, #0
 8013734:	d024      	beq.n	8013780 <lv_cont_layout_pretty+0x2d0>
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
                                 act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
 8013736:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	@ 0x28
 801373a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801373c:	f7f2 ff79 	bl	8006632 <lv_obj_get_height>
 8013740:	4603      	mov	r3, r0
 8013742:	1ae3      	subs	r3, r4, r3
 8013744:	0fda      	lsrs	r2, r3, #31
 8013746:	4413      	add	r3, r2
 8013748:	105b      	asrs	r3, r3, #1
 801374a:	b29a      	uxth	r2, r3
 801374c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801374e:	4413      	add	r3, r2
 8013750:	b29b      	uxth	r3, r3
                    lv_obj_align(child_tmp, cont, LV_ALIGN_IN_TOP_LEFT, act_x,
 8013752:	b21b      	sxth	r3, r3
 8013754:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8013758:	9300      	str	r3, [sp, #0]
 801375a:	4613      	mov	r3, r2
 801375c:	2201      	movs	r2, #1
 801375e:	6879      	ldr	r1, [r7, #4]
 8013760:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013762:	f7f2 f853 	bl	800580c <lv_obj_align>
                    act_x += lv_obj_get_width(child_tmp) + new_opad;
 8013766:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013768:	f7f2 ff55 	bl	8006616 <lv_obj_get_width>
 801376c:	4603      	mov	r3, r0
 801376e:	461a      	mov	r2, r3
 8013770:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013774:	4413      	add	r3, r2
 8013776:	b29a      	uxth	r2, r3
 8013778:	8bfb      	ldrh	r3, [r7, #30]
 801377a:	4413      	add	r3, r2
 801377c:	b29b      	uxth	r3, r3
 801377e:	83fb      	strh	r3, [r7, #30]
                }
                if(child_tmp == child_rc) break;
 8013780:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013784:	429a      	cmp	r2, r3
 8013786:	d00a      	beq.n	801379e <lv_cont_layout_pretty+0x2ee>
                child_tmp = lv_ll_get_prev(&cont->child_ll, child_tmp);
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	3304      	adds	r3, #4
 801378c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801378e:	4618      	mov	r0, r3
 8013790:	f7fc fbb2 	bl	800fef8 <lv_ll_get_prev>
 8013794:	62f8      	str	r0, [r7, #44]	@ 0x2c
            while(child_tmp != NULL) {
 8013796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013798:	2b00      	cmp	r3, #0
 801379a:	d1b9      	bne.n	8013710 <lv_cont_layout_pretty+0x260>
 801379c:	e000      	b.n	80137a0 <lv_cont_layout_pretty+0x2f0>
                if(child_tmp == child_rc) break;
 801379e:	bf00      	nop
            }
        }

        if(child_rc == NULL) break;
 80137a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d018      	beq.n	80137d8 <lv_cont_layout_pretty+0x328>
        act_y += style->body.padding.inner + h_row;           /*y increment*/
 80137a6:	69bb      	ldr	r3, [r7, #24]
 80137a8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80137ac:	b29a      	uxth	r2, r3
 80137ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80137b0:	4413      	add	r3, r2
 80137b2:	b29a      	uxth	r2, r3
 80137b4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80137b6:	4413      	add	r3, r2
 80137b8:	b29b      	uxth	r3, r3
 80137ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
        child_rs = lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	3304      	adds	r3, #4
 80137c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7fc fb98 	bl	800fef8 <lv_ll_get_prev>
 80137c8:	6378      	str	r0, [r7, #52]	@ 0x34
        child_rc = child_rs;
 80137ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137cc:	633b      	str	r3, [r7, #48]	@ 0x30
    while(child_rs != NULL) {
 80137ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	f47f ae8e 	bne.w	80134f2 <lv_cont_layout_pretty+0x42>
 80137d6:	e000      	b.n	80137da <lv_cont_layout_pretty+0x32a>
        if(child_rc == NULL) break;
 80137d8:	bf00      	nop
    }
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 80137da:	2101      	movs	r1, #1
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f7f2 fd6d 	bl	80062bc <lv_obj_clear_protect>
 80137e2:	e000      	b.n	80137e6 <lv_cont_layout_pretty+0x336>
    if(child_rs == NULL) return;                /*Return if no child*/
 80137e4:	bf00      	nop
}
 80137e6:	3738      	adds	r7, #56	@ 0x38
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bdb0      	pop	{r4, r5, r7, pc}
 80137ec:	55555556 	.word	0x55555556

080137f0 <lv_cont_layout_grid>:
/**
 * Handle the grid layout. Align same-sized objects in a grid
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_grid(lv_obj_t * cont)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b08a      	sub	sp, #40	@ 0x28
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
    lv_obj_t * child;
    const lv_style_t * style = lv_obj_get_style(cont);
 80137f8:	6878      	ldr	r0, [r7, #4]
 80137fa:	f7f2 ff77 	bl	80066ec <lv_obj_get_style>
 80137fe:	61b8      	str	r0, [r7, #24]
    lv_coord_t w_tot         = lv_obj_get_width(cont);
 8013800:	6878      	ldr	r0, [r7, #4]
 8013802:	f7f2 ff08 	bl	8006616 <lv_obj_get_width>
 8013806:	4603      	mov	r3, r0
 8013808:	82fb      	strh	r3, [r7, #22]
    lv_coord_t w_obj         = lv_obj_get_width(lv_obj_get_child(cont, NULL));
 801380a:	2100      	movs	r1, #0
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f7f2 fea4 	bl	800655a <lv_obj_get_child>
 8013812:	4603      	mov	r3, r0
 8013814:	4618      	mov	r0, r3
 8013816:	f7f2 fefe 	bl	8006616 <lv_obj_get_width>
 801381a:	4603      	mov	r3, r0
 801381c:	82bb      	strh	r3, [r7, #20]
    lv_coord_t h_obj         = lv_obj_get_height(lv_obj_get_child(cont, NULL));
 801381e:	2100      	movs	r1, #0
 8013820:	6878      	ldr	r0, [r7, #4]
 8013822:	f7f2 fe9a 	bl	800655a <lv_obj_get_child>
 8013826:	4603      	mov	r3, r0
 8013828:	4618      	mov	r0, r3
 801382a:	f7f2 ff02 	bl	8006632 <lv_obj_get_height>
 801382e:	4603      	mov	r3, r0
 8013830:	827b      	strh	r3, [r7, #18]
    uint16_t obj_row         = (w_tot - style->body.padding.left - style->body.padding.right) /
 8013832:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013836:	69ba      	ldr	r2, [r7, #24]
 8013838:	f9b2 201a 	ldrsh.w	r2, [r2, #26]
 801383c:	1a9b      	subs	r3, r3, r2
 801383e:	69ba      	ldr	r2, [r7, #24]
 8013840:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8013844:	1a9a      	subs	r2, r3, r2
                       (w_obj + style->body.padding.inner); /*Obj. num. in a row*/
 8013846:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801384a:	69b9      	ldr	r1, [r7, #24]
 801384c:	f9b1 101e 	ldrsh.w	r1, [r1, #30]
 8013850:	440b      	add	r3, r1
    uint16_t obj_row         = (w_tot - style->body.padding.left - style->body.padding.right) /
 8013852:	fb92 f3f3 	sdiv	r3, r2, r3
 8013856:	823b      	strh	r3, [r7, #16]
    lv_coord_t x_ofs;
    if(obj_row > 1) {
 8013858:	8a3b      	ldrh	r3, [r7, #16]
 801385a:	2b01      	cmp	r3, #1
 801385c:	d918      	bls.n	8013890 <lv_cont_layout_grid+0xa0>
        x_ofs = (w_obj + (w_tot - style->body.padding.left - style->body.padding.right) - (obj_row * w_obj)) /
 801385e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8013862:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013866:	69b9      	ldr	r1, [r7, #24]
 8013868:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 801386c:	1a5b      	subs	r3, r3, r1
 801386e:	69b9      	ldr	r1, [r7, #24]
 8013870:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 8013874:	1a5b      	subs	r3, r3, r1
 8013876:	441a      	add	r2, r3
 8013878:	8a3b      	ldrh	r3, [r7, #16]
 801387a:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 801387e:	fb01 f303 	mul.w	r3, r1, r3
 8013882:	1ad2      	subs	r2, r2, r3
                (obj_row - 1);
 8013884:	8a3b      	ldrh	r3, [r7, #16]
 8013886:	3b01      	subs	r3, #1
        x_ofs = (w_obj + (w_tot - style->body.padding.left - style->body.padding.right) - (obj_row * w_obj)) /
 8013888:	fb92 f3f3 	sdiv	r3, r2, r3
 801388c:	847b      	strh	r3, [r7, #34]	@ 0x22
 801388e:	e010      	b.n	80138b2 <lv_cont_layout_grid+0xc2>
    } else {
        x_ofs = w_tot / 2 - w_obj / 2;
 8013890:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013894:	0fda      	lsrs	r2, r3, #31
 8013896:	4413      	add	r3, r2
 8013898:	105b      	asrs	r3, r3, #1
 801389a:	b21b      	sxth	r3, r3
 801389c:	b29a      	uxth	r2, r3
 801389e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80138a2:	0fd9      	lsrs	r1, r3, #31
 80138a4:	440b      	add	r3, r1
 80138a6:	105b      	asrs	r3, r3, #1
 80138a8:	b21b      	sxth	r3, r3
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	1ad3      	subs	r3, r2, r3
 80138ae:	b29b      	uxth	r3, r3
 80138b0:	847b      	strh	r3, [r7, #34]	@ 0x22
    }
    lv_coord_t y_ofs = h_obj + style->body.padding.inner;
 80138b2:	69bb      	ldr	r3, [r7, #24]
 80138b4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80138b8:	b29a      	uxth	r2, r3
 80138ba:	8a7b      	ldrh	r3, [r7, #18]
 80138bc:	4413      	add	r3, r2
 80138be:	b29b      	uxth	r3, r3
 80138c0:	81fb      	strh	r3, [r7, #14]

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_set_protect(cont, LV_PROTECT_CHILD_CHG);
 80138c2:	2101      	movs	r1, #1
 80138c4:	6878      	ldr	r0, [r7, #4]
 80138c6:	f7f2 fce5 	bl	8006294 <lv_obj_set_protect>

    /* Align the children */
    lv_coord_t act_x = style->body.padding.left;
 80138ca:	69bb      	ldr	r3, [r7, #24]
 80138cc:	8b5b      	ldrh	r3, [r3, #26]
 80138ce:	843b      	strh	r3, [r7, #32]
    lv_coord_t act_y = style->body.padding.top;
 80138d0:	69bb      	ldr	r3, [r7, #24]
 80138d2:	8adb      	ldrh	r3, [r3, #22]
 80138d4:	83fb      	strh	r3, [r7, #30]
    uint16_t obj_cnt = 0;
 80138d6:	2300      	movs	r3, #0
 80138d8:	83bb      	strh	r3, [r7, #28]
    LV_LL_READ_BACK(cont->child_ll, child)
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	3304      	adds	r3, #4
 80138de:	4618      	mov	r0, r3
 80138e0:	f7fc fadf 	bl	800fea2 <lv_ll_get_tail>
 80138e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80138e6:	e03f      	b.n	8013968 <lv_cont_layout_grid+0x178>
    {
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 80138e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80138ea:	f7f2 ff57 	bl	800679c <lv_obj_get_hidden>
 80138ee:	4603      	mov	r3, r0
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d131      	bne.n	8013958 <lv_cont_layout_grid+0x168>
 80138f4:	2104      	movs	r1, #4
 80138f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80138f8:	f7f2 ffe2 	bl	80068c0 <lv_obj_is_protected>
 80138fc:	4603      	mov	r3, r0
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d12a      	bne.n	8013958 <lv_cont_layout_grid+0x168>

        if(obj_row > 1) {
 8013902:	8a3b      	ldrh	r3, [r7, #16]
 8013904:	2b01      	cmp	r3, #1
 8013906:	d90d      	bls.n	8013924 <lv_cont_layout_grid+0x134>
            lv_obj_set_pos(child, act_x, act_y);
 8013908:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801390c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013910:	4619      	mov	r1, r3
 8013912:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013914:	f7f1 fe21 	bl	800555a <lv_obj_set_pos>
            act_x += x_ofs;
 8013918:	8c3a      	ldrh	r2, [r7, #32]
 801391a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801391c:	4413      	add	r3, r2
 801391e:	b29b      	uxth	r3, r3
 8013920:	843b      	strh	r3, [r7, #32]
 8013922:	e007      	b.n	8013934 <lv_cont_layout_grid+0x144>
        } else {
            lv_obj_set_pos(child, x_ofs, act_y);
 8013924:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8013928:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801392c:	4619      	mov	r1, r3
 801392e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013930:	f7f1 fe13 	bl	800555a <lv_obj_set_pos>
        }
        obj_cnt++;
 8013934:	8bbb      	ldrh	r3, [r7, #28]
 8013936:	3301      	adds	r3, #1
 8013938:	83bb      	strh	r3, [r7, #28]

        if(obj_cnt >= obj_row) {
 801393a:	8bba      	ldrh	r2, [r7, #28]
 801393c:	8a3b      	ldrh	r3, [r7, #16]
 801393e:	429a      	cmp	r2, r3
 8013940:	d30b      	bcc.n	801395a <lv_cont_layout_grid+0x16a>
            obj_cnt = 0;
 8013942:	2300      	movs	r3, #0
 8013944:	83bb      	strh	r3, [r7, #28]
            act_x   = style->body.padding.left;
 8013946:	69bb      	ldr	r3, [r7, #24]
 8013948:	8b5b      	ldrh	r3, [r3, #26]
 801394a:	843b      	strh	r3, [r7, #32]
            act_y += y_ofs;
 801394c:	8bfa      	ldrh	r2, [r7, #30]
 801394e:	89fb      	ldrh	r3, [r7, #14]
 8013950:	4413      	add	r3, r2
 8013952:	b29b      	uxth	r3, r3
 8013954:	83fb      	strh	r3, [r7, #30]
 8013956:	e000      	b.n	801395a <lv_cont_layout_grid+0x16a>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
 8013958:	bf00      	nop
    LV_LL_READ_BACK(cont->child_ll, child)
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	3304      	adds	r3, #4
 801395e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013960:	4618      	mov	r0, r3
 8013962:	f7fc fac9 	bl	800fef8 <lv_ll_get_prev>
 8013966:	6278      	str	r0, [r7, #36]	@ 0x24
 8013968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801396a:	2b00      	cmp	r3, #0
 801396c:	d1bc      	bne.n	80138e8 <lv_cont_layout_grid+0xf8>
        }
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
 801396e:	2101      	movs	r1, #1
 8013970:	6878      	ldr	r0, [r7, #4]
 8013972:	f7f2 fca3 	bl	80062bc <lv_obj_clear_protect>
}
 8013976:	bf00      	nop
 8013978:	3728      	adds	r7, #40	@ 0x28
 801397a:	46bd      	mov	sp, r7
 801397c:	bd80      	pop	{r7, pc}

0801397e <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
 801397e:	b580      	push	{r7, lr}
 8013980:	b090      	sub	sp, #64	@ 0x40
 8013982:	af00      	add	r7, sp, #0
 8013984:	6078      	str	r0, [r7, #4]
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	f7f2 ffc6 	bl	8006918 <lv_obj_get_ext_attr>
 801398c:	63b8      	str	r0, [r7, #56]	@ 0x38

    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 801398e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013990:	781b      	ldrb	r3, [r3, #0]
 8013992:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8013996:	b2db      	uxtb	r3, r3
 8013998:	2b00      	cmp	r3, #0
 801399a:	d115      	bne.n	80139c8 <lv_cont_refr_autofit+0x4a>
 801399c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801399e:	781b      	ldrb	r3, [r3, #0]
 80139a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80139a4:	b2db      	uxtb	r3, r3
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d10e      	bne.n	80139c8 <lv_cont_refr_autofit+0x4a>
 80139aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ac:	785b      	ldrb	r3, [r3, #1]
 80139ae:	f003 0303 	and.w	r3, r3, #3
 80139b2:	b2db      	uxtb	r3, r3
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d107      	bne.n	80139c8 <lv_cont_refr_autofit+0x4a>
       ext->fit_bottom == LV_FIT_NONE) {
 80139b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ba:	785b      	ldrb	r3, [r3, #1]
 80139bc:	f003 030c 	and.w	r3, r3, #12
 80139c0:	b2db      	uxtb	r3, r3
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	f000 81d4 	beq.w	8013d70 <lv_cont_refr_autofit+0x3f2>
        return;
    }

    lv_area_t tight_area;
    lv_area_t ori;
    const lv_style_t * style = lv_obj_get_style(cont);
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f7f2 fe8f 	bl	80066ec <lv_obj_get_style>
 80139ce:	6378      	str	r0, [r7, #52]	@ 0x34
    lv_obj_t * child_i;

    lv_obj_t * par               = lv_obj_get_parent(cont);
 80139d0:	6878      	ldr	r0, [r7, #4]
 80139d2:	f7f2 fdb7 	bl	8006544 <lv_obj_get_parent>
 80139d6:	6338      	str	r0, [r7, #48]	@ 0x30
    const lv_style_t * par_style = lv_obj_get_style(par);
 80139d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80139da:	f7f2 fe87 	bl	80066ec <lv_obj_get_style>
 80139de:	62f8      	str	r0, [r7, #44]	@ 0x2c
    lv_area_t flood_area;
    lv_area_copy(&flood_area, &par->coords);
 80139e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139e2:	f103 0210 	add.w	r2, r3, #16
 80139e6:	f107 0310 	add.w	r3, r7, #16
 80139ea:	4611      	mov	r1, r2
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7ff f980 	bl	8012cf2 <lv_area_copy>
    flood_area.x1 += par_style->body.padding.left;
 80139f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80139f6:	b29a      	uxth	r2, r3
 80139f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139fa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	4413      	add	r3, r2
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	b21b      	sxth	r3, r3
 8013a06:	823b      	strh	r3, [r7, #16]
    flood_area.x2 -= par_style->body.padding.right;
 8013a08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013a0c:	b29a      	uxth	r2, r3
 8013a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a10:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013a14:	b29b      	uxth	r3, r3
 8013a16:	1ad3      	subs	r3, r2, r3
 8013a18:	b29b      	uxth	r3, r3
 8013a1a:	b21b      	sxth	r3, r3
 8013a1c:	82bb      	strh	r3, [r7, #20]
    flood_area.y1 += par_style->body.padding.top;
 8013a1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013a22:	b29a      	uxth	r2, r3
 8013a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a26:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	4413      	add	r3, r2
 8013a2e:	b29b      	uxth	r3, r3
 8013a30:	b21b      	sxth	r3, r3
 8013a32:	827b      	strh	r3, [r7, #18]
    flood_area.y2 -= par_style->body.padding.bottom;
 8013a34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013a38:	b29a      	uxth	r2, r3
 8013a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a3c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013a40:	b29b      	uxth	r3, r3
 8013a42:	1ad3      	subs	r3, r2, r3
 8013a44:	b29b      	uxth	r3, r3
 8013a46:	b21b      	sxth	r3, r3
 8013a48:	82fb      	strh	r3, [r7, #22]

    /*Search the side coordinates of the children*/
    lv_obj_get_coords(cont, &ori);
 8013a4a:	f107 0318 	add.w	r3, r7, #24
 8013a4e:	4619      	mov	r1, r3
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f7f2 fd9f 	bl	8006594 <lv_obj_get_coords>
    lv_obj_get_coords(cont, &tight_area);
 8013a56:	f107 0320 	add.w	r3, r7, #32
 8013a5a:	4619      	mov	r1, r3
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f7f2 fd99 	bl	8006594 <lv_obj_get_coords>

    bool has_children = lv_ll_is_empty(&cont->child_ll) ? false : true;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	3304      	adds	r3, #4
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7fc faa4 	bl	800ffb4 <lv_ll_is_empty>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	f083 0301 	eor.w	r3, r3, #1
 8013a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if(has_children) {
 8013a76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d078      	beq.n	8013b70 <lv_cont_refr_autofit+0x1f2>
        tight_area.x1 = LV_COORD_MAX;
 8013a7e:	f647 4318 	movw	r3, #31768	@ 0x7c18
 8013a82:	843b      	strh	r3, [r7, #32]
        tight_area.y1 = LV_COORD_MAX;
 8013a84:	f647 4318 	movw	r3, #31768	@ 0x7c18
 8013a88:	847b      	strh	r3, [r7, #34]	@ 0x22
        tight_area.x2 = LV_COORD_MIN;
 8013a8a:	f248 33e8 	movw	r3, #33768	@ 0x83e8
 8013a8e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        tight_area.y2 = LV_COORD_MIN;
 8013a90:	f248 33e8 	movw	r3, #33768	@ 0x83e8
 8013a94:	84fb      	strh	r3, [r7, #38]	@ 0x26

        LV_LL_READ(cont->child_ll, child_i)
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	3304      	adds	r3, #4
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7fc f9ef 	bl	800fe7e <lv_ll_get_head>
 8013aa0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8013aa2:	e036      	b.n	8013b12 <lv_cont_refr_autofit+0x194>
        {
            if(lv_obj_get_hidden(child_i) != false) continue;
 8013aa4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013aa6:	f7f2 fe79 	bl	800679c <lv_obj_get_hidden>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d128      	bne.n	8013b02 <lv_cont_refr_autofit+0x184>
            tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1);
 8013ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ab2:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8013ab6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013aba:	4293      	cmp	r3, r2
 8013abc:	bfa8      	it	ge
 8013abe:	4613      	movge	r3, r2
 8013ac0:	b21b      	sxth	r3, r3
 8013ac2:	843b      	strh	r3, [r7, #32]
            tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1);
 8013ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ac6:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8013aca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013ace:	4293      	cmp	r3, r2
 8013ad0:	bfa8      	it	ge
 8013ad2:	4613      	movge	r3, r2
 8013ad4:	b21b      	sxth	r3, r3
 8013ad6:	847b      	strh	r3, [r7, #34]	@ 0x22
            tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2);
 8013ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ada:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8013ade:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8013ae2:	4293      	cmp	r3, r2
 8013ae4:	bfb8      	it	lt
 8013ae6:	4613      	movlt	r3, r2
 8013ae8:	b21b      	sxth	r3, r3
 8013aea:	84bb      	strh	r3, [r7, #36]	@ 0x24
            tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2);
 8013aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013aee:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8013af2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013af6:	4293      	cmp	r3, r2
 8013af8:	bfb8      	it	lt
 8013afa:	4613      	movlt	r3, r2
 8013afc:	b21b      	sxth	r3, r3
 8013afe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013b00:	e000      	b.n	8013b04 <lv_cont_refr_autofit+0x186>
            if(lv_obj_get_hidden(child_i) != false) continue;
 8013b02:	bf00      	nop
        LV_LL_READ(cont->child_ll, child_i)
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	3304      	adds	r3, #4
 8013b08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f7fc f9db 	bl	800fec6 <lv_ll_get_next>
 8013b10:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8013b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d1c5      	bne.n	8013aa4 <lv_cont_refr_autofit+0x126>
        }

        tight_area.x1 -= style->body.padding.left;
 8013b18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b1c:	b29a      	uxth	r2, r3
 8013b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b20:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8013b24:	b29b      	uxth	r3, r3
 8013b26:	1ad3      	subs	r3, r2, r3
 8013b28:	b29b      	uxth	r3, r3
 8013b2a:	b21b      	sxth	r3, r3
 8013b2c:	843b      	strh	r3, [r7, #32]
        tight_area.x2 += style->body.padding.right;
 8013b2e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8013b32:	b29a      	uxth	r2, r3
 8013b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b36:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8013b3a:	b29b      	uxth	r3, r3
 8013b3c:	4413      	add	r3, r2
 8013b3e:	b29b      	uxth	r3, r3
 8013b40:	b21b      	sxth	r3, r3
 8013b42:	84bb      	strh	r3, [r7, #36]	@ 0x24
        tight_area.y1 -= style->body.padding.top;
 8013b44:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013b48:	b29a      	uxth	r2, r3
 8013b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b4c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	1ad3      	subs	r3, r2, r3
 8013b54:	b29b      	uxth	r3, r3
 8013b56:	b21b      	sxth	r3, r3
 8013b58:	847b      	strh	r3, [r7, #34]	@ 0x22
        tight_area.y2 += style->body.padding.bottom;
 8013b5a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013b5e:	b29a      	uxth	r2, r3
 8013b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b62:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8013b66:	b29b      	uxth	r3, r3
 8013b68:	4413      	add	r3, r2
 8013b6a:	b29b      	uxth	r3, r3
 8013b6c:	b21b      	sxth	r3, r3
 8013b6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    lv_area_t new_area;
    lv_area_copy(&new_area, &ori);
 8013b70:	f107 0218 	add.w	r2, r7, #24
 8013b74:	f107 0308 	add.w	r3, r7, #8
 8013b78:	4611      	mov	r1, r2
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	f7ff f8b9 	bl	8012cf2 <lv_area_copy>

    switch(ext->fit_left) {
 8013b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b82:	781b      	ldrb	r3, [r3, #0]
 8013b84:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8013b88:	b2db      	uxtb	r3, r3
 8013b8a:	2b03      	cmp	r3, #3
 8013b8c:	d00e      	beq.n	8013bac <lv_cont_refr_autofit+0x22e>
 8013b8e:	2b03      	cmp	r3, #3
 8013b90:	dc1d      	bgt.n	8013bce <lv_cont_refr_autofit+0x250>
 8013b92:	2b01      	cmp	r3, #1
 8013b94:	d002      	beq.n	8013b9c <lv_cont_refr_autofit+0x21e>
 8013b96:	2b02      	cmp	r3, #2
 8013b98:	d004      	beq.n	8013ba4 <lv_cont_refr_autofit+0x226>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
        default: break;
 8013b9a:	e018      	b.n	8013bce <lv_cont_refr_autofit+0x250>
        case LV_FIT_TIGHT: new_area.x1 = tight_area.x1; break;
 8013b9c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013ba0:	813b      	strh	r3, [r7, #8]
 8013ba2:	e015      	b.n	8013bd0 <lv_cont_refr_autofit+0x252>
        case LV_FIT_FLOOD: new_area.x1 = flood_area.x1; break;
 8013ba4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8013ba8:	813b      	strh	r3, [r7, #8]
 8013baa:	e011      	b.n	8013bd0 <lv_cont_refr_autofit+0x252>
        case LV_FIT_FILL: new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, flood_area.x1) : flood_area.x1; break;
 8013bac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d008      	beq.n	8013bc6 <lv_cont_refr_autofit+0x248>
 8013bb4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8013bb8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013bbc:	4293      	cmp	r3, r2
 8013bbe:	bfa8      	it	ge
 8013bc0:	4613      	movge	r3, r2
 8013bc2:	b21b      	sxth	r3, r3
 8013bc4:	e001      	b.n	8013bca <lv_cont_refr_autofit+0x24c>
 8013bc6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8013bca:	813b      	strh	r3, [r7, #8]
 8013bcc:	e000      	b.n	8013bd0 <lv_cont_refr_autofit+0x252>
        default: break;
 8013bce:	bf00      	nop
    }

    switch(ext->fit_right) {
 8013bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bd2:	781b      	ldrb	r3, [r3, #0]
 8013bd4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8013bd8:	b2db      	uxtb	r3, r3
 8013bda:	2b03      	cmp	r3, #3
 8013bdc:	d00e      	beq.n	8013bfc <lv_cont_refr_autofit+0x27e>
 8013bde:	2b03      	cmp	r3, #3
 8013be0:	dc1d      	bgt.n	8013c1e <lv_cont_refr_autofit+0x2a0>
 8013be2:	2b01      	cmp	r3, #1
 8013be4:	d002      	beq.n	8013bec <lv_cont_refr_autofit+0x26e>
 8013be6:	2b02      	cmp	r3, #2
 8013be8:	d004      	beq.n	8013bf4 <lv_cont_refr_autofit+0x276>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
        default: break;
 8013bea:	e018      	b.n	8013c1e <lv_cont_refr_autofit+0x2a0>
        case LV_FIT_TIGHT: new_area.x2 = tight_area.x2; break;
 8013bec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8013bf0:	81bb      	strh	r3, [r7, #12]
 8013bf2:	e015      	b.n	8013c20 <lv_cont_refr_autofit+0x2a2>
        case LV_FIT_FLOOD: new_area.x2 = flood_area.x2; break;
 8013bf4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013bf8:	81bb      	strh	r3, [r7, #12]
 8013bfa:	e011      	b.n	8013c20 <lv_cont_refr_autofit+0x2a2>
        case LV_FIT_FILL: new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, flood_area.x2) : flood_area.x2; break;
 8013bfc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d008      	beq.n	8013c16 <lv_cont_refr_autofit+0x298>
 8013c04:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8013c08:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8013c0c:	4293      	cmp	r3, r2
 8013c0e:	bfb8      	it	lt
 8013c10:	4613      	movlt	r3, r2
 8013c12:	b21b      	sxth	r3, r3
 8013c14:	e001      	b.n	8013c1a <lv_cont_refr_autofit+0x29c>
 8013c16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013c1a:	81bb      	strh	r3, [r7, #12]
 8013c1c:	e000      	b.n	8013c20 <lv_cont_refr_autofit+0x2a2>
        default: break;
 8013c1e:	bf00      	nop
    }

    switch(ext->fit_top) {
 8013c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c22:	785b      	ldrb	r3, [r3, #1]
 8013c24:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8013c28:	b2db      	uxtb	r3, r3
 8013c2a:	2b03      	cmp	r3, #3
 8013c2c:	d00e      	beq.n	8013c4c <lv_cont_refr_autofit+0x2ce>
 8013c2e:	2b03      	cmp	r3, #3
 8013c30:	dc1d      	bgt.n	8013c6e <lv_cont_refr_autofit+0x2f0>
 8013c32:	2b01      	cmp	r3, #1
 8013c34:	d002      	beq.n	8013c3c <lv_cont_refr_autofit+0x2be>
 8013c36:	2b02      	cmp	r3, #2
 8013c38:	d004      	beq.n	8013c44 <lv_cont_refr_autofit+0x2c6>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
        default: break;
 8013c3a:	e018      	b.n	8013c6e <lv_cont_refr_autofit+0x2f0>
        case LV_FIT_TIGHT: new_area.y1 = tight_area.y1; break;
 8013c3c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013c40:	817b      	strh	r3, [r7, #10]
 8013c42:	e015      	b.n	8013c70 <lv_cont_refr_autofit+0x2f2>
        case LV_FIT_FLOOD: new_area.y1 = flood_area.y1; break;
 8013c44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013c48:	817b      	strh	r3, [r7, #10]
 8013c4a:	e011      	b.n	8013c70 <lv_cont_refr_autofit+0x2f2>
        case LV_FIT_FILL: new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, flood_area.y1) : flood_area.y1; break;
 8013c4c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d008      	beq.n	8013c66 <lv_cont_refr_autofit+0x2e8>
 8013c54:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8013c58:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013c5c:	4293      	cmp	r3, r2
 8013c5e:	bfa8      	it	ge
 8013c60:	4613      	movge	r3, r2
 8013c62:	b21b      	sxth	r3, r3
 8013c64:	e001      	b.n	8013c6a <lv_cont_refr_autofit+0x2ec>
 8013c66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013c6a:	817b      	strh	r3, [r7, #10]
 8013c6c:	e000      	b.n	8013c70 <lv_cont_refr_autofit+0x2f2>
        default: break;
 8013c6e:	bf00      	nop
    }

    switch(ext->fit_bottom) {
 8013c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c72:	785b      	ldrb	r3, [r3, #1]
 8013c74:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013c78:	b2db      	uxtb	r3, r3
 8013c7a:	2b03      	cmp	r3, #3
 8013c7c:	d00e      	beq.n	8013c9c <lv_cont_refr_autofit+0x31e>
 8013c7e:	2b03      	cmp	r3, #3
 8013c80:	dc1d      	bgt.n	8013cbe <lv_cont_refr_autofit+0x340>
 8013c82:	2b01      	cmp	r3, #1
 8013c84:	d002      	beq.n	8013c8c <lv_cont_refr_autofit+0x30e>
 8013c86:	2b02      	cmp	r3, #2
 8013c88:	d004      	beq.n	8013c94 <lv_cont_refr_autofit+0x316>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
        case LV_FIT_FLOOD: new_area.y2 = flood_area.y2; break;
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
        default: break;
 8013c8a:	e018      	b.n	8013cbe <lv_cont_refr_autofit+0x340>
        case LV_FIT_TIGHT: new_area.y2 = tight_area.y2; break;
 8013c8c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013c90:	81fb      	strh	r3, [r7, #14]
 8013c92:	e015      	b.n	8013cc0 <lv_cont_refr_autofit+0x342>
        case LV_FIT_FLOOD: new_area.y2 = flood_area.y2; break;
 8013c94:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013c98:	81fb      	strh	r3, [r7, #14]
 8013c9a:	e011      	b.n	8013cc0 <lv_cont_refr_autofit+0x342>
        case LV_FIT_FILL: new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, flood_area.y2) : flood_area.y2; break;
 8013c9c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d008      	beq.n	8013cb6 <lv_cont_refr_autofit+0x338>
 8013ca4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ca8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013cac:	4293      	cmp	r3, r2
 8013cae:	bfb8      	it	lt
 8013cb0:	4613      	movlt	r3, r2
 8013cb2:	b21b      	sxth	r3, r3
 8013cb4:	e001      	b.n	8013cba <lv_cont_refr_autofit+0x33c>
 8013cb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013cba:	81fb      	strh	r3, [r7, #14]
 8013cbc:	e000      	b.n	8013cc0 <lv_cont_refr_autofit+0x342>
        default: break;
 8013cbe:	bf00      	nop
    }

    /*Do nothing if the coordinates are not changed*/
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8013cc6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8013cca:	429a      	cmp	r2, r3
 8013ccc:	d114      	bne.n	8013cf8 <lv_cont_refr_autofit+0x37a>
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8013cd4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	d10d      	bne.n	8013cf8 <lv_cont_refr_autofit+0x37a>
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8013ce2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013ce6:	429a      	cmp	r2, r3
 8013ce8:	d106      	bne.n	8013cf8 <lv_cont_refr_autofit+0x37a>
       cont->coords.y2 != new_area.y2) {
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8013cf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	d03c      	beq.n	8013d72 <lv_cont_refr_autofit+0x3f4>

        lv_obj_invalidate(cont);
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f7f1 fb2f 	bl	800535c <lv_obj_invalidate>
        lv_area_copy(&cont->coords, &new_area);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	3310      	adds	r3, #16
 8013d02:	f107 0208 	add.w	r2, r7, #8
 8013d06:	4611      	mov	r1, r2
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f7fe fff2 	bl	8012cf2 <lv_area_copy>
        lv_obj_invalidate(cont);
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f7f1 fb24 	bl	800535c <lv_obj_invalidate>

        /*Notify the object about its new coordinates*/
        cont->signal_cb(cont, LV_SIGNAL_CORD_CHG, &ori);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	69db      	ldr	r3, [r3, #28]
 8013d18:	f107 0218 	add.w	r2, r7, #24
 8013d1c:	2102      	movs	r1, #2
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	4798      	blx	r3

        /*Inform the parent about the new coordinates*/
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
 8013d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d24:	69db      	ldr	r3, [r3, #28]
 8013d26:	687a      	ldr	r2, [r7, #4]
 8013d28:	2101      	movs	r1, #1
 8013d2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013d2c:	4798      	blx	r3

        if(lv_obj_get_auto_realign(cont)) {
 8013d2e:	6878      	ldr	r0, [r7, #4]
 8013d30:	f7f2 fcc9 	bl	80066c6 <lv_obj_get_auto_realign>
 8013d34:	4603      	mov	r3, r0
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d002      	beq.n	8013d40 <lv_cont_refr_autofit+0x3c2>
            lv_obj_realign(cont);
 8013d3a:	6878      	ldr	r0, [r7, #4]
 8013d3c:	f7f2 f9da 	bl	80060f4 <lv_obj_realign>
        }

        /*Tell the children the parent's size has changed*/
        LV_LL_READ(cont->child_ll, child_i)
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	3304      	adds	r3, #4
 8013d44:	4618      	mov	r0, r3
 8013d46:	f7fc f89a 	bl	800fe7e <lv_ll_get_head>
 8013d4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8013d4c:	e00c      	b.n	8013d68 <lv_cont_refr_autofit+0x3ea>
        {
            child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, NULL);
 8013d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d50:	69db      	ldr	r3, [r3, #28]
 8013d52:	2200      	movs	r2, #0
 8013d54:	2103      	movs	r1, #3
 8013d56:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013d58:	4798      	blx	r3
        LV_LL_READ(cont->child_ll, child_i)
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	3304      	adds	r3, #4
 8013d5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013d60:	4618      	mov	r0, r3
 8013d62:	f7fc f8b0 	bl	800fec6 <lv_ll_get_next>
 8013d66:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8013d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d1ef      	bne.n	8013d4e <lv_cont_refr_autofit+0x3d0>
 8013d6e:	e000      	b.n	8013d72 <lv_cont_refr_autofit+0x3f4>
        return;
 8013d70:	bf00      	nop
        }
    }
}
 8013d72:	3740      	adds	r7, #64	@ 0x40
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}

08013d78 <lv_kb_create>:
 * @param par pointer to an object, it will be the parent of the new keyboard
 * @param copy pointer to a keyboard object, if not NULL then the new object will be copied from it
 * @return pointer to the created keyboard
 */
lv_obj_t * lv_kb_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8013d78:	b590      	push	{r4, r7, lr}
 8013d7a:	b089      	sub	sp, #36	@ 0x24
 8013d7c:	af02      	add	r7, sp, #8
 8013d7e:	6078      	str	r0, [r7, #4]
 8013d80:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("keyboard create started");

    /*Create the ancestor of keyboard*/
    lv_obj_t * new_kb = lv_btnm_create(par, copy);
 8013d82:	6839      	ldr	r1, [r7, #0]
 8013d84:	6878      	ldr	r0, [r7, #4]
 8013d86:	f7fd fb31 	bl	80113ec <lv_btnm_create>
 8013d8a:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_kb);
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d101      	bne.n	8013d96 <lv_kb_create+0x1e>
 8013d92:	bf00      	nop
 8013d94:	e7fd      	b.n	8013d92 <lv_kb_create+0x1a>
    if(new_kb == NULL) return NULL;
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d101      	bne.n	8013da0 <lv_kb_create+0x28>
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	e0b4      	b.n	8013f0a <lv_kb_create+0x192>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_kb);
 8013da0:	4b5c      	ldr	r3, [pc, #368]	@ (8013f14 <lv_kb_create+0x19c>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d105      	bne.n	8013db4 <lv_kb_create+0x3c>
 8013da8:	6978      	ldr	r0, [r7, #20]
 8013daa:	f7f2 fd9f 	bl	80068ec <lv_obj_get_signal_cb>
 8013dae:	4603      	mov	r3, r0
 8013db0:	4a58      	ldr	r2, [pc, #352]	@ (8013f14 <lv_kb_create+0x19c>)
 8013db2:	6013      	str	r3, [r2, #0]

    /*Allocate the keyboard type specific extended data*/
    lv_kb_ext_t * ext = lv_obj_allocate_ext_attr(new_kb, sizeof(lv_kb_ext_t));
 8013db4:	2130      	movs	r1, #48	@ 0x30
 8013db6:	6978      	ldr	r0, [r7, #20]
 8013db8:	f7f2 fb4c 	bl	8006454 <lv_obj_allocate_ext_attr>
 8013dbc:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8013dbe:	693b      	ldr	r3, [r7, #16]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d101      	bne.n	8013dc8 <lv_kb_create+0x50>
 8013dc4:	bf00      	nop
 8013dc6:	e7fd      	b.n	8013dc4 <lv_kb_create+0x4c>
    if(ext == NULL) return NULL;
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d101      	bne.n	8013dd2 <lv_kb_create+0x5a>
 8013dce:	2300      	movs	r3, #0
 8013dd0:	e09b      	b.n	8013f0a <lv_kb_create+0x192>

    /*Initialize the allocated 'ext' */

    ext->ta         = NULL;
 8013dd2:	693b      	ldr	r3, [r7, #16]
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	629a      	str	r2, [r3, #40]	@ 0x28
    ext->mode       = LV_KB_MODE_TEXT;
 8013dd8:	693b      	ldr	r3, [r7, #16]
 8013dda:	2200      	movs	r2, #0
 8013ddc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    ext->cursor_mng = 0;
 8013de0:	693a      	ldr	r2, [r7, #16]
 8013de2:	f892 302d 	ldrb.w	r3, [r2, #45]	@ 0x2d
 8013de6:	f36f 0300 	bfc	r3, #0, #1
 8013dea:	f882 302d 	strb.w	r3, [r2, #45]	@ 0x2d

    /*The signal and design functions are not copied so set them here*/
    lv_obj_set_signal_cb(new_kb, lv_kb_signal);
 8013dee:	494a      	ldr	r1, [pc, #296]	@ (8013f18 <lv_kb_create+0x1a0>)
 8013df0:	6978      	ldr	r0, [r7, #20]
 8013df2:	f7f2 fb15 	bl	8006420 <lv_obj_set_signal_cb>

    /*Init the new keyboard keyboard*/
    if(copy == NULL) {
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d164      	bne.n	8013ec6 <lv_kb_create+0x14e>
        /* Set a size which fits into the parent.
         * Don't use `par` directly because if the window is created on a page it is moved to the
         * scrollable so the parent has changed */
        lv_obj_set_size(new_kb, lv_obj_get_width_fit(lv_obj_get_parent(new_kb)),
 8013dfc:	6978      	ldr	r0, [r7, #20]
 8013dfe:	f7f2 fba1 	bl	8006544 <lv_obj_get_parent>
 8013e02:	4603      	mov	r3, r0
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7f2 fc22 	bl	800664e <lv_obj_get_width_fit>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	461c      	mov	r4, r3
                        lv_obj_get_height_fit(lv_obj_get_parent(new_kb)) / 2);
 8013e0e:	6978      	ldr	r0, [r7, #20]
 8013e10:	f7f2 fb98 	bl	8006544 <lv_obj_get_parent>
 8013e14:	4603      	mov	r3, r0
 8013e16:	4618      	mov	r0, r3
 8013e18:	f7f2 fc37 	bl	800668a <lv_obj_get_height_fit>
 8013e1c:	4603      	mov	r3, r0
        lv_obj_set_size(new_kb, lv_obj_get_width_fit(lv_obj_get_parent(new_kb)),
 8013e1e:	0fda      	lsrs	r2, r3, #31
 8013e20:	4413      	add	r3, r2
 8013e22:	105b      	asrs	r3, r3, #1
 8013e24:	b21b      	sxth	r3, r3
 8013e26:	461a      	mov	r2, r3
 8013e28:	4621      	mov	r1, r4
 8013e2a:	6978      	ldr	r0, [r7, #20]
 8013e2c:	f7f1 fc4a 	bl	80056c4 <lv_obj_set_size>

        lv_obj_align(new_kb, NULL, LV_ALIGN_IN_BOTTOM_MID, 0, 0);
 8013e30:	2300      	movs	r3, #0
 8013e32:	9300      	str	r3, [sp, #0]
 8013e34:	2300      	movs	r3, #0
 8013e36:	2205      	movs	r2, #5
 8013e38:	2100      	movs	r1, #0
 8013e3a:	6978      	ldr	r0, [r7, #20]
 8013e3c:	f7f1 fce6 	bl	800580c <lv_obj_align>
        lv_obj_set_event_cb(new_kb, lv_kb_def_event_cb);
 8013e40:	4936      	ldr	r1, [pc, #216]	@ (8013f1c <lv_kb_create+0x1a4>)
 8013e42:	6978      	ldr	r0, [r7, #20]
 8013e44:	f7f2 fa51 	bl	80062ea <lv_obj_set_event_cb>
        lv_btnm_set_map(new_kb, kb_map_lc);
 8013e48:	4935      	ldr	r1, [pc, #212]	@ (8013f20 <lv_kb_create+0x1a8>)
 8013e4a:	6978      	ldr	r0, [r7, #20]
 8013e4c:	f7fd fbb8 	bl	80115c0 <lv_btnm_set_map>
        lv_btnm_set_ctrl_map(new_kb, kb_ctrl_lc_map);
 8013e50:	4934      	ldr	r1, [pc, #208]	@ (8013f24 <lv_kb_create+0x1ac>)
 8013e52:	6978      	ldr	r0, [r7, #20]
 8013e54:	f7fd fd5e 	bl	8011914 <lv_btnm_set_ctrl_map>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 8013e58:	f006 fa8c 	bl	801a374 <lv_theme_get_current>
 8013e5c:	60b8      	str	r0, [r7, #8]
        if(th) {
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d051      	beq.n	8013f08 <lv_kb_create+0x190>
            lv_kb_set_style(new_kb, LV_KB_STYLE_BG, th->style.kb.bg);
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8013e6a:	461a      	mov	r2, r3
 8013e6c:	2100      	movs	r1, #0
 8013e6e:	6978      	ldr	r0, [r7, #20]
 8013e70:	f000 f92c 	bl	80140cc <lv_kb_set_style>
            lv_kb_set_style(new_kb, LV_KB_STYLE_BTN_REL, th->style.kb.btn.rel);
 8013e74:	68bb      	ldr	r3, [r7, #8]
 8013e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	2101      	movs	r1, #1
 8013e7e:	6978      	ldr	r0, [r7, #20]
 8013e80:	f000 f924 	bl	80140cc <lv_kb_set_style>
            lv_kb_set_style(new_kb, LV_KB_STYLE_BTN_PR, th->style.kb.btn.pr);
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8013e8a:	461a      	mov	r2, r3
 8013e8c:	2102      	movs	r1, #2
 8013e8e:	6978      	ldr	r0, [r7, #20]
 8013e90:	f000 f91c 	bl	80140cc <lv_kb_set_style>
            lv_kb_set_style(new_kb, LV_KB_STYLE_BTN_TGL_REL, th->style.kb.btn.tgl_rel);
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8013e9a:	461a      	mov	r2, r3
 8013e9c:	2103      	movs	r1, #3
 8013e9e:	6978      	ldr	r0, [r7, #20]
 8013ea0:	f000 f914 	bl	80140cc <lv_kb_set_style>
            lv_kb_set_style(new_kb, LV_KB_STYLE_BTN_TGL_PR, th->style.kb.btn.tgl_pr);
 8013ea4:	68bb      	ldr	r3, [r7, #8]
 8013ea6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8013eaa:	461a      	mov	r2, r3
 8013eac:	2104      	movs	r1, #4
 8013eae:	6978      	ldr	r0, [r7, #20]
 8013eb0:	f000 f90c 	bl	80140cc <lv_kb_set_style>
            lv_kb_set_style(new_kb, LV_KB_STYLE_BTN_INA, th->style.kb.btn.ina);
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8013eba:	461a      	mov	r2, r3
 8013ebc:	2105      	movs	r1, #5
 8013ebe:	6978      	ldr	r0, [r7, #20]
 8013ec0:	f000 f904 	bl	80140cc <lv_kb_set_style>
 8013ec4:	e020      	b.n	8013f08 <lv_kb_create+0x190>
            /*Let the button matrix's styles*/
        }
    }
    /*Copy an existing keyboard*/
    else {
        lv_kb_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8013ec6:	6838      	ldr	r0, [r7, #0]
 8013ec8:	f7f2 fd26 	bl	8006918 <lv_obj_get_ext_attr>
 8013ecc:	60f8      	str	r0, [r7, #12]
        ext->ta                = NULL;
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	629a      	str	r2, [r3, #40]	@ 0x28
        ext->ta                = copy_ext->ta;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013ed8:	693b      	ldr	r3, [r7, #16]
 8013eda:	629a      	str	r2, [r3, #40]	@ 0x28
        ext->mode              = copy_ext->mode;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
        ext->cursor_mng        = copy_ext->cursor_mng;
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013eee:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8013ef2:	b2d9      	uxtb	r1, r3
 8013ef4:	693a      	ldr	r2, [r7, #16]
 8013ef6:	f892 302d 	ldrb.w	r3, [r2, #45]	@ 0x2d
 8013efa:	f361 0300 	bfi	r3, r1, #0, #1
 8013efe:	f882 302d 	strb.w	r3, [r2, #45]	@ 0x2d

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_kb);
 8013f02:	6978      	ldr	r0, [r7, #20]
 8013f04:	f7f2 f939 	bl	800617a <lv_obj_refresh_style>
    }

    LV_LOG_INFO("keyboard created");

    return new_kb;
 8013f08:	697b      	ldr	r3, [r7, #20]
}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	371c      	adds	r7, #28
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	bd90      	pop	{r4, r7, pc}
 8013f12:	bf00      	nop
 8013f14:	2000ad8c 	.word	0x2000ad8c
 8013f18:	08014449 	.word	0x08014449
 8013f1c:	08014151 	.word	0x08014151
 8013f20:	20000cd0 	.word	0x20000cd0
 8013f24:	0801ef6c 	.word	0x0801ef6c

08013f28 <lv_kb_set_ta>:
 * Assign a Text Area to the Keyboard. The pressed characters will be put there.
 * @param kb pointer to a Keyboard object
 * @param ta pointer to a Text Area object to write there
 */
void lv_kb_set_ta(lv_obj_t * kb, lv_obj_t * ta)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b084      	sub	sp, #16
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
 8013f30:	6039      	str	r1, [r7, #0]
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8013f32:	6878      	ldr	r0, [r7, #4]
 8013f34:	f7f2 fcf0 	bl	8006918 <lv_obj_get_ext_attr>
 8013f38:	60f8      	str	r0, [r7, #12]
    lv_cursor_type_t cur_type;

    /*Hide the cursor of the old Text area if cursor management is enabled*/
    if(ext->ta && ext->cursor_mng) {
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d018      	beq.n	8013f74 <lv_kb_set_ta+0x4c>
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013f48:	f003 0301 	and.w	r3, r3, #1
 8013f4c:	b2db      	uxtb	r3, r3
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d010      	beq.n	8013f74 <lv_kb_set_ta+0x4c>
        cur_type = lv_ta_get_cursor_type(ext->ta);
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f56:	4618      	mov	r0, r3
 8013f58:	f004 ffca 	bl	8018ef0 <lv_ta_get_cursor_type>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	72fb      	strb	r3, [r7, #11]
        lv_ta_set_cursor_type(ext->ta, cur_type | LV_CURSOR_HIDDEN);
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013f64:	7afb      	ldrb	r3, [r7, #11]
 8013f66:	f043 0308 	orr.w	r3, r3, #8
 8013f6a:	b2db      	uxtb	r3, r3
 8013f6c:	4619      	mov	r1, r3
 8013f6e:	4610      	mov	r0, r2
 8013f70:	f004 fe6a 	bl	8018c48 <lv_ta_set_cursor_type>
    }

    ext->ta = ta;
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	683a      	ldr	r2, [r7, #0]
 8013f78:	629a      	str	r2, [r3, #40]	@ 0x28

    /*Show the cursor of the new Text area if cursor management is enabled*/
    if(ext->ta && ext->cursor_mng) {
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d018      	beq.n	8013fb4 <lv_kb_set_ta+0x8c>
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013f88:	f003 0301 	and.w	r3, r3, #1
 8013f8c:	b2db      	uxtb	r3, r3
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d010      	beq.n	8013fb4 <lv_kb_set_ta+0x8c>
        cur_type = lv_ta_get_cursor_type(ext->ta);
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f96:	4618      	mov	r0, r3
 8013f98:	f004 ffaa 	bl	8018ef0 <lv_ta_get_cursor_type>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	72fb      	strb	r3, [r7, #11]
        lv_ta_set_cursor_type(ext->ta, cur_type & (~LV_CURSOR_HIDDEN));
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013fa4:	7afb      	ldrb	r3, [r7, #11]
 8013fa6:	f023 0308 	bic.w	r3, r3, #8
 8013faa:	b2db      	uxtb	r3, r3
 8013fac:	4619      	mov	r1, r3
 8013fae:	4610      	mov	r0, r2
 8013fb0:	f004 fe4a 	bl	8018c48 <lv_ta_set_cursor_type>
    }
}
 8013fb4:	bf00      	nop
 8013fb6:	3710      	adds	r7, #16
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}

08013fbc <lv_kb_set_mode>:
 * Set a new a mode (text or number map)
 * @param kb pointer to a Keyboard object
 * @param mode the mode from 'lv_kb_mode_t'
 */
void lv_kb_set_mode(lv_obj_t * kb, lv_kb_mode_t mode)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b084      	sub	sp, #16
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	460b      	mov	r3, r1
 8013fc6:	70fb      	strb	r3, [r7, #3]
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8013fc8:	6878      	ldr	r0, [r7, #4]
 8013fca:	f7f2 fca5 	bl	8006918 <lv_obj_get_ext_attr>
 8013fce:	60f8      	str	r0, [r7, #12]
    if(ext->mode == mode) return;
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013fd6:	78fa      	ldrb	r2, [r7, #3]
 8013fd8:	429a      	cmp	r2, r3
 8013fda:	d01b      	beq.n	8014014 <lv_kb_set_mode+0x58>

    ext->mode = mode;
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	78fa      	ldrb	r2, [r7, #3]
 8013fe0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if(mode == LV_KB_MODE_TEXT) {
 8013fe4:	78fb      	ldrb	r3, [r7, #3]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d108      	bne.n	8013ffc <lv_kb_set_mode+0x40>
        lv_btnm_set_map(kb, kb_map_lc);
 8013fea:	490c      	ldr	r1, [pc, #48]	@ (801401c <lv_kb_set_mode+0x60>)
 8013fec:	6878      	ldr	r0, [r7, #4]
 8013fee:	f7fd fae7 	bl	80115c0 <lv_btnm_set_map>
        lv_btnm_set_ctrl_map(kb, kb_ctrl_lc_map);
 8013ff2:	490b      	ldr	r1, [pc, #44]	@ (8014020 <lv_kb_set_mode+0x64>)
 8013ff4:	6878      	ldr	r0, [r7, #4]
 8013ff6:	f7fd fc8d 	bl	8011914 <lv_btnm_set_ctrl_map>
 8013ffa:	e00c      	b.n	8014016 <lv_kb_set_mode+0x5a>
    } else if(mode == LV_KB_MODE_NUM) {
 8013ffc:	78fb      	ldrb	r3, [r7, #3]
 8013ffe:	2b01      	cmp	r3, #1
 8014000:	d109      	bne.n	8014016 <lv_kb_set_mode+0x5a>
        lv_btnm_set_map(kb, kb_map_num);
 8014002:	4908      	ldr	r1, [pc, #32]	@ (8014024 <lv_kb_set_mode+0x68>)
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f7fd fadb 	bl	80115c0 <lv_btnm_set_map>
        lv_btnm_set_ctrl_map(kb, kb_ctrl_num_map);
 801400a:	4907      	ldr	r1, [pc, #28]	@ (8014028 <lv_kb_set_mode+0x6c>)
 801400c:	6878      	ldr	r0, [r7, #4]
 801400e:	f7fd fc81 	bl	8011914 <lv_btnm_set_ctrl_map>
 8014012:	e000      	b.n	8014016 <lv_kb_set_mode+0x5a>
    if(ext->mode == mode) return;
 8014014:	bf00      	nop
    }
}
 8014016:	3710      	adds	r7, #16
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}
 801401c:	20000cd0 	.word	0x20000cd0
 8014020:	0801ef6c 	.word	0x0801ef6c
 8014024:	20000ee0 	.word	0x20000ee0
 8014028:	0801f05c 	.word	0x0801f05c

0801402c <lv_kb_set_cursor_manage>:
 * Automatically hide or show the cursor of Text Area
 * @param kb pointer to a Keyboard object
 * @param en true: show cursor on the current text area, false: hide cursor
 */
void lv_kb_set_cursor_manage(lv_obj_t * kb, bool en)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b084      	sub	sp, #16
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
 8014034:	460b      	mov	r3, r1
 8014036:	70fb      	strb	r3, [r7, #3]
    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f7f2 fc6d 	bl	8006918 <lv_obj_get_ext_attr>
 801403e:	60f8      	str	r0, [r7, #12]
    if(ext->cursor_mng == en) return;
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014046:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801404a:	b2db      	uxtb	r3, r3
 801404c:	78fa      	ldrb	r2, [r7, #3]
 801404e:	429a      	cmp	r2, r3
 8014050:	d038      	beq.n	80140c4 <lv_kb_set_cursor_manage+0x98>

    ext->cursor_mng = en == false ? 0 : 1;
 8014052:	78fb      	ldrb	r3, [r7, #3]
 8014054:	f083 0301 	eor.w	r3, r3, #1
 8014058:	b2db      	uxtb	r3, r3
 801405a:	2b00      	cmp	r3, #0
 801405c:	d001      	beq.n	8014062 <lv_kb_set_cursor_manage+0x36>
 801405e:	2100      	movs	r1, #0
 8014060:	e000      	b.n	8014064 <lv_kb_set_cursor_manage+0x38>
 8014062:	2101      	movs	r1, #1
 8014064:	68fa      	ldr	r2, [r7, #12]
 8014066:	f892 302d 	ldrb.w	r3, [r2, #45]	@ 0x2d
 801406a:	f361 0300 	bfi	r3, r1, #0, #1
 801406e:	f882 302d 	strb.w	r3, [r2, #45]	@ 0x2d

    if(ext->ta) {
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014076:	2b00      	cmp	r3, #0
 8014078:	d025      	beq.n	80140c6 <lv_kb_set_cursor_manage+0x9a>
        lv_cursor_type_t cur_type;
        cur_type = lv_ta_get_cursor_type(ext->ta);
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801407e:	4618      	mov	r0, r3
 8014080:	f004 ff36 	bl	8018ef0 <lv_ta_get_cursor_type>
 8014084:	4603      	mov	r3, r0
 8014086:	72fb      	strb	r3, [r7, #11]

        if(ext->cursor_mng) {
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801408e:	f003 0301 	and.w	r3, r3, #1
 8014092:	b2db      	uxtb	r3, r3
 8014094:	2b00      	cmp	r3, #0
 8014096:	d00a      	beq.n	80140ae <lv_kb_set_cursor_manage+0x82>
            lv_ta_set_cursor_type(ext->ta, cur_type & (~LV_CURSOR_HIDDEN));
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801409c:	7afb      	ldrb	r3, [r7, #11]
 801409e:	f023 0308 	bic.w	r3, r3, #8
 80140a2:	b2db      	uxtb	r3, r3
 80140a4:	4619      	mov	r1, r3
 80140a6:	4610      	mov	r0, r2
 80140a8:	f004 fdce 	bl	8018c48 <lv_ta_set_cursor_type>
 80140ac:	e00b      	b.n	80140c6 <lv_kb_set_cursor_manage+0x9a>
        } else {
            lv_ta_set_cursor_type(ext->ta, cur_type | LV_CURSOR_HIDDEN);
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80140b2:	7afb      	ldrb	r3, [r7, #11]
 80140b4:	f043 0308 	orr.w	r3, r3, #8
 80140b8:	b2db      	uxtb	r3, r3
 80140ba:	4619      	mov	r1, r3
 80140bc:	4610      	mov	r0, r2
 80140be:	f004 fdc3 	bl	8018c48 <lv_ta_set_cursor_type>
 80140c2:	e000      	b.n	80140c6 <lv_kb_set_cursor_manage+0x9a>
    if(ext->cursor_mng == en) return;
 80140c4:	bf00      	nop
        }
    }
}
 80140c6:	3710      	adds	r7, #16
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}

080140cc <lv_kb_set_style>:
 * @param kb pointer to a keyboard object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_kb_set_style(lv_obj_t * kb, lv_kb_style_t type, const lv_style_t * style)
{
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b084      	sub	sp, #16
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	60f8      	str	r0, [r7, #12]
 80140d4:	460b      	mov	r3, r1
 80140d6:	607a      	str	r2, [r7, #4]
 80140d8:	72fb      	strb	r3, [r7, #11]
    switch(type) {
 80140da:	7afb      	ldrb	r3, [r7, #11]
 80140dc:	2b05      	cmp	r3, #5
 80140de:	d833      	bhi.n	8014148 <lv_kb_set_style+0x7c>
 80140e0:	a201      	add	r2, pc, #4	@ (adr r2, 80140e8 <lv_kb_set_style+0x1c>)
 80140e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140e6:	bf00      	nop
 80140e8:	08014101 	.word	0x08014101
 80140ec:	0801410d 	.word	0x0801410d
 80140f0:	08014119 	.word	0x08014119
 80140f4:	08014125 	.word	0x08014125
 80140f8:	08014131 	.word	0x08014131
 80140fc:	0801413d 	.word	0x0801413d
        case LV_KB_STYLE_BG: lv_btnm_set_style(kb, LV_BTNM_STYLE_BG, style); break;
 8014100:	687a      	ldr	r2, [r7, #4]
 8014102:	2100      	movs	r1, #0
 8014104:	68f8      	ldr	r0, [r7, #12]
 8014106:	f7fd fc21 	bl	801194c <lv_btnm_set_style>
 801410a:	e01d      	b.n	8014148 <lv_kb_set_style+0x7c>
        case LV_KB_STYLE_BTN_REL: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_REL, style); break;
 801410c:	687a      	ldr	r2, [r7, #4]
 801410e:	2101      	movs	r1, #1
 8014110:	68f8      	ldr	r0, [r7, #12]
 8014112:	f7fd fc1b 	bl	801194c <lv_btnm_set_style>
 8014116:	e017      	b.n	8014148 <lv_kb_set_style+0x7c>
        case LV_KB_STYLE_BTN_PR: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_PR, style); break;
 8014118:	687a      	ldr	r2, [r7, #4]
 801411a:	2102      	movs	r1, #2
 801411c:	68f8      	ldr	r0, [r7, #12]
 801411e:	f7fd fc15 	bl	801194c <lv_btnm_set_style>
 8014122:	e011      	b.n	8014148 <lv_kb_set_style+0x7c>
        case LV_KB_STYLE_BTN_TGL_REL: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_REL, style); break;
 8014124:	687a      	ldr	r2, [r7, #4]
 8014126:	2103      	movs	r1, #3
 8014128:	68f8      	ldr	r0, [r7, #12]
 801412a:	f7fd fc0f 	bl	801194c <lv_btnm_set_style>
 801412e:	e00b      	b.n	8014148 <lv_kb_set_style+0x7c>
        case LV_KB_STYLE_BTN_TGL_PR: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_TGL_PR, style); break;
 8014130:	687a      	ldr	r2, [r7, #4]
 8014132:	2104      	movs	r1, #4
 8014134:	68f8      	ldr	r0, [r7, #12]
 8014136:	f7fd fc09 	bl	801194c <lv_btnm_set_style>
 801413a:	e005      	b.n	8014148 <lv_kb_set_style+0x7c>
        case LV_KB_STYLE_BTN_INA: lv_btnm_set_style(kb, LV_BTNM_STYLE_BTN_INA, style); break;
 801413c:	687a      	ldr	r2, [r7, #4]
 801413e:	2105      	movs	r1, #5
 8014140:	68f8      	ldr	r0, [r7, #12]
 8014142:	f7fd fc03 	bl	801194c <lv_btnm_set_style>
 8014146:	bf00      	nop
    }
}
 8014148:	bf00      	nop
 801414a:	3710      	adds	r7, #16
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}

08014150 <lv_kb_def_event_cb>:
 * button clicks
 * @param kb pointer to a  keyboard
 * @param event the triggering event
 */
void lv_kb_def_event_cb(lv_obj_t * kb, lv_event_t event)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b088      	sub	sp, #32
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	460b      	mov	r3, r1
 801415a:	70fb      	strb	r3, [r7, #3]
    if(event != LV_EVENT_VALUE_CHANGED && event != LV_EVENT_LONG_PRESSED_REPEAT) return;
 801415c:	78fb      	ldrb	r3, [r7, #3]
 801415e:	2b0e      	cmp	r3, #14
 8014160:	d003      	beq.n	801416a <lv_kb_def_event_cb+0x1a>
 8014162:	78fb      	ldrb	r3, [r7, #3]
 8014164:	2b05      	cmp	r3, #5
 8014166:	f040 813f 	bne.w	80143e8 <lv_kb_def_event_cb+0x298>

    lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f7f2 fbd4 	bl	8006918 <lv_obj_get_ext_attr>
 8014170:	61f8      	str	r0, [r7, #28]
    uint16_t btn_id   = lv_btnm_get_active_btn(kb);
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f7fd fcbb 	bl	8011aee <lv_btnm_get_active_btn>
 8014178:	4603      	mov	r3, r0
 801417a:	837b      	strh	r3, [r7, #26]
    if(btn_id == LV_BTNM_BTN_NONE) return;
 801417c:	8b7b      	ldrh	r3, [r7, #26]
 801417e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014182:	4293      	cmp	r3, r2
 8014184:	f000 8132 	beq.w	80143ec <lv_kb_def_event_cb+0x29c>
    if(lv_btnm_get_btn_ctrl(kb, btn_id, LV_BTNM_CTRL_HIDDEN | LV_BTNM_CTRL_INACTIVE)) return;
 8014188:	8b7b      	ldrh	r3, [r7, #26]
 801418a:	2228      	movs	r2, #40	@ 0x28
 801418c:	4619      	mov	r1, r3
 801418e:	6878      	ldr	r0, [r7, #4]
 8014190:	f7fd fd1a 	bl	8011bc8 <lv_btnm_get_btn_ctrl>
 8014194:	4603      	mov	r3, r0
 8014196:	2b00      	cmp	r3, #0
 8014198:	f040 812a 	bne.w	80143f0 <lv_kb_def_event_cb+0x2a0>
    if(lv_btnm_get_btn_ctrl(kb, btn_id, LV_BTNM_CTRL_NO_REPEAT) && event == LV_EVENT_LONG_PRESSED_REPEAT) return;
 801419c:	8b7b      	ldrh	r3, [r7, #26]
 801419e:	2210      	movs	r2, #16
 80141a0:	4619      	mov	r1, r3
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	f7fd fd10 	bl	8011bc8 <lv_btnm_get_btn_ctrl>
 80141a8:	4603      	mov	r3, r0
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d003      	beq.n	80141b6 <lv_kb_def_event_cb+0x66>
 80141ae:	78fb      	ldrb	r3, [r7, #3]
 80141b0:	2b05      	cmp	r3, #5
 80141b2:	f000 811f 	beq.w	80143f4 <lv_kb_def_event_cb+0x2a4>

    const char * txt = lv_btnm_get_active_btn_text(kb);
 80141b6:	6878      	ldr	r0, [r7, #4]
 80141b8:	f7fd fca7 	bl	8011b0a <lv_btnm_get_active_btn_text>
 80141bc:	6178      	str	r0, [r7, #20]
    if(txt == NULL) return;
 80141be:	697b      	ldr	r3, [r7, #20]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	f000 8119 	beq.w	80143f8 <lv_kb_def_event_cb+0x2a8>

    /*Do the corresponding action according to the text of the button*/
    if(strcmp(txt, "abc") == 0) {
 80141c6:	498f      	ldr	r1, [pc, #572]	@ (8014404 <lv_kb_def_event_cb+0x2b4>)
 80141c8:	6978      	ldr	r0, [r7, #20]
 80141ca:	f7ec f82b 	bl	8000224 <strcmp>
 80141ce:	4603      	mov	r3, r0
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d108      	bne.n	80141e6 <lv_kb_def_event_cb+0x96>
        lv_btnm_set_map(kb, kb_map_lc);
 80141d4:	498c      	ldr	r1, [pc, #560]	@ (8014408 <lv_kb_def_event_cb+0x2b8>)
 80141d6:	6878      	ldr	r0, [r7, #4]
 80141d8:	f7fd f9f2 	bl	80115c0 <lv_btnm_set_map>
        lv_btnm_set_ctrl_map(kb, kb_ctrl_lc_map);
 80141dc:	498b      	ldr	r1, [pc, #556]	@ (801440c <lv_kb_def_event_cb+0x2bc>)
 80141de:	6878      	ldr	r0, [r7, #4]
 80141e0:	f7fd fb98 	bl	8011914 <lv_btnm_set_ctrl_map>
        return;
 80141e4:	e10b      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
    } else if(strcmp(txt, "ABC") == 0) {
 80141e6:	498a      	ldr	r1, [pc, #552]	@ (8014410 <lv_kb_def_event_cb+0x2c0>)
 80141e8:	6978      	ldr	r0, [r7, #20]
 80141ea:	f7ec f81b 	bl	8000224 <strcmp>
 80141ee:	4603      	mov	r3, r0
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d108      	bne.n	8014206 <lv_kb_def_event_cb+0xb6>
        lv_btnm_set_map(kb, kb_map_uc);
 80141f4:	4987      	ldr	r1, [pc, #540]	@ (8014414 <lv_kb_def_event_cb+0x2c4>)
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f7fd f9e2 	bl	80115c0 <lv_btnm_set_map>
        lv_btnm_set_ctrl_map(kb, kb_ctrl_uc_map);
 80141fc:	4986      	ldr	r1, [pc, #536]	@ (8014418 <lv_kb_def_event_cb+0x2c8>)
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f7fd fb88 	bl	8011914 <lv_btnm_set_ctrl_map>
        return;
 8014204:	e0fb      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
    } else if(strcmp(txt, "1#") == 0) {
 8014206:	4985      	ldr	r1, [pc, #532]	@ (801441c <lv_kb_def_event_cb+0x2cc>)
 8014208:	6978      	ldr	r0, [r7, #20]
 801420a:	f7ec f80b 	bl	8000224 <strcmp>
 801420e:	4603      	mov	r3, r0
 8014210:	2b00      	cmp	r3, #0
 8014212:	d108      	bne.n	8014226 <lv_kb_def_event_cb+0xd6>
        lv_btnm_set_map(kb, kb_map_spec);
 8014214:	4982      	ldr	r1, [pc, #520]	@ (8014420 <lv_kb_def_event_cb+0x2d0>)
 8014216:	6878      	ldr	r0, [r7, #4]
 8014218:	f7fd f9d2 	bl	80115c0 <lv_btnm_set_map>
        lv_btnm_set_ctrl_map(kb, kb_ctrl_spec_map);
 801421c:	4981      	ldr	r1, [pc, #516]	@ (8014424 <lv_kb_def_event_cb+0x2d4>)
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f7fd fb78 	bl	8011914 <lv_btnm_set_ctrl_map>
        return;
 8014224:	e0eb      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
    } else if(strcmp(txt, LV_SYMBOL_CLOSE) == 0) {
 8014226:	4980      	ldr	r1, [pc, #512]	@ (8014428 <lv_kb_def_event_cb+0x2d8>)
 8014228:	6978      	ldr	r0, [r7, #20]
 801422a:	f7eb fffb 	bl	8000224 <strcmp>
 801422e:	4603      	mov	r3, r0
 8014230:	2b00      	cmp	r3, #0
 8014232:	d116      	bne.n	8014262 <lv_kb_def_event_cb+0x112>
        if(kb->event_cb != lv_kb_def_event_cb) {
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	699b      	ldr	r3, [r3, #24]
 8014238:	4a7c      	ldr	r2, [pc, #496]	@ (801442c <lv_kb_def_event_cb+0x2dc>)
 801423a:	4293      	cmp	r3, r2
 801423c:	d009      	beq.n	8014252 <lv_kb_def_event_cb+0x102>
            lv_res_t res = lv_event_send(kb, LV_EVENT_CANCEL, NULL);
 801423e:	2200      	movs	r2, #0
 8014240:	2112      	movs	r1, #18
 8014242:	6878      	ldr	r0, [r7, #4]
 8014244:	f7f2 f85e 	bl	8006304 <lv_event_send>
 8014248:	4603      	mov	r3, r0
 801424a:	72bb      	strb	r3, [r7, #10]
            if(res != LV_RES_OK) return;
 801424c:	7abb      	ldrb	r3, [r7, #10]
 801424e:	2b01      	cmp	r3, #1
        } else {
            lv_kb_set_ta(kb, NULL); /*De-assign the text area  to hide it cursor if needed*/
            lv_obj_del(kb);
            return;
        }
        return;
 8014250:	e0d5      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
            lv_kb_set_ta(kb, NULL); /*De-assign the text area  to hide it cursor if needed*/
 8014252:	2100      	movs	r1, #0
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	f7ff fe67 	bl	8013f28 <lv_kb_set_ta>
            lv_obj_del(kb);
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f7f0 ffe4 	bl	8005228 <lv_obj_del>
            return;
 8014260:	e0cd      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
    } else if(strcmp(txt, LV_SYMBOL_OK) == 0) {
 8014262:	4973      	ldr	r1, [pc, #460]	@ (8014430 <lv_kb_def_event_cb+0x2e0>)
 8014264:	6978      	ldr	r0, [r7, #20]
 8014266:	f7eb ffdd 	bl	8000224 <strcmp>
 801426a:	4603      	mov	r3, r0
 801426c:	2b00      	cmp	r3, #0
 801426e:	d113      	bne.n	8014298 <lv_kb_def_event_cb+0x148>
        if(kb->event_cb != lv_kb_def_event_cb) {
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	699b      	ldr	r3, [r3, #24]
 8014274:	4a6d      	ldr	r2, [pc, #436]	@ (801442c <lv_kb_def_event_cb+0x2dc>)
 8014276:	4293      	cmp	r3, r2
 8014278:	d009      	beq.n	801428e <lv_kb_def_event_cb+0x13e>
            lv_res_t res = lv_event_send(kb, LV_EVENT_APPLY, NULL);
 801427a:	2200      	movs	r2, #0
 801427c:	2111      	movs	r1, #17
 801427e:	6878      	ldr	r0, [r7, #4]
 8014280:	f7f2 f840 	bl	8006304 <lv_event_send>
 8014284:	4603      	mov	r3, r0
 8014286:	72fb      	strb	r3, [r7, #11]
            if(res != LV_RES_OK) return;
 8014288:	7afb      	ldrb	r3, [r7, #11]
 801428a:	2b01      	cmp	r3, #1
        } else {
            lv_kb_set_ta(kb, NULL); /*De-assign the text area to hide it cursor if needed*/
        }
        return;
 801428c:	e0b7      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
            lv_kb_set_ta(kb, NULL); /*De-assign the text area to hide it cursor if needed*/
 801428e:	2100      	movs	r1, #0
 8014290:	6878      	ldr	r0, [r7, #4]
 8014292:	f7ff fe49 	bl	8013f28 <lv_kb_set_ta>
        return;
 8014296:	e0b2      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
    }

    /*Add the characters to the text area if set*/
    if(ext->ta == NULL) return;
 8014298:	69fb      	ldr	r3, [r7, #28]
 801429a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801429c:	2b00      	cmp	r3, #0
 801429e:	f000 80ad 	beq.w	80143fc <lv_kb_def_event_cb+0x2ac>

    if(strcmp(txt, "Enter") == 0)
 80142a2:	4964      	ldr	r1, [pc, #400]	@ (8014434 <lv_kb_def_event_cb+0x2e4>)
 80142a4:	6978      	ldr	r0, [r7, #20]
 80142a6:	f7eb ffbd 	bl	8000224 <strcmp>
 80142aa:	4603      	mov	r3, r0
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d106      	bne.n	80142be <lv_kb_def_event_cb+0x16e>
        lv_ta_add_char(ext->ta, '\n');
 80142b0:	69fb      	ldr	r3, [r7, #28]
 80142b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142b4:	210a      	movs	r1, #10
 80142b6:	4618      	mov	r0, r3
 80142b8:	f003 ffe0 	bl	801827c <lv_ta_add_char>
 80142bc:	e09f      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
    else if(strcmp(txt, LV_SYMBOL_LEFT) == 0)
 80142be:	495e      	ldr	r1, [pc, #376]	@ (8014438 <lv_kb_def_event_cb+0x2e8>)
 80142c0:	6978      	ldr	r0, [r7, #20]
 80142c2:	f7eb ffaf 	bl	8000224 <strcmp>
 80142c6:	4603      	mov	r3, r0
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d105      	bne.n	80142d8 <lv_kb_def_event_cb+0x188>
        lv_ta_cursor_left(ext->ta);
 80142cc:	69fb      	ldr	r3, [r7, #28]
 80142ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142d0:	4618      	mov	r0, r3
 80142d2:	f004 fea4 	bl	801901e <lv_ta_cursor_left>
 80142d6:	e092      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
    else if(strcmp(txt, LV_SYMBOL_RIGHT) == 0)
 80142d8:	4958      	ldr	r1, [pc, #352]	@ (801443c <lv_kb_def_event_cb+0x2ec>)
 80142da:	6978      	ldr	r0, [r7, #20]
 80142dc:	f7eb ffa2 	bl	8000224 <strcmp>
 80142e0:	4603      	mov	r3, r0
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d105      	bne.n	80142f2 <lv_kb_def_event_cb+0x1a2>
        lv_ta_cursor_right(ext->ta);
 80142e6:	69fb      	ldr	r3, [r7, #28]
 80142e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80142ea:	4618      	mov	r0, r3
 80142ec:	f004 fe81 	bl	8018ff2 <lv_ta_cursor_right>
 80142f0:	e085      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
    else if(strcmp(txt, "Bksp") == 0)
 80142f2:	4953      	ldr	r1, [pc, #332]	@ (8014440 <lv_kb_def_event_cb+0x2f0>)
 80142f4:	6978      	ldr	r0, [r7, #20]
 80142f6:	f7eb ff95 	bl	8000224 <strcmp>
 80142fa:	4603      	mov	r3, r0
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d105      	bne.n	801430c <lv_kb_def_event_cb+0x1bc>
        lv_ta_del_char(ext->ta);
 8014300:	69fb      	ldr	r3, [r7, #28]
 8014302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014304:	4618      	mov	r0, r3
 8014306:	f004 f9b3 	bl	8018670 <lv_ta_del_char>
 801430a:	e078      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
    else if(strcmp(txt, "+/-") == 0) {
 801430c:	494d      	ldr	r1, [pc, #308]	@ (8014444 <lv_kb_def_event_cb+0x2f4>)
 801430e:	6978      	ldr	r0, [r7, #20]
 8014310:	f7eb ff88 	bl	8000224 <strcmp>
 8014314:	4603      	mov	r3, r0
 8014316:	2b00      	cmp	r3, #0
 8014318:	d15f      	bne.n	80143da <lv_kb_def_event_cb+0x28a>
        uint16_t cur        = lv_ta_get_cursor_pos(ext->ta);
 801431a:	69fb      	ldr	r3, [r7, #28]
 801431c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801431e:	4618      	mov	r0, r3
 8014320:	f004 fdd7 	bl	8018ed2 <lv_ta_get_cursor_pos>
 8014324:	4603      	mov	r3, r0
 8014326:	827b      	strh	r3, [r7, #18]
        const char * ta_txt = lv_ta_get_text(ext->ta);
 8014328:	69fb      	ldr	r3, [r7, #28]
 801432a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801432c:	4618      	mov	r0, r3
 801432e:	f004 fdb1 	bl	8018e94 <lv_ta_get_text>
 8014332:	60f8      	str	r0, [r7, #12]
        if(ta_txt[0] == '-') {
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	781b      	ldrb	r3, [r3, #0]
 8014338:	2b2d      	cmp	r3, #45	@ 0x2d
 801433a:	d119      	bne.n	8014370 <lv_kb_def_event_cb+0x220>
            lv_ta_set_cursor_pos(ext->ta, 1);
 801433c:	69fb      	ldr	r3, [r7, #28]
 801433e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014340:	2101      	movs	r1, #1
 8014342:	4618      	mov	r0, r3
 8014344:	f004 fb4a 	bl	80189dc <lv_ta_set_cursor_pos>
            lv_ta_del_char(ext->ta);
 8014348:	69fb      	ldr	r3, [r7, #28]
 801434a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801434c:	4618      	mov	r0, r3
 801434e:	f004 f98f 	bl	8018670 <lv_ta_del_char>
            lv_ta_add_char(ext->ta, '+');
 8014352:	69fb      	ldr	r3, [r7, #28]
 8014354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014356:	212b      	movs	r1, #43	@ 0x2b
 8014358:	4618      	mov	r0, r3
 801435a:	f003 ff8f 	bl	801827c <lv_ta_add_char>
            lv_ta_set_cursor_pos(ext->ta, cur);
 801435e:	69fb      	ldr	r3, [r7, #28]
 8014360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014362:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8014366:	4611      	mov	r1, r2
 8014368:	4618      	mov	r0, r3
 801436a:	f004 fb37 	bl	80189dc <lv_ta_set_cursor_pos>
 801436e:	e046      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
        } else if(ta_txt[0] == '+') {
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	781b      	ldrb	r3, [r3, #0]
 8014374:	2b2b      	cmp	r3, #43	@ 0x2b
 8014376:	d119      	bne.n	80143ac <lv_kb_def_event_cb+0x25c>
            lv_ta_set_cursor_pos(ext->ta, 1);
 8014378:	69fb      	ldr	r3, [r7, #28]
 801437a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801437c:	2101      	movs	r1, #1
 801437e:	4618      	mov	r0, r3
 8014380:	f004 fb2c 	bl	80189dc <lv_ta_set_cursor_pos>
            lv_ta_del_char(ext->ta);
 8014384:	69fb      	ldr	r3, [r7, #28]
 8014386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014388:	4618      	mov	r0, r3
 801438a:	f004 f971 	bl	8018670 <lv_ta_del_char>
            lv_ta_add_char(ext->ta, '-');
 801438e:	69fb      	ldr	r3, [r7, #28]
 8014390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014392:	212d      	movs	r1, #45	@ 0x2d
 8014394:	4618      	mov	r0, r3
 8014396:	f003 ff71 	bl	801827c <lv_ta_add_char>
            lv_ta_set_cursor_pos(ext->ta, cur);
 801439a:	69fb      	ldr	r3, [r7, #28]
 801439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801439e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80143a2:	4611      	mov	r1, r2
 80143a4:	4618      	mov	r0, r3
 80143a6:	f004 fb19 	bl	80189dc <lv_ta_set_cursor_pos>
 80143aa:	e028      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
        } else {
            lv_ta_set_cursor_pos(ext->ta, 0);
 80143ac:	69fb      	ldr	r3, [r7, #28]
 80143ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143b0:	2100      	movs	r1, #0
 80143b2:	4618      	mov	r0, r3
 80143b4:	f004 fb12 	bl	80189dc <lv_ta_set_cursor_pos>
            lv_ta_add_char(ext->ta, '-');
 80143b8:	69fb      	ldr	r3, [r7, #28]
 80143ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143bc:	212d      	movs	r1, #45	@ 0x2d
 80143be:	4618      	mov	r0, r3
 80143c0:	f003 ff5c 	bl	801827c <lv_ta_add_char>
            lv_ta_set_cursor_pos(ext->ta, cur + 1);
 80143c4:	69fb      	ldr	r3, [r7, #28]
 80143c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80143c8:	8a7b      	ldrh	r3, [r7, #18]
 80143ca:	3301      	adds	r3, #1
 80143cc:	b29b      	uxth	r3, r3
 80143ce:	b21b      	sxth	r3, r3
 80143d0:	4619      	mov	r1, r3
 80143d2:	4610      	mov	r0, r2
 80143d4:	f004 fb02 	bl	80189dc <lv_ta_set_cursor_pos>
 80143d8:	e011      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
        }
    } else {
        lv_ta_add_text(ext->ta, txt);
 80143da:	69fb      	ldr	r3, [r7, #28]
 80143dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143de:	6979      	ldr	r1, [r7, #20]
 80143e0:	4618      	mov	r0, r3
 80143e2:	f004 f845 	bl	8018470 <lv_ta_add_text>
 80143e6:	e00a      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
    if(event != LV_EVENT_VALUE_CHANGED && event != LV_EVENT_LONG_PRESSED_REPEAT) return;
 80143e8:	bf00      	nop
 80143ea:	e008      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
    if(btn_id == LV_BTNM_BTN_NONE) return;
 80143ec:	bf00      	nop
 80143ee:	e006      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
    if(lv_btnm_get_btn_ctrl(kb, btn_id, LV_BTNM_CTRL_HIDDEN | LV_BTNM_CTRL_INACTIVE)) return;
 80143f0:	bf00      	nop
 80143f2:	e004      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
    if(lv_btnm_get_btn_ctrl(kb, btn_id, LV_BTNM_CTRL_NO_REPEAT) && event == LV_EVENT_LONG_PRESSED_REPEAT) return;
 80143f4:	bf00      	nop
 80143f6:	e002      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
    if(txt == NULL) return;
 80143f8:	bf00      	nop
 80143fa:	e000      	b.n	80143fe <lv_kb_def_event_cb+0x2ae>
    if(ext->ta == NULL) return;
 80143fc:	bf00      	nop
    }
}
 80143fe:	3720      	adds	r7, #32
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}
 8014404:	0801c754 	.word	0x0801c754
 8014408:	20000cd0 	.word	0x20000cd0
 801440c:	0801ef6c 	.word	0x0801ef6c
 8014410:	0801c6b4 	.word	0x0801c6b4
 8014414:	20000d80 	.word	0x20000d80
 8014418:	0801efbc 	.word	0x0801efbc
 801441c:	0801c67c 	.word	0x0801c67c
 8014420:	20000e30 	.word	0x20000e30
 8014424:	0801f00c 	.word	0x0801f00c
 8014428:	0801c714 	.word	0x0801c714
 801442c:	08014151 	.word	0x08014151
 8014430:	0801c724 	.word	0x0801c724
 8014434:	0801c6dc 	.word	0x0801c6dc
 8014438:	0801c718 	.word	0x0801c718
 801443c:	0801c720 	.word	0x0801c720
 8014440:	0801c6a8 	.word	0x0801c6a8
 8014444:	0801c818 	.word	0x0801c818

08014448 <lv_kb_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_kb_signal(lv_obj_t * kb, lv_signal_t sign, void * param)
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b08a      	sub	sp, #40	@ 0x28
 801444c:	af00      	add	r7, sp, #0
 801444e:	60f8      	str	r0, [r7, #12]
 8014450:	460b      	mov	r3, r1
 8014452:	607a      	str	r2, [r7, #4]
 8014454:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(kb, sign, param);
 8014456:	4b42      	ldr	r3, [pc, #264]	@ (8014560 <lv_kb_signal+0x118>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	7af9      	ldrb	r1, [r7, #11]
 801445c:	687a      	ldr	r2, [r7, #4]
 801445e:	68f8      	ldr	r0, [r7, #12]
 8014460:	4798      	blx	r3
 8014462:	4603      	mov	r3, r0
 8014464:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if(res != LV_RES_OK) return res;
 8014468:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801446c:	2b01      	cmp	r3, #1
 801446e:	d002      	beq.n	8014476 <lv_kb_signal+0x2e>
 8014470:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014474:	e06f      	b.n	8014556 <lv_kb_signal+0x10e>

    if(sign == LV_SIGNAL_CLEANUP) {
 8014476:	7afb      	ldrb	r3, [r7, #11]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d06a      	beq.n	8014552 <lv_kb_signal+0x10a>
        /*Nothing to cleanup. (No dynamically allocated memory in 'ext')*/
    } else if(sign == LV_SIGNAL_FOCUS) {
 801447c:	7afb      	ldrb	r3, [r7, #11]
 801447e:	2b0f      	cmp	r3, #15
 8014480:	d121      	bne.n	80144c6 <lv_kb_signal+0x7e>
        lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 8014482:	68f8      	ldr	r0, [r7, #12]
 8014484:	f7f2 fa48 	bl	8006918 <lv_obj_get_ext_attr>
 8014488:	6178      	str	r0, [r7, #20]
        /*Show the cursor of the new Text area if cursor management is enabled*/
        if(ext->ta && ext->cursor_mng) {
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801448e:	2b00      	cmp	r3, #0
 8014490:	d05f      	beq.n	8014552 <lv_kb_signal+0x10a>
 8014492:	697b      	ldr	r3, [r7, #20]
 8014494:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014498:	f003 0301 	and.w	r3, r3, #1
 801449c:	b2db      	uxtb	r3, r3
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d057      	beq.n	8014552 <lv_kb_signal+0x10a>
            lv_cursor_type_t cur_type = lv_ta_get_cursor_type(ext->ta);
 80144a2:	697b      	ldr	r3, [r7, #20]
 80144a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144a6:	4618      	mov	r0, r3
 80144a8:	f004 fd22 	bl	8018ef0 <lv_ta_get_cursor_type>
 80144ac:	4603      	mov	r3, r0
 80144ae:	74fb      	strb	r3, [r7, #19]
            lv_ta_set_cursor_type(ext->ta, cur_type & (~LV_CURSOR_HIDDEN));
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80144b4:	7cfb      	ldrb	r3, [r7, #19]
 80144b6:	f023 0308 	bic.w	r3, r3, #8
 80144ba:	b2db      	uxtb	r3, r3
 80144bc:	4619      	mov	r1, r3
 80144be:	4610      	mov	r0, r2
 80144c0:	f004 fbc2 	bl	8018c48 <lv_ta_set_cursor_type>
 80144c4:	e045      	b.n	8014552 <lv_kb_signal+0x10a>
        }
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 80144c6:	7afb      	ldrb	r3, [r7, #11]
 80144c8:	2b10      	cmp	r3, #16
 80144ca:	d121      	bne.n	8014510 <lv_kb_signal+0xc8>
        lv_kb_ext_t * ext = lv_obj_get_ext_attr(kb);
 80144cc:	68f8      	ldr	r0, [r7, #12]
 80144ce:	f7f2 fa23 	bl	8006918 <lv_obj_get_ext_attr>
 80144d2:	61f8      	str	r0, [r7, #28]
        /*Show the cursor of the new Text area if cursor management is enabled*/
        if(ext->ta && ext->cursor_mng) {
 80144d4:	69fb      	ldr	r3, [r7, #28]
 80144d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d03a      	beq.n	8014552 <lv_kb_signal+0x10a>
 80144dc:	69fb      	ldr	r3, [r7, #28]
 80144de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80144e2:	f003 0301 	and.w	r3, r3, #1
 80144e6:	b2db      	uxtb	r3, r3
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d032      	beq.n	8014552 <lv_kb_signal+0x10a>
            lv_cursor_type_t cur_type = lv_ta_get_cursor_type(ext->ta);
 80144ec:	69fb      	ldr	r3, [r7, #28]
 80144ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144f0:	4618      	mov	r0, r3
 80144f2:	f004 fcfd 	bl	8018ef0 <lv_ta_get_cursor_type>
 80144f6:	4603      	mov	r3, r0
 80144f8:	76fb      	strb	r3, [r7, #27]
            lv_ta_set_cursor_type(ext->ta, cur_type | LV_CURSOR_HIDDEN);
 80144fa:	69fb      	ldr	r3, [r7, #28]
 80144fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80144fe:	7efb      	ldrb	r3, [r7, #27]
 8014500:	f043 0308 	orr.w	r3, r3, #8
 8014504:	b2db      	uxtb	r3, r3
 8014506:	4619      	mov	r1, r3
 8014508:	4610      	mov	r0, r2
 801450a:	f004 fb9d 	bl	8018c48 <lv_ta_set_cursor_type>
 801450e:	e020      	b.n	8014552 <lv_kb_signal+0x10a>
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8014510:	7afb      	ldrb	r3, [r7, #11]
 8014512:	2b06      	cmp	r3, #6
 8014514:	d11d      	bne.n	8014552 <lv_kb_signal+0x10a>
        lv_obj_type_t * buf = param;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	623b      	str	r3, [r7, #32]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801451a:	2300      	movs	r3, #0
 801451c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014520:	e00b      	b.n	801453a <lv_kb_signal+0xf2>
            if(buf->type[i] == NULL) break;
 8014522:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014526:	6a3b      	ldr	r3, [r7, #32]
 8014528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d009      	beq.n	8014544 <lv_kb_signal+0xfc>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8014530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014534:	3301      	adds	r3, #1
 8014536:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801453a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801453e:	2b06      	cmp	r3, #6
 8014540:	d9ef      	bls.n	8014522 <lv_kb_signal+0xda>
 8014542:	e000      	b.n	8014546 <lv_kb_signal+0xfe>
            if(buf->type[i] == NULL) break;
 8014544:	bf00      	nop
        }
        buf->type[i] = "lv_kb";
 8014546:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801454a:	6a3b      	ldr	r3, [r7, #32]
 801454c:	4905      	ldr	r1, [pc, #20]	@ (8014564 <lv_kb_signal+0x11c>)
 801454e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 8014552:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
}
 8014556:	4618      	mov	r0, r3
 8014558:	3728      	adds	r7, #40	@ 0x28
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	2000ad8c 	.word	0x2000ad8c
 8014564:	0801c81c 	.word	0x0801c81c

08014568 <lv_font_get_line_height>:
 * Get the line height of a font. All characters fit into this height
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline uint8_t lv_font_get_line_height(const lv_font_t * font_p)
{
 8014568:	b480      	push	{r7}
 801456a:	b083      	sub	sp, #12
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	7a1b      	ldrb	r3, [r3, #8]
}
 8014574:	4618      	mov	r0, r3
 8014576:	370c      	adds	r7, #12
 8014578:	46bd      	mov	sp, r7
 801457a:	bc80      	pop	{r7}
 801457c:	4770      	bx	lr

0801457e <lv_area_get_width>:
{
 801457e:	b480      	push	{r7}
 8014580:	b083      	sub	sp, #12
 8014582:	af00      	add	r7, sp, #0
 8014584:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801458c:	b29a      	uxth	r2, r3
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014594:	b29b      	uxth	r3, r3
 8014596:	1ad3      	subs	r3, r2, r3
 8014598:	b29b      	uxth	r3, r3
 801459a:	3301      	adds	r3, #1
 801459c:	b29b      	uxth	r3, r3
 801459e:	b21b      	sxth	r3, r3
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	370c      	adds	r7, #12
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bc80      	pop	{r7}
 80145a8:	4770      	bx	lr

080145aa <lv_area_get_height>:
{
 80145aa:	b480      	push	{r7}
 80145ac:	b083      	sub	sp, #12
 80145ae:	af00      	add	r7, sp, #0
 80145b0:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80145b8:	b29a      	uxth	r2, r3
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80145c0:	b29b      	uxth	r3, r3
 80145c2:	1ad3      	subs	r3, r2, r3
 80145c4:	b29b      	uxth	r3, r3
 80145c6:	3301      	adds	r3, #1
 80145c8:	b29b      	uxth	r3, r3
 80145ca:	b21b      	sxth	r3, r3
}
 80145cc:	4618      	mov	r0, r3
 80145ce:	370c      	adds	r7, #12
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bc80      	pop	{r7}
 80145d4:	4770      	bx	lr

080145d6 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 80145d6:	b580      	push	{r7, lr}
 80145d8:	b084      	sub	sp, #16
 80145da:	af00      	add	r7, sp, #0
 80145dc:	60f8      	str	r0, [r7, #12]
 80145de:	460b      	mov	r3, r1
 80145e0:	607a      	str	r2, [r7, #4]
 80145e2:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 80145e4:	6879      	ldr	r1, [r7, #4]
 80145e6:	68f8      	ldr	r0, [r7, #12]
 80145e8:	f7f1 fdb5 	bl	8006156 <lv_obj_set_style>
}
 80145ec:	bf00      	nop
 80145ee:	3710      	adds	r7, #16
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}

080145f4 <lv_label_get_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b082      	sub	sp, #8
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
 80145fc:	460b      	mov	r3, r1
 80145fe:	70fb      	strb	r3, [r7, #3]
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f7f2 f873 	bl	80066ec <lv_obj_get_style>
 8014606:	4603      	mov	r3, r0
}
 8014608:	4618      	mov	r0, r3
 801460a:	3708      	adds	r7, #8
 801460c:	46bd      	mov	sp, r7
 801460e:	bd80      	pop	{r7, pc}

08014610 <lv_label_create>:
 * @param par pointer to an object, it will be the parent of the new label
 * @param copy pointer to a button object, if not NULL then the new object will be copied from it
 * @return pointer to the created button
 */
lv_obj_t * lv_label_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8014610:	b5b0      	push	{r4, r5, r7, lr}
 8014612:	b086      	sub	sp, #24
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
 8014618:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("label create started");

    /*Create a basic object*/
    lv_obj_t * new_label = lv_obj_create(par, copy);
 801461a:	6839      	ldr	r1, [r7, #0]
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f7f0 fb79 	bl	8004d14 <lv_obj_create>
 8014622:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_label);
 8014624:	697b      	ldr	r3, [r7, #20]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d101      	bne.n	801462e <lv_label_create+0x1e>
 801462a:	bf00      	nop
 801462c:	e7fd      	b.n	801462a <lv_label_create+0x1a>
    if(new_label == NULL) return NULL;
 801462e:	697b      	ldr	r3, [r7, #20]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d101      	bne.n	8014638 <lv_label_create+0x28>
 8014634:	2300      	movs	r3, #0
 8014636:	e113      	b.n	8014860 <lv_label_create+0x250>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
 8014638:	4b8b      	ldr	r3, [pc, #556]	@ (8014868 <lv_label_create+0x258>)
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d105      	bne.n	801464c <lv_label_create+0x3c>
 8014640:	6978      	ldr	r0, [r7, #20]
 8014642:	f7f2 f953 	bl	80068ec <lv_obj_get_signal_cb>
 8014646:	4603      	mov	r3, r0
 8014648:	4a87      	ldr	r2, [pc, #540]	@ (8014868 <lv_label_create+0x258>)
 801464a:	6013      	str	r3, [r2, #0]

    /*Extend the basic object to a label object*/
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
 801464c:	2120      	movs	r1, #32
 801464e:	6978      	ldr	r0, [r7, #20]
 8014650:	f7f1 ff00 	bl	8006454 <lv_obj_allocate_ext_attr>

    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
 8014654:	6978      	ldr	r0, [r7, #20]
 8014656:	f7f2 f95f 	bl	8006918 <lv_obj_get_ext_attr>
 801465a:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 801465c:	693b      	ldr	r3, [r7, #16]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d101      	bne.n	8014666 <lv_label_create+0x56>
 8014662:	bf00      	nop
 8014664:	e7fd      	b.n	8014662 <lv_label_create+0x52>
    if(ext == NULL) return NULL;
 8014666:	693b      	ldr	r3, [r7, #16]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d101      	bne.n	8014670 <lv_label_create+0x60>
 801466c:	2300      	movs	r3, #0
 801466e:	e0f7      	b.n	8014860 <lv_label_create+0x250>

    ext->text       = NULL;
 8014670:	693b      	ldr	r3, [r7, #16]
 8014672:	2200      	movs	r2, #0
 8014674:	601a      	str	r2, [r3, #0]
    ext->static_txt = 0;
 8014676:	693a      	ldr	r2, [r7, #16]
 8014678:	7f93      	ldrb	r3, [r2, #30]
 801467a:	f36f 03c3 	bfc	r3, #3, #1
 801467e:	7793      	strb	r3, [r2, #30]
    ext->recolor    = 0;
 8014680:	693a      	ldr	r2, [r7, #16]
 8014682:	7f93      	ldrb	r3, [r2, #30]
 8014684:	f36f 1386 	bfc	r3, #6, #1
 8014688:	7793      	strb	r3, [r2, #30]
    ext->body_draw  = 0;
 801468a:	693a      	ldr	r2, [r7, #16]
 801468c:	7fd3      	ldrb	r3, [r2, #31]
 801468e:	f36f 0300 	bfc	r3, #0, #1
 8014692:	77d3      	strb	r3, [r2, #31]
    ext->align      = LV_LABEL_ALIGN_LEFT;
 8014694:	693a      	ldr	r2, [r7, #16]
 8014696:	7f93      	ldrb	r3, [r2, #30]
 8014698:	f36f 1305 	bfc	r3, #4, #2
 801469c:	7793      	strb	r3, [r2, #30]
    ext->dot_end    = LV_LABEL_DOT_END_INV;
 801469e:	693b      	ldr	r3, [r7, #16]
 80146a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80146a4:	811a      	strh	r2, [r3, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
 80146a6:	693a      	ldr	r2, [r7, #16]
 80146a8:	7f93      	ldrb	r3, [r2, #30]
 80146aa:	f36f 0302 	bfc	r3, #0, #3
 80146ae:	7793      	strb	r3, [r2, #30]
#if LV_USE_ANIMATION
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
 80146b0:	693b      	ldr	r3, [r7, #16]
 80146b2:	2219      	movs	r2, #25
 80146b4:	839a      	strh	r2, [r3, #28]
#endif
    ext->offset.x = 0;
 80146b6:	693b      	ldr	r3, [r7, #16]
 80146b8:	2200      	movs	r2, #0
 80146ba:	815a      	strh	r2, [r3, #10]
    ext->offset.y = 0;
 80146bc:	693b      	ldr	r3, [r7, #16]
 80146be:	2200      	movs	r2, #0
 80146c0:	819a      	strh	r2, [r3, #12]

    ext->hint.line_start = -1;
 80146c2:	693b      	ldr	r3, [r7, #16]
 80146c4:	f04f 32ff 	mov.w	r2, #4294967295
 80146c8:	611a      	str	r2, [r3, #16]
    ext->hint.coord_y    = 0;
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	2200      	movs	r2, #0
 80146ce:	619a      	str	r2, [r3, #24]
    ext->hint.y          = 0;
 80146d0:	693b      	ldr	r3, [r7, #16]
 80146d2:	2200      	movs	r2, #0
 80146d4:	615a      	str	r2, [r3, #20]

#if LV_LABEL_TEXT_SEL
    ext->txt_sel_start = LV_LABEL_TEXT_SEL_OFF;
    ext->txt_sel_end   = LV_LABEL_TEXT_SEL_OFF;
#endif
    ext->dot.tmp_ptr   = NULL;
 80146d6:	693b      	ldr	r3, [r7, #16]
 80146d8:	2200      	movs	r2, #0
 80146da:	605a      	str	r2, [r3, #4]
    ext->dot_tmp_alloc = 0;
 80146dc:	693a      	ldr	r2, [r7, #16]
 80146de:	7fd3      	ldrb	r3, [r2, #31]
 80146e0:	f36f 0341 	bfc	r3, #1, #1
 80146e4:	77d3      	strb	r3, [r2, #31]

    lv_obj_set_design_cb(new_label, lv_label_design);
 80146e6:	4961      	ldr	r1, [pc, #388]	@ (801486c <lv_label_create+0x25c>)
 80146e8:	6978      	ldr	r0, [r7, #20]
 80146ea:	f7f1 fea6 	bl	800643a <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
 80146ee:	4960      	ldr	r1, [pc, #384]	@ (8014870 <lv_label_create+0x260>)
 80146f0:	6978      	ldr	r0, [r7, #20]
 80146f2:	f7f1 fe95 	bl	8006420 <lv_obj_set_signal_cb>

    /*Init the new label*/
    if(copy == NULL) {
 80146f6:	683b      	ldr	r3, [r7, #0]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d111      	bne.n	8014720 <lv_label_create+0x110>
        lv_obj_set_click(new_label, false);
 80146fc:	2100      	movs	r1, #0
 80146fe:	6978      	ldr	r0, [r7, #20]
 8014700:	f7f1 fd89 	bl	8006216 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
 8014704:	2100      	movs	r1, #0
 8014706:	6978      	ldr	r0, [r7, #20]
 8014708:	f000 f954 	bl	80149b4 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
 801470c:	4959      	ldr	r1, [pc, #356]	@ (8014874 <lv_label_create+0x264>)
 801470e:	6978      	ldr	r0, [r7, #20]
 8014710:	f000 f8b2 	bl	8014878 <lv_label_set_text>
        lv_label_set_style(new_label, LV_LABEL_STYLE_MAIN, NULL); /*Inherit parent's style*/
 8014714:	2200      	movs	r2, #0
 8014716:	2100      	movs	r1, #0
 8014718:	6978      	ldr	r0, [r7, #20]
 801471a:	f7ff ff5c 	bl	80145d6 <lv_label_set_style>
 801471e:	e09e      	b.n	801485e <lv_label_create+0x24e>
    }
    /*Copy 'copy' if not NULL*/
    else {
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8014720:	6838      	ldr	r0, [r7, #0]
 8014722:	f7f2 f8f9 	bl	8006918 <lv_obj_get_ext_attr>
 8014726:	60f8      	str	r0, [r7, #12]
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
 8014728:	6838      	ldr	r0, [r7, #0]
 801472a:	f000 fa24 	bl	8014b76 <lv_label_get_long_mode>
 801472e:	4603      	mov	r3, r0
 8014730:	4619      	mov	r1, r3
 8014732:	6978      	ldr	r0, [r7, #20]
 8014734:	f000 f93e 	bl	80149b4 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
 8014738:	6838      	ldr	r0, [r7, #0]
 801473a:	f000 fa3e 	bl	8014bba <lv_label_get_recolor>
 801473e:	4603      	mov	r3, r0
 8014740:	4619      	mov	r1, r3
 8014742:	6978      	ldr	r0, [r7, #20]
 8014744:	f000 f9b6 	bl	8014ab4 <lv_label_set_recolor>
        lv_label_set_body_draw(new_label, lv_label_get_body_draw(copy));
 8014748:	6838      	ldr	r0, [r7, #0]
 801474a:	f000 fa4c 	bl	8014be6 <lv_label_get_body_draw>
 801474e:	4603      	mov	r3, r0
 8014750:	4619      	mov	r1, r3
 8014752:	6978      	ldr	r0, [r7, #20]
 8014754:	f000 f9d6 	bl	8014b04 <lv_label_set_body_draw>
        lv_label_set_align(new_label, lv_label_get_align(copy));
 8014758:	6838      	ldr	r0, [r7, #0]
 801475a:	f000 fa1d 	bl	8014b98 <lv_label_get_align>
 801475e:	4603      	mov	r3, r0
 8014760:	4619      	mov	r1, r3
 8014762:	6978      	ldr	r0, [r7, #20]
 8014764:	f000 f982 	bl	8014a6c <lv_label_set_align>
        if(copy_ext->static_txt == 0)
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	7f9b      	ldrb	r3, [r3, #30]
 801476c:	f003 0308 	and.w	r3, r3, #8
 8014770:	b2db      	uxtb	r3, r3
 8014772:	2b00      	cmp	r3, #0
 8014774:	d108      	bne.n	8014788 <lv_label_create+0x178>
            lv_label_set_text(new_label, lv_label_get_text(copy));
 8014776:	6838      	ldr	r0, [r7, #0]
 8014778:	f000 f9ef 	bl	8014b5a <lv_label_get_text>
 801477c:	4603      	mov	r3, r0
 801477e:	4619      	mov	r1, r3
 8014780:	6978      	ldr	r0, [r7, #20]
 8014782:	f000 f879 	bl	8014878 <lv_label_set_text>
 8014786:	e007      	b.n	8014798 <lv_label_create+0x188>
        else
            lv_label_set_static_text(new_label, lv_label_get_text(copy));
 8014788:	6838      	ldr	r0, [r7, #0]
 801478a:	f000 f9e6 	bl	8014b5a <lv_label_get_text>
 801478e:	4603      	mov	r3, r0
 8014790:	4619      	mov	r1, r3
 8014792:	6978      	ldr	r0, [r7, #20]
 8014794:	f000 f8df 	bl	8014956 <lv_label_set_static_text>

        /*In DOT mode save the text byte-to-byte because a '\0' can be in the middle*/
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	7f9b      	ldrb	r3, [r3, #30]
 801479c:	f003 0307 	and.w	r3, r3, #7
 80147a0:	b2db      	uxtb	r3, r3
 80147a2:	2b02      	cmp	r3, #2
 80147a4:	d129      	bne.n	80147fa <lv_label_create+0x1ea>
            ext->text = lv_mem_realloc(ext->text, lv_mem_get_size(copy_ext->text));
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	681c      	ldr	r4, [r3, #0]
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	4618      	mov	r0, r3
 80147b0:	f7fb fd58 	bl	8010264 <lv_mem_get_size>
 80147b4:	4603      	mov	r3, r0
 80147b6:	4619      	mov	r1, r3
 80147b8:	4620      	mov	r0, r4
 80147ba:	f7fb fd07 	bl	80101cc <lv_mem_realloc>
 80147be:	4602      	mov	r2, r0
 80147c0:	693b      	ldr	r3, [r7, #16]
 80147c2:	601a      	str	r2, [r3, #0]
            lv_mem_assert(ext->text);
 80147c4:	693b      	ldr	r3, [r7, #16]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d101      	bne.n	80147d0 <lv_label_create+0x1c0>
 80147cc:	bf00      	nop
 80147ce:	e7fd      	b.n	80147cc <lv_label_create+0x1bc>
            if(ext->text == NULL) return NULL;
 80147d0:	693b      	ldr	r3, [r7, #16]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d101      	bne.n	80147dc <lv_label_create+0x1cc>
 80147d8:	2300      	movs	r3, #0
 80147da:	e041      	b.n	8014860 <lv_label_create+0x250>
            memcpy(ext->text, copy_ext->text, lv_mem_get_size(copy_ext->text));
 80147dc:	693b      	ldr	r3, [r7, #16]
 80147de:	681c      	ldr	r4, [r3, #0]
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	681d      	ldr	r5, [r3, #0]
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7fb fd3b 	bl	8010264 <lv_mem_get_size>
 80147ee:	4603      	mov	r3, r0
 80147f0:	461a      	mov	r2, r3
 80147f2:	4629      	mov	r1, r5
 80147f4:	4620      	mov	r0, r4
 80147f6:	f007 f8f8 	bl	801b9ea <memcpy>
        }

        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	7fdb      	ldrb	r3, [r3, #31]
 80147fe:	f003 0302 	and.w	r3, r3, #2
 8014802:	b2db      	uxtb	r3, r3
 8014804:	2b00      	cmp	r3, #0
 8014806:	d013      	beq.n	8014830 <lv_label_create+0x220>
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	685b      	ldr	r3, [r3, #4]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d00f      	beq.n	8014830 <lv_label_create+0x220>
            int len = strlen(copy_ext->dot.tmp_ptr);
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	685b      	ldr	r3, [r3, #4]
 8014814:	4618      	mov	r0, r3
 8014816:	f7eb fd0f 	bl	8000238 <strlen>
 801481a:	4603      	mov	r3, r0
 801481c:	60bb      	str	r3, [r7, #8]
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
 801481e:	693b      	ldr	r3, [r7, #16]
 8014820:	685b      	ldr	r3, [r3, #4]
 8014822:	68ba      	ldr	r2, [r7, #8]
 8014824:	b292      	uxth	r2, r2
 8014826:	4619      	mov	r1, r3
 8014828:	6978      	ldr	r0, [r7, #20]
 801482a:	f001 fa83 	bl	8015d34 <lv_label_set_dot_tmp>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
 801482e:	e005      	b.n	801483c <lv_label_create+0x22c>
        } else {
            memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
 8014830:	693b      	ldr	r3, [r7, #16]
 8014832:	3304      	adds	r3, #4
 8014834:	68fa      	ldr	r2, [r7, #12]
 8014836:	3204      	adds	r2, #4
 8014838:	6812      	ldr	r2, [r2, #0]
 801483a:	601a      	str	r2, [r3, #0]
        }
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	7fdb      	ldrb	r3, [r3, #31]
 8014840:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8014844:	b2d9      	uxtb	r1, r3
 8014846:	693a      	ldr	r2, [r7, #16]
 8014848:	7fd3      	ldrb	r3, [r2, #31]
 801484a:	f361 0341 	bfi	r3, r1, #1, #1
 801484e:	77d3      	strb	r3, [r2, #31]
        ext->dot_end       = copy_ext->dot_end;
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	891a      	ldrh	r2, [r3, #8]
 8014854:	693b      	ldr	r3, [r7, #16]
 8014856:	811a      	strh	r2, [r3, #8]

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_label);
 8014858:	6978      	ldr	r0, [r7, #20]
 801485a:	f7f1 fc8e 	bl	800617a <lv_obj_refresh_style>
    }

    LV_LOG_INFO("label created");

    return new_label;
 801485e:	697b      	ldr	r3, [r7, #20]
}
 8014860:	4618      	mov	r0, r3
 8014862:	3718      	adds	r7, #24
 8014864:	46bd      	mov	sp, r7
 8014866:	bdb0      	pop	{r4, r5, r7, pc}
 8014868:	2000ad90 	.word	0x2000ad90
 801486c:	080151bd 	.word	0x080151bd
 8014870:	08015565 	.word	0x08015565
 8014874:	0801c824 	.word	0x0801c824

08014878 <lv_label_set_text>:
 * Set a new text for a label. Memory will be allocated to store the text by the label.
 * @param label pointer to a label object
 * @param text '\0' terminated character string. NULL to refresh with the current text.
 */
void lv_label_set_text(lv_obj_t * label, const char * text)
{
 8014878:	b590      	push	{r4, r7, lr}
 801487a:	b085      	sub	sp, #20
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
 8014880:	6039      	str	r1, [r7, #0]
    lv_obj_invalidate(label);
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f7f0 fd6a 	bl	800535c <lv_obj_invalidate>

    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014888:	6878      	ldr	r0, [r7, #4]
 801488a:	f7f2 f845 	bl	8006918 <lv_obj_get_ext_attr>
 801488e:	60f8      	str	r0, [r7, #12]

    /*If text is NULL then refresh */
    if(text == NULL) {
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d103      	bne.n	801489e <lv_label_set_text+0x26>
        lv_label_refr_text(label);
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f000 ff24 	bl	80156e4 <lv_label_refr_text>
        return;
 801489c:	e058      	b.n	8014950 <lv_label_set_text+0xd8>
    }

    if(ext->text == text) {
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	683a      	ldr	r2, [r7, #0]
 80148a4:	429a      	cmp	r2, r3
 80148a6:	d11a      	bne.n	80148de <lv_label_set_text+0x66>
        /*If set its own text then reallocate it (maybe its size changed)*/
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	681c      	ldr	r4, [r3, #0]
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	4618      	mov	r0, r3
 80148b2:	f7eb fcc1 	bl	8000238 <strlen>
 80148b6:	4603      	mov	r3, r0
 80148b8:	3301      	adds	r3, #1
 80148ba:	4619      	mov	r1, r3
 80148bc:	4620      	mov	r0, r4
 80148be:	f7fb fc85 	bl	80101cc <lv_mem_realloc>
 80148c2:	4602      	mov	r2, r0
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	601a      	str	r2, [r3, #0]
        lv_mem_assert(ext->text);
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d101      	bne.n	80148d4 <lv_label_set_text+0x5c>
 80148d0:	bf00      	nop
 80148d2:	e7fd      	b.n	80148d0 <lv_label_set_text+0x58>
        if(ext->text == NULL) return;
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d134      	bne.n	8014946 <lv_label_set_text+0xce>
 80148dc:	e038      	b.n	8014950 <lv_label_set_text+0xd8>
    } else {
        /*Allocate space for the new text*/
        uint32_t len = strlen(text) + 1;
 80148de:	6838      	ldr	r0, [r7, #0]
 80148e0:	f7eb fcaa 	bl	8000238 <strlen>
 80148e4:	4603      	mov	r3, r0
 80148e6:	3301      	adds	r3, #1
 80148e8:	60bb      	str	r3, [r7, #8]
        if(ext->text != NULL && ext->static_txt == 0) {
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d00e      	beq.n	8014910 <lv_label_set_text+0x98>
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	7f9b      	ldrb	r3, [r3, #30]
 80148f6:	f003 0308 	and.w	r3, r3, #8
 80148fa:	b2db      	uxtb	r3, r3
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d107      	bne.n	8014910 <lv_label_set_text+0x98>
            lv_mem_free(ext->text);
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	4618      	mov	r0, r3
 8014906:	f7fb fc15 	bl	8010134 <lv_mem_free>
            ext->text = NULL;
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	2200      	movs	r2, #0
 801490e:	601a      	str	r2, [r3, #0]
        }

        ext->text = lv_mem_alloc(len);
 8014910:	68b8      	ldr	r0, [r7, #8]
 8014912:	f7fb fbd5 	bl	80100c0 <lv_mem_alloc>
 8014916:	4602      	mov	r2, r0
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	601a      	str	r2, [r3, #0]
        lv_mem_assert(ext->text);
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d101      	bne.n	8014928 <lv_label_set_text+0xb0>
 8014924:	bf00      	nop
 8014926:	e7fd      	b.n	8014924 <lv_label_set_text+0xac>
        if(ext->text == NULL) return;
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d00e      	beq.n	801494e <lv_label_set_text+0xd6>

        strcpy(ext->text, text);
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	6839      	ldr	r1, [r7, #0]
 8014936:	4618      	mov	r0, r3
 8014938:	f007 f84f 	bl	801b9da <strcpy>
        ext->static_txt = 0; /*Now the text is dynamically allocated*/
 801493c:	68fa      	ldr	r2, [r7, #12]
 801493e:	7f93      	ldrb	r3, [r2, #30]
 8014940:	f36f 03c3 	bfc	r3, #3, #1
 8014944:	7793      	strb	r3, [r2, #30]
    }

    lv_label_refr_text(label);
 8014946:	6878      	ldr	r0, [r7, #4]
 8014948:	f000 fecc 	bl	80156e4 <lv_label_refr_text>
 801494c:	e000      	b.n	8014950 <lv_label_set_text+0xd8>
        if(ext->text == NULL) return;
 801494e:	bf00      	nop
}
 8014950:	3714      	adds	r7, #20
 8014952:	46bd      	mov	sp, r7
 8014954:	bd90      	pop	{r4, r7, pc}

08014956 <lv_label_set_static_text>:
 * has to be 'alive' while the label exist.
 * @param label pointer to a label object
 * @param text pointer to a text. NULL to refresh with the current text.
 */
void lv_label_set_static_text(lv_obj_t * label, const char * text)
{
 8014956:	b580      	push	{r7, lr}
 8014958:	b084      	sub	sp, #16
 801495a:	af00      	add	r7, sp, #0
 801495c:	6078      	str	r0, [r7, #4]
 801495e:	6039      	str	r1, [r7, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014960:	6878      	ldr	r0, [r7, #4]
 8014962:	f7f1 ffd9 	bl	8006918 <lv_obj_get_ext_attr>
 8014966:	60f8      	str	r0, [r7, #12]
    if(ext->static_txt == 0 && ext->text != NULL) {
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	7f9b      	ldrb	r3, [r3, #30]
 801496c:	f003 0308 	and.w	r3, r3, #8
 8014970:	b2db      	uxtb	r3, r3
 8014972:	2b00      	cmp	r3, #0
 8014974:	d10b      	bne.n	801498e <lv_label_set_static_text+0x38>
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d007      	beq.n	801498e <lv_label_set_static_text+0x38>
        lv_mem_free(ext->text);
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	4618      	mov	r0, r3
 8014984:	f7fb fbd6 	bl	8010134 <lv_mem_free>
        ext->text = NULL;
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	2200      	movs	r2, #0
 801498c:	601a      	str	r2, [r3, #0]
    }

    if(text != NULL) {
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d007      	beq.n	80149a4 <lv_label_set_static_text+0x4e>
        ext->static_txt = 1;
 8014994:	68fa      	ldr	r2, [r7, #12]
 8014996:	7f93      	ldrb	r3, [r2, #30]
 8014998:	f043 0308 	orr.w	r3, r3, #8
 801499c:	7793      	strb	r3, [r2, #30]
        ext->text       = (char *)text;
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	683a      	ldr	r2, [r7, #0]
 80149a2:	601a      	str	r2, [r3, #0]
    }

    lv_label_refr_text(label);
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f000 fe9d 	bl	80156e4 <lv_label_refr_text>
}
 80149aa:	bf00      	nop
 80149ac:	3710      	adds	r7, #16
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}
	...

080149b4 <lv_label_set_long_mode>:
 * @param long_mode the new mode from 'lv_label_long_mode' enum.
 *                  In LV_LONG_BREAK/LONG/ROLL the size of the label should be set AFTER this
 * function
 */
void lv_label_set_long_mode(lv_obj_t * label, lv_label_long_mode_t long_mode)
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b084      	sub	sp, #16
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	460b      	mov	r3, r1
 80149be:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80149c0:	6878      	ldr	r0, [r7, #4]
 80149c2:	f7f1 ffa9 	bl	8006918 <lv_obj_get_ext_attr>
 80149c6:	60f8      	str	r0, [r7, #12]

#if LV_USE_ANIMATION
    /*Delete the old animation (if exists)*/
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
 80149c8:	4924      	ldr	r1, [pc, #144]	@ (8014a5c <lv_label_set_long_mode+0xa8>)
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f7fa fb3a 	bl	800f044 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
 80149d0:	4923      	ldr	r1, [pc, #140]	@ (8014a60 <lv_label_set_long_mode+0xac>)
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f7fa fb36 	bl	800f044 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 80149d8:	4922      	ldr	r1, [pc, #136]	@ (8014a64 <lv_label_set_long_mode+0xb0>)
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f7fa fb32 	bl	800f044 <lv_anim_del>
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 80149e0:	4921      	ldr	r1, [pc, #132]	@ (8014a68 <lv_label_set_long_mode+0xb4>)
 80149e2:	6878      	ldr	r0, [r7, #4]
 80149e4:	f7fa fb2e 	bl	800f044 <lv_anim_del>
#endif
    ext->offset.x = 0;
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	2200      	movs	r2, #0
 80149ec:	815a      	strh	r2, [r3, #10]
    ext->offset.y = 0;
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	2200      	movs	r2, #0
 80149f2:	819a      	strh	r2, [r3, #12]

    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
 80149f4:	78fb      	ldrb	r3, [r7, #3]
 80149f6:	2b03      	cmp	r3, #3
 80149f8:	d005      	beq.n	8014a06 <lv_label_set_long_mode+0x52>
 80149fa:	78fb      	ldrb	r3, [r7, #3]
 80149fc:	2b04      	cmp	r3, #4
 80149fe:	d002      	beq.n	8014a06 <lv_label_set_long_mode+0x52>
 8014a00:	78fb      	ldrb	r3, [r7, #3]
 8014a02:	2b05      	cmp	r3, #5
 8014a04:	d105      	bne.n	8014a12 <lv_label_set_long_mode+0x5e>
        ext->expand = 1;
 8014a06:	68fa      	ldr	r2, [r7, #12]
 8014a08:	7f93      	ldrb	r3, [r2, #30]
 8014a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014a0e:	7793      	strb	r3, [r2, #30]
 8014a10:	e004      	b.n	8014a1c <lv_label_set_long_mode+0x68>
    else
        ext->expand = 0;
 8014a12:	68fa      	ldr	r2, [r7, #12]
 8014a14:	7f93      	ldrb	r3, [r2, #30]
 8014a16:	f36f 13c7 	bfc	r3, #7, #1
 8014a1a:	7793      	strb	r3, [r2, #30]

    /*Restore the character under the dots*/
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	7f9b      	ldrb	r3, [r3, #30]
 8014a20:	f003 0307 	and.w	r3, r3, #7
 8014a24:	b2db      	uxtb	r3, r3
 8014a26:	2b02      	cmp	r3, #2
 8014a28:	d108      	bne.n	8014a3c <lv_label_set_long_mode+0x88>
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	891b      	ldrh	r3, [r3, #8]
 8014a2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014a32:	4293      	cmp	r3, r2
 8014a34:	d002      	beq.n	8014a3c <lv_label_set_long_mode+0x88>
        lv_label_revert_dots(label);
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f001 f8fa 	bl	8015c30 <lv_label_revert_dots>
    }

    ext->long_mode = long_mode;
 8014a3c:	78fb      	ldrb	r3, [r7, #3]
 8014a3e:	f003 0307 	and.w	r3, r3, #7
 8014a42:	b2d9      	uxtb	r1, r3
 8014a44:	68fa      	ldr	r2, [r7, #12]
 8014a46:	7f93      	ldrb	r3, [r2, #30]
 8014a48:	f361 0302 	bfi	r3, r1, #0, #3
 8014a4c:	7793      	strb	r3, [r2, #30]
    lv_label_refr_text(label);
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f000 fe48 	bl	80156e4 <lv_label_refr_text>
}
 8014a54:	bf00      	nop
 8014a56:	3710      	adds	r7, #16
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd80      	pop	{r7, pc}
 8014a5c:	08005671 	.word	0x08005671
 8014a60:	0800569b 	.word	0x0800569b
 8014a64:	08015ce5 	.word	0x08015ce5
 8014a68:	08015d0d 	.word	0x08015d0d

08014a6c <lv_label_set_align>:
 * Set the align of the label (left or center)
 * @param label pointer to a label object
 * @param align 'LV_LABEL_ALIGN_LEFT' or 'LV_LABEL_ALIGN_LEFT'
 */
void lv_label_set_align(lv_obj_t * label, lv_label_align_t align)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b084      	sub	sp, #16
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
 8014a74:	460b      	mov	r3, r1
 8014a76:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f7f1 ff4d 	bl	8006918 <lv_obj_get_ext_attr>
 8014a7e:	60f8      	str	r0, [r7, #12]
    if(ext->align == align) return;
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	7f9b      	ldrb	r3, [r3, #30]
 8014a84:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8014a88:	b2db      	uxtb	r3, r3
 8014a8a:	461a      	mov	r2, r3
 8014a8c:	78fb      	ldrb	r3, [r7, #3]
 8014a8e:	429a      	cmp	r2, r3
 8014a90:	d00c      	beq.n	8014aac <lv_label_set_align+0x40>

    ext->align = align;
 8014a92:	78fb      	ldrb	r3, [r7, #3]
 8014a94:	f003 0303 	and.w	r3, r3, #3
 8014a98:	b2d9      	uxtb	r1, r3
 8014a9a:	68fa      	ldr	r2, [r7, #12]
 8014a9c:	7f93      	ldrb	r3, [r2, #30]
 8014a9e:	f361 1305 	bfi	r3, r1, #4, #2
 8014aa2:	7793      	strb	r3, [r2, #30]

    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
 8014aa4:	6878      	ldr	r0, [r7, #4]
 8014aa6:	f7f0 fc59 	bl	800535c <lv_obj_invalidate>
 8014aaa:	e000      	b.n	8014aae <lv_label_set_align+0x42>
    if(ext->align == align) return;
 8014aac:	bf00      	nop
                                 (lv_refr_label_text() not required)*/
}
 8014aae:	3710      	adds	r7, #16
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}

08014ab4 <lv_label_set_recolor>:
 * Enable the recoloring by in-line commands
 * @param label pointer to a label object
 * @param en true: enable recoloring, false: disable
 */
void lv_label_set_recolor(lv_obj_t * label, bool en)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b084      	sub	sp, #16
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
 8014abc:	460b      	mov	r3, r1
 8014abe:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014ac0:	6878      	ldr	r0, [r7, #4]
 8014ac2:	f7f1 ff29 	bl	8006918 <lv_obj_get_ext_attr>
 8014ac6:	60f8      	str	r0, [r7, #12]
    if(ext->recolor == en) return;
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	7f9b      	ldrb	r3, [r3, #30]
 8014acc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8014ad0:	b2db      	uxtb	r3, r3
 8014ad2:	78fa      	ldrb	r2, [r7, #3]
 8014ad4:	429a      	cmp	r2, r3
 8014ad6:	d011      	beq.n	8014afc <lv_label_set_recolor+0x48>

    ext->recolor = en == false ? 0 : 1;
 8014ad8:	78fb      	ldrb	r3, [r7, #3]
 8014ada:	f083 0301 	eor.w	r3, r3, #1
 8014ade:	b2db      	uxtb	r3, r3
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d001      	beq.n	8014ae8 <lv_label_set_recolor+0x34>
 8014ae4:	2100      	movs	r1, #0
 8014ae6:	e000      	b.n	8014aea <lv_label_set_recolor+0x36>
 8014ae8:	2101      	movs	r1, #1
 8014aea:	68fa      	ldr	r2, [r7, #12]
 8014aec:	7f93      	ldrb	r3, [r2, #30]
 8014aee:	f361 1386 	bfi	r3, r1, #6, #1
 8014af2:	7793      	strb	r3, [r2, #30]

    lv_label_refr_text(label); /*Refresh the text because the potential colo codes in text needs to
 8014af4:	6878      	ldr	r0, [r7, #4]
 8014af6:	f000 fdf5 	bl	80156e4 <lv_label_refr_text>
 8014afa:	e000      	b.n	8014afe <lv_label_set_recolor+0x4a>
    if(ext->recolor == en) return;
 8014afc:	bf00      	nop
                                  be hided or revealed*/
}
 8014afe:	3710      	adds	r7, #16
 8014b00:	46bd      	mov	sp, r7
 8014b02:	bd80      	pop	{r7, pc}

08014b04 <lv_label_set_body_draw>:
 * Set the label to draw (or not draw) background specified in its style's body
 * @param label pointer to a label object
 * @param en true: draw body; false: don't draw body
 */
void lv_label_set_body_draw(lv_obj_t * label, bool en)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b084      	sub	sp, #16
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
 8014b0c:	460b      	mov	r3, r1
 8014b0e:	70fb      	strb	r3, [r7, #3]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f7f1 ff01 	bl	8006918 <lv_obj_get_ext_attr>
 8014b16:	60f8      	str	r0, [r7, #12]
    if(ext->body_draw == en) return;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	7fdb      	ldrb	r3, [r3, #31]
 8014b1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8014b20:	b2db      	uxtb	r3, r3
 8014b22:	78fa      	ldrb	r2, [r7, #3]
 8014b24:	429a      	cmp	r2, r3
 8014b26:	d014      	beq.n	8014b52 <lv_label_set_body_draw+0x4e>

    ext->body_draw = en == false ? 0 : 1;
 8014b28:	78fb      	ldrb	r3, [r7, #3]
 8014b2a:	f083 0301 	eor.w	r3, r3, #1
 8014b2e:	b2db      	uxtb	r3, r3
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d001      	beq.n	8014b38 <lv_label_set_body_draw+0x34>
 8014b34:	2100      	movs	r1, #0
 8014b36:	e000      	b.n	8014b3a <lv_label_set_body_draw+0x36>
 8014b38:	2101      	movs	r1, #1
 8014b3a:	68fa      	ldr	r2, [r7, #12]
 8014b3c:	7fd3      	ldrb	r3, [r2, #31]
 8014b3e:	f361 0300 	bfi	r3, r1, #0, #1
 8014b42:	77d3      	strb	r3, [r2, #31]

    lv_obj_refresh_ext_draw_pad(label);
 8014b44:	6878      	ldr	r0, [r7, #4]
 8014b46:	f7f1 fc9b 	bl	8006480 <lv_obj_refresh_ext_draw_pad>

    lv_obj_invalidate(label);
 8014b4a:	6878      	ldr	r0, [r7, #4]
 8014b4c:	f7f0 fc06 	bl	800535c <lv_obj_invalidate>
 8014b50:	e000      	b.n	8014b54 <lv_label_set_body_draw+0x50>
    if(ext->body_draw == en) return;
 8014b52:	bf00      	nop
}
 8014b54:	3710      	adds	r7, #16
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}

08014b5a <lv_label_get_text>:
 * Get the text of a label
 * @param label pointer to a label object
 * @return the text of the label
 */
char * lv_label_get_text(const lv_obj_t * label)
{
 8014b5a:	b580      	push	{r7, lr}
 8014b5c:	b084      	sub	sp, #16
 8014b5e:	af00      	add	r7, sp, #0
 8014b60:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014b62:	6878      	ldr	r0, [r7, #4]
 8014b64:	f7f1 fed8 	bl	8006918 <lv_obj_get_ext_attr>
 8014b68:	60f8      	str	r0, [r7, #12]

    return ext->text;
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	681b      	ldr	r3, [r3, #0]
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	3710      	adds	r7, #16
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}

08014b76 <lv_label_get_long_mode>:
 * Get the long mode of a label
 * @param label pointer to a label object
 * @return the long mode
 */
lv_label_long_mode_t lv_label_get_long_mode(const lv_obj_t * label)
{
 8014b76:	b580      	push	{r7, lr}
 8014b78:	b084      	sub	sp, #16
 8014b7a:	af00      	add	r7, sp, #0
 8014b7c:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014b7e:	6878      	ldr	r0, [r7, #4]
 8014b80:	f7f1 feca 	bl	8006918 <lv_obj_get_ext_attr>
 8014b84:	60f8      	str	r0, [r7, #12]
    return ext->long_mode;
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	7f9b      	ldrb	r3, [r3, #30]
 8014b8a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8014b8e:	b2db      	uxtb	r3, r3
}
 8014b90:	4618      	mov	r0, r3
 8014b92:	3710      	adds	r7, #16
 8014b94:	46bd      	mov	sp, r7
 8014b96:	bd80      	pop	{r7, pc}

08014b98 <lv_label_get_align>:
 * Get the align attribute
 * @param label pointer to a label object
 * @return LV_LABEL_ALIGN_LEFT or LV_LABEL_ALIGN_CENTER
 */
lv_label_align_t lv_label_get_align(const lv_obj_t * label)
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b084      	sub	sp, #16
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014ba0:	6878      	ldr	r0, [r7, #4]
 8014ba2:	f7f1 feb9 	bl	8006918 <lv_obj_get_ext_attr>
 8014ba6:	60f8      	str	r0, [r7, #12]
    return ext->align;
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	7f9b      	ldrb	r3, [r3, #30]
 8014bac:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8014bb0:	b2db      	uxtb	r3, r3
}
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	3710      	adds	r7, #16
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	bd80      	pop	{r7, pc}

08014bba <lv_label_get_recolor>:
 * Get the recoloring attribute
 * @param label pointer to a label object
 * @return true: recoloring is enabled, false: disable
 */
bool lv_label_get_recolor(const lv_obj_t * label)
{
 8014bba:	b580      	push	{r7, lr}
 8014bbc:	b084      	sub	sp, #16
 8014bbe:	af00      	add	r7, sp, #0
 8014bc0:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f7f1 fea8 	bl	8006918 <lv_obj_get_ext_attr>
 8014bc8:	60f8      	str	r0, [r7, #12]
    return ext->recolor == 0 ? false : true;
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	7f9b      	ldrb	r3, [r3, #30]
 8014bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014bd2:	b2db      	uxtb	r3, r3
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	bf14      	ite	ne
 8014bd8:	2301      	movne	r3, #1
 8014bda:	2300      	moveq	r3, #0
 8014bdc:	b2db      	uxtb	r3, r3
}
 8014bde:	4618      	mov	r0, r3
 8014be0:	3710      	adds	r7, #16
 8014be2:	46bd      	mov	sp, r7
 8014be4:	bd80      	pop	{r7, pc}

08014be6 <lv_label_get_body_draw>:
 * Get the body draw attribute
 * @param label pointer to a label object
 * @return true: draw body; false: don't draw body
 */
bool lv_label_get_body_draw(const lv_obj_t * label)
{
 8014be6:	b580      	push	{r7, lr}
 8014be8:	b084      	sub	sp, #16
 8014bea:	af00      	add	r7, sp, #0
 8014bec:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	f7f1 fe92 	bl	8006918 <lv_obj_get_ext_attr>
 8014bf4:	60f8      	str	r0, [r7, #12]
    return ext->body_draw == 0 ? false : true;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	7fdb      	ldrb	r3, [r3, #31]
 8014bfa:	f003 0301 	and.w	r3, r3, #1
 8014bfe:	b2db      	uxtb	r3, r3
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	bf14      	ite	ne
 8014c04:	2301      	movne	r3, #1
 8014c06:	2300      	moveq	r3, #0
 8014c08:	b2db      	uxtb	r3, r3
}
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	3710      	adds	r7, #16
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd80      	pop	{r7, pc}
	...

08014c14 <lv_label_get_letter_pos>:
 * @param index index of the letter [0 ... text length]. Expressed in character index, not byte
 * index (different in UTF-8)
 * @param pos store the result here (E.g. index = 0 gives 0;0 coordinates)
 */
void lv_label_get_letter_pos(const lv_obj_t * label, uint16_t index, lv_point_t * pos)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b090      	sub	sp, #64	@ 0x40
 8014c18:	af02      	add	r7, sp, #8
 8014c1a:	60f8      	str	r0, [r7, #12]
 8014c1c:	460b      	mov	r3, r1
 8014c1e:	607a      	str	r2, [r7, #4]
 8014c20:	817b      	strh	r3, [r7, #10]
    const char * txt         = lv_label_get_text(label);
 8014c22:	68f8      	ldr	r0, [r7, #12]
 8014c24:	f7ff ff99 	bl	8014b5a <lv_label_get_text>
 8014c28:	6278      	str	r0, [r7, #36]	@ 0x24
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 8014c2a:	68f8      	ldr	r0, [r7, #12]
 8014c2c:	f7f1 fe74 	bl	8006918 <lv_obj_get_ext_attr>
 8014c30:	6238      	str	r0, [r7, #32]
    uint32_t line_start      = 0;
 8014c32:	2300      	movs	r3, #0
 8014c34:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t new_line_start  = 0;
 8014c36:	2300      	movs	r3, #0
 8014c38:	633b      	str	r3, [r7, #48]	@ 0x30
    lv_coord_t max_w         = lv_obj_get_width(label);
 8014c3a:	68f8      	ldr	r0, [r7, #12]
 8014c3c:	f7f1 fceb 	bl	8006616 <lv_obj_get_width>
 8014c40:	4603      	mov	r3, r0
 8014c42:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    const lv_style_t * style = lv_obj_get_style(label);
 8014c44:	68f8      	ldr	r0, [r7, #12]
 8014c46:	f7f1 fd51 	bl	80066ec <lv_obj_get_style>
 8014c4a:	61f8      	str	r0, [r7, #28]
    const lv_font_t * font   = style->text.font;
 8014c4c:	69fb      	ldr	r3, [r7, #28]
 8014c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c50:	61bb      	str	r3, [r7, #24]
    uint8_t letter_height    = lv_font_get_line_height(font);
 8014c52:	69b8      	ldr	r0, [r7, #24]
 8014c54:	f7ff fc88 	bl	8014568 <lv_font_get_line_height>
 8014c58:	4603      	mov	r3, r0
 8014c5a:	75fb      	strb	r3, [r7, #23]
    lv_coord_t y             = 0;
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 8014c60:	2300      	movs	r3, #0
 8014c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8014c66:	6a3b      	ldr	r3, [r7, #32]
 8014c68:	7f9b      	ldrb	r3, [r3, #30]
 8014c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014c6e:	b2db      	uxtb	r3, r3
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d005      	beq.n	8014c80 <lv_label_get_letter_pos+0x6c>
 8014c74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014c78:	f043 0301 	orr.w	r3, r3, #1
 8014c7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8014c80:	6a3b      	ldr	r3, [r7, #32]
 8014c82:	7f9b      	ldrb	r3, [r3, #30]
 8014c84:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8014c88:	b2db      	uxtb	r3, r3
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d005      	beq.n	8014c9a <lv_label_get_letter_pos+0x86>
 8014c8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014c92:	f043 0302 	orr.w	r3, r3, #2
 8014c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8014c9a:	6a3b      	ldr	r3, [r7, #32]
 8014c9c:	7f9b      	ldrb	r3, [r3, #30]
 8014c9e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8014ca2:	b2db      	uxtb	r3, r3
 8014ca4:	2b10      	cmp	r3, #16
 8014ca6:	d105      	bne.n	8014cb4 <lv_label_get_letter_pos+0xa0>
 8014ca8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014cac:	f043 0304 	orr.w	r3, r3, #4
 8014cb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    /*If the width will be expanded  the set the max length to very big */
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 8014cb4:	6a3b      	ldr	r3, [r7, #32]
 8014cb6:	7f9b      	ldrb	r3, [r3, #30]
 8014cb8:	f003 0307 	and.w	r3, r3, #7
 8014cbc:	b2db      	uxtb	r3, r3
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d102      	bne.n	8014cc8 <lv_label_get_letter_pos+0xb4>
        max_w = LV_COORD_MAX;
 8014cc2:	f647 4318 	movw	r3, #31768	@ 0x7c18
 8014cc6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    }

    index = lv_txt_encoded_get_byte_id(txt, index);
 8014cc8:	4b72      	ldr	r3, [pc, #456]	@ (8014e94 <lv_label_get_letter_pos+0x280>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	897a      	ldrh	r2, [r7, #10]
 8014cce:	4611      	mov	r1, r2
 8014cd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014cd2:	4798      	blx	r3
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	817b      	strh	r3, [r7, #10]

    /*Search the line of the index letter */;
    while(txt[new_line_start] != '\0') {
 8014cd8:	e02b      	b.n	8014d32 <lv_label_get_letter_pos+0x11e>
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 8014cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014cde:	18d0      	adds	r0, r2, r3
 8014ce0:	69fb      	ldr	r3, [r7, #28]
 8014ce2:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 8014ce6:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	@ 0x2e
 8014cea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014cee:	9300      	str	r3, [sp, #0]
 8014cf0:	460b      	mov	r3, r1
 8014cf2:	69b9      	ldr	r1, [r7, #24]
 8014cf4:	f7fb feae 	bl	8010a54 <lv_txt_get_next_line>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	461a      	mov	r2, r3
 8014cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cfe:	4413      	add	r3, r2
 8014d00:	633b      	str	r3, [r7, #48]	@ 0x30
        if(index < new_line_start || txt[new_line_start] == '\0')
 8014d02:	897b      	ldrh	r3, [r7, #10]
 8014d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d819      	bhi.n	8014d3e <lv_label_get_letter_pos+0x12a>
 8014d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d0e:	4413      	add	r3, r2
 8014d10:	781b      	ldrb	r3, [r3, #0]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d013      	beq.n	8014d3e <lv_label_get_letter_pos+0x12a>
            break; /*The line of 'index' letter begins at 'line_start'*/

        y += letter_height + style->text.line_space;
 8014d16:	7dfb      	ldrb	r3, [r7, #23]
 8014d18:	b29a      	uxth	r2, r3
 8014d1a:	69fb      	ldr	r3, [r7, #28]
 8014d1c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8014d20:	b29b      	uxth	r3, r3
 8014d22:	4413      	add	r3, r2
 8014d24:	b29a      	uxth	r2, r3
 8014d26:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014d28:	4413      	add	r3, r2
 8014d2a:	b29b      	uxth	r3, r3
 8014d2c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        line_start = new_line_start;
 8014d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d30:	637b      	str	r3, [r7, #52]	@ 0x34
    while(txt[new_line_start] != '\0') {
 8014d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d36:	4413      	add	r3, r2
 8014d38:	781b      	ldrb	r3, [r3, #0]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d1cd      	bne.n	8014cda <lv_label_get_letter_pos+0xc6>
    }

    /*If the last character is line break then go to the next line*/
    if(index > 0) {
 8014d3e:	897b      	ldrh	r3, [r7, #10]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d021      	beq.n	8014d88 <lv_label_get_letter_pos+0x174>
        if((txt[index - 1] == '\n' || txt[index - 1] == '\r') && txt[index] == '\0') {
 8014d44:	897b      	ldrh	r3, [r7, #10]
 8014d46:	3b01      	subs	r3, #1
 8014d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d4a:	4413      	add	r3, r2
 8014d4c:	781b      	ldrb	r3, [r3, #0]
 8014d4e:	2b0a      	cmp	r3, #10
 8014d50:	d006      	beq.n	8014d60 <lv_label_get_letter_pos+0x14c>
 8014d52:	897b      	ldrh	r3, [r7, #10]
 8014d54:	3b01      	subs	r3, #1
 8014d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d58:	4413      	add	r3, r2
 8014d5a:	781b      	ldrb	r3, [r3, #0]
 8014d5c:	2b0d      	cmp	r3, #13
 8014d5e:	d113      	bne.n	8014d88 <lv_label_get_letter_pos+0x174>
 8014d60:	897b      	ldrh	r3, [r7, #10]
 8014d62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d64:	4413      	add	r3, r2
 8014d66:	781b      	ldrb	r3, [r3, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d10d      	bne.n	8014d88 <lv_label_get_letter_pos+0x174>
            y += letter_height + style->text.line_space;
 8014d6c:	7dfb      	ldrb	r3, [r7, #23]
 8014d6e:	b29a      	uxth	r2, r3
 8014d70:	69fb      	ldr	r3, [r7, #28]
 8014d72:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8014d76:	b29b      	uxth	r3, r3
 8014d78:	4413      	add	r3, r2
 8014d7a:	b29a      	uxth	r2, r3
 8014d7c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014d7e:	4413      	add	r3, r2
 8014d80:	b29b      	uxth	r3, r3
 8014d82:	85bb      	strh	r3, [r7, #44]	@ 0x2c
            line_start = index;
 8014d84:	897b      	ldrh	r3, [r7, #10]
 8014d86:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /*Calculate the x coordinate*/
    lv_coord_t x = lv_txt_get_width(&txt[line_start], index - line_start, font, style->text.letter_space, flag);
 8014d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d8c:	18d0      	adds	r0, r2, r3
 8014d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d90:	b29b      	uxth	r3, r3
 8014d92:	897a      	ldrh	r2, [r7, #10]
 8014d94:	1ad3      	subs	r3, r2, r3
 8014d96:	b299      	uxth	r1, r3
 8014d98:	69fb      	ldr	r3, [r7, #28]
 8014d9a:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 8014d9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014da2:	9300      	str	r3, [sp, #0]
 8014da4:	4613      	mov	r3, r2
 8014da6:	69ba      	ldr	r2, [r7, #24]
 8014da8:	f7fb ff08 	bl	8010bbc <lv_txt_get_width>
 8014dac:	4603      	mov	r3, r0
 8014dae:	853b      	strh	r3, [r7, #40]	@ 0x28

    if(index != line_start) x += style->text.letter_space;
 8014db0:	897b      	ldrh	r3, [r7, #10]
 8014db2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014db4:	429a      	cmp	r2, r3
 8014db6:	d007      	beq.n	8014dc8 <lv_label_get_letter_pos+0x1b4>
 8014db8:	69fb      	ldr	r3, [r7, #28]
 8014dba:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8014dbe:	b29a      	uxth	r2, r3
 8014dc0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014dc2:	4413      	add	r3, r2
 8014dc4:	b29b      	uxth	r3, r3
 8014dc6:	853b      	strh	r3, [r7, #40]	@ 0x28

    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 8014dc8:	6a3b      	ldr	r3, [r7, #32]
 8014dca:	7f9b      	ldrb	r3, [r3, #30]
 8014dcc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8014dd0:	b2db      	uxtb	r3, r3
 8014dd2:	2b10      	cmp	r3, #16
 8014dd4:	d12a      	bne.n	8014e2c <lv_label_get_letter_pos+0x218>
        lv_coord_t line_w;
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 8014dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014dda:	18d0      	adds	r0, r2, r3
 8014ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dde:	b29a      	uxth	r2, r3
 8014de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014de2:	b29b      	uxth	r3, r3
 8014de4:	1ad3      	subs	r3, r2, r3
 8014de6:	b299      	uxth	r1, r3
 8014de8:	69fb      	ldr	r3, [r7, #28]
 8014dea:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 8014dee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014df2:	9300      	str	r3, [sp, #0]
 8014df4:	4613      	mov	r3, r2
 8014df6:	69ba      	ldr	r2, [r7, #24]
 8014df8:	f7fb fee0 	bl	8010bbc <lv_txt_get_width>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	827b      	strh	r3, [r7, #18]
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 8014e00:	68f8      	ldr	r0, [r7, #12]
 8014e02:	f7f1 fc08 	bl	8006616 <lv_obj_get_width>
 8014e06:	4603      	mov	r3, r0
 8014e08:	0fda      	lsrs	r2, r3, #31
 8014e0a:	4413      	add	r3, r2
 8014e0c:	105b      	asrs	r3, r3, #1
 8014e0e:	b21b      	sxth	r3, r3
 8014e10:	4619      	mov	r1, r3
 8014e12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014e16:	0fda      	lsrs	r2, r3, #31
 8014e18:	4413      	add	r3, r2
 8014e1a:	105b      	asrs	r3, r3, #1
 8014e1c:	b21b      	sxth	r3, r3
 8014e1e:	1acb      	subs	r3, r1, r3
 8014e20:	b29a      	uxth	r2, r3
 8014e22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014e24:	4413      	add	r3, r2
 8014e26:	b29b      	uxth	r3, r3
 8014e28:	853b      	strh	r3, [r7, #40]	@ 0x28
 8014e2a:	e028      	b.n	8014e7e <lv_label_get_letter_pos+0x26a>

    } else if(ext->align == LV_LABEL_ALIGN_RIGHT) {
 8014e2c:	6a3b      	ldr	r3, [r7, #32]
 8014e2e:	7f9b      	ldrb	r3, [r3, #30]
 8014e30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8014e34:	b2db      	uxtb	r3, r3
 8014e36:	2b20      	cmp	r3, #32
 8014e38:	d121      	bne.n	8014e7e <lv_label_get_letter_pos+0x26a>
        lv_coord_t line_w;
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 8014e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e3e:	18d0      	adds	r0, r2, r3
 8014e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e42:	b29a      	uxth	r2, r3
 8014e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e46:	b29b      	uxth	r3, r3
 8014e48:	1ad3      	subs	r3, r2, r3
 8014e4a:	b299      	uxth	r1, r3
 8014e4c:	69fb      	ldr	r3, [r7, #28]
 8014e4e:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 8014e52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8014e56:	9300      	str	r3, [sp, #0]
 8014e58:	4613      	mov	r3, r2
 8014e5a:	69ba      	ldr	r2, [r7, #24]
 8014e5c:	f7fb feae 	bl	8010bbc <lv_txt_get_width>
 8014e60:	4603      	mov	r3, r0
 8014e62:	82bb      	strh	r3, [r7, #20]

        x += lv_obj_get_width(label) - line_w;
 8014e64:	68f8      	ldr	r0, [r7, #12]
 8014e66:	f7f1 fbd6 	bl	8006616 <lv_obj_get_width>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8014e72:	1ad3      	subs	r3, r2, r3
 8014e74:	b29a      	uxth	r2, r3
 8014e76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014e78:	4413      	add	r3, r2
 8014e7a:	b29b      	uxth	r3, r3
 8014e7c:	853b      	strh	r3, [r7, #40]	@ 0x28
    }
    pos->x = x;
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8014e82:	801a      	strh	r2, [r3, #0]
    pos->y = y;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8014e88:	805a      	strh	r2, [r3, #2]
}
 8014e8a:	bf00      	nop
 8014e8c:	3738      	adds	r7, #56	@ 0x38
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd80      	pop	{r7, pc}
 8014e92:	bf00      	nop
 8014e94:	20000ca8 	.word	0x20000ca8

08014e98 <lv_label_get_letter_on>:
 * @param pos pointer to point with coordinates on a the label
 * @return the index of the letter on the 'pos_p' point (E.g. on 0;0 is the 0. letter)
 * Expressed in character index and not byte index (different in UTF-8)
 */
uint16_t lv_label_get_letter_on(const lv_obj_t * label, lv_point_t * pos)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b092      	sub	sp, #72	@ 0x48
 8014e9c:	af02      	add	r7, sp, #8
 8014e9e:	6078      	str	r0, [r7, #4]
 8014ea0:	6039      	str	r1, [r7, #0]
    const char * txt         = lv_label_get_text(label);
 8014ea2:	6878      	ldr	r0, [r7, #4]
 8014ea4:	f7ff fe59 	bl	8014b5a <lv_label_get_text>
 8014ea8:	62b8      	str	r0, [r7, #40]	@ 0x28
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f7f1 fd34 	bl	8006918 <lv_obj_get_ext_attr>
 8014eb0:	6278      	str	r0, [r7, #36]	@ 0x24
    uint32_t line_start      = 0;
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t new_line_start  = 0;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
    lv_coord_t max_w         = lv_obj_get_width(label);
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f7f1 fbab 	bl	8006616 <lv_obj_get_width>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	86fb      	strh	r3, [r7, #54]	@ 0x36
    const lv_style_t * style = lv_obj_get_style(label);
 8014ec4:	6878      	ldr	r0, [r7, #4]
 8014ec6:	f7f1 fc11 	bl	80066ec <lv_obj_get_style>
 8014eca:	6238      	str	r0, [r7, #32]
    const lv_font_t * font   = style->text.font;
 8014ecc:	6a3b      	ldr	r3, [r7, #32]
 8014ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ed0:	61fb      	str	r3, [r7, #28]
    uint8_t letter_height    = lv_font_get_line_height(font);
 8014ed2:	69f8      	ldr	r0, [r7, #28]
 8014ed4:	f7ff fb48 	bl	8014568 <lv_font_get_line_height>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	76fb      	strb	r3, [r7, #27]
    lv_coord_t y             = 0;
 8014edc:	2300      	movs	r3, #0
 8014ede:	86bb      	strh	r3, [r7, #52]	@ 0x34
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 8014ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ee8:	7f9b      	ldrb	r3, [r3, #30]
 8014eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014eee:	b2db      	uxtb	r3, r3
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d005      	beq.n	8014f00 <lv_label_get_letter_on+0x68>
 8014ef4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014ef8:	f043 0301 	orr.w	r3, r3, #1
 8014efc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8014f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f02:	7f9b      	ldrb	r3, [r3, #30]
 8014f04:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8014f08:	b2db      	uxtb	r3, r3
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d005      	beq.n	8014f1a <lv_label_get_letter_on+0x82>
 8014f0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014f12:	f043 0302 	orr.w	r3, r3, #2
 8014f16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 8014f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f1c:	7f9b      	ldrb	r3, [r3, #30]
 8014f1e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8014f22:	b2db      	uxtb	r3, r3
 8014f24:	2b10      	cmp	r3, #16
 8014f26:	d105      	bne.n	8014f34 <lv_label_get_letter_on+0x9c>
 8014f28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014f2c:	f043 0304 	orr.w	r3, r3, #4
 8014f30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    /*If the width will be expanded set the max length to very big */
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 8014f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f36:	7f9b      	ldrb	r3, [r3, #30]
 8014f38:	f003 0307 	and.w	r3, r3, #7
 8014f3c:	b2db      	uxtb	r3, r3
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d12f      	bne.n	8014fa2 <lv_label_get_letter_on+0x10a>
        max_w = LV_COORD_MAX;
 8014f42:	f647 4318 	movw	r3, #31768	@ 0x7c18
 8014f46:	86fb      	strh	r3, [r7, #54]	@ 0x36
    }

    /*Search the line of the index letter */;
    while(txt[line_start] != '\0') {
 8014f48:	e02b      	b.n	8014fa2 <lv_label_get_letter_on+0x10a>
        new_line_start += lv_txt_get_next_line(&txt[line_start], font, style->text.letter_space, max_w, flag);
 8014f4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f4e:	18d0      	adds	r0, r2, r3
 8014f50:	6a3b      	ldr	r3, [r7, #32]
 8014f52:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 8014f56:	f9b7 1036 	ldrsh.w	r1, [r7, #54]	@ 0x36
 8014f5a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014f5e:	9300      	str	r3, [sp, #0]
 8014f60:	460b      	mov	r3, r1
 8014f62:	69f9      	ldr	r1, [r7, #28]
 8014f64:	f7fb fd76 	bl	8010a54 <lv_txt_get_next_line>
 8014f68:	4603      	mov	r3, r0
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f6e:	4413      	add	r3, r2
 8014f70:	63bb      	str	r3, [r7, #56]	@ 0x38

        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014f78:	4619      	mov	r1, r3
 8014f7a:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	@ 0x34
 8014f7e:	7efb      	ldrb	r3, [r7, #27]
 8014f80:	4413      	add	r3, r2
 8014f82:	4299      	cmp	r1, r3
 8014f84:	dd14      	ble.n	8014fb0 <lv_label_get_letter_on+0x118>
        y += letter_height + style->text.line_space;
 8014f86:	7efb      	ldrb	r3, [r7, #27]
 8014f88:	b29a      	uxth	r2, r3
 8014f8a:	6a3b      	ldr	r3, [r7, #32]
 8014f8c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8014f90:	b29b      	uxth	r3, r3
 8014f92:	4413      	add	r3, r2
 8014f94:	b29a      	uxth	r2, r3
 8014f96:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014f98:	4413      	add	r3, r2
 8014f9a:	b29b      	uxth	r3, r3
 8014f9c:	86bb      	strh	r3, [r7, #52]	@ 0x34

        line_start = new_line_start;
 8014f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(txt[line_start] != '\0') {
 8014fa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014fa6:	4413      	add	r3, r2
 8014fa8:	781b      	ldrb	r3, [r3, #0]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d1cd      	bne.n	8014f4a <lv_label_get_letter_on+0xb2>
 8014fae:	e000      	b.n	8014fb2 <lv_label_get_letter_on+0x11a>
        if(pos->y <= y + letter_height) break; /*The line is found (stored in 'line_start')*/
 8014fb0:	bf00      	nop
    }

    /*Calculate the x coordinate*/
    lv_coord_t x = 0;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	863b      	strh	r3, [r7, #48]	@ 0x30
    if(ext->align == LV_LABEL_ALIGN_CENTER) {
 8014fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fb8:	7f9b      	ldrb	r3, [r3, #30]
 8014fba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8014fbe:	b2db      	uxtb	r3, r3
 8014fc0:	2b10      	cmp	r3, #16
 8014fc2:	d129      	bne.n	8015018 <lv_label_get_letter_on+0x180>
        lv_coord_t line_w;
        line_w = lv_txt_get_width(&txt[line_start], new_line_start - line_start, font, style->text.letter_space, flag);
 8014fc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014fc8:	18d0      	adds	r0, r2, r3
 8014fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fcc:	b29a      	uxth	r2, r3
 8014fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014fd0:	b29b      	uxth	r3, r3
 8014fd2:	1ad3      	subs	r3, r2, r3
 8014fd4:	b299      	uxth	r1, r3
 8014fd6:	6a3b      	ldr	r3, [r7, #32]
 8014fd8:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	@ 0x28
 8014fdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014fe0:	9300      	str	r3, [sp, #0]
 8014fe2:	4613      	mov	r3, r2
 8014fe4:	69fa      	ldr	r2, [r7, #28]
 8014fe6:	f7fb fde9 	bl	8010bbc <lv_txt_get_width>
 8014fea:	4603      	mov	r3, r0
 8014fec:	833b      	strh	r3, [r7, #24]
        x += lv_obj_get_width(label) / 2 - line_w / 2;
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f7f1 fb11 	bl	8006616 <lv_obj_get_width>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	0fda      	lsrs	r2, r3, #31
 8014ff8:	4413      	add	r3, r2
 8014ffa:	105b      	asrs	r3, r3, #1
 8014ffc:	b21b      	sxth	r3, r3
 8014ffe:	4619      	mov	r1, r3
 8015000:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8015004:	0fda      	lsrs	r2, r3, #31
 8015006:	4413      	add	r3, r2
 8015008:	105b      	asrs	r3, r3, #1
 801500a:	b21b      	sxth	r3, r3
 801500c:	1acb      	subs	r3, r1, r3
 801500e:	b29a      	uxth	r2, r3
 8015010:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015012:	4413      	add	r3, r2
 8015014:	b29b      	uxth	r3, r3
 8015016:	863b      	strh	r3, [r7, #48]	@ 0x30
    }

    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
 8015018:	2300      	movs	r3, #0
 801501a:	73fb      	strb	r3, [r7, #15]

    uint32_t i         = line_start;
 801501c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801501e:	60bb      	str	r3, [r7, #8]
    uint32_t i_current = i;
 8015020:	68bb      	ldr	r3, [r7, #8]
 8015022:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t letter;
    uint32_t letter_next;

    if(new_line_start > 0) {
 8015024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015026:	2b00      	cmp	r3, #0
 8015028:	d04b      	beq.n	80150c2 <lv_label_get_letter_on+0x22a>
        while(i <= new_line_start - 1) {
 801502a:	e045      	b.n	80150b8 <lv_label_get_letter_on+0x220>
            /* Get the current letter.
             * Be careful 'i' already points to the next character*/
            letter = lv_txt_encoded_next(txt, &i);
 801502c:	4b2b      	ldr	r3, [pc, #172]	@ (80150dc <lv_label_get_letter_on+0x244>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	f107 0208 	add.w	r2, r7, #8
 8015034:	4611      	mov	r1, r2
 8015036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015038:	4798      	blx	r3
 801503a:	6178      	str	r0, [r7, #20]

            /*Get the next letter too for kerning*/
            letter_next = lv_txt_encoded_next(&txt[i], NULL);
 801503c:	4b27      	ldr	r3, [pc, #156]	@ (80150dc <lv_label_get_letter_on+0x244>)
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	68ba      	ldr	r2, [r7, #8]
 8015042:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015044:	440a      	add	r2, r1
 8015046:	2100      	movs	r1, #0
 8015048:	4610      	mov	r0, r2
 801504a:	4798      	blx	r3
 801504c:	6138      	str	r0, [r7, #16]

            /*Handle the recolor command*/
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
 801504e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015052:	f003 0301 	and.w	r3, r3, #1
 8015056:	2b00      	cmp	r3, #0
 8015058:	d00d      	beq.n	8015076 <lv_label_get_letter_on+0x1de>
                if(lv_txt_is_cmd(&cmd_state, txt[i]) != false) {
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801505e:	4413      	add	r3, r2
 8015060:	781b      	ldrb	r3, [r3, #0]
 8015062:	461a      	mov	r2, r3
 8015064:	f107 030f 	add.w	r3, r7, #15
 8015068:	4611      	mov	r1, r2
 801506a:	4618      	mov	r0, r3
 801506c:	f7fb fe10 	bl	8010c90 <lv_txt_is_cmd>
 8015070:	4603      	mov	r3, r0
 8015072:	2b00      	cmp	r3, #0
 8015074:	d11f      	bne.n	80150b6 <lv_label_get_letter_on+0x21e>
                    continue; /*Skip the letter is it is part of a command*/
                }
            }

            x += lv_font_get_glyph_width(font, letter, letter_next);
 8015076:	693a      	ldr	r2, [r7, #16]
 8015078:	6979      	ldr	r1, [r7, #20]
 801507a:	69f8      	ldr	r0, [r7, #28]
 801507c:	f7f9 f9cc 	bl	800e418 <lv_font_get_glyph_width>
 8015080:	4603      	mov	r3, r0
 8015082:	461a      	mov	r2, r3
 8015084:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015086:	4413      	add	r3, r2
 8015088:	b29b      	uxth	r3, r3
 801508a:	863b      	strh	r3, [r7, #48]	@ 0x30
            if(pos->x < x) {
 801508c:	683b      	ldr	r3, [r7, #0]
 801508e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015092:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 8015096:	429a      	cmp	r2, r3
 8015098:	dd02      	ble.n	80150a0 <lv_label_get_letter_on+0x208>
                i = i_current;
 801509a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801509c:	60bb      	str	r3, [r7, #8]
                break;
 801509e:	e010      	b.n	80150c2 <lv_label_get_letter_on+0x22a>
            }
            x += style->text.letter_space;
 80150a0:	6a3b      	ldr	r3, [r7, #32]
 80150a2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 80150a6:	b29a      	uxth	r2, r3
 80150a8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80150aa:	4413      	add	r3, r2
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	863b      	strh	r3, [r7, #48]	@ 0x30
            i_current = i;
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80150b4:	e000      	b.n	80150b8 <lv_label_get_letter_on+0x220>
                    continue; /*Skip the letter is it is part of a command*/
 80150b6:	bf00      	nop
        while(i <= new_line_start - 1) {
 80150b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80150ba:	1e5a      	subs	r2, r3, #1
 80150bc:	68bb      	ldr	r3, [r7, #8]
 80150be:	429a      	cmp	r2, r3
 80150c0:	d2b4      	bcs.n	801502c <lv_label_get_letter_on+0x194>
        }
    }

    return lv_encoded_get_char_id(txt, i);
 80150c2:	4b07      	ldr	r3, [pc, #28]	@ (80150e0 <lv_label_get_letter_on+0x248>)
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	68ba      	ldr	r2, [r7, #8]
 80150c8:	4611      	mov	r1, r2
 80150ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80150cc:	4798      	blx	r3
 80150ce:	4603      	mov	r3, r0
 80150d0:	b29b      	uxth	r3, r3
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	3740      	adds	r7, #64	@ 0x40
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd80      	pop	{r7, pc}
 80150da:	bf00      	nop
 80150dc:	20000ca0 	.word	0x20000ca0
 80150e0:	20000cac 	.word	0x20000cac

080150e4 <lv_label_get_text_sel_start>:
 * @brief Get the selection start index.
 * @param label pointer to a label object.
 * @return selection start index. `LV_LABEL_TXT_SEL_OFF` if nothing is selected.
 */
uint16_t lv_label_get_text_sel_start(const lv_obj_t * label)
{
 80150e4:	b480      	push	{r7}
 80150e6:	b083      	sub	sp, #12
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
    return ext->txt_sel_start;

#else
    (void)label;    /*Unused*/
    return LV_LABEL_TEXT_SEL_OFF;
 80150ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
#endif
}
 80150f0:	4618      	mov	r0, r3
 80150f2:	370c      	adds	r7, #12
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bc80      	pop	{r7}
 80150f8:	4770      	bx	lr

080150fa <lv_label_get_text_sel_end>:
 * @brief Get the selection end index.
 * @param label pointer to a label object.
 * @return selection end index. `LV_LABEL_TXT_SEL_OFF` if nothing is selected.
 */
uint16_t lv_label_get_text_sel_end(const lv_obj_t * label)
{
 80150fa:	b480      	push	{r7}
 80150fc:	b083      	sub	sp, #12
 80150fe:	af00      	add	r7, sp, #0
 8015100:	6078      	str	r0, [r7, #4]
#if LV_LABEL_TEXT_SEL
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
    return ext->txt_sel_end;
#else
    (void)label; /*Unused*/
    return LV_LABEL_TEXT_SEL_OFF;
 8015102:	f64f 73ff 	movw	r3, #65535	@ 0xffff
#endif
}
 8015106:	4618      	mov	r0, r3
 8015108:	370c      	adds	r7, #12
 801510a:	46bd      	mov	sp, r7
 801510c:	bc80      	pop	{r7}
 801510e:	4770      	bx	lr

08015110 <lv_label_ins_text>:
 * @param pos character index to insert. Expressed in character index and not byte index (Different
 * in UTF-8) 0: before first char. LV_LABEL_POS_LAST: after last char.
 * @param txt pointer to the text to insert
 */
void lv_label_ins_text(lv_obj_t * label, uint32_t pos, const char * txt)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b088      	sub	sp, #32
 8015114:	af00      	add	r7, sp, #0
 8015116:	60f8      	str	r0, [r7, #12]
 8015118:	60b9      	str	r1, [r7, #8]
 801511a:	607a      	str	r2, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801511c:	68f8      	ldr	r0, [r7, #12]
 801511e:	f7f1 fbfb 	bl	8006918 <lv_obj_get_ext_attr>
 8015122:	61f8      	str	r0, [r7, #28]

    /*Can not append to static text*/
    if(ext->static_txt != 0) return;
 8015124:	69fb      	ldr	r3, [r7, #28]
 8015126:	7f9b      	ldrb	r3, [r3, #30]
 8015128:	f003 0308 	and.w	r3, r3, #8
 801512c:	b2db      	uxtb	r3, r3
 801512e:	2b00      	cmp	r3, #0
 8015130:	d13c      	bne.n	80151ac <lv_label_ins_text+0x9c>

    lv_obj_invalidate(label);
 8015132:	68f8      	ldr	r0, [r7, #12]
 8015134:	f7f0 f912 	bl	800535c <lv_obj_invalidate>

    /*Allocate space for the new text*/
    uint32_t old_len = strlen(ext->text);
 8015138:	69fb      	ldr	r3, [r7, #28]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	4618      	mov	r0, r3
 801513e:	f7eb f87b 	bl	8000238 <strlen>
 8015142:	61b8      	str	r0, [r7, #24]
    uint32_t ins_len = strlen(txt);
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f7eb f877 	bl	8000238 <strlen>
 801514a:	6178      	str	r0, [r7, #20]
    uint32_t new_len = ins_len + old_len;
 801514c:	697a      	ldr	r2, [r7, #20]
 801514e:	69bb      	ldr	r3, [r7, #24]
 8015150:	4413      	add	r3, r2
 8015152:	613b      	str	r3, [r7, #16]
    ext->text        = lv_mem_realloc(ext->text, new_len + 1);
 8015154:	69fb      	ldr	r3, [r7, #28]
 8015156:	681a      	ldr	r2, [r3, #0]
 8015158:	693b      	ldr	r3, [r7, #16]
 801515a:	3301      	adds	r3, #1
 801515c:	4619      	mov	r1, r3
 801515e:	4610      	mov	r0, r2
 8015160:	f7fb f834 	bl	80101cc <lv_mem_realloc>
 8015164:	4602      	mov	r2, r0
 8015166:	69fb      	ldr	r3, [r7, #28]
 8015168:	601a      	str	r2, [r3, #0]
    lv_mem_assert(ext->text);
 801516a:	69fb      	ldr	r3, [r7, #28]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d101      	bne.n	8015176 <lv_label_ins_text+0x66>
 8015172:	bf00      	nop
 8015174:	e7fd      	b.n	8015172 <lv_label_ins_text+0x62>
    if(ext->text == NULL) return;
 8015176:	69fb      	ldr	r3, [r7, #28]
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d018      	beq.n	80151b0 <lv_label_ins_text+0xa0>

    if(pos == LV_LABEL_POS_LAST) {
 801517e:	68bb      	ldr	r3, [r7, #8]
 8015180:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015184:	4293      	cmp	r3, r2
 8015186:	d106      	bne.n	8015196 <lv_label_ins_text+0x86>
        pos = lv_txt_get_encoded_length(ext->text);
 8015188:	4b0b      	ldr	r3, [pc, #44]	@ (80151b8 <lv_label_ins_text+0xa8>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	69fa      	ldr	r2, [r7, #28]
 801518e:	6812      	ldr	r2, [r2, #0]
 8015190:	4610      	mov	r0, r2
 8015192:	4798      	blx	r3
 8015194:	60b8      	str	r0, [r7, #8]
    }

    lv_txt_ins(ext->text, pos, txt);
 8015196:	69fb      	ldr	r3, [r7, #28]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	687a      	ldr	r2, [r7, #4]
 801519c:	68b9      	ldr	r1, [r7, #8]
 801519e:	4618      	mov	r0, r3
 80151a0:	f7fb fdb0 	bl	8010d04 <lv_txt_ins>

    lv_label_refr_text(label);
 80151a4:	68f8      	ldr	r0, [r7, #12]
 80151a6:	f000 fa9d 	bl	80156e4 <lv_label_refr_text>
 80151aa:	e002      	b.n	80151b2 <lv_label_ins_text+0xa2>
    if(ext->static_txt != 0) return;
 80151ac:	bf00      	nop
 80151ae:	e000      	b.n	80151b2 <lv_label_ins_text+0xa2>
    if(ext->text == NULL) return;
 80151b0:	bf00      	nop
}
 80151b2:	3720      	adds	r7, #32
 80151b4:	46bd      	mov	sp, r7
 80151b6:	bd80      	pop	{r7, pc}
 80151b8:	20000cb0 	.word	0x20000cb0

080151bc <lv_label_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_label_design(lv_obj_t * label, const lv_area_t * mask, lv_design_mode_t mode)
{
 80151bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151be:	b099      	sub	sp, #100	@ 0x64
 80151c0:	af06      	add	r7, sp, #24
 80151c2:	60f8      	str	r0, [r7, #12]
 80151c4:	60b9      	str	r1, [r7, #8]
 80151c6:	4613      	mov	r3, r2
 80151c8:	71fb      	strb	r3, [r7, #7]
    /* A label never covers an area */
    if(mode == LV_DESIGN_COVER_CHK)
 80151ca:	79fb      	ldrb	r3, [r7, #7]
 80151cc:	2b02      	cmp	r3, #2
 80151ce:	d101      	bne.n	80151d4 <lv_label_design+0x18>
        return false;
 80151d0:	2300      	movs	r3, #0
 80151d2:	e1c3      	b.n	801555c <lv_label_design+0x3a0>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
 80151d4:	79fb      	ldrb	r3, [r7, #7]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	f040 81bf 	bne.w	801555a <lv_label_design+0x39e>
        lv_area_t coords;
        const lv_style_t * style = lv_obj_get_style(label);
 80151dc:	68f8      	ldr	r0, [r7, #12]
 80151de:	f7f1 fa85 	bl	80066ec <lv_obj_get_style>
 80151e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        lv_opa_t opa_scale       = lv_obj_get_opa_scale(label);
 80151e4:	68f8      	ldr	r0, [r7, #12]
 80151e6:	f7f1 fb4c 	bl	8006882 <lv_obj_get_opa_scale>
 80151ea:	4603      	mov	r3, r0
 80151ec:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        lv_obj_get_coords(label, &coords);
 80151f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80151f4:	4619      	mov	r1, r3
 80151f6:	68f8      	ldr	r0, [r7, #12]
 80151f8:	f7f1 f9cc 	bl	8006594 <lv_obj_get_coords>

#if LV_USE_GROUP
        lv_group_t * g = lv_obj_get_group(label);
 80151fc:	68f8      	ldr	r0, [r7, #12]
 80151fe:	f7f1 fb96 	bl	800692e <lv_obj_get_group>
 8015202:	6378      	str	r0, [r7, #52]	@ 0x34
        if(lv_group_get_focused(g) == label) {
 8015204:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8015206:	f7ed fd4d 	bl	8002ca4 <lv_group_get_focused>
 801520a:	4602      	mov	r2, r0
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	4293      	cmp	r3, r2
 8015210:	d107      	bne.n	8015222 <lv_label_design+0x66>
            lv_draw_rect(&coords, mask, style, opa_scale);
 8015212:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8015216:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 801521a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801521c:	68b9      	ldr	r1, [r7, #8]
 801521e:	f7f4 f925 	bl	800946c <lv_draw_rect>
        }
#endif

        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015222:	68f8      	ldr	r0, [r7, #12]
 8015224:	f7f1 fb78 	bl	8006918 <lv_obj_get_ext_attr>
 8015228:	6338      	str	r0, [r7, #48]	@ 0x30

        if(ext->body_draw) {
 801522a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801522c:	7fdb      	ldrb	r3, [r3, #31]
 801522e:	f003 0301 	and.w	r3, r3, #1
 8015232:	b2db      	uxtb	r3, r3
 8015234:	2b00      	cmp	r3, #0
 8015236:	d03b      	beq.n	80152b0 <lv_label_design+0xf4>
            lv_area_t bg;
            lv_obj_get_coords(label, &bg);
 8015238:	f107 0320 	add.w	r3, r7, #32
 801523c:	4619      	mov	r1, r3
 801523e:	68f8      	ldr	r0, [r7, #12]
 8015240:	f7f1 f9a8 	bl	8006594 <lv_obj_get_coords>
            bg.x1 -= style->body.padding.left;
 8015244:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015248:	b29a      	uxth	r2, r3
 801524a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801524c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8015250:	b29b      	uxth	r3, r3
 8015252:	1ad3      	subs	r3, r2, r3
 8015254:	b29b      	uxth	r3, r3
 8015256:	b21b      	sxth	r3, r3
 8015258:	843b      	strh	r3, [r7, #32]
            bg.x2 += style->body.padding.right;
 801525a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801525e:	b29a      	uxth	r2, r3
 8015260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015262:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8015266:	b29b      	uxth	r3, r3
 8015268:	4413      	add	r3, r2
 801526a:	b29b      	uxth	r3, r3
 801526c:	b21b      	sxth	r3, r3
 801526e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            bg.y1 -= style->body.padding.top;
 8015270:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015274:	b29a      	uxth	r2, r3
 8015276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015278:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801527c:	b29b      	uxth	r3, r3
 801527e:	1ad3      	subs	r3, r2, r3
 8015280:	b29b      	uxth	r3, r3
 8015282:	b21b      	sxth	r3, r3
 8015284:	847b      	strh	r3, [r7, #34]	@ 0x22
            bg.y2 += style->body.padding.bottom;
 8015286:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801528a:	b29a      	uxth	r2, r3
 801528c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801528e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8015292:	b29b      	uxth	r3, r3
 8015294:	4413      	add	r3, r2
 8015296:	b29b      	uxth	r3, r3
 8015298:	b21b      	sxth	r3, r3
 801529a:	84fb      	strh	r3, [r7, #38]	@ 0x26

            lv_draw_rect(&bg, mask, style, lv_obj_get_opa_scale(label));
 801529c:	68f8      	ldr	r0, [r7, #12]
 801529e:	f7f1 faf0 	bl	8006882 <lv_obj_get_opa_scale>
 80152a2:	4603      	mov	r3, r0
 80152a4:	f107 0020 	add.w	r0, r7, #32
 80152a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80152aa:	68b9      	ldr	r1, [r7, #8]
 80152ac:	f7f4 f8de 	bl	800946c <lv_draw_rect>
        }

        /*TEST: draw a background for the label*/
        // lv_draw_rect(&label->coords, mask, &lv_style_plain_color, LV_OPA_COVER);

        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 80152b0:	2300      	movs	r3, #0
 80152b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 80152b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152b8:	7f9b      	ldrb	r3, [r3, #30]
 80152ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80152be:	b2db      	uxtb	r3, r3
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d005      	beq.n	80152d0 <lv_label_design+0x114>
 80152c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80152c8:	f043 0301 	orr.w	r3, r3, #1
 80152cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 80152d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152d2:	7f9b      	ldrb	r3, [r3, #30]
 80152d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80152d8:	b2db      	uxtb	r3, r3
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d005      	beq.n	80152ea <lv_label_design+0x12e>
 80152de:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80152e2:	f043 0302 	orr.w	r3, r3, #2
 80152e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if(ext->align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
 80152ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152ec:	7f9b      	ldrb	r3, [r3, #30]
 80152ee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80152f2:	b2db      	uxtb	r3, r3
 80152f4:	2b10      	cmp	r3, #16
 80152f6:	d105      	bne.n	8015304 <lv_label_design+0x148>
 80152f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80152fc:	f043 0304 	orr.w	r3, r3, #4
 8015300:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if(ext->align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
 8015304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015306:	7f9b      	ldrb	r3, [r3, #30]
 8015308:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801530c:	b2db      	uxtb	r3, r3
 801530e:	2b20      	cmp	r3, #32
 8015310:	d105      	bne.n	801531e <lv_label_design+0x162>
 8015312:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015316:	f043 0308 	orr.w	r3, r3, #8
 801531a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        /* In ROLL mode the CENTER and RIGHT are pointless so remove them.
         * (In addition they will result mis-alignment is this case)*/
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 801531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015320:	7f9b      	ldrb	r3, [r3, #30]
 8015322:	f003 0307 	and.w	r3, r3, #7
 8015326:	b2db      	uxtb	r3, r3
 8015328:	2b03      	cmp	r3, #3
 801532a:	d006      	beq.n	801533a <lv_label_design+0x17e>
 801532c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801532e:	7f9b      	ldrb	r3, [r3, #30]
 8015330:	f003 0307 	and.w	r3, r3, #7
 8015334:	b2db      	uxtb	r3, r3
 8015336:	2b04      	cmp	r3, #4
 8015338:	d138      	bne.n	80153ac <lv_label_design+0x1f0>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 801533a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801533c:	7f9b      	ldrb	r3, [r3, #30]
 801533e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8015342:	b2db      	uxtb	r3, r3
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
 8015344:	2b10      	cmp	r3, #16
 8015346:	d006      	beq.n	8015356 <lv_label_design+0x19a>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
 8015348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801534a:	7f9b      	ldrb	r3, [r3, #30]
 801534c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8015350:	b2db      	uxtb	r3, r3
 8015352:	2b20      	cmp	r3, #32
 8015354:	d12a      	bne.n	80153ac <lv_label_design+0x1f0>
            lv_point_t size;
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 8015356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015358:	6819      	ldr	r1, [r3, #0]
 801535a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801535c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801535e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015360:	f9b3 5028 	ldrsh.w	r5, [r3, #40]	@ 0x28
 8015364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015366:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 801536a:	f107 001c 	add.w	r0, r7, #28
 801536e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8015372:	9202      	str	r2, [sp, #8]
 8015374:	f647 4218 	movw	r2, #31768	@ 0x7c18
 8015378:	9201      	str	r2, [sp, #4]
 801537a:	9300      	str	r3, [sp, #0]
 801537c:	462b      	mov	r3, r5
 801537e:	4622      	mov	r2, r4
 8015380:	f7fb fab7 	bl	80108f2 <lv_txt_get_size>
                            LV_COORD_MAX, flag);
            if(size.x > lv_obj_get_width(label)) {
 8015384:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8015388:	68f8      	ldr	r0, [r7, #12]
 801538a:	f7f1 f944 	bl	8006616 <lv_obj_get_width>
 801538e:	4603      	mov	r3, r0
 8015390:	429c      	cmp	r4, r3
 8015392:	dd0b      	ble.n	80153ac <lv_label_design+0x1f0>
                flag &= ~LV_TXT_FLAG_RIGHT;
 8015394:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015398:	f023 0308 	bic.w	r3, r3, #8
 801539c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                flag &= ~LV_TXT_FLAG_CENTER;
 80153a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80153a4:	f023 0304 	bic.w	r3, r3, #4
 80153a8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }
        }

        lv_draw_label_hint_t * hint = &ext->hint;
 80153ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153ae:	3310      	adds	r3, #16
 80153b0:	643b      	str	r3, [r7, #64]	@ 0x40
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC || lv_obj_get_height(label) < LV_LABEL_HINT_HEIGHT_LIMIT)
 80153b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153b4:	7f9b      	ldrb	r3, [r3, #30]
 80153b6:	f003 0307 	and.w	r3, r3, #7
 80153ba:	b2db      	uxtb	r3, r3
 80153bc:	2b04      	cmp	r3, #4
 80153be:	d006      	beq.n	80153ce <lv_label_design+0x212>
 80153c0:	68f8      	ldr	r0, [r7, #12]
 80153c2:	f7f1 f936 	bl	8006632 <lv_obj_get_height>
 80153c6:	4603      	mov	r3, r0
 80153c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80153cc:	da01      	bge.n	80153d2 <lv_label_design+0x216>
            hint = NULL;
 80153ce:	2300      	movs	r3, #0
 80153d0:	643b      	str	r3, [r7, #64]	@ 0x40

        lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ext->offset,
 80153d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153d4:	681c      	ldr	r4, [r3, #0]
 80153d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153d8:	f103 050a 	add.w	r5, r3, #10
 80153dc:	68f8      	ldr	r0, [r7, #12]
 80153de:	f7ff fe81 	bl	80150e4 <lv_label_get_text_sel_start>
 80153e2:	4603      	mov	r3, r0
 80153e4:	461e      	mov	r6, r3
 80153e6:	68f8      	ldr	r0, [r7, #12]
 80153e8:	f7ff fe87 	bl	80150fa <lv_label_get_text_sel_end>
 80153ec:	4603      	mov	r3, r0
 80153ee:	4619      	mov	r1, r3
 80153f0:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80153f4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80153f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80153fa:	9305      	str	r3, [sp, #20]
 80153fc:	9104      	str	r1, [sp, #16]
 80153fe:	9603      	str	r6, [sp, #12]
 8015400:	9502      	str	r5, [sp, #8]
 8015402:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015406:	9301      	str	r3, [sp, #4]
 8015408:	9400      	str	r4, [sp, #0]
 801540a:	4613      	mov	r3, r2
 801540c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801540e:	68b9      	ldr	r1, [r7, #8]
 8015410:	f7f3 fb9c 	bl	8008b4c <lv_draw_label>
                      lv_label_get_text_sel_start(label), lv_label_get_text_sel_end(label), hint);

        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 8015414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015416:	7f9b      	ldrb	r3, [r3, #30]
 8015418:	f003 0307 	and.w	r3, r3, #7
 801541c:	b2db      	uxtb	r3, r3
 801541e:	2b04      	cmp	r3, #4
 8015420:	f040 809b 	bne.w	801555a <lv_label_design+0x39e>
            lv_point_t size;
            lv_txt_get_size(&size, ext->text, style->text.font, style->text.letter_space, style->text.line_space,
 8015424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015426:	6819      	ldr	r1, [r3, #0]
 8015428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801542a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801542c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801542e:	f9b3 5028 	ldrsh.w	r5, [r3, #40]	@ 0x28
 8015432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015434:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8015438:	f107 0018 	add.w	r0, r7, #24
 801543c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8015440:	9202      	str	r2, [sp, #8]
 8015442:	f647 4218 	movw	r2, #31768	@ 0x7c18
 8015446:	9201      	str	r2, [sp, #4]
 8015448:	9300      	str	r3, [sp, #0]
 801544a:	462b      	mov	r3, r5
 801544c:	4622      	mov	r2, r4
 801544e:	f7fb fa50 	bl	80108f2 <lv_txt_get_size>
                            LV_COORD_MAX, flag);

            lv_point_t ofs;

            /*Draw the text again next to the original to make an circular effect */
            if(size.x > lv_obj_get_width(label)) {
 8015452:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8015456:	68f8      	ldr	r0, [r7, #12]
 8015458:	f7f1 f8dd 	bl	8006616 <lv_obj_get_width>
 801545c:	4603      	mov	r3, r0
 801545e:	429c      	cmp	r4, r3
 8015460:	dd3c      	ble.n	80154dc <lv_label_design+0x320>
                ofs.x = ext->offset.x + size.x +
 8015462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015464:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8015468:	b29a      	uxth	r2, r3
 801546a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801546e:	b29b      	uxth	r3, r3
 8015470:	4413      	add	r3, r2
 8015472:	b29c      	uxth	r4, r3
                        lv_font_get_glyph_width(style->text.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8015474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015478:	2220      	movs	r2, #32
 801547a:	2120      	movs	r1, #32
 801547c:	4618      	mov	r0, r3
 801547e:	f7f8 ffcb 	bl	800e418 <lv_font_get_glyph_width>
 8015482:	4603      	mov	r3, r0
                ofs.x = ext->offset.x + size.x +
 8015484:	461a      	mov	r2, r3
 8015486:	0052      	lsls	r2, r2, #1
 8015488:	4413      	add	r3, r2
 801548a:	b29b      	uxth	r3, r3
 801548c:	4423      	add	r3, r4
 801548e:	b29b      	uxth	r3, r3
 8015490:	b21b      	sxth	r3, r3
 8015492:	82bb      	strh	r3, [r7, #20]
                ofs.y = ext->offset.y;
 8015494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015496:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801549a:	82fb      	strh	r3, [r7, #22]

                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 801549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801549e:	681c      	ldr	r4, [r3, #0]
 80154a0:	68f8      	ldr	r0, [r7, #12]
 80154a2:	f7ff fe1f 	bl	80150e4 <lv_label_get_text_sel_start>
 80154a6:	4603      	mov	r3, r0
 80154a8:	461d      	mov	r5, r3
 80154aa:	68f8      	ldr	r0, [r7, #12]
 80154ac:	f7ff fe25 	bl	80150fa <lv_label_get_text_sel_end>
 80154b0:	4603      	mov	r3, r0
 80154b2:	4619      	mov	r1, r3
 80154b4:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80154b8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80154bc:	2300      	movs	r3, #0
 80154be:	9305      	str	r3, [sp, #20]
 80154c0:	9104      	str	r1, [sp, #16]
 80154c2:	9503      	str	r5, [sp, #12]
 80154c4:	f107 0314 	add.w	r3, r7, #20
 80154c8:	9302      	str	r3, [sp, #8]
 80154ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80154ce:	9301      	str	r3, [sp, #4]
 80154d0:	9400      	str	r4, [sp, #0]
 80154d2:	4613      	mov	r3, r2
 80154d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80154d6:	68b9      	ldr	r1, [r7, #8]
 80154d8:	f7f3 fb38 	bl	8008b4c <lv_draw_label>
                              lv_label_get_text_sel_start(label), lv_label_get_text_sel_end(label), NULL);
            }

            /*Draw the text again below the original to make an circular effect */
            if(size.y > lv_obj_get_height(label)) {
 80154dc:	f9b7 401a 	ldrsh.w	r4, [r7, #26]
 80154e0:	68f8      	ldr	r0, [r7, #12]
 80154e2:	f7f1 f8a6 	bl	8006632 <lv_obj_get_height>
 80154e6:	4603      	mov	r3, r0
 80154e8:	429c      	cmp	r4, r3
 80154ea:	dd36      	ble.n	801555a <lv_label_design+0x39e>
                ofs.x = ext->offset.x;
 80154ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80154f2:	82bb      	strh	r3, [r7, #20]
                ofs.y = ext->offset.y + size.y + lv_font_get_line_height(style->text.font);
 80154f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154f6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80154fa:	b29a      	uxth	r2, r3
 80154fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8015500:	b29b      	uxth	r3, r3
 8015502:	4413      	add	r3, r2
 8015504:	b29c      	uxth	r4, r3
 8015506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801550a:	4618      	mov	r0, r3
 801550c:	f7ff f82c 	bl	8014568 <lv_font_get_line_height>
 8015510:	4603      	mov	r3, r0
 8015512:	4423      	add	r3, r4
 8015514:	b29b      	uxth	r3, r3
 8015516:	b21b      	sxth	r3, r3
 8015518:	82fb      	strh	r3, [r7, #22]
                lv_draw_label(&coords, mask, style, opa_scale, ext->text, flag, &ofs,
 801551a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801551c:	681c      	ldr	r4, [r3, #0]
 801551e:	68f8      	ldr	r0, [r7, #12]
 8015520:	f7ff fde0 	bl	80150e4 <lv_label_get_text_sel_start>
 8015524:	4603      	mov	r3, r0
 8015526:	461d      	mov	r5, r3
 8015528:	68f8      	ldr	r0, [r7, #12]
 801552a:	f7ff fde6 	bl	80150fa <lv_label_get_text_sel_end>
 801552e:	4603      	mov	r3, r0
 8015530:	4619      	mov	r1, r3
 8015532:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8015536:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 801553a:	2300      	movs	r3, #0
 801553c:	9305      	str	r3, [sp, #20]
 801553e:	9104      	str	r1, [sp, #16]
 8015540:	9503      	str	r5, [sp, #12]
 8015542:	f107 0314 	add.w	r3, r7, #20
 8015546:	9302      	str	r3, [sp, #8]
 8015548:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801554c:	9301      	str	r3, [sp, #4]
 801554e:	9400      	str	r4, [sp, #0]
 8015550:	4613      	mov	r3, r2
 8015552:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015554:	68b9      	ldr	r1, [r7, #8]
 8015556:	f7f3 faf9 	bl	8008b4c <lv_draw_label>
                              lv_label_get_text_sel_start(label), lv_label_get_text_sel_end(label), NULL);
            }
        }
    }
    return true;
 801555a:	2301      	movs	r3, #1
}
 801555c:	4618      	mov	r0, r3
 801555e:	374c      	adds	r7, #76	@ 0x4c
 8015560:	46bd      	mov	sp, r7
 8015562:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015564 <lv_label_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_label_signal(lv_obj_t * label, lv_signal_t sign, void * param)
{
 8015564:	b590      	push	{r4, r7, lr}
 8015566:	b089      	sub	sp, #36	@ 0x24
 8015568:	af00      	add	r7, sp, #0
 801556a:	60f8      	str	r0, [r7, #12]
 801556c:	460b      	mov	r3, r1
 801556e:	607a      	str	r2, [r7, #4]
 8015570:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(label, sign, param);
 8015572:	4b5a      	ldr	r3, [pc, #360]	@ (80156dc <lv_label_signal+0x178>)
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	7af9      	ldrb	r1, [r7, #11]
 8015578:	687a      	ldr	r2, [r7, #4]
 801557a:	68f8      	ldr	r0, [r7, #12]
 801557c:	4798      	blx	r3
 801557e:	4603      	mov	r3, r0
 8015580:	77bb      	strb	r3, [r7, #30]
    if(res != LV_RES_OK) return res;
 8015582:	7fbb      	ldrb	r3, [r7, #30]
 8015584:	2b01      	cmp	r3, #1
 8015586:	d001      	beq.n	801558c <lv_label_signal+0x28>
 8015588:	7fbb      	ldrb	r3, [r7, #30]
 801558a:	e0a3      	b.n	80156d4 <lv_label_signal+0x170>

    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 801558c:	68f8      	ldr	r0, [r7, #12]
 801558e:	f7f1 f9c3 	bl	8006918 <lv_obj_get_ext_attr>
 8015592:	61b8      	str	r0, [r7, #24]
    if(sign == LV_SIGNAL_CLEANUP) {
 8015594:	7afb      	ldrb	r3, [r7, #11]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d112      	bne.n	80155c0 <lv_label_signal+0x5c>
        if(ext->static_txt == 0) {
 801559a:	69bb      	ldr	r3, [r7, #24]
 801559c:	7f9b      	ldrb	r3, [r3, #30]
 801559e:	f003 0308 	and.w	r3, r3, #8
 80155a2:	b2db      	uxtb	r3, r3
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d107      	bne.n	80155b8 <lv_label_signal+0x54>
            lv_mem_free(ext->text);
 80155a8:	69bb      	ldr	r3, [r7, #24]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	4618      	mov	r0, r3
 80155ae:	f7fa fdc1 	bl	8010134 <lv_mem_free>
            ext->text = NULL;
 80155b2:	69bb      	ldr	r3, [r7, #24]
 80155b4:	2200      	movs	r2, #0
 80155b6:	601a      	str	r2, [r3, #0]
        }
        lv_label_dot_tmp_free(label);
 80155b8:	68f8      	ldr	r0, [r7, #12]
 80155ba:	f000 fc16 	bl	8015dea <lv_label_dot_tmp_free>
 80155be:	e088      	b.n	80156d2 <lv_label_signal+0x16e>
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80155c0:	7afb      	ldrb	r3, [r7, #11]
 80155c2:	2b04      	cmp	r3, #4
 80155c4:	d106      	bne.n	80155d4 <lv_label_signal+0x70>
        /*Revert dots for proper refresh*/
        lv_label_revert_dots(label);
 80155c6:	68f8      	ldr	r0, [r7, #12]
 80155c8:	f000 fb32 	bl	8015c30 <lv_label_revert_dots>

        lv_label_refr_text(label);
 80155cc:	68f8      	ldr	r0, [r7, #12]
 80155ce:	f000 f889 	bl	80156e4 <lv_label_refr_text>
 80155d2:	e07e      	b.n	80156d2 <lv_label_signal+0x16e>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 80155d4:	7afb      	ldrb	r3, [r7, #11]
 80155d6:	2b02      	cmp	r3, #2
 80155d8:	d120      	bne.n	801561c <lv_label_signal+0xb8>
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	3310      	adds	r3, #16
 80155de:	4618      	mov	r0, r3
 80155e0:	f7fe ffcd 	bl	801457e <lv_area_get_width>
 80155e4:	4603      	mov	r3, r0
 80155e6:	461c      	mov	r4, r3
 80155e8:	6878      	ldr	r0, [r7, #4]
 80155ea:	f7fe ffc8 	bl	801457e <lv_area_get_width>
 80155ee:	4603      	mov	r3, r0
 80155f0:	429c      	cmp	r4, r3
 80155f2:	d10c      	bne.n	801560e <lv_label_signal+0xaa>
           lv_area_get_height(&label->coords) != lv_area_get_height(param)) {
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	3310      	adds	r3, #16
 80155f8:	4618      	mov	r0, r3
 80155fa:	f7fe ffd6 	bl	80145aa <lv_area_get_height>
 80155fe:	4603      	mov	r3, r0
 8015600:	461c      	mov	r4, r3
 8015602:	6878      	ldr	r0, [r7, #4]
 8015604:	f7fe ffd1 	bl	80145aa <lv_area_get_height>
 8015608:	4603      	mov	r3, r0
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
 801560a:	429c      	cmp	r4, r3
 801560c:	d061      	beq.n	80156d2 <lv_label_signal+0x16e>
            lv_label_revert_dots(label);
 801560e:	68f8      	ldr	r0, [r7, #12]
 8015610:	f000 fb0e 	bl	8015c30 <lv_label_revert_dots>
            lv_label_refr_text(label);
 8015614:	68f8      	ldr	r0, [r7, #12]
 8015616:	f000 f865 	bl	80156e4 <lv_label_refr_text>
 801561a:	e05a      	b.n	80156d2 <lv_label_signal+0x16e>
        }
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 801561c:	7afb      	ldrb	r3, [r7, #11]
 801561e:	2b05      	cmp	r3, #5
 8015620:	d13c      	bne.n	801569c <lv_label_signal+0x138>
        if(ext->body_draw) {
 8015622:	69bb      	ldr	r3, [r7, #24]
 8015624:	7fdb      	ldrb	r3, [r3, #31]
 8015626:	f003 0301 	and.w	r3, r3, #1
 801562a:	b2db      	uxtb	r3, r3
 801562c:	2b00      	cmp	r3, #0
 801562e:	d050      	beq.n	80156d2 <lv_label_signal+0x16e>
            const lv_style_t * style = lv_label_get_style(label, LV_LABEL_STYLE_MAIN);
 8015630:	2100      	movs	r1, #0
 8015632:	68f8      	ldr	r0, [r7, #12]
 8015634:	f7fe ffde 	bl	80145f4 <lv_label_get_style>
 8015638:	6138      	str	r0, [r7, #16]

            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.left);
 801563a:	693b      	ldr	r3, [r7, #16]
 801563c:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8015646:	4293      	cmp	r3, r2
 8015648:	bfb8      	it	lt
 801564a:	4613      	movlt	r3, r2
 801564c:	b21a      	sxth	r2, r3
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	869a      	strh	r2, [r3, #52]	@ 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.right);
 8015652:	693b      	ldr	r3, [r7, #16]
 8015654:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 801565e:	4293      	cmp	r3, r2
 8015660:	bfb8      	it	lt
 8015662:	4613      	movlt	r3, r2
 8015664:	b21a      	sxth	r2, r3
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	869a      	strh	r2, [r3, #52]	@ 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.top);
 801566a:	693b      	ldr	r3, [r7, #16]
 801566c:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8015676:	4293      	cmp	r3, r2
 8015678:	bfb8      	it	lt
 801567a:	4613      	movlt	r3, r2
 801567c:	b21a      	sxth	r2, r3
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	869a      	strh	r2, [r3, #52]	@ 0x34
            label->ext_draw_pad = LV_MATH_MAX(label->ext_draw_pad, style->body.padding.bottom);
 8015682:	693b      	ldr	r3, [r7, #16]
 8015684:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 801568e:	4293      	cmp	r3, r2
 8015690:	bfb8      	it	lt
 8015692:	4613      	movlt	r3, r2
 8015694:	b21a      	sxth	r2, r3
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	869a      	strh	r2, [r3, #52]	@ 0x34
 801569a:	e01a      	b.n	80156d2 <lv_label_signal+0x16e>
        }
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801569c:	7afb      	ldrb	r3, [r7, #11]
 801569e:	2b06      	cmp	r3, #6
 80156a0:	d117      	bne.n	80156d2 <lv_label_signal+0x16e>
        lv_obj_type_t * buf = param;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	617b      	str	r3, [r7, #20]
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80156a6:	2300      	movs	r3, #0
 80156a8:	77fb      	strb	r3, [r7, #31]
 80156aa:	e008      	b.n	80156be <lv_label_signal+0x15a>
            if(buf->type[i] == NULL) break;
 80156ac:	7ffa      	ldrb	r2, [r7, #31]
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d006      	beq.n	80156c6 <lv_label_signal+0x162>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 80156b8:	7ffb      	ldrb	r3, [r7, #31]
 80156ba:	3301      	adds	r3, #1
 80156bc:	77fb      	strb	r3, [r7, #31]
 80156be:	7ffb      	ldrb	r3, [r7, #31]
 80156c0:	2b06      	cmp	r3, #6
 80156c2:	d9f3      	bls.n	80156ac <lv_label_signal+0x148>
 80156c4:	e000      	b.n	80156c8 <lv_label_signal+0x164>
            if(buf->type[i] == NULL) break;
 80156c6:	bf00      	nop
        }
        buf->type[i] = "lv_label";
 80156c8:	7ffa      	ldrb	r2, [r7, #31]
 80156ca:	697b      	ldr	r3, [r7, #20]
 80156cc:	4904      	ldr	r1, [pc, #16]	@ (80156e0 <lv_label_signal+0x17c>)
 80156ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 80156d2:	7fbb      	ldrb	r3, [r7, #30]
}
 80156d4:	4618      	mov	r0, r3
 80156d6:	3724      	adds	r7, #36	@ 0x24
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd90      	pop	{r4, r7, pc}
 80156dc:	2000ad90 	.word	0x2000ad90
 80156e0:	0801c82c 	.word	0x0801c82c

080156e4 <lv_label_refr_text>:
/**
 * Refresh the label with its text stored in its extended data
 * @param label pointer to a label object
 */
static void lv_label_refr_text(lv_obj_t * label)
{
 80156e4:	b590      	push	{r4, r7, lr}
 80156e6:	b09d      	sub	sp, #116	@ 0x74
 80156e8:	af04      	add	r7, sp, #16
 80156ea:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 80156ec:	6878      	ldr	r0, [r7, #4]
 80156ee:	f7f1 f913 	bl	8006918 <lv_obj_get_ext_attr>
 80156f2:	64f8      	str	r0, [r7, #76]	@ 0x4c

    if(ext->text == NULL) return;
 80156f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	f000 828f 	beq.w	8015c1c <lv_label_refr_text+0x538>

    ext->hint.line_start = -1; /*The hint is invalid if the text changes*/
 80156fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015700:	f04f 32ff 	mov.w	r2, #4294967295
 8015704:	611a      	str	r2, [r3, #16]

    lv_coord_t max_w         = lv_obj_get_width(label);
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f7f0 ff85 	bl	8006616 <lv_obj_get_width>
 801570c:	4603      	mov	r3, r0
 801570e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    const lv_style_t * style = lv_obj_get_style(label);
 8015712:	6878      	ldr	r0, [r7, #4]
 8015714:	f7f0 ffea 	bl	80066ec <lv_obj_get_style>
 8015718:	64b8      	str	r0, [r7, #72]	@ 0x48
    const lv_font_t * font   = style->text.font;
 801571a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801571c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801571e:	647b      	str	r3, [r7, #68]	@ 0x44

    /*If the width will be expanded set the max length to very big */
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 8015720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015722:	7f9b      	ldrb	r3, [r3, #30]
 8015724:	f003 0307 	and.w	r3, r3, #7
 8015728:	b2db      	uxtb	r3, r3
 801572a:	2b00      	cmp	r3, #0
 801572c:	d103      	bne.n	8015736 <lv_label_refr_text+0x52>
        max_w = LV_COORD_MAX;
 801572e:	f647 4318 	movw	r3, #31768	@ 0x7c18
 8015732:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    }

    /*Calc. the height and longest line*/
    lv_point_t size;
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
 8015736:	2300      	movs	r3, #0
 8015738:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
 801573c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801573e:	7f9b      	ldrb	r3, [r3, #30]
 8015740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015744:	b2db      	uxtb	r3, r3
 8015746:	2b00      	cmp	r3, #0
 8015748:	d005      	beq.n	8015756 <lv_label_refr_text+0x72>
 801574a:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 801574e:	f043 0301 	orr.w	r3, r3, #1
 8015752:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
 8015756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015758:	7f9b      	ldrb	r3, [r3, #30]
 801575a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801575e:	b2db      	uxtb	r3, r3
 8015760:	2b00      	cmp	r3, #0
 8015762:	d005      	beq.n	8015770 <lv_label_refr_text+0x8c>
 8015764:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8015768:	f043 0302 	orr.w	r3, r3, #2
 801576c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    lv_txt_get_size(&size, ext->text, font, style->text.letter_space, style->text.line_space, max_w, flag);
 8015770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015772:	6819      	ldr	r1, [r3, #0]
 8015774:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015776:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	@ 0x28
 801577a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801577c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8015780:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8015784:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8015788:	9202      	str	r2, [sp, #8]
 801578a:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	@ 0x5e
 801578e:	9201      	str	r2, [sp, #4]
 8015790:	9300      	str	r3, [sp, #0]
 8015792:	4623      	mov	r3, r4
 8015794:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015796:	f7fb f8ac 	bl	80108f2 <lv_txt_get_size>

    /*Set the full size in expand mode*/
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
 801579a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801579c:	7f9b      	ldrb	r3, [r3, #30]
 801579e:	f003 0307 	and.w	r3, r3, #7
 80157a2:	b2db      	uxtb	r3, r3
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d108      	bne.n	80157ba <lv_label_refr_text+0xd6>
        lv_obj_set_size(label, size.x, size.y);
 80157a8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 80157ac:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 80157b0:	4619      	mov	r1, r3
 80157b2:	6878      	ldr	r0, [r7, #4]
 80157b4:	f7ef ff86 	bl	80056c4 <lv_obj_set_size>
 80157b8:	e22c      	b.n	8015c14 <lv_label_refr_text+0x530>
    }
    /*In roll mode keep the size but start offset animations*/
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
 80157ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157bc:	7f9b      	ldrb	r3, [r3, #30]
 80157be:	f003 0307 	and.w	r3, r3, #7
 80157c2:	b2db      	uxtb	r3, r3
 80157c4:	2b03      	cmp	r3, #3
 80157c6:	f040 809f 	bne.w	8015908 <lv_label_refr_text+0x224>
#if LV_USE_ANIMATION
        lv_anim_t anim;
        anim.var      = label;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	60bb      	str	r3, [r7, #8]
        anim.repeat   = 1;
 80157ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80157d2:	f043 0302 	orr.w	r3, r3, #2
 80157d6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        anim.playback = 1;
 80157da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80157de:	f043 0301 	orr.w	r3, r3, #1
 80157e2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        anim.start    = 0;
 80157e6:	2300      	movs	r3, #0
 80157e8:	61bb      	str	r3, [r7, #24]
        anim.ready_cb = NULL;
 80157ea:	2300      	movs	r3, #0
 80157ec:	617b      	str	r3, [r7, #20]
        anim.path_cb  = lv_anim_path_linear;
 80157ee:	4baa      	ldr	r3, [pc, #680]	@ (8015a98 <lv_label_refr_text+0x3b4>)
 80157f0:	613b      	str	r3, [r7, #16]
        anim.playback_pause =
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 80157f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80157f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157f6:	2220      	movs	r2, #32
 80157f8:	2120      	movs	r1, #32
 80157fa:	4618      	mov	r0, r3
 80157fc:	f7f8 fe0c 	bl	800e418 <lv_font_get_glyph_width>
 8015800:	4603      	mov	r3, r0
 8015802:	461a      	mov	r2, r3
 8015804:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015806:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 801580a:	4413      	add	r3, r2
 801580c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015810:	fb02 f303 	mul.w	r3, r2, r3
             ext->anim_speed) *
 8015814:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015816:	8b92      	ldrh	r2, [r2, #28]
            (((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8015818:	fb93 f3f2 	sdiv	r3, r3, r2
        anim.playback_pause =
 801581c:	b29b      	uxth	r3, r3
 801581e:	461a      	mov	r2, r3
 8015820:	0052      	lsls	r2, r2, #1
 8015822:	4413      	add	r3, r2
 8015824:	b29b      	uxth	r3, r3
 8015826:	84bb      	strh	r3, [r7, #36]	@ 0x24
            LV_LABEL_WAIT_CHAR_COUNT;
        anim.repeat_pause = anim.playback_pause;
 8015828:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801582a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        anim.act_time     = -anim.playback_pause;
 801582c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801582e:	425b      	negs	r3, r3
 8015830:	b29b      	uxth	r3, r3
 8015832:	b21b      	sxth	r3, r3
 8015834:	847b      	strh	r3, [r7, #34]	@ 0x22

        bool hor_anim = false;
 8015836:	2300      	movs	r3, #0
 8015838:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        if(size.x > lv_obj_get_width(label)) {
 801583c:	f9b7 4038 	ldrsh.w	r4, [r7, #56]	@ 0x38
 8015840:	6878      	ldr	r0, [r7, #4]
 8015842:	f7f0 fee8 	bl	8006616 <lv_obj_get_width>
 8015846:	4603      	mov	r3, r0
 8015848:	429c      	cmp	r4, r3
 801584a:	dd1e      	ble.n	801588a <lv_label_refr_text+0x1a6>
            anim.end     = lv_obj_get_width(label) - size.x;
 801584c:	6878      	ldr	r0, [r7, #4]
 801584e:	f7f0 fee2 	bl	8006616 <lv_obj_get_width>
 8015852:	4603      	mov	r3, r0
 8015854:	461a      	mov	r2, r3
 8015856:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 801585a:	1ad3      	subs	r3, r2, r3
 801585c:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 801585e:	4b8f      	ldr	r3, [pc, #572]	@ (8015a9c <lv_label_refr_text+0x3b8>)
 8015860:	60fb      	str	r3, [r7, #12]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8015862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015864:	8b9b      	ldrh	r3, [r3, #28]
 8015866:	69ba      	ldr	r2, [r7, #24]
 8015868:	b211      	sxth	r1, r2
 801586a:	69fa      	ldr	r2, [r7, #28]
 801586c:	b212      	sxth	r2, r2
 801586e:	4618      	mov	r0, r3
 8015870:	f7f9 fc20 	bl	800f0b4 <lv_anim_speed_to_time>
 8015874:	4603      	mov	r3, r0
 8015876:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 8015878:	f107 0308 	add.w	r3, r7, #8
 801587c:	4618      	mov	r0, r3
 801587e:	f7f9 fb9f 	bl	800efc0 <lv_anim_create>
            hor_anim = true;
 8015882:	2301      	movs	r3, #1
 8015884:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8015888:	e006      	b.n	8015898 <lv_label_refr_text+0x1b4>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 801588a:	4984      	ldr	r1, [pc, #528]	@ (8015a9c <lv_label_refr_text+0x3b8>)
 801588c:	6878      	ldr	r0, [r7, #4]
 801588e:	f7f9 fbd9 	bl	800f044 <lv_anim_del>
            ext->offset.x = 0;
 8015892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015894:	2200      	movs	r2, #0
 8015896:	815a      	strh	r2, [r3, #10]
        }

        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 8015898:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	@ 0x3a
 801589c:	6878      	ldr	r0, [r7, #4]
 801589e:	f7f0 fec8 	bl	8006632 <lv_obj_get_height>
 80158a2:	4603      	mov	r3, r0
 80158a4:	429c      	cmp	r4, r3
 80158a6:	dd27      	ble.n	80158f8 <lv_label_refr_text+0x214>
 80158a8:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80158ac:	f083 0301 	eor.w	r3, r3, #1
 80158b0:	b2db      	uxtb	r3, r3
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d020      	beq.n	80158f8 <lv_label_refr_text+0x214>
            anim.end     = lv_obj_get_height(label) - size.y - (lv_font_get_line_height(font));
 80158b6:	6878      	ldr	r0, [r7, #4]
 80158b8:	f7f0 febb 	bl	8006632 <lv_obj_get_height>
 80158bc:	4603      	mov	r3, r0
 80158be:	461a      	mov	r2, r3
 80158c0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 80158c4:	1ad4      	subs	r4, r2, r3
 80158c6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80158c8:	f7fe fe4e 	bl	8014568 <lv_font_get_line_height>
 80158cc:	4603      	mov	r3, r0
 80158ce:	1ae3      	subs	r3, r4, r3
 80158d0:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 80158d2:	4b73      	ldr	r3, [pc, #460]	@ (8015aa0 <lv_label_refr_text+0x3bc>)
 80158d4:	60fb      	str	r3, [r7, #12]

            anim.time = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80158d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80158d8:	8b9b      	ldrh	r3, [r3, #28]
 80158da:	69ba      	ldr	r2, [r7, #24]
 80158dc:	b211      	sxth	r1, r2
 80158de:	69fa      	ldr	r2, [r7, #28]
 80158e0:	b212      	sxth	r2, r2
 80158e2:	4618      	mov	r0, r3
 80158e4:	f7f9 fbe6 	bl	800f0b4 <lv_anim_speed_to_time>
 80158e8:	4603      	mov	r3, r0
 80158ea:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 80158ec:	f107 0308 	add.w	r3, r7, #8
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7f9 fb65 	bl	800efc0 <lv_anim_create>
 80158f6:	e18d      	b.n	8015c14 <lv_label_refr_text+0x530>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 80158f8:	4969      	ldr	r1, [pc, #420]	@ (8015aa0 <lv_label_refr_text+0x3bc>)
 80158fa:	6878      	ldr	r0, [r7, #4]
 80158fc:	f7f9 fba2 	bl	800f044 <lv_anim_del>
            ext->offset.y = 0;
 8015900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015902:	2200      	movs	r2, #0
 8015904:	819a      	strh	r2, [r3, #12]
 8015906:	e185      	b.n	8015c14 <lv_label_refr_text+0x530>
        }
#endif
    }
    /*In roll inf. mode keep the size but start offset animations*/
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
 8015908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801590a:	7f9b      	ldrb	r3, [r3, #30]
 801590c:	f003 0307 	and.w	r3, r3, #7
 8015910:	b2db      	uxtb	r3, r3
 8015912:	2b04      	cmp	r3, #4
 8015914:	f040 809c 	bne.w	8015a50 <lv_label_refr_text+0x36c>
#if LV_USE_ANIMATION
        lv_anim_t anim;
        anim.var      = label;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	60bb      	str	r3, [r7, #8]
        anim.repeat   = 1;
 801591c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8015920:	f043 0302 	orr.w	r3, r3, #2
 8015924:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        anim.playback = 0;
 8015928:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801592c:	f36f 0300 	bfc	r3, #0, #1
 8015930:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        anim.start    = 0;
 8015934:	2300      	movs	r3, #0
 8015936:	61bb      	str	r3, [r7, #24]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 8015938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801593a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801593c:	2220      	movs	r2, #32
 801593e:	2120      	movs	r1, #32
 8015940:	4618      	mov	r0, r3
 8015942:	f7f8 fd69 	bl	800e418 <lv_font_get_glyph_width>
 8015946:	4603      	mov	r3, r0
 8015948:	461a      	mov	r2, r3
 801594a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801594c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8015950:	4413      	add	r3, r2
 8015952:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015956:	fb02 f303 	mul.w	r3, r2, r3
                          ext->anim_speed) *
 801595a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801595c:	8b92      	ldrh	r2, [r2, #28]
        anim.act_time = -(((lv_font_get_glyph_width(style->text.font, ' ', ' ') + style->text.letter_space) * 1000) /
 801595e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015962:	b29b      	uxth	r3, r3
 8015964:	461a      	mov	r2, r3
 8015966:	009b      	lsls	r3, r3, #2
 8015968:	1ad3      	subs	r3, r2, r3
 801596a:	b29b      	uxth	r3, r3
 801596c:	b21b      	sxth	r3, r3
 801596e:	847b      	strh	r3, [r7, #34]	@ 0x22
                        LV_LABEL_WAIT_CHAR_COUNT;
        anim.ready_cb       = NULL;
 8015970:	2300      	movs	r3, #0
 8015972:	617b      	str	r3, [r7, #20]
        anim.path_cb        = lv_anim_path_linear;
 8015974:	4b48      	ldr	r3, [pc, #288]	@ (8015a98 <lv_label_refr_text+0x3b4>)
 8015976:	613b      	str	r3, [r7, #16]
        anim.playback_pause = 0;
 8015978:	2300      	movs	r3, #0
 801597a:	84bb      	strh	r3, [r7, #36]	@ 0x24
        anim.repeat_pause   = 0;
 801597c:	2300      	movs	r3, #0
 801597e:	84fb      	strh	r3, [r7, #38]	@ 0x26

        bool hor_anim = false;
 8015980:	2300      	movs	r3, #0
 8015982:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        if(size.x > lv_obj_get_width(label)) {
 8015986:	f9b7 4038 	ldrsh.w	r4, [r7, #56]	@ 0x38
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	f7f0 fe43 	bl	8006616 <lv_obj_get_width>
 8015990:	4603      	mov	r3, r0
 8015992:	429c      	cmp	r4, r3
 8015994:	dd22      	ble.n	80159dc <lv_label_refr_text+0x2f8>
            anim.end     = -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
 8015996:	2220      	movs	r2, #32
 8015998:	2120      	movs	r1, #32
 801599a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801599c:	f7f8 fd3c 	bl	800e418 <lv_font_get_glyph_width>
 80159a0:	4603      	mov	r3, r0
 80159a2:	461a      	mov	r2, r3
 80159a4:	009b      	lsls	r3, r3, #2
 80159a6:	1ad3      	subs	r3, r2, r3
 80159a8:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 80159ac:	1a9b      	subs	r3, r3, r2
 80159ae:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_x;
 80159b0:	4b3a      	ldr	r3, [pc, #232]	@ (8015a9c <lv_label_refr_text+0x3b8>)
 80159b2:	60fb      	str	r3, [r7, #12]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 80159b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80159b6:	8b9b      	ldrh	r3, [r3, #28]
 80159b8:	69ba      	ldr	r2, [r7, #24]
 80159ba:	b211      	sxth	r1, r2
 80159bc:	69fa      	ldr	r2, [r7, #28]
 80159be:	b212      	sxth	r2, r2
 80159c0:	4618      	mov	r0, r3
 80159c2:	f7f9 fb77 	bl	800f0b4 <lv_anim_speed_to_time>
 80159c6:	4603      	mov	r3, r0
 80159c8:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 80159ca:	f107 0308 	add.w	r3, r7, #8
 80159ce:	4618      	mov	r0, r3
 80159d0:	f7f9 faf6 	bl	800efc0 <lv_anim_create>
            hor_anim = true;
 80159d4:	2301      	movs	r3, #1
 80159d6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80159da:	e006      	b.n	80159ea <lv_label_refr_text+0x306>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
 80159dc:	492f      	ldr	r1, [pc, #188]	@ (8015a9c <lv_label_refr_text+0x3b8>)
 80159de:	6878      	ldr	r0, [r7, #4]
 80159e0:	f7f9 fb30 	bl	800f044 <lv_anim_del>
            ext->offset.x = 0;
 80159e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80159e6:	2200      	movs	r2, #0
 80159e8:	815a      	strh	r2, [r3, #10]
        }

        if(size.y > lv_obj_get_height(label) && hor_anim == false) {
 80159ea:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	@ 0x3a
 80159ee:	6878      	ldr	r0, [r7, #4]
 80159f0:	f7f0 fe1f 	bl	8006632 <lv_obj_get_height>
 80159f4:	4603      	mov	r3, r0
 80159f6:	429c      	cmp	r4, r3
 80159f8:	dd22      	ble.n	8015a40 <lv_label_refr_text+0x35c>
 80159fa:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80159fe:	f083 0301 	eor.w	r3, r3, #1
 8015a02:	b2db      	uxtb	r3, r3
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d01b      	beq.n	8015a40 <lv_label_refr_text+0x35c>
            anim.end     = -size.y - (lv_font_get_line_height(font));
 8015a08:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8015a0c:	425c      	negs	r4, r3
 8015a0e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8015a10:	f7fe fdaa 	bl	8014568 <lv_font_get_line_height>
 8015a14:	4603      	mov	r3, r0
 8015a16:	1ae3      	subs	r3, r4, r3
 8015a18:	61fb      	str	r3, [r7, #28]
            anim.exec_cb = (lv_anim_exec_xcb_t)lv_label_set_offset_y;
 8015a1a:	4b21      	ldr	r3, [pc, #132]	@ (8015aa0 <lv_label_refr_text+0x3bc>)
 8015a1c:	60fb      	str	r3, [r7, #12]
            anim.time    = lv_anim_speed_to_time(ext->anim_speed, anim.start, anim.end);
 8015a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a20:	8b9b      	ldrh	r3, [r3, #28]
 8015a22:	69ba      	ldr	r2, [r7, #24]
 8015a24:	b211      	sxth	r1, r2
 8015a26:	69fa      	ldr	r2, [r7, #28]
 8015a28:	b212      	sxth	r2, r2
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7f9 fb42 	bl	800f0b4 <lv_anim_speed_to_time>
 8015a30:	4603      	mov	r3, r0
 8015a32:	843b      	strh	r3, [r7, #32]
            lv_anim_create(&anim);
 8015a34:	f107 0308 	add.w	r3, r7, #8
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7f9 fac1 	bl	800efc0 <lv_anim_create>
 8015a3e:	e0e9      	b.n	8015c14 <lv_label_refr_text+0x530>
        } else {
            /*Delete the offset animation if not required*/
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
 8015a40:	4917      	ldr	r1, [pc, #92]	@ (8015aa0 <lv_label_refr_text+0x3bc>)
 8015a42:	6878      	ldr	r0, [r7, #4]
 8015a44:	f7f9 fafe 	bl	800f044 <lv_anim_del>
            ext->offset.y = 0;
 8015a48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	819a      	strh	r2, [r3, #12]
 8015a4e:	e0e1      	b.n	8015c14 <lv_label_refr_text+0x530>
        }
#endif
    } else if(ext->long_mode == LV_LABEL_LONG_DOT) {
 8015a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a52:	7f9b      	ldrb	r3, [r3, #30]
 8015a54:	f003 0307 	and.w	r3, r3, #7
 8015a58:	b2db      	uxtb	r3, r3
 8015a5a:	2b02      	cmp	r3, #2
 8015a5c:	f040 80cd 	bne.w	8015bfa <lv_label_refr_text+0x516>
        if(size.y <= lv_obj_get_height(label)) { /*No dots are required, the text is short enough*/
 8015a60:	f9b7 403a 	ldrsh.w	r4, [r7, #58]	@ 0x3a
 8015a64:	6878      	ldr	r0, [r7, #4]
 8015a66:	f7f0 fde4 	bl	8006632 <lv_obj_get_height>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	429c      	cmp	r4, r3
 8015a6e:	dc04      	bgt.n	8015a7a <lv_label_refr_text+0x396>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 8015a70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015a76:	811a      	strh	r2, [r3, #8]
 8015a78:	e0cc      	b.n	8015c14 <lv_label_refr_text+0x530>
        } else if(lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) { /*Don't turn to dots all the characters*/
 8015a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8015aa4 <lv_label_refr_text+0x3c0>)
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015a80:	6812      	ldr	r2, [r2, #0]
 8015a82:	4610      	mov	r0, r2
 8015a84:	4798      	blx	r3
 8015a86:	4603      	mov	r3, r0
 8015a88:	2b03      	cmp	r3, #3
 8015a8a:	d80d      	bhi.n	8015aa8 <lv_label_refr_text+0x3c4>
            ext->dot_end = LV_LABEL_DOT_END_INV;
 8015a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015a92:	811a      	strh	r2, [r3, #8]
 8015a94:	e0be      	b.n	8015c14 <lv_label_refr_text+0x530>
 8015a96:	bf00      	nop
 8015a98:	0800f113 	.word	0x0800f113
 8015a9c:	08015ce5 	.word	0x08015ce5
 8015aa0:	08015d0d 	.word	0x08015d0d
 8015aa4:	20000cb0 	.word	0x20000cb0
        } else {
            lv_point_t p;
            p.x = lv_obj_get_width(label) -
 8015aa8:	6878      	ldr	r0, [r7, #4]
 8015aaa:	f7f0 fdb4 	bl	8006616 <lv_obj_get_width>
 8015aae:	4603      	mov	r3, r0
 8015ab0:	b29c      	uxth	r4, r3
                  (lv_font_get_glyph_width(style->text.font, '.', '.') + style->text.letter_space) *
 8015ab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ab6:	222e      	movs	r2, #46	@ 0x2e
 8015ab8:	212e      	movs	r1, #46	@ 0x2e
 8015aba:	4618      	mov	r0, r3
 8015abc:	f7f8 fcac 	bl	800e418 <lv_font_get_glyph_width>
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	461a      	mov	r2, r3
 8015ac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015ac6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8015aca:	4413      	add	r3, r2
            p.x = lv_obj_get_width(label) -
 8015acc:	b29b      	uxth	r3, r3
 8015ace:	461a      	mov	r2, r3
 8015ad0:	009b      	lsls	r3, r3, #2
 8015ad2:	1ad3      	subs	r3, r2, r3
 8015ad4:	b29b      	uxth	r3, r3
 8015ad6:	4423      	add	r3, r4
 8015ad8:	b29b      	uxth	r3, r3
 8015ada:	b21b      	sxth	r3, r3
 8015adc:	86bb      	strh	r3, [r7, #52]	@ 0x34
                      LV_LABEL_DOT_NUM; /*Shrink with dots*/
            p.y = lv_obj_get_height(label);
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f7f0 fda7 	bl	8006632 <lv_obj_get_height>
 8015ae4:	4603      	mov	r3, r0
 8015ae6:	86fb      	strh	r3, [r7, #54]	@ 0x36
            p.y -= p.y %
 8015ae8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8015aec:	461c      	mov	r4, r3
                   (lv_font_get_line_height(style->text.font) + style->text.line_space); /*Round down to the last line*/
 8015aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015af2:	4618      	mov	r0, r3
 8015af4:	f7fe fd38 	bl	8014568 <lv_font_get_line_height>
 8015af8:	4603      	mov	r3, r0
 8015afa:	461a      	mov	r2, r3
 8015afc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015afe:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8015b02:	4413      	add	r3, r2
            p.y -= p.y %
 8015b04:	fb94 f2f3 	sdiv	r2, r4, r3
 8015b08:	fb02 f303 	mul.w	r3, r2, r3
 8015b0c:	1ae3      	subs	r3, r4, r3
 8015b0e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8015b12:	b292      	uxth	r2, r2
 8015b14:	b29b      	uxth	r3, r3
 8015b16:	1ad3      	subs	r3, r2, r3
 8015b18:	b29b      	uxth	r3, r3
 8015b1a:	b21b      	sxth	r3, r3
 8015b1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            p.y -= style->text.line_space;                                               /*Trim the last line space*/
 8015b1e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8015b22:	b29a      	uxth	r2, r3
 8015b24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b26:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8015b2a:	b29b      	uxth	r3, r3
 8015b2c:	1ad3      	subs	r3, r2, r3
 8015b2e:	b29b      	uxth	r3, r3
 8015b30:	b21b      	sxth	r3, r3
 8015b32:	86fb      	strh	r3, [r7, #54]	@ 0x36
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
 8015b34:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015b38:	4619      	mov	r1, r3
 8015b3a:	6878      	ldr	r0, [r7, #4]
 8015b3c:	f7ff f9ac 	bl	8014e98 <lv_label_get_letter_on>
 8015b40:	4603      	mov	r3, r0
 8015b42:	643b      	str	r3, [r7, #64]	@ 0x40

            /*Save letters under the dots and replace them with dots*/
            uint32_t i;
            uint32_t byte_id     = lv_txt_encoded_get_byte_id(ext->text, letter_id);
 8015b44:	4b37      	ldr	r3, [pc, #220]	@ (8015c24 <lv_label_refr_text+0x540>)
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015b4a:	6812      	ldr	r2, [r2, #0]
 8015b4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015b4e:	4610      	mov	r0, r2
 8015b50:	4798      	blx	r3
 8015b52:	4603      	mov	r3, r0
 8015b54:	633b      	str	r3, [r7, #48]	@ 0x30
            uint32_t byte_id_ori = byte_id;
 8015b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uint8_t len          = 0;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8015b60:	2300      	movs	r3, #0
 8015b62:	657b      	str	r3, [r7, #84]	@ 0x54
 8015b64:	e019      	b.n	8015b9a <lv_label_refr_text+0x4b6>
                len += lv_txt_encoded_size(&ext->text[byte_id]);
 8015b66:	4b30      	ldr	r3, [pc, #192]	@ (8015c28 <lv_label_refr_text+0x544>)
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015b6c:	6811      	ldr	r1, [r2, #0]
 8015b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015b70:	440a      	add	r2, r1
 8015b72:	4610      	mov	r0, r2
 8015b74:	4798      	blx	r3
 8015b76:	4603      	mov	r3, r0
 8015b78:	461a      	mov	r2, r3
 8015b7a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8015b7e:	4413      	add	r3, r2
 8015b80:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
                lv_txt_encoded_next(ext->text, &byte_id);
 8015b84:	4b29      	ldr	r3, [pc, #164]	@ (8015c2c <lv_label_refr_text+0x548>)
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015b8a:	6812      	ldr	r2, [r2, #0]
 8015b8c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015b90:	4610      	mov	r0, r2
 8015b92:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
 8015b94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015b96:	3301      	adds	r3, #1
 8015b98:	657b      	str	r3, [r7, #84]	@ 0x54
 8015b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015b9c:	2b03      	cmp	r3, #3
 8015b9e:	d9e2      	bls.n	8015b66 <lv_label_refr_text+0x482>
            }

            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
 8015ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015ba2:	681a      	ldr	r2, [r3, #0]
 8015ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015ba6:	4413      	add	r3, r2
 8015ba8:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8015bac:	b292      	uxth	r2, r2
 8015bae:	4619      	mov	r1, r3
 8015bb0:	6878      	ldr	r0, [r7, #4]
 8015bb2:	f000 f8bf 	bl	8015d34 <lv_label_set_dot_tmp>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d02b      	beq.n	8015c14 <lv_label_refr_text+0x530>
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	657b      	str	r3, [r7, #84]	@ 0x54
 8015bc0:	e00a      	b.n	8015bd8 <lv_label_refr_text+0x4f4>
                    ext->text[byte_id_ori + i] = '.';
 8015bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015bc4:	681a      	ldr	r2, [r3, #0]
 8015bc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015bca:	440b      	add	r3, r1
 8015bcc:	4413      	add	r3, r2
 8015bce:	222e      	movs	r2, #46	@ 0x2e
 8015bd0:	701a      	strb	r2, [r3, #0]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
 8015bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015bd4:	3301      	adds	r3, #1
 8015bd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8015bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015bda:	2b02      	cmp	r3, #2
 8015bdc:	d9f1      	bls.n	8015bc2 <lv_label_refr_text+0x4de>
                }
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
 8015bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015be0:	681a      	ldr	r2, [r3, #0]
 8015be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015be4:	3303      	adds	r3, #3
 8015be6:	4413      	add	r3, r2
 8015be8:	2200      	movs	r2, #0
 8015bea:	701a      	strb	r2, [r3, #0]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
 8015bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015bee:	b29b      	uxth	r3, r3
 8015bf0:	3303      	adds	r3, #3
 8015bf2:	b29a      	uxth	r2, r3
 8015bf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015bf6:	811a      	strh	r2, [r3, #8]
 8015bf8:	e00c      	b.n	8015c14 <lv_label_refr_text+0x530>
            }
        }
    }
    /*In break mode only the height can change*/
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
 8015bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015bfc:	7f9b      	ldrb	r3, [r3, #30]
 8015bfe:	f003 0307 	and.w	r3, r3, #7
 8015c02:	b2db      	uxtb	r3, r3
 8015c04:	2b01      	cmp	r3, #1
 8015c06:	d105      	bne.n	8015c14 <lv_label_refr_text+0x530>
        lv_obj_set_height(label, size.y);
 8015c08:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8015c0c:	4619      	mov	r1, r3
 8015c0e:	6878      	ldr	r0, [r7, #4]
 8015c10:	f7ef fde6 	bl	80057e0 <lv_obj_set_height>
    /*Do not set the size in Clip mode*/
    else if(ext->long_mode == LV_LABEL_LONG_CROP) {
        /*Do nothing*/
    }

    lv_obj_invalidate(label);
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f7ef fba1 	bl	800535c <lv_obj_invalidate>
 8015c1a:	e000      	b.n	8015c1e <lv_label_refr_text+0x53a>
    if(ext->text == NULL) return;
 8015c1c:	bf00      	nop
}
 8015c1e:	3764      	adds	r7, #100	@ 0x64
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd90      	pop	{r4, r7, pc}
 8015c24:	20000ca8 	.word	0x20000ca8
 8015c28:	20000c98 	.word	0x20000c98
 8015c2c:	20000ca0 	.word	0x20000ca0

08015c30 <lv_label_revert_dots>:

static void lv_label_revert_dots(lv_obj_t * label)
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b088      	sub	sp, #32
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015c38:	6878      	ldr	r0, [r7, #4]
 8015c3a:	f7f0 fe6d 	bl	8006918 <lv_obj_get_ext_attr>
 8015c3e:	61b8      	str	r0, [r7, #24]
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 8015c40:	69bb      	ldr	r3, [r7, #24]
 8015c42:	7f9b      	ldrb	r3, [r3, #30]
 8015c44:	f003 0307 	and.w	r3, r3, #7
 8015c48:	b2db      	uxtb	r3, r3
 8015c4a:	2b02      	cmp	r3, #2
 8015c4c:	d142      	bne.n	8015cd4 <lv_label_revert_dots+0xa4>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 8015c4e:	69bb      	ldr	r3, [r7, #24]
 8015c50:	891b      	ldrh	r3, [r3, #8]
 8015c52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c56:	4293      	cmp	r3, r2
 8015c58:	d03e      	beq.n	8015cd8 <lv_label_revert_dots+0xa8>
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
 8015c5a:	69bb      	ldr	r3, [r7, #24]
 8015c5c:	891b      	ldrh	r3, [r3, #8]
 8015c5e:	3b03      	subs	r3, #3
 8015c60:	617b      	str	r3, [r7, #20]
    uint32_t byte_i   = lv_txt_encoded_get_byte_id(ext->text, letter_i);
 8015c62:	4b1f      	ldr	r3, [pc, #124]	@ (8015ce0 <lv_label_revert_dots+0xb0>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	69ba      	ldr	r2, [r7, #24]
 8015c68:	6812      	ldr	r2, [r2, #0]
 8015c6a:	6979      	ldr	r1, [r7, #20]
 8015c6c:	4610      	mov	r0, r2
 8015c6e:	4798      	blx	r3
 8015c70:	6138      	str	r0, [r7, #16]

    /*Restore the characters*/
    uint8_t i      = 0;
 8015c72:	2300      	movs	r3, #0
 8015c74:	77fb      	strb	r3, [r7, #31]
    char * dot_tmp = lv_label_get_dot_tmp(label);
 8015c76:	6878      	ldr	r0, [r7, #4]
 8015c78:	f000 f89f 	bl	8015dba <lv_label_get_dot_tmp>
 8015c7c:	60f8      	str	r0, [r7, #12]
    while(ext->text[byte_i + i] != '\0') {
 8015c7e:	e00d      	b.n	8015c9c <lv_label_revert_dots+0x6c>
        ext->text[byte_i + i] = dot_tmp[i];
 8015c80:	7ffb      	ldrb	r3, [r7, #31]
 8015c82:	68fa      	ldr	r2, [r7, #12]
 8015c84:	441a      	add	r2, r3
 8015c86:	69bb      	ldr	r3, [r7, #24]
 8015c88:	6819      	ldr	r1, [r3, #0]
 8015c8a:	7ff8      	ldrb	r0, [r7, #31]
 8015c8c:	693b      	ldr	r3, [r7, #16]
 8015c8e:	4403      	add	r3, r0
 8015c90:	440b      	add	r3, r1
 8015c92:	7812      	ldrb	r2, [r2, #0]
 8015c94:	701a      	strb	r2, [r3, #0]
        i++;
 8015c96:	7ffb      	ldrb	r3, [r7, #31]
 8015c98:	3301      	adds	r3, #1
 8015c9a:	77fb      	strb	r3, [r7, #31]
    while(ext->text[byte_i + i] != '\0') {
 8015c9c:	69bb      	ldr	r3, [r7, #24]
 8015c9e:	681a      	ldr	r2, [r3, #0]
 8015ca0:	7ff9      	ldrb	r1, [r7, #31]
 8015ca2:	693b      	ldr	r3, [r7, #16]
 8015ca4:	440b      	add	r3, r1
 8015ca6:	4413      	add	r3, r2
 8015ca8:	781b      	ldrb	r3, [r3, #0]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d1e8      	bne.n	8015c80 <lv_label_revert_dots+0x50>
    }
    ext->text[byte_i + i] = dot_tmp[i];
 8015cae:	7ffb      	ldrb	r3, [r7, #31]
 8015cb0:	68fa      	ldr	r2, [r7, #12]
 8015cb2:	441a      	add	r2, r3
 8015cb4:	69bb      	ldr	r3, [r7, #24]
 8015cb6:	6819      	ldr	r1, [r3, #0]
 8015cb8:	7ff8      	ldrb	r0, [r7, #31]
 8015cba:	693b      	ldr	r3, [r7, #16]
 8015cbc:	4403      	add	r3, r0
 8015cbe:	440b      	add	r3, r1
 8015cc0:	7812      	ldrb	r2, [r2, #0]
 8015cc2:	701a      	strb	r2, [r3, #0]
    lv_label_dot_tmp_free(label);
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f000 f890 	bl	8015dea <lv_label_dot_tmp_free>

    ext->dot_end = LV_LABEL_DOT_END_INV;
 8015cca:	69bb      	ldr	r3, [r7, #24]
 8015ccc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015cd0:	811a      	strh	r2, [r3, #8]
 8015cd2:	e002      	b.n	8015cda <lv_label_revert_dots+0xaa>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
 8015cd4:	bf00      	nop
 8015cd6:	e000      	b.n	8015cda <lv_label_revert_dots+0xaa>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
 8015cd8:	bf00      	nop
}
 8015cda:	3720      	adds	r7, #32
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd80      	pop	{r7, pc}
 8015ce0:	20000ca8 	.word	0x20000ca8

08015ce4 <lv_label_set_offset_x>:

#if LV_USE_ANIMATION
static void lv_label_set_offset_x(lv_obj_t * label, lv_coord_t x)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b084      	sub	sp, #16
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	460b      	mov	r3, r1
 8015cee:	807b      	strh	r3, [r7, #2]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015cf0:	6878      	ldr	r0, [r7, #4]
 8015cf2:	f7f0 fe11 	bl	8006918 <lv_obj_get_ext_attr>
 8015cf6:	60f8      	str	r0, [r7, #12]
    ext->offset.x        = x;
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	887a      	ldrh	r2, [r7, #2]
 8015cfc:	815a      	strh	r2, [r3, #10]
    lv_obj_invalidate(label);
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f7ef fb2c 	bl	800535c <lv_obj_invalidate>
}
 8015d04:	bf00      	nop
 8015d06:	3710      	adds	r7, #16
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}

08015d0c <lv_label_set_offset_y>:

static void lv_label_set_offset_y(lv_obj_t * label, lv_coord_t y)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b084      	sub	sp, #16
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
 8015d14:	460b      	mov	r3, r1
 8015d16:	807b      	strh	r3, [r7, #2]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015d18:	6878      	ldr	r0, [r7, #4]
 8015d1a:	f7f0 fdfd 	bl	8006918 <lv_obj_get_ext_attr>
 8015d1e:	60f8      	str	r0, [r7, #12]
    ext->offset.y        = y;
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	887a      	ldrh	r2, [r7, #2]
 8015d24:	819a      	strh	r2, [r3, #12]
    lv_obj_invalidate(label);
 8015d26:	6878      	ldr	r0, [r7, #4]
 8015d28:	f7ef fb18 	bl	800535c <lv_obj_invalidate>
}
 8015d2c:	bf00      	nop
 8015d2e:	3710      	adds	r7, #16
 8015d30:	46bd      	mov	sp, r7
 8015d32:	bd80      	pop	{r7, pc}

08015d34 <lv_label_set_dot_tmp>:
 * @param label pointer to label object
 * @param len Number of characters to store.
 * @return true on success.
 */
static bool lv_label_set_dot_tmp(lv_obj_t * label, char * data, uint16_t len)
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b086      	sub	sp, #24
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	60f8      	str	r0, [r7, #12]
 8015d3c:	60b9      	str	r1, [r7, #8]
 8015d3e:	4613      	mov	r3, r2
 8015d40:	80fb      	strh	r3, [r7, #6]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015d42:	68f8      	ldr	r0, [r7, #12]
 8015d44:	f7f0 fde8 	bl	8006918 <lv_obj_get_ext_attr>
 8015d48:	6178      	str	r0, [r7, #20]
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
 8015d4a:	68f8      	ldr	r0, [r7, #12]
 8015d4c:	f000 f84d 	bl	8015dea <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
 8015d50:	88fb      	ldrh	r3, [r7, #6]
 8015d52:	2b04      	cmp	r3, #4
 8015d54:	d920      	bls.n	8015d98 <lv_label_set_dot_tmp+0x64>
        /* Memory needs to be allocated. Allocates an additional byte
         * for a NULL-terminator so it can be copied. */
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
 8015d56:	88fb      	ldrh	r3, [r7, #6]
 8015d58:	3301      	adds	r3, #1
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f7fa f9b0 	bl	80100c0 <lv_mem_alloc>
 8015d60:	4602      	mov	r2, r0
 8015d62:	697b      	ldr	r3, [r7, #20]
 8015d64:	605a      	str	r2, [r3, #4]
        if(ext->dot.tmp_ptr == NULL) {
 8015d66:	697b      	ldr	r3, [r7, #20]
 8015d68:	685b      	ldr	r3, [r3, #4]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d101      	bne.n	8015d72 <lv_label_set_dot_tmp+0x3e>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
            return false;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	e01f      	b.n	8015db2 <lv_label_set_dot_tmp+0x7e>
        }
        memcpy(ext->dot.tmp_ptr, data, len);
 8015d72:	697b      	ldr	r3, [r7, #20]
 8015d74:	685b      	ldr	r3, [r3, #4]
 8015d76:	88fa      	ldrh	r2, [r7, #6]
 8015d78:	68b9      	ldr	r1, [r7, #8]
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	f005 fe35 	bl	801b9ea <memcpy>
        ext->dot.tmp_ptr[len] = '\0';
 8015d80:	697b      	ldr	r3, [r7, #20]
 8015d82:	685a      	ldr	r2, [r3, #4]
 8015d84:	88fb      	ldrh	r3, [r7, #6]
 8015d86:	4413      	add	r3, r2
 8015d88:	2200      	movs	r2, #0
 8015d8a:	701a      	strb	r2, [r3, #0]
        ext->dot_tmp_alloc    = true;
 8015d8c:	697a      	ldr	r2, [r7, #20]
 8015d8e:	7fd3      	ldrb	r3, [r2, #31]
 8015d90:	f043 0302 	orr.w	r3, r3, #2
 8015d94:	77d3      	strb	r3, [r2, #31]
 8015d96:	e00b      	b.n	8015db0 <lv_label_set_dot_tmp+0x7c>
    } else {
        /* Characters can be directly stored in object */
        ext->dot_tmp_alloc = false;
 8015d98:	697a      	ldr	r2, [r7, #20]
 8015d9a:	7fd3      	ldrb	r3, [r2, #31]
 8015d9c:	f36f 0341 	bfc	r3, #1, #1
 8015da0:	77d3      	strb	r3, [r2, #31]
        memcpy(ext->dot.tmp, data, len);
 8015da2:	697b      	ldr	r3, [r7, #20]
 8015da4:	3304      	adds	r3, #4
 8015da6:	88fa      	ldrh	r2, [r7, #6]
 8015da8:	68b9      	ldr	r1, [r7, #8]
 8015daa:	4618      	mov	r0, r3
 8015dac:	f005 fe1d 	bl	801b9ea <memcpy>
    }
    return true;
 8015db0:	2301      	movs	r3, #1
}
 8015db2:	4618      	mov	r0, r3
 8015db4:	3718      	adds	r7, #24
 8015db6:	46bd      	mov	sp, r7
 8015db8:	bd80      	pop	{r7, pc}

08015dba <lv_label_get_dot_tmp>:
 * Get the stored dot_tmp characters
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
 8015dba:	b580      	push	{r7, lr}
 8015dbc:	b084      	sub	sp, #16
 8015dbe:	af00      	add	r7, sp, #0
 8015dc0:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015dc2:	6878      	ldr	r0, [r7, #4]
 8015dc4:	f7f0 fda8 	bl	8006918 <lv_obj_get_ext_attr>
 8015dc8:	60f8      	str	r0, [r7, #12]
    if(ext->dot_tmp_alloc) {
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	7fdb      	ldrb	r3, [r3, #31]
 8015dce:	f003 0302 	and.w	r3, r3, #2
 8015dd2:	b2db      	uxtb	r3, r3
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d002      	beq.n	8015dde <lv_label_get_dot_tmp+0x24>
        return ext->dot.tmp_ptr;
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	e001      	b.n	8015de2 <lv_label_get_dot_tmp+0x28>
    } else {
        return ext->dot.tmp;
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	3304      	adds	r3, #4
    }
}
 8015de2:	4618      	mov	r0, r3
 8015de4:	3710      	adds	r7, #16
 8015de6:	46bd      	mov	sp, r7
 8015de8:	bd80      	pop	{r7, pc}

08015dea <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
 8015dea:	b580      	push	{r7, lr}
 8015dec:	b084      	sub	sp, #16
 8015dee:	af00      	add	r7, sp, #0
 8015df0:	6078      	str	r0, [r7, #4]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
 8015df2:	6878      	ldr	r0, [r7, #4]
 8015df4:	f7f0 fd90 	bl	8006918 <lv_obj_get_ext_attr>
 8015df8:	60f8      	str	r0, [r7, #12]
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	7fdb      	ldrb	r3, [r3, #31]
 8015dfe:	f003 0302 	and.w	r3, r3, #2
 8015e02:	b2db      	uxtb	r3, r3
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d008      	beq.n	8015e1a <lv_label_dot_tmp_free+0x30>
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	685b      	ldr	r3, [r3, #4]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d004      	beq.n	8015e1a <lv_label_dot_tmp_free+0x30>
        lv_mem_free(ext->dot.tmp_ptr);
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	685b      	ldr	r3, [r3, #4]
 8015e14:	4618      	mov	r0, r3
 8015e16:	f7fa f98d 	bl	8010134 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
 8015e1a:	68fa      	ldr	r2, [r7, #12]
 8015e1c:	7fd3      	ldrb	r3, [r2, #31]
 8015e1e:	f36f 0341 	bfc	r3, #1, #1
 8015e22:	77d3      	strb	r3, [r2, #31]
    ext->dot.tmp_ptr   = NULL;
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	2200      	movs	r2, #0
 8015e28:	605a      	str	r2, [r3, #4]
}
 8015e2a:	bf00      	nop
 8015e2c:	3710      	adds	r7, #16
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bd80      	pop	{r7, pc}

08015e32 <lv_area_copy>:
 * Copy an area
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
 8015e32:	b580      	push	{r7, lr}
 8015e34:	b082      	sub	sp, #8
 8015e36:	af00      	add	r7, sp, #0
 8015e38:	6078      	str	r0, [r7, #4]
 8015e3a:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8015e3c:	2208      	movs	r2, #8
 8015e3e:	6839      	ldr	r1, [r7, #0]
 8015e40:	6878      	ldr	r0, [r7, #4]
 8015e42:	f005 fdd2 	bl	801b9ea <memcpy>
}
 8015e46:	bf00      	nop
 8015e48:	3708      	adds	r7, #8
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}

08015e4e <lv_area_get_width>:
 * Get the width of an area
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
 8015e4e:	b480      	push	{r7}
 8015e50:	b083      	sub	sp, #12
 8015e52:	af00      	add	r7, sp, #0
 8015e54:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015e5c:	b29a      	uxth	r2, r3
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e64:	b29b      	uxth	r3, r3
 8015e66:	1ad3      	subs	r3, r2, r3
 8015e68:	b29b      	uxth	r3, r3
 8015e6a:	3301      	adds	r3, #1
 8015e6c:	b29b      	uxth	r3, r3
 8015e6e:	b21b      	sxth	r3, r3
}
 8015e70:	4618      	mov	r0, r3
 8015e72:	370c      	adds	r7, #12
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bc80      	pop	{r7}
 8015e78:	4770      	bx	lr

08015e7a <lv_area_get_height>:
 * Get the height of an area
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
 8015e7a:	b480      	push	{r7}
 8015e7c:	b083      	sub	sp, #12
 8015e7e:	af00      	add	r7, sp, #0
 8015e80:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015e88:	b29a      	uxth	r2, r3
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8015e90:	b29b      	uxth	r3, r3
 8015e92:	1ad3      	subs	r3, r2, r3
 8015e94:	b29b      	uxth	r3, r3
 8015e96:	3301      	adds	r3, #1
 8015e98:	b29b      	uxth	r3, r3
 8015e9a:	b21b      	sxth	r3, r3
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	370c      	adds	r7, #12
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bc80      	pop	{r7}
 8015ea4:	4770      	bx	lr

08015ea6 <lv_page_get_scrl_width>:
 * Get width of the scrollable part of a page
 * @param page pointer to a page object
 * @return the width of the scrollable
 */
static inline lv_coord_t lv_page_get_scrl_width(const lv_obj_t * page)
{
 8015ea6:	b580      	push	{r7, lr}
 8015ea8:	b082      	sub	sp, #8
 8015eaa:	af00      	add	r7, sp, #0
 8015eac:	6078      	str	r0, [r7, #4]
    return lv_obj_get_width(lv_page_get_scrl(page));
 8015eae:	6878      	ldr	r0, [r7, #4]
 8015eb0:	f000 fa66 	bl	8016380 <lv_page_get_scrl>
 8015eb4:	4603      	mov	r3, r0
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f7f0 fbad 	bl	8006616 <lv_obj_get_width>
 8015ebc:	4603      	mov	r3, r0
}
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	3708      	adds	r7, #8
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bd80      	pop	{r7, pc}

08015ec6 <lv_page_get_scrl_fit_left>:
 * Get the left fit mode
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_left(const lv_obj_t * page)
{
 8015ec6:	b580      	push	{r7, lr}
 8015ec8:	b082      	sub	sp, #8
 8015eca:	af00      	add	r7, sp, #0
 8015ecc:	6078      	str	r0, [r7, #4]
    return lv_cont_get_fit_left(lv_page_get_scrl(page));
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f000 fa56 	bl	8016380 <lv_page_get_scrl>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	f7fd f878 	bl	8012fcc <lv_cont_get_fit_left>
 8015edc:	4603      	mov	r3, r0
}
 8015ede:	4618      	mov	r0, r3
 8015ee0:	3708      	adds	r7, #8
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}

08015ee6 <lv_page_get_scrl_fit_top>:
 * Get the top fit mode
 * @param page pointer to a page object
 * @return an element of `lv_fit_t`
 */
static inline lv_fit_t lv_page_get_scrl_fit_top(const lv_obj_t * page)
{
 8015ee6:	b580      	push	{r7, lr}
 8015ee8:	b082      	sub	sp, #8
 8015eea:	af00      	add	r7, sp, #0
 8015eec:	6078      	str	r0, [r7, #4]
    return lv_cont_get_fit_top(lv_page_get_scrl(page));
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f000 fa46 	bl	8016380 <lv_page_get_scrl>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f7fd f879 	bl	8012fee <lv_cont_get_fit_top>
 8015efc:	4603      	mov	r3, r0
}
 8015efe:	4618      	mov	r0, r3
 8015f00:	3708      	adds	r7, #8
 8015f02:	46bd      	mov	sp, r7
 8015f04:	bd80      	pop	{r7, pc}
	...

08015f08 <lv_page_create>:
 * @param par pointer to an object, it will be the parent of the new page
 * @param copy pointer to a page object, if not NULL then the new object will be copied from it
 * @return pointer to the created page
 */
lv_obj_t * lv_page_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b088      	sub	sp, #32
 8015f0c:	af02      	add	r7, sp, #8
 8015f0e:	6078      	str	r0, [r7, #4]
 8015f10:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("page create started");

    /*Create the ancestor object*/
    lv_obj_t * new_page = lv_cont_create(par, copy);
 8015f12:	6839      	ldr	r1, [r7, #0]
 8015f14:	6878      	ldr	r0, [r7, #4]
 8015f16:	f7fc ff35 	bl	8012d84 <lv_cont_create>
 8015f1a:	6178      	str	r0, [r7, #20]
    lv_mem_assert(new_page);
 8015f1c:	697b      	ldr	r3, [r7, #20]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d101      	bne.n	8015f26 <lv_page_create+0x1e>
 8015f22:	bf00      	nop
 8015f24:	e7fd      	b.n	8015f22 <lv_page_create+0x1a>
    if(new_page == NULL) return NULL;
 8015f26:	697b      	ldr	r3, [r7, #20]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d101      	bne.n	8015f30 <lv_page_create+0x28>
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	e144      	b.n	80161ba <lv_page_create+0x2b2>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_page);
 8015f30:	4ba4      	ldr	r3, [pc, #656]	@ (80161c4 <lv_page_create+0x2bc>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d105      	bne.n	8015f44 <lv_page_create+0x3c>
 8015f38:	6978      	ldr	r0, [r7, #20]
 8015f3a:	f7f0 fcd7 	bl	80068ec <lv_obj_get_signal_cb>
 8015f3e:	4603      	mov	r3, r0
 8015f40:	4aa0      	ldr	r2, [pc, #640]	@ (80161c4 <lv_page_create+0x2bc>)
 8015f42:	6013      	str	r3, [r2, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_page);
 8015f44:	4ba0      	ldr	r3, [pc, #640]	@ (80161c8 <lv_page_create+0x2c0>)
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d105      	bne.n	8015f58 <lv_page_create+0x50>
 8015f4c:	6978      	ldr	r0, [r7, #20]
 8015f4e:	f7f0 fcd8 	bl	8006902 <lv_obj_get_design_cb>
 8015f52:	4603      	mov	r3, r0
 8015f54:	4a9c      	ldr	r2, [pc, #624]	@ (80161c8 <lv_page_create+0x2c0>)
 8015f56:	6013      	str	r3, [r2, #0]

    /*Allocate the object type specific extended data*/
    lv_page_ext_t * ext = lv_obj_allocate_ext_attr(new_page, sizeof(lv_page_ext_t));
 8015f58:	2130      	movs	r1, #48	@ 0x30
 8015f5a:	6978      	ldr	r0, [r7, #20]
 8015f5c:	f7f0 fa7a 	bl	8006454 <lv_obj_allocate_ext_attr>
 8015f60:	6138      	str	r0, [r7, #16]
    lv_mem_assert(ext);
 8015f62:	693b      	ldr	r3, [r7, #16]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d101      	bne.n	8015f6c <lv_page_create+0x64>
 8015f68:	bf00      	nop
 8015f6a:	e7fd      	b.n	8015f68 <lv_page_create+0x60>
    if(ext == NULL) return NULL;
 8015f6c:	693b      	ldr	r3, [r7, #16]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d101      	bne.n	8015f76 <lv_page_create+0x6e>
 8015f72:	2300      	movs	r3, #0
 8015f74:	e121      	b.n	80161ba <lv_page_create+0x2b2>

    ext->scrl        = NULL;
 8015f76:	693b      	ldr	r3, [r7, #16]
 8015f78:	2200      	movs	r2, #0
 8015f7a:	605a      	str	r2, [r3, #4]
    ext->sb.hor_draw = 0;
 8015f7c:	693a      	ldr	r2, [r7, #16]
 8015f7e:	7f13      	ldrb	r3, [r2, #28]
 8015f80:	f36f 0300 	bfc	r3, #0, #1
 8015f84:	7713      	strb	r3, [r2, #28]
    ext->sb.ver_draw = 0;
 8015f86:	693a      	ldr	r2, [r7, #16]
 8015f88:	7f13      	ldrb	r3, [r2, #28]
 8015f8a:	f36f 0341 	bfc	r3, #1, #1
 8015f8e:	7713      	strb	r3, [r2, #28]
    ext->sb.style    = &lv_style_pretty;
 8015f90:	693b      	ldr	r3, [r7, #16]
 8015f92:	4a8e      	ldr	r2, [pc, #568]	@ (80161cc <lv_page_create+0x2c4>)
 8015f94:	609a      	str	r2, [r3, #8]
    ext->sb.mode     = LV_SB_MODE_AUTO;
 8015f96:	693a      	ldr	r2, [r7, #16]
 8015f98:	7f13      	ldrb	r3, [r2, #28]
 8015f9a:	2103      	movs	r1, #3
 8015f9c:	f361 0384 	bfi	r3, r1, #2, #3
 8015fa0:	7713      	strb	r3, [r2, #28]
#if LV_USE_ANIMATION
    ext->edge_flash.enabled   = 0;
 8015fa2:	693a      	ldr	r2, [r7, #16]
 8015fa4:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8015fa8:	f36f 0300 	bfc	r3, #0, #1
 8015fac:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
    ext->edge_flash.bottom_ip = 0;
 8015fb0:	693a      	ldr	r2, [r7, #16]
 8015fb2:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8015fb6:	f36f 0382 	bfc	r3, #2, #1
 8015fba:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
    ext->edge_flash.top_ip    = 0;
 8015fbe:	693a      	ldr	r2, [r7, #16]
 8015fc0:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8015fc4:	f36f 0341 	bfc	r3, #1, #1
 8015fc8:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
    ext->edge_flash.left_ip   = 0;
 8015fcc:	693a      	ldr	r2, [r7, #16]
 8015fce:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8015fd2:	f36f 1304 	bfc	r3, #4, #1
 8015fd6:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
    ext->edge_flash.right_ip  = 0;
 8015fda:	693a      	ldr	r2, [r7, #16]
 8015fdc:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8015fe0:	f36f 03c3 	bfc	r3, #3, #1
 8015fe4:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
    ext->edge_flash.state     = 0;
 8015fe8:	693b      	ldr	r3, [r7, #16]
 8015fea:	2200      	movs	r2, #0
 8015fec:	841a      	strh	r2, [r3, #32]
    ext->edge_flash.style     = &lv_style_plain_color;
 8015fee:	693b      	ldr	r3, [r7, #16]
 8015ff0:	4a77      	ldr	r2, [pc, #476]	@ (80161d0 <lv_page_create+0x2c8>)
 8015ff2:	625a      	str	r2, [r3, #36]	@ 0x24
    ext->anim_time            = LV_PAGE_DEF_ANIM_TIME;
 8015ff4:	693b      	ldr	r3, [r7, #16]
 8015ff6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8015ffa:	859a      	strh	r2, [r3, #44]	@ 0x2c
#endif
    ext->scroll_prop    = 0;
 8015ffc:	693a      	ldr	r2, [r7, #16]
 8015ffe:	f892 302e 	ldrb.w	r3, [r2, #46]	@ 0x2e
 8016002:	f36f 0300 	bfc	r3, #0, #1
 8016006:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
    ext->scroll_prop_ip = 0;
 801600a:	693a      	ldr	r2, [r7, #16]
 801600c:	f892 302e 	ldrb.w	r3, [r2, #46]	@ 0x2e
 8016010:	f36f 0341 	bfc	r3, #1, #1
 8016014:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e

    /*Init the new page object*/
    if(copy == NULL) {
 8016018:	683b      	ldr	r3, [r7, #0]
 801601a:	2b00      	cmp	r3, #0
 801601c:	f040 8084 	bne.w	8016128 <lv_page_create+0x220>
        ext->scrl = lv_cont_create(new_page, NULL);
 8016020:	2100      	movs	r1, #0
 8016022:	6978      	ldr	r0, [r7, #20]
 8016024:	f7fc feae 	bl	8012d84 <lv_cont_create>
 8016028:	4602      	mov	r2, r0
 801602a:	693b      	ldr	r3, [r7, #16]
 801602c:	605a      	str	r2, [r3, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 801602e:	693b      	ldr	r3, [r7, #16]
 8016030:	685b      	ldr	r3, [r3, #4]
 8016032:	4968      	ldr	r1, [pc, #416]	@ (80161d4 <lv_page_create+0x2cc>)
 8016034:	4618      	mov	r0, r3
 8016036:	f7f0 f9f3 	bl	8006420 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(ext->scrl, lv_scrl_design);
 801603a:	693b      	ldr	r3, [r7, #16]
 801603c:	685b      	ldr	r3, [r3, #4]
 801603e:	4966      	ldr	r1, [pc, #408]	@ (80161d8 <lv_page_create+0x2d0>)
 8016040:	4618      	mov	r0, r3
 8016042:	f7f0 f9fa 	bl	800643a <lv_obj_set_design_cb>
        lv_obj_set_drag(ext->scrl, true);
 8016046:	693b      	ldr	r3, [r7, #16]
 8016048:	685b      	ldr	r3, [r3, #4]
 801604a:	2101      	movs	r1, #1
 801604c:	4618      	mov	r0, r3
 801604e:	f7f0 f8f5 	bl	800623c <lv_obj_set_drag>
        lv_obj_set_drag_throw(ext->scrl, true);
 8016052:	693b      	ldr	r3, [r7, #16]
 8016054:	685b      	ldr	r3, [r3, #4]
 8016056:	2101      	movs	r1, #1
 8016058:	4618      	mov	r0, r3
 801605a:	f7f0 f908 	bl	800626e <lv_obj_set_drag_throw>
        lv_obj_set_protect(ext->scrl, LV_PROTECT_PARENT | LV_PROTECT_PRESS_LOST);
 801605e:	693b      	ldr	r3, [r7, #16]
 8016060:	685b      	ldr	r3, [r3, #4]
 8016062:	2112      	movs	r1, #18
 8016064:	4618      	mov	r0, r3
 8016066:	f7f0 f915 	bl	8006294 <lv_obj_set_protect>
        lv_cont_set_fit4(ext->scrl, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL, LV_FIT_FILL);
 801606a:	693b      	ldr	r3, [r7, #16]
 801606c:	6858      	ldr	r0, [r3, #4]
 801606e:	2303      	movs	r3, #3
 8016070:	9300      	str	r3, [sp, #0]
 8016072:	2303      	movs	r3, #3
 8016074:	2203      	movs	r2, #3
 8016076:	2103      	movs	r1, #3
 8016078:	f7fc ff30 	bl	8012edc <lv_cont_set_fit4>
        lv_obj_set_event_cb(ext->scrl, scrl_def_event_cb); /*Propagate some event to the background
 801607c:	693b      	ldr	r3, [r7, #16]
 801607e:	685b      	ldr	r3, [r3, #4]
 8016080:	4956      	ldr	r1, [pc, #344]	@ (80161dc <lv_page_create+0x2d4>)
 8016082:	4618      	mov	r0, r3
 8016084:	f7f0 f931 	bl	80062ea <lv_obj_set_event_cb>
                                                              object by default for convenience */

        /* Add the signal function only if 'scrolling' is created
         * because everything has to be ready before any signal is received*/
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 8016088:	4955      	ldr	r1, [pc, #340]	@ (80161e0 <lv_page_create+0x2d8>)
 801608a:	6978      	ldr	r0, [r7, #20]
 801608c:	f7f0 f9c8 	bl	8006420 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 8016090:	4954      	ldr	r1, [pc, #336]	@ (80161e4 <lv_page_create+0x2dc>)
 8016092:	6978      	ldr	r0, [r7, #20]
 8016094:	f7f0 f9d1 	bl	800643a <lv_obj_set_design_cb>

        lv_page_set_sb_mode(new_page, ext->sb.mode);
 8016098:	693b      	ldr	r3, [r7, #16]
 801609a:	7f1b      	ldrb	r3, [r3, #28]
 801609c:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80160a0:	b2db      	uxtb	r3, r3
 80160a2:	4619      	mov	r1, r3
 80160a4:	6978      	ldr	r0, [r7, #20]
 80160a6:	f000 f8a3 	bl	80161f0 <lv_page_set_sb_mode>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 80160aa:	f004 f963 	bl	801a374 <lv_theme_get_current>
 80160ae:	60b8      	str	r0, [r7, #8]
        if(th) {
 80160b0:	68bb      	ldr	r3, [r7, #8]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d028      	beq.n	8016108 <lv_page_create+0x200>
            if(par == NULL) { /*Different styles if it is screen*/
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d10c      	bne.n	80160d6 <lv_page_create+0x1ce>
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.bg);
 80160bc:	68bb      	ldr	r3, [r7, #8]
 80160be:	685b      	ldr	r3, [r3, #4]
 80160c0:	461a      	mov	r2, r3
 80160c2:	2100      	movs	r1, #0
 80160c4:	6978      	ldr	r0, [r7, #20]
 80160c6:	f000 f909 	bl	80162dc <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_transp);
 80160ca:	4a47      	ldr	r2, [pc, #284]	@ (80161e8 <lv_page_create+0x2e0>)
 80160cc:	2101      	movs	r1, #1
 80160ce:	6978      	ldr	r0, [r7, #20]
 80160d0:	f000 f904 	bl	80162dc <lv_page_set_style>
 80160d4:	e00f      	b.n	80160f6 <lv_page_create+0x1ee>
            } else {
                lv_page_set_style(new_page, LV_PAGE_STYLE_BG, th->style.page.bg);
 80160d6:	68bb      	ldr	r3, [r7, #8]
 80160d8:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80160dc:	461a      	mov	r2, r3
 80160de:	2100      	movs	r1, #0
 80160e0:	6978      	ldr	r0, [r7, #20]
 80160e2:	f000 f8fb 	bl	80162dc <lv_page_set_style>
                lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, th->style.page.scrl);
 80160e6:	68bb      	ldr	r3, [r7, #8]
 80160e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80160ec:	461a      	mov	r2, r3
 80160ee:	2101      	movs	r1, #1
 80160f0:	6978      	ldr	r0, [r7, #20]
 80160f2:	f000 f8f3 	bl	80162dc <lv_page_set_style>
            }
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, th->style.page.sb);
 80160f6:	68bb      	ldr	r3, [r7, #8]
 80160f8:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80160fc:	461a      	mov	r2, r3
 80160fe:	2102      	movs	r1, #2
 8016100:	6978      	ldr	r0, [r7, #20]
 8016102:	f000 f8eb 	bl	80162dc <lv_page_set_style>
 8016106:	e054      	b.n	80161b2 <lv_page_create+0x2aa>
        } else {
            lv_page_set_style(new_page, LV_PAGE_STYLE_BG, &lv_style_pretty_color);
 8016108:	4a38      	ldr	r2, [pc, #224]	@ (80161ec <lv_page_create+0x2e4>)
 801610a:	2100      	movs	r1, #0
 801610c:	6978      	ldr	r0, [r7, #20]
 801610e:	f000 f8e5 	bl	80162dc <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, &lv_style_pretty);
 8016112:	4a2e      	ldr	r2, [pc, #184]	@ (80161cc <lv_page_create+0x2c4>)
 8016114:	2101      	movs	r1, #1
 8016116:	6978      	ldr	r0, [r7, #20]
 8016118:	f000 f8e0 	bl	80162dc <lv_page_set_style>
            lv_page_set_style(new_page, LV_PAGE_STYLE_SB, &lv_style_pretty_color);
 801611c:	4a33      	ldr	r2, [pc, #204]	@ (80161ec <lv_page_create+0x2e4>)
 801611e:	2102      	movs	r1, #2
 8016120:	6978      	ldr	r0, [r7, #20]
 8016122:	f000 f8db 	bl	80162dc <lv_page_set_style>
 8016126:	e044      	b.n	80161b2 <lv_page_create+0x2aa>
        }

    } else {
        lv_page_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8016128:	6838      	ldr	r0, [r7, #0]
 801612a:	f7f0 fbf5 	bl	8006918 <lv_obj_get_ext_attr>
 801612e:	60f8      	str	r0, [r7, #12]
        ext->scrl                = lv_cont_create(new_page, copy_ext->scrl);
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	685b      	ldr	r3, [r3, #4]
 8016134:	4619      	mov	r1, r3
 8016136:	6978      	ldr	r0, [r7, #20]
 8016138:	f7fc fe24 	bl	8012d84 <lv_cont_create>
 801613c:	4602      	mov	r2, r0
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	605a      	str	r2, [r3, #4]
        lv_obj_set_signal_cb(ext->scrl, lv_page_scrollable_signal);
 8016142:	693b      	ldr	r3, [r7, #16]
 8016144:	685b      	ldr	r3, [r3, #4]
 8016146:	4923      	ldr	r1, [pc, #140]	@ (80161d4 <lv_page_create+0x2cc>)
 8016148:	4618      	mov	r0, r3
 801614a:	f7f0 f969 	bl	8006420 <lv_obj_set_signal_cb>

        lv_page_set_sb_mode(new_page, copy_ext->sb.mode);
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	7f1b      	ldrb	r3, [r3, #28]
 8016152:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8016156:	b2db      	uxtb	r3, r3
 8016158:	4619      	mov	r1, r3
 801615a:	6978      	ldr	r0, [r7, #20]
 801615c:	f000 f848 	bl	80161f0 <lv_page_set_sb_mode>

        lv_page_set_style(new_page, LV_PAGE_STYLE_BG, lv_page_get_style(copy, LV_PAGE_STYLE_BG));
 8016160:	2100      	movs	r1, #0
 8016162:	6838      	ldr	r0, [r7, #0]
 8016164:	f000 f962 	bl	801642c <lv_page_get_style>
 8016168:	4603      	mov	r3, r0
 801616a:	461a      	mov	r2, r3
 801616c:	2100      	movs	r1, #0
 801616e:	6978      	ldr	r0, [r7, #20]
 8016170:	f000 f8b4 	bl	80162dc <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SCRL, lv_page_get_style(copy, LV_PAGE_STYLE_SCRL));
 8016174:	2101      	movs	r1, #1
 8016176:	6838      	ldr	r0, [r7, #0]
 8016178:	f000 f958 	bl	801642c <lv_page_get_style>
 801617c:	4603      	mov	r3, r0
 801617e:	461a      	mov	r2, r3
 8016180:	2101      	movs	r1, #1
 8016182:	6978      	ldr	r0, [r7, #20]
 8016184:	f000 f8aa 	bl	80162dc <lv_page_set_style>
        lv_page_set_style(new_page, LV_PAGE_STYLE_SB, lv_page_get_style(copy, LV_PAGE_STYLE_SB));
 8016188:	2102      	movs	r1, #2
 801618a:	6838      	ldr	r0, [r7, #0]
 801618c:	f000 f94e 	bl	801642c <lv_page_get_style>
 8016190:	4603      	mov	r3, r0
 8016192:	461a      	mov	r2, r3
 8016194:	2102      	movs	r1, #2
 8016196:	6978      	ldr	r0, [r7, #20]
 8016198:	f000 f8a0 	bl	80162dc <lv_page_set_style>

        /* Add the signal function only if 'scrolling' is created
         * because everything has to be ready before any signal is received*/
        lv_obj_set_signal_cb(new_page, lv_page_signal);
 801619c:	4910      	ldr	r1, [pc, #64]	@ (80161e0 <lv_page_create+0x2d8>)
 801619e:	6978      	ldr	r0, [r7, #20]
 80161a0:	f7f0 f93e 	bl	8006420 <lv_obj_set_signal_cb>
        lv_obj_set_design_cb(new_page, lv_page_design);
 80161a4:	490f      	ldr	r1, [pc, #60]	@ (80161e4 <lv_page_create+0x2dc>)
 80161a6:	6978      	ldr	r0, [r7, #20]
 80161a8:	f7f0 f947 	bl	800643a <lv_obj_set_design_cb>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_page);
 80161ac:	6978      	ldr	r0, [r7, #20]
 80161ae:	f7ef ffe4 	bl	800617a <lv_obj_refresh_style>
    }

    lv_page_sb_refresh(new_page);
 80161b2:	6978      	ldr	r0, [r7, #20]
 80161b4:	f001 fabe 	bl	8017734 <lv_page_sb_refresh>

    LV_LOG_INFO("page created");

    return new_page;
 80161b8:	697b      	ldr	r3, [r7, #20]
}
 80161ba:	4618      	mov	r0, r3
 80161bc:	3718      	adds	r7, #24
 80161be:	46bd      	mov	sp, r7
 80161c0:	bd80      	pop	{r7, pc}
 80161c2:	bf00      	nop
 80161c4:	2000ad98 	.word	0x2000ad98
 80161c8:	2000ad94 	.word	0x2000ad94
 80161cc:	20002b44 	.word	0x20002b44
 80161d0:	20002b08 	.word	0x20002b08
 80161d4:	08016fa5 	.word	0x08016fa5
 80161d8:	08016b01 	.word	0x08016b01
 80161dc:	080176d9 	.word	0x080176d9
 80161e0:	08016bd9 	.word	0x08016bd9
 80161e4:	08016615 	.word	0x08016615
 80161e8:	20002a18 	.word	0x20002a18
 80161ec:	20002b80 	.word	0x20002b80

080161f0 <lv_page_set_sb_mode>:
 * Set the scroll bar mode on a page
 * @param page pointer to a page object
 * @param sb_mode the new mode from 'lv_page_sb.mode_t' enum
 */
void lv_page_set_sb_mode(lv_obj_t * page, lv_sb_mode_t sb_mode)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b084      	sub	sp, #16
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
 80161f8:	460b      	mov	r3, r1
 80161fa:	70fb      	strb	r3, [r7, #3]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f7f0 fb8b 	bl	8006918 <lv_obj_get_ext_attr>
 8016202:	60f8      	str	r0, [r7, #12]
    if(ext->sb.mode == sb_mode) return;
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	7f1b      	ldrb	r3, [r3, #28]
 8016208:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801620c:	b2db      	uxtb	r3, r3
 801620e:	461a      	mov	r2, r3
 8016210:	78fb      	ldrb	r3, [r7, #3]
 8016212:	429a      	cmp	r2, r3
 8016214:	d048      	beq.n	80162a8 <lv_page_set_sb_mode+0xb8>

    if(sb_mode == LV_SB_MODE_HIDE)
 8016216:	78fb      	ldrb	r3, [r7, #3]
 8016218:	2b04      	cmp	r3, #4
 801621a:	d10d      	bne.n	8016238 <lv_page_set_sb_mode+0x48>
        ext->sb.mode |= LV_SB_MODE_HIDE; /*Set the hidden flag*/
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	7f1b      	ldrb	r3, [r3, #28]
 8016220:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8016224:	b2db      	uxtb	r3, r3
 8016226:	f043 0304 	orr.w	r3, r3, #4
 801622a:	b2d9      	uxtb	r1, r3
 801622c:	68fa      	ldr	r2, [r7, #12]
 801622e:	7f13      	ldrb	r3, [r2, #28]
 8016230:	f361 0384 	bfi	r3, r1, #2, #3
 8016234:	7713      	strb	r3, [r2, #28]
 8016236:	e026      	b.n	8016286 <lv_page_set_sb_mode+0x96>
    else if(sb_mode == LV_SB_MODE_UNHIDE)
 8016238:	78fb      	ldrb	r3, [r7, #3]
 801623a:	2b05      	cmp	r3, #5
 801623c:	d10d      	bne.n	801625a <lv_page_set_sb_mode+0x6a>
        ext->sb.mode &= (~LV_SB_MODE_HIDE); /*Clear the hidden flag*/
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	7f1b      	ldrb	r3, [r3, #28]
 8016242:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8016246:	b2db      	uxtb	r3, r3
 8016248:	f003 0303 	and.w	r3, r3, #3
 801624c:	b2d9      	uxtb	r1, r3
 801624e:	68fa      	ldr	r2, [r7, #12]
 8016250:	7f13      	ldrb	r3, [r2, #28]
 8016252:	f361 0384 	bfi	r3, r1, #2, #3
 8016256:	7713      	strb	r3, [r2, #28]
 8016258:	e015      	b.n	8016286 <lv_page_set_sb_mode+0x96>
    else {
        if(ext->sb.mode & LV_SB_MODE_HIDE) sb_mode |= LV_SB_MODE_HIDE;
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	7f1b      	ldrb	r3, [r3, #28]
 801625e:	f3c3 0382 	ubfx	r3, r3, #2, #3
 8016262:	b2db      	uxtb	r3, r3
 8016264:	f003 0304 	and.w	r3, r3, #4
 8016268:	2b00      	cmp	r3, #0
 801626a:	d003      	beq.n	8016274 <lv_page_set_sb_mode+0x84>
 801626c:	78fb      	ldrb	r3, [r7, #3]
 801626e:	f043 0304 	orr.w	r3, r3, #4
 8016272:	70fb      	strb	r3, [r7, #3]
        ext->sb.mode = sb_mode;
 8016274:	78fb      	ldrb	r3, [r7, #3]
 8016276:	f003 0307 	and.w	r3, r3, #7
 801627a:	b2d9      	uxtb	r1, r3
 801627c:	68fa      	ldr	r2, [r7, #12]
 801627e:	7f13      	ldrb	r3, [r2, #28]
 8016280:	f361 0384 	bfi	r3, r1, #2, #3
 8016284:	7713      	strb	r3, [r2, #28]
    }

    ext->sb.hor_draw = 0;
 8016286:	68fa      	ldr	r2, [r7, #12]
 8016288:	7f13      	ldrb	r3, [r2, #28]
 801628a:	f36f 0300 	bfc	r3, #0, #1
 801628e:	7713      	strb	r3, [r2, #28]
    ext->sb.ver_draw = 0;
 8016290:	68fa      	ldr	r2, [r7, #12]
 8016292:	7f13      	ldrb	r3, [r2, #28]
 8016294:	f36f 0341 	bfc	r3, #1, #1
 8016298:	7713      	strb	r3, [r2, #28]

    lv_page_sb_refresh(page);
 801629a:	6878      	ldr	r0, [r7, #4]
 801629c:	f001 fa4a 	bl	8017734 <lv_page_sb_refresh>
    lv_obj_invalidate(page);
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f7ef f85b 	bl	800535c <lv_obj_invalidate>
 80162a6:	e000      	b.n	80162aa <lv_page_set_sb_mode+0xba>
    if(ext->sb.mode == sb_mode) return;
 80162a8:	bf00      	nop
}
 80162aa:	3710      	adds	r7, #16
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}

080162b0 <lv_page_set_edge_flash>:
 * Enable the edge flash effect. (Show an arc when the an edge is reached)
 * @param page pointer to a Page
 * @param en true or false to enable/disable end flash
 */
void lv_page_set_edge_flash(lv_obj_t * page, bool en)
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b084      	sub	sp, #16
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
 80162b8:	460b      	mov	r3, r1
 80162ba:	70fb      	strb	r3, [r7, #3]
#if LV_USE_ANIMATION
    lv_page_ext_t * ext     = lv_obj_get_ext_attr(page);
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	f7f0 fb2b 	bl	8006918 <lv_obj_get_ext_attr>
 80162c2:	60f8      	str	r0, [r7, #12]
    ext->edge_flash.enabled = en ? 1 : 0;
 80162c4:	78f9      	ldrb	r1, [r7, #3]
 80162c6:	68fa      	ldr	r2, [r7, #12]
 80162c8:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 80162cc:	f361 0300 	bfi	r3, r1, #0, #1
 80162d0:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
#else
    (void)page;
    (void)en;
#endif
}
 80162d4:	bf00      	nop
 80162d6:	3710      	adds	r7, #16
 80162d8:	46bd      	mov	sp, r7
 80162da:	bd80      	pop	{r7, pc}

080162dc <lv_page_set_style>:
 * @param page pointer to a page object
 * @param type which style should be set
 * @param style pointer to a style
 *  */
void lv_page_set_style(lv_obj_t * page, lv_page_style_t type, const lv_style_t * style)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b086      	sub	sp, #24
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	60f8      	str	r0, [r7, #12]
 80162e4:	460b      	mov	r3, r1
 80162e6:	607a      	str	r2, [r7, #4]
 80162e8:	72fb      	strb	r3, [r7, #11]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80162ea:	68f8      	ldr	r0, [r7, #12]
 80162ec:	f7f0 fb14 	bl	8006918 <lv_obj_get_ext_attr>
 80162f0:	6178      	str	r0, [r7, #20]

    switch(type) {
 80162f2:	7afb      	ldrb	r3, [r7, #11]
 80162f4:	2b03      	cmp	r3, #3
 80162f6:	d83e      	bhi.n	8016376 <lv_page_set_style+0x9a>
 80162f8:	a201      	add	r2, pc, #4	@ (adr r2, 8016300 <lv_page_set_style+0x24>)
 80162fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162fe:	bf00      	nop
 8016300:	08016311 	.word	0x08016311
 8016304:	0801631b 	.word	0x0801631b
 8016308:	08016329 	.word	0x08016329
 801630c:	0801636f 	.word	0x0801636f
        case LV_PAGE_STYLE_BG: lv_obj_set_style(page, style); break;
 8016310:	6879      	ldr	r1, [r7, #4]
 8016312:	68f8      	ldr	r0, [r7, #12]
 8016314:	f7ef ff1f 	bl	8006156 <lv_obj_set_style>
 8016318:	e02d      	b.n	8016376 <lv_page_set_style+0x9a>
        case LV_PAGE_STYLE_SCRL: lv_obj_set_style(ext->scrl, style); break;
 801631a:	697b      	ldr	r3, [r7, #20]
 801631c:	685b      	ldr	r3, [r3, #4]
 801631e:	6879      	ldr	r1, [r7, #4]
 8016320:	4618      	mov	r0, r3
 8016322:	f7ef ff18 	bl	8006156 <lv_obj_set_style>
 8016326:	e026      	b.n	8016376 <lv_page_set_style+0x9a>
        case LV_PAGE_STYLE_SB:
            ext->sb.style = style;
 8016328:	697b      	ldr	r3, [r7, #20]
 801632a:	687a      	ldr	r2, [r7, #4]
 801632c:	609a      	str	r2, [r3, #8]
            lv_area_set_height(&ext->sb.hor_area, ext->sb.style->body.padding.inner);
 801632e:	697b      	ldr	r3, [r7, #20]
 8016330:	f103 020c 	add.w	r2, r3, #12
 8016334:	697b      	ldr	r3, [r7, #20]
 8016336:	689b      	ldr	r3, [r3, #8]
 8016338:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801633c:	4619      	mov	r1, r3
 801633e:	4610      	mov	r0, r2
 8016340:	f7f9 f8ad 	bl	800f49e <lv_area_set_height>
            lv_area_set_width(&ext->sb.ver_area, ext->sb.style->body.padding.inner);
 8016344:	697b      	ldr	r3, [r7, #20]
 8016346:	f103 0214 	add.w	r2, r3, #20
 801634a:	697b      	ldr	r3, [r7, #20]
 801634c:	689b      	ldr	r3, [r3, #8]
 801634e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8016352:	4619      	mov	r1, r3
 8016354:	4610      	mov	r0, r2
 8016356:	f7f9 f88b 	bl	800f470 <lv_area_set_width>
            lv_page_sb_refresh(page);
 801635a:	68f8      	ldr	r0, [r7, #12]
 801635c:	f001 f9ea 	bl	8017734 <lv_page_sb_refresh>
            lv_obj_refresh_ext_draw_pad(page);
 8016360:	68f8      	ldr	r0, [r7, #12]
 8016362:	f7f0 f88d 	bl	8006480 <lv_obj_refresh_ext_draw_pad>
            lv_obj_invalidate(page);
 8016366:	68f8      	ldr	r0, [r7, #12]
 8016368:	f7ee fff8 	bl	800535c <lv_obj_invalidate>
            break;
 801636c:	e003      	b.n	8016376 <lv_page_set_style+0x9a>
#if LV_USE_ANIMATION
        case LV_PAGE_STYLE_EDGE_FLASH: ext->edge_flash.style = style; break;
 801636e:	697b      	ldr	r3, [r7, #20]
 8016370:	687a      	ldr	r2, [r7, #4]
 8016372:	625a      	str	r2, [r3, #36]	@ 0x24
 8016374:	bf00      	nop
#endif
    }
}
 8016376:	bf00      	nop
 8016378:	3718      	adds	r7, #24
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
 801637e:	bf00      	nop

08016380 <lv_page_get_scrl>:
 * Get the scrollable object of a page
 * @param page pointer to a page object
 * @return pointer to a container which is the scrollable part of the page
 */
lv_obj_t * lv_page_get_scrl(const lv_obj_t * page)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b084      	sub	sp, #16
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8016388:	6878      	ldr	r0, [r7, #4]
 801638a:	f7f0 fac5 	bl	8006918 <lv_obj_get_ext_attr>
 801638e:	60f8      	str	r0, [r7, #12]

    return ext->scrl;
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	685b      	ldr	r3, [r3, #4]
}
 8016394:	4618      	mov	r0, r3
 8016396:	3710      	adds	r7, #16
 8016398:	46bd      	mov	sp, r7
 801639a:	bd80      	pop	{r7, pc}

0801639c <lv_page_get_edge_flash>:
 * Get the edge flash effect property.
 * @param page pointer to a Page
 * return true or false
 */
bool lv_page_get_edge_flash(lv_obj_t * page)
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b084      	sub	sp, #16
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
#if LV_USE_ANIMATION
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80163a4:	6878      	ldr	r0, [r7, #4]
 80163a6:	f7f0 fab7 	bl	8006918 <lv_obj_get_ext_attr>
 80163aa:	60f8      	str	r0, [r7, #12]
    return ext->edge_flash.enabled == 0 ? false : true;
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80163b2:	f003 0301 	and.w	r3, r3, #1
 80163b6:	b2db      	uxtb	r3, r3
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	bf14      	ite	ne
 80163bc:	2301      	movne	r3, #1
 80163be:	2300      	moveq	r3, #0
 80163c0:	b2db      	uxtb	r3, r3
#else
    (void)page;
    return false;
#endif
}
 80163c2:	4618      	mov	r0, r3
 80163c4:	3710      	adds	r7, #16
 80163c6:	46bd      	mov	sp, r7
 80163c8:	bd80      	pop	{r7, pc}

080163ca <lv_page_get_fit_width>:
 * Get that width which can be set to the children to still not cause overflow (show scrollbars)
 * @param page pointer to a page object
 * @return the width which still fits into the page
 */
lv_coord_t lv_page_get_fit_width(lv_obj_t * page)
{
 80163ca:	b580      	push	{r7, lr}
 80163cc:	b084      	sub	sp, #16
 80163ce:	af00      	add	r7, sp, #0
 80163d0:	6078      	str	r0, [r7, #4]
    const lv_style_t * bg_style   = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 80163d2:	2100      	movs	r1, #0
 80163d4:	6878      	ldr	r0, [r7, #4]
 80163d6:	f000 f829 	bl	801642c <lv_page_get_style>
 80163da:	60f8      	str	r0, [r7, #12]
    const lv_style_t * scrl_style = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 80163dc:	2101      	movs	r1, #1
 80163de:	6878      	ldr	r0, [r7, #4]
 80163e0:	f000 f824 	bl	801642c <lv_page_get_style>
 80163e4:	60b8      	str	r0, [r7, #8]

    return lv_obj_get_width(page) - bg_style->body.padding.left - bg_style->body.padding.right -
 80163e6:	6878      	ldr	r0, [r7, #4]
 80163e8:	f7f0 f915 	bl	8006616 <lv_obj_get_width>
 80163ec:	4603      	mov	r3, r0
 80163ee:	b29a      	uxth	r2, r3
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80163f6:	b29b      	uxth	r3, r3
 80163f8:	1ad3      	subs	r3, r2, r3
 80163fa:	b29a      	uxth	r2, r3
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016402:	b29b      	uxth	r3, r3
 8016404:	1ad3      	subs	r3, r2, r3
 8016406:	b29a      	uxth	r2, r3
           scrl_style->body.padding.left - scrl_style->body.padding.right;
 8016408:	68bb      	ldr	r3, [r7, #8]
 801640a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 801640e:	b29b      	uxth	r3, r3
    return lv_obj_get_width(page) - bg_style->body.padding.left - bg_style->body.padding.right -
 8016410:	1ad3      	subs	r3, r2, r3
 8016412:	b29a      	uxth	r2, r3
           scrl_style->body.padding.left - scrl_style->body.padding.right;
 8016414:	68bb      	ldr	r3, [r7, #8]
 8016416:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801641a:	b29b      	uxth	r3, r3
 801641c:	1ad3      	subs	r3, r2, r3
 801641e:	b29b      	uxth	r3, r3
 8016420:	b21b      	sxth	r3, r3
}
 8016422:	4618      	mov	r0, r3
 8016424:	3710      	adds	r7, #16
 8016426:	46bd      	mov	sp, r7
 8016428:	bd80      	pop	{r7, pc}
	...

0801642c <lv_page_get_style>:
 * @param page pointer to page object
 * @param type which style should be get
 * @return style pointer to a style
 *  */
const lv_style_t * lv_page_get_style(const lv_obj_t * page, lv_page_style_t type)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b084      	sub	sp, #16
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
 8016434:	460b      	mov	r3, r1
 8016436:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 8016438:	2300      	movs	r3, #0
 801643a:	60fb      	str	r3, [r7, #12]
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 801643c:	6878      	ldr	r0, [r7, #4]
 801643e:	f7f0 fa6b 	bl	8006918 <lv_obj_get_ext_attr>
 8016442:	60b8      	str	r0, [r7, #8]

    switch(type) {
 8016444:	78fb      	ldrb	r3, [r7, #3]
 8016446:	2b03      	cmp	r3, #3
 8016448:	d81e      	bhi.n	8016488 <lv_page_get_style+0x5c>
 801644a:	a201      	add	r2, pc, #4	@ (adr r2, 8016450 <lv_page_get_style+0x24>)
 801644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016450:	08016461 	.word	0x08016461
 8016454:	0801646b 	.word	0x0801646b
 8016458:	08016479 	.word	0x08016479
 801645c:	08016481 	.word	0x08016481
        case LV_PAGE_STYLE_BG: style = lv_obj_get_style(page); break;
 8016460:	6878      	ldr	r0, [r7, #4]
 8016462:	f7f0 f943 	bl	80066ec <lv_obj_get_style>
 8016466:	60f8      	str	r0, [r7, #12]
 8016468:	e011      	b.n	801648e <lv_page_get_style+0x62>
        case LV_PAGE_STYLE_SCRL: style = lv_obj_get_style(ext->scrl); break;
 801646a:	68bb      	ldr	r3, [r7, #8]
 801646c:	685b      	ldr	r3, [r3, #4]
 801646e:	4618      	mov	r0, r3
 8016470:	f7f0 f93c 	bl	80066ec <lv_obj_get_style>
 8016474:	60f8      	str	r0, [r7, #12]
 8016476:	e00a      	b.n	801648e <lv_page_get_style+0x62>
        case LV_PAGE_STYLE_SB: style = ext->sb.style; break;
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	689b      	ldr	r3, [r3, #8]
 801647c:	60fb      	str	r3, [r7, #12]
 801647e:	e006      	b.n	801648e <lv_page_get_style+0x62>
#if LV_USE_ANIMATION
        case LV_PAGE_STYLE_EDGE_FLASH: style = ext->edge_flash.style; break;
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016484:	60fb      	str	r3, [r7, #12]
 8016486:	e002      	b.n	801648e <lv_page_get_style+0x62>
#endif
        default: style = NULL; break;
 8016488:	2300      	movs	r3, #0
 801648a:	60fb      	str	r3, [r7, #12]
 801648c:	bf00      	nop
    }

    return style;
 801648e:	68fb      	ldr	r3, [r7, #12]
}
 8016490:	4618      	mov	r0, r3
 8016492:	3710      	adds	r7, #16
 8016494:	46bd      	mov	sp, r7
 8016496:	bd80      	pop	{r7, pc}

08016498 <lv_page_scroll_hor>:
 * Scroll the page horizontally
 * @param page pointer to a page object
 * @param dist the distance to scroll (< 0: scroll right; > 0 scroll left)
 */
void lv_page_scroll_hor(lv_obj_t * page, lv_coord_t dist)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b08e      	sub	sp, #56	@ 0x38
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
 80164a0:	460b      	mov	r3, r1
 80164a2:	807b      	strh	r3, [r7, #2]
    lv_obj_t * scrl = lv_page_get_scrl(page);
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	f7ff ff6b 	bl	8016380 <lv_page_get_scrl>
 80164aa:	6378      	str	r0, [r7, #52]	@ 0x34

#if LV_USE_ANIMATION
    lv_anim_t a;
    a.var            = scrl;
 80164ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80164ae:	60fb      	str	r3, [r7, #12]
    a.start          = lv_obj_get_x(scrl);
 80164b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80164b2:	f7f0 f87e 	bl	80065b2 <lv_obj_get_x>
 80164b6:	4603      	mov	r3, r0
 80164b8:	61fb      	str	r3, [r7, #28]
    a.end            = a.start + dist;
 80164ba:	69fa      	ldr	r2, [r7, #28]
 80164bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80164c0:	4413      	add	r3, r2
 80164c2:	623b      	str	r3, [r7, #32]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_x;
 80164c4:	4b11      	ldr	r3, [pc, #68]	@ (801650c <lv_page_scroll_hor+0x74>)
 80164c6:	613b      	str	r3, [r7, #16]
    a.path_cb        = lv_anim_path_linear;
 80164c8:	4b11      	ldr	r3, [pc, #68]	@ (8016510 <lv_page_scroll_hor+0x78>)
 80164ca:	617b      	str	r3, [r7, #20]
    a.ready_cb       = NULL;
 80164cc:	2300      	movs	r3, #0
 80164ce:	61bb      	str	r3, [r7, #24]
    a.act_time       = 0;
 80164d0:	2300      	movs	r3, #0
 80164d2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 80164d4:	23c8      	movs	r3, #200	@ 0xc8
 80164d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
    a.playback       = 0;
 80164d8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80164dc:	f36f 0300 	bfc	r3, #0, #1
 80164e0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    a.playback_pause = 0;
 80164e4:	2300      	movs	r3, #0
 80164e6:	853b      	strh	r3, [r7, #40]	@ 0x28
    a.repeat         = 0;
 80164e8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80164ec:	f36f 0341 	bfc	r3, #1, #1
 80164f0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    a.repeat_pause   = 0;
 80164f4:	2300      	movs	r3, #0
 80164f6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    lv_anim_create(&a);
 80164f8:	f107 030c 	add.w	r3, r7, #12
 80164fc:	4618      	mov	r0, r3
 80164fe:	f7f8 fd5f 	bl	800efc0 <lv_anim_create>
#else
    lv_obj_set_x(scrl, lv_obj_get_x(scrl) + dist);
#endif
}
 8016502:	bf00      	nop
 8016504:	3738      	adds	r7, #56	@ 0x38
 8016506:	46bd      	mov	sp, r7
 8016508:	bd80      	pop	{r7, pc}
 801650a:	bf00      	nop
 801650c:	08005671 	.word	0x08005671
 8016510:	0800f113 	.word	0x0800f113

08016514 <lv_page_scroll_ver>:
 * Scroll the page vertically
 * @param page pointer to a page object
 * @param dist the distance to scroll (< 0: scroll down; > 0 scroll up)
 */
void lv_page_scroll_ver(lv_obj_t * page, lv_coord_t dist)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b08e      	sub	sp, #56	@ 0x38
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
 801651c:	460b      	mov	r3, r1
 801651e:	807b      	strh	r3, [r7, #2]
    lv_obj_t * scrl = lv_page_get_scrl(page);
 8016520:	6878      	ldr	r0, [r7, #4]
 8016522:	f7ff ff2d 	bl	8016380 <lv_page_get_scrl>
 8016526:	6378      	str	r0, [r7, #52]	@ 0x34

#if LV_USE_ANIMATION
    lv_anim_t a;
    a.var            = scrl;
 8016528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801652a:	60fb      	str	r3, [r7, #12]
    a.start          = lv_obj_get_y(scrl);
 801652c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801652e:	f7f0 f859 	bl	80065e4 <lv_obj_get_y>
 8016532:	4603      	mov	r3, r0
 8016534:	61fb      	str	r3, [r7, #28]
    a.end            = a.start + dist;
 8016536:	69fa      	ldr	r2, [r7, #28]
 8016538:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801653c:	4413      	add	r3, r2
 801653e:	623b      	str	r3, [r7, #32]
    a.exec_cb        = (lv_anim_exec_xcb_t)lv_obj_set_y;
 8016540:	4b11      	ldr	r3, [pc, #68]	@ (8016588 <lv_page_scroll_ver+0x74>)
 8016542:	613b      	str	r3, [r7, #16]
    a.path_cb        = lv_anim_path_linear;
 8016544:	4b11      	ldr	r3, [pc, #68]	@ (801658c <lv_page_scroll_ver+0x78>)
 8016546:	617b      	str	r3, [r7, #20]
    a.ready_cb       = NULL;
 8016548:	2300      	movs	r3, #0
 801654a:	61bb      	str	r3, [r7, #24]
    a.act_time       = 0;
 801654c:	2300      	movs	r3, #0
 801654e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    a.time           = LV_PAGE_SCROLL_ANIM_TIME;
 8016550:	23c8      	movs	r3, #200	@ 0xc8
 8016552:	84bb      	strh	r3, [r7, #36]	@ 0x24
    a.playback       = 0;
 8016554:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8016558:	f36f 0300 	bfc	r3, #0, #1
 801655c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    a.playback_pause = 0;
 8016560:	2300      	movs	r3, #0
 8016562:	853b      	strh	r3, [r7, #40]	@ 0x28
    a.repeat         = 0;
 8016564:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8016568:	f36f 0341 	bfc	r3, #1, #1
 801656c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    a.repeat_pause   = 0;
 8016570:	2300      	movs	r3, #0
 8016572:	857b      	strh	r3, [r7, #42]	@ 0x2a
    lv_anim_create(&a);
 8016574:	f107 030c 	add.w	r3, r7, #12
 8016578:	4618      	mov	r0, r3
 801657a:	f7f8 fd21 	bl	800efc0 <lv_anim_create>
#else
    lv_obj_set_y(scrl, lv_obj_get_y(scrl) + dist);
#endif
}
 801657e:	bf00      	nop
 8016580:	3738      	adds	r7, #56	@ 0x38
 8016582:	46bd      	mov	sp, r7
 8016584:	bd80      	pop	{r7, pc}
 8016586:	bf00      	nop
 8016588:	0800569b 	.word	0x0800569b
 801658c:	0800f113 	.word	0x0800f113

08016590 <lv_page_start_edge_flash>:
 * Not intended to use directly by the user but by other object types internally.
 * Start an edge flash animation. Exactly one `ext->edge_flash.xxx_ip` should be set
 * @param page
 */
void lv_page_start_edge_flash(lv_obj_t * page)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b08e      	sub	sp, #56	@ 0x38
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
#if LV_USE_ANIMATION
    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8016598:	6878      	ldr	r0, [r7, #4]
 801659a:	f7f0 f9bd 	bl	8006918 <lv_obj_get_ext_attr>
 801659e:	6378      	str	r0, [r7, #52]	@ 0x34
    if(ext->edge_flash.enabled) {
 80165a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80165a6:	f003 0301 	and.w	r3, r3, #1
 80165aa:	b2db      	uxtb	r3, r3
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d026      	beq.n	80165fe <lv_page_start_edge_flash+0x6e>
        lv_anim_t a;
        a.var            = page;
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	60fb      	str	r3, [r7, #12]
        a.start          = 0;
 80165b4:	2300      	movs	r3, #0
 80165b6:	61fb      	str	r3, [r7, #28]
        a.end            = LV_PAGE_END_FLASH_SIZE;
 80165b8:	2319      	movs	r3, #25
 80165ba:	623b      	str	r3, [r7, #32]
        a.exec_cb        = (lv_anim_exec_xcb_t)edge_flash_anim;
 80165bc:	4b12      	ldr	r3, [pc, #72]	@ (8016608 <lv_page_start_edge_flash+0x78>)
 80165be:	613b      	str	r3, [r7, #16]
        a.path_cb        = lv_anim_path_linear;
 80165c0:	4b12      	ldr	r3, [pc, #72]	@ (801660c <lv_page_start_edge_flash+0x7c>)
 80165c2:	617b      	str	r3, [r7, #20]
        a.ready_cb       = edge_flash_anim_end;
 80165c4:	4b12      	ldr	r3, [pc, #72]	@ (8016610 <lv_page_start_edge_flash+0x80>)
 80165c6:	61bb      	str	r3, [r7, #24]
        a.act_time       = 0;
 80165c8:	2300      	movs	r3, #0
 80165ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
        a.time           = LV_PAGE_END_ANIM_TIME;
 80165cc:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80165d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
        a.playback       = 1;
 80165d2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80165d6:	f043 0301 	orr.w	r3, r3, #1
 80165da:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        a.playback_pause = LV_PAGE_END_ANIM_WAIT_TIME;
 80165de:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80165e2:	853b      	strh	r3, [r7, #40]	@ 0x28
        a.repeat         = 0;
 80165e4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80165e8:	f36f 0341 	bfc	r3, #1, #1
 80165ec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        a.repeat_pause   = 0;
 80165f0:	2300      	movs	r3, #0
 80165f2:	857b      	strh	r3, [r7, #42]	@ 0x2a
        lv_anim_create(&a);
 80165f4:	f107 030c 	add.w	r3, r7, #12
 80165f8:	4618      	mov	r0, r3
 80165fa:	f7f8 fce1 	bl	800efc0 <lv_anim_create>
    }
#else
    (void)page; /*Unused*/
#endif
}
 80165fe:	bf00      	nop
 8016600:	3738      	adds	r7, #56	@ 0x38
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}
 8016606:	bf00      	nop
 8016608:	08017d33 	.word	0x08017d33
 801660c:	0800f113 	.word	0x0800f113
 8016610:	08017d5b 	.word	0x08017d5b

08016614 <lv_page_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_page_design(lv_obj_t * page, const lv_area_t * mask, lv_design_mode_t mode)
{
 8016614:	b590      	push	{r4, r7, lr}
 8016616:	b0ab      	sub	sp, #172	@ 0xac
 8016618:	af00      	add	r7, sp, #0
 801661a:	60f8      	str	r0, [r7, #12]
 801661c:	60b9      	str	r1, [r7, #8]
 801661e:	4613      	mov	r3, r2
 8016620:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 8016622:	79fb      	ldrb	r3, [r7, #7]
 8016624:	2b02      	cmp	r3, #2
 8016626:	d107      	bne.n	8016638 <lv_page_design+0x24>
        return ancestor_design(page, mask, mode);
 8016628:	4ba3      	ldr	r3, [pc, #652]	@ (80168b8 <lv_page_design+0x2a4>)
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	79fa      	ldrb	r2, [r7, #7]
 801662e:	68b9      	ldr	r1, [r7, #8]
 8016630:	68f8      	ldr	r0, [r7, #12]
 8016632:	4798      	blx	r3
 8016634:	4603      	mov	r3, r0
 8016636:	e25c      	b.n	8016af2 <lv_page_design+0x4de>
    }
    /*Cache page bg style for temporary modification*/
    const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_BG);
 8016638:	2100      	movs	r1, #0
 801663a:	68f8      	ldr	r0, [r7, #12]
 801663c:	f7ff fef6 	bl	801642c <lv_page_get_style>
 8016640:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    lv_style_t style_tmp;
    lv_style_copy(&style_tmp, style);
 8016644:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8016648:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801664c:	4618      	mov	r0, r3
 801664e:	f7f1 fbd3 	bl	8007df8 <lv_style_copy>

    if(mode == LV_DESIGN_DRAW_MAIN) {
 8016652:	79fb      	ldrb	r3, [r7, #7]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d110      	bne.n	801667a <lv_page_design+0x66>
        /*Draw without border*/
        style_tmp.body.border.width = 0;
 8016658:	2300      	movs	r3, #0
 801665a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	f103 0410 	add.w	r4, r3, #16
 8016664:	68f8      	ldr	r0, [r7, #12]
 8016666:	f7f0 f90c 	bl	8006882 <lv_obj_get_opa_scale>
 801666a:	4603      	mov	r3, r0
 801666c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8016670:	68b9      	ldr	r1, [r7, #8]
 8016672:	4620      	mov	r0, r4
 8016674:	f7f2 fefa 	bl	800946c <lv_draw_rect>
 8016678:	e23a      	b.n	8016af0 <lv_page_design+0x4dc>

    } else if(mode == LV_DESIGN_DRAW_POST) {
 801667a:	79fb      	ldrb	r3, [r7, #7]
 801667c:	2b01      	cmp	r3, #1
 801667e:	f040 8237 	bne.w	8016af0 <lv_page_design+0x4dc>
        /*Draw only a border*/
        style_tmp.body.shadow.width = 0;
 8016682:	2300      	movs	r3, #0
 8016684:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
        style_tmp.body.opa          = LV_OPA_TRANSP;
 8016688:	2300      	movs	r3, #0
 801668a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        lv_draw_rect(&page->coords, mask, &style_tmp, lv_obj_get_opa_scale(page));
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	f103 0410 	add.w	r4, r3, #16
 8016694:	68f8      	ldr	r0, [r7, #12]
 8016696:	f7f0 f8f4 	bl	8006882 <lv_obj_get_opa_scale>
 801669a:	4603      	mov	r3, r0
 801669c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80166a0:	68b9      	ldr	r1, [r7, #8]
 80166a2:	4620      	mov	r0, r4
 80166a4:	f7f2 fee2 	bl	800946c <lv_draw_rect>

        lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 80166a8:	68f8      	ldr	r0, [r7, #12]
 80166aa:	f7f0 f935 	bl	8006918 <lv_obj_get_ext_attr>
 80166ae:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

        /*Draw the scrollbars*/
        lv_area_t sb_area;
        if(ext->sb.hor_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 80166b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80166b6:	7f1b      	ldrb	r3, [r3, #28]
 80166b8:	f003 0301 	and.w	r3, r3, #1
 80166bc:	b2db      	uxtb	r3, r3
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d050      	beq.n	8016764 <lv_page_design+0x150>
 80166c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80166c6:	7f1b      	ldrb	r3, [r3, #28]
 80166c8:	f3c3 0382 	ubfx	r3, r3, #2, #3
 80166cc:	b2db      	uxtb	r3, r3
 80166ce:	f003 0304 	and.w	r3, r3, #4
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d146      	bne.n	8016764 <lv_page_design+0x150>
            /*Convert the relative coordinates to absolute*/
            lv_area_copy(&sb_area, &ext->sb.hor_area);
 80166d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80166da:	f103 020c 	add.w	r2, r3, #12
 80166de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80166e2:	4611      	mov	r1, r2
 80166e4:	4618      	mov	r0, r3
 80166e6:	f7ff fba4 	bl	8015e32 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 80166ea:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 80166ee:	b29a      	uxth	r2, r3
 80166f0:	68fb      	ldr	r3, [r7, #12]
 80166f2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80166f6:	b29b      	uxth	r3, r3
 80166f8:	4413      	add	r3, r2
 80166fa:	b29b      	uxth	r3, r3
 80166fc:	b21b      	sxth	r3, r3
 80166fe:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
            sb_area.y1 += page->coords.y1;
 8016702:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8016706:	b29a      	uxth	r2, r3
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801670e:	b29b      	uxth	r3, r3
 8016710:	4413      	add	r3, r2
 8016712:	b29b      	uxth	r3, r3
 8016714:	b21b      	sxth	r3, r3
 8016716:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            sb_area.x2 += page->coords.x1;
 801671a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 801671e:	b29a      	uxth	r2, r3
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016726:	b29b      	uxth	r3, r3
 8016728:	4413      	add	r3, r2
 801672a:	b29b      	uxth	r3, r3
 801672c:	b21b      	sxth	r3, r3
 801672e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            sb_area.y2 += page->coords.y1;
 8016732:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8016736:	b29a      	uxth	r2, r3
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801673e:	b29b      	uxth	r3, r3
 8016740:	4413      	add	r3, r2
 8016742:	b29b      	uxth	r3, r3
 8016744:	b21b      	sxth	r3, r3
 8016746:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 801674a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801674e:	689c      	ldr	r4, [r3, #8]
 8016750:	68f8      	ldr	r0, [r7, #12]
 8016752:	f7f0 f896 	bl	8006882 <lv_obj_get_opa_scale>
 8016756:	4603      	mov	r3, r0
 8016758:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801675c:	4622      	mov	r2, r4
 801675e:	68b9      	ldr	r1, [r7, #8]
 8016760:	f7f2 fe84 	bl	800946c <lv_draw_rect>
        }

        if(ext->sb.ver_draw && (ext->sb.mode & LV_SB_MODE_HIDE) == 0) {
 8016764:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016768:	7f1b      	ldrb	r3, [r3, #28]
 801676a:	f003 0302 	and.w	r3, r3, #2
 801676e:	b2db      	uxtb	r3, r3
 8016770:	2b00      	cmp	r3, #0
 8016772:	d050      	beq.n	8016816 <lv_page_design+0x202>
 8016774:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016778:	7f1b      	ldrb	r3, [r3, #28]
 801677a:	f3c3 0382 	ubfx	r3, r3, #2, #3
 801677e:	b2db      	uxtb	r3, r3
 8016780:	f003 0304 	and.w	r3, r3, #4
 8016784:	2b00      	cmp	r3, #0
 8016786:	d146      	bne.n	8016816 <lv_page_design+0x202>
            /*Convert the relative coordinates to absolute*/
            lv_area_copy(&sb_area, &ext->sb.ver_area);
 8016788:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801678c:	f103 0214 	add.w	r2, r3, #20
 8016790:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8016794:	4611      	mov	r1, r2
 8016796:	4618      	mov	r0, r3
 8016798:	f7ff fb4b 	bl	8015e32 <lv_area_copy>
            sb_area.x1 += page->coords.x1;
 801679c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 80167a0:	b29a      	uxth	r2, r3
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80167a8:	b29b      	uxth	r3, r3
 80167aa:	4413      	add	r3, r2
 80167ac:	b29b      	uxth	r3, r3
 80167ae:	b21b      	sxth	r3, r3
 80167b0:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
            sb_area.y1 += page->coords.y1;
 80167b4:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 80167b8:	b29a      	uxth	r2, r3
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80167c0:	b29b      	uxth	r3, r3
 80167c2:	4413      	add	r3, r2
 80167c4:	b29b      	uxth	r3, r3
 80167c6:	b21b      	sxth	r3, r3
 80167c8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
            sb_area.x2 += page->coords.x1;
 80167cc:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 80167d0:	b29a      	uxth	r2, r3
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80167d8:	b29b      	uxth	r3, r3
 80167da:	4413      	add	r3, r2
 80167dc:	b29b      	uxth	r3, r3
 80167de:	b21b      	sxth	r3, r3
 80167e0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            sb_area.y2 += page->coords.y1;
 80167e4:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 80167e8:	b29a      	uxth	r2, r3
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80167f0:	b29b      	uxth	r3, r3
 80167f2:	4413      	add	r3, r2
 80167f4:	b29b      	uxth	r3, r3
 80167f6:	b21b      	sxth	r3, r3
 80167f8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            lv_draw_rect(&sb_area, mask, ext->sb.style, lv_obj_get_opa_scale(page));
 80167fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016800:	689c      	ldr	r4, [r3, #8]
 8016802:	68f8      	ldr	r0, [r7, #12]
 8016804:	f7f0 f83d 	bl	8006882 <lv_obj_get_opa_scale>
 8016808:	4603      	mov	r3, r0
 801680a:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801680e:	4622      	mov	r2, r4
 8016810:	68b9      	ldr	r1, [r7, #8]
 8016812:	f7f2 fe2b 	bl	800946c <lv_draw_rect>
        }

#if LV_USE_ANIMATION
        {
            lv_coord_t page_w = lv_obj_get_width(page);
 8016816:	68f8      	ldr	r0, [r7, #12]
 8016818:	f7ef fefd 	bl	8006616 <lv_obj_get_width>
 801681c:	4603      	mov	r3, r0
 801681e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
            lv_coord_t page_h = lv_obj_get_height(page);
 8016822:	68f8      	ldr	r0, [r7, #12]
 8016824:	f7ef ff05 	bl	8006632 <lv_obj_get_height>
 8016828:	4603      	mov	r3, r0
 801682a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c

            lv_area_t flash_area;

            if(ext->edge_flash.top_ip) {
 801682e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016832:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016836:	f003 0302 	and.w	r3, r3, #2
 801683a:	b2db      	uxtb	r3, r3
 801683c:	2b00      	cmp	r3, #0
 801683e:	d03d      	beq.n	80168bc <lv_page_design+0x2a8>
                flash_area.x1 = page->coords.x1 - page_w;
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016846:	b29a      	uxth	r2, r3
 8016848:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801684c:	1ad3      	subs	r3, r2, r3
 801684e:	b29b      	uxth	r3, r3
 8016850:	b21b      	sxth	r3, r3
 8016852:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
                flash_area.x2 = page->coords.x2 + page_w;
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801685c:	b29a      	uxth	r2, r3
 801685e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8016862:	4413      	add	r3, r2
 8016864:	b29b      	uxth	r3, r3
 8016866:	b21b      	sxth	r3, r3
 8016868:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
                flash_area.y1 = page->coords.y1 - 3 * page_w + ext->edge_flash.state;
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8016872:	b29a      	uxth	r2, r3
 8016874:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8016878:	4619      	mov	r1, r3
 801687a:	009b      	lsls	r3, r3, #2
 801687c:	1acb      	subs	r3, r1, r3
 801687e:	b29b      	uxth	r3, r3
 8016880:	4413      	add	r3, r2
 8016882:	b29a      	uxth	r2, r3
 8016884:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016888:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801688c:	b29b      	uxth	r3, r3
 801688e:	4413      	add	r3, r2
 8016890:	b29b      	uxth	r3, r3
 8016892:	b21b      	sxth	r3, r3
 8016894:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                flash_area.y2 = page->coords.y1 + ext->edge_flash.state;
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801689e:	b29a      	uxth	r2, r3
 80168a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80168a4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80168a8:	b29b      	uxth	r3, r3
 80168aa:	4413      	add	r3, r2
 80168ac:	b29b      	uxth	r3, r3
 80168ae:	b21b      	sxth	r3, r3
 80168b0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80168b4:	e0cd      	b.n	8016a52 <lv_page_design+0x43e>
 80168b6:	bf00      	nop
 80168b8:	2000ad94 	.word	0x2000ad94
            } else if(ext->edge_flash.bottom_ip) {
 80168bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80168c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80168c4:	f003 0304 	and.w	r3, r3, #4
 80168c8:	b2db      	uxtb	r3, r3
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d03a      	beq.n	8016944 <lv_page_design+0x330>
                flash_area.x1 = page->coords.x1 - page_w;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80168d4:	b29a      	uxth	r2, r3
 80168d6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80168da:	1ad3      	subs	r3, r2, r3
 80168dc:	b29b      	uxth	r3, r3
 80168de:	b21b      	sxth	r3, r3
 80168e0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
                flash_area.x2 = page->coords.x2 + page_w;
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80168ea:	b29a      	uxth	r2, r3
 80168ec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80168f0:	4413      	add	r3, r2
 80168f2:	b29b      	uxth	r3, r3
 80168f4:	b21b      	sxth	r3, r3
 80168f6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
                flash_area.y1 = page->coords.y2 - ext->edge_flash.state;
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8016900:	b29a      	uxth	r2, r3
 8016902:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016906:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801690a:	b29b      	uxth	r3, r3
 801690c:	1ad3      	subs	r3, r2, r3
 801690e:	b29b      	uxth	r3, r3
 8016910:	b21b      	sxth	r3, r3
 8016912:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                flash_area.y2 = page->coords.y2 + 3 * page_w - ext->edge_flash.state;
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801691c:	b29a      	uxth	r2, r3
 801691e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8016922:	4619      	mov	r1, r3
 8016924:	0049      	lsls	r1, r1, #1
 8016926:	440b      	add	r3, r1
 8016928:	b29b      	uxth	r3, r3
 801692a:	4413      	add	r3, r2
 801692c:	b29a      	uxth	r2, r3
 801692e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016932:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8016936:	b29b      	uxth	r3, r3
 8016938:	1ad3      	subs	r3, r2, r3
 801693a:	b29b      	uxth	r3, r3
 801693c:	b21b      	sxth	r3, r3
 801693e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8016942:	e086      	b.n	8016a52 <lv_page_design+0x43e>
            } else if(ext->edge_flash.right_ip) {
 8016944:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016948:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801694c:	f003 0308 	and.w	r3, r3, #8
 8016950:	b2db      	uxtb	r3, r3
 8016952:	2b00      	cmp	r3, #0
 8016954:	d03a      	beq.n	80169cc <lv_page_design+0x3b8>
                flash_area.x1 = page->coords.x2 - ext->edge_flash.state;
 8016956:	68fb      	ldr	r3, [r7, #12]
 8016958:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801695c:	b29a      	uxth	r2, r3
 801695e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016962:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8016966:	b29b      	uxth	r3, r3
 8016968:	1ad3      	subs	r3, r2, r3
 801696a:	b29b      	uxth	r3, r3
 801696c:	b21b      	sxth	r3, r3
 801696e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
                flash_area.x2 = page->coords.x2 + 3 * page_h - ext->edge_flash.state;
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8016978:	b29a      	uxth	r2, r3
 801697a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801697e:	4619      	mov	r1, r3
 8016980:	0049      	lsls	r1, r1, #1
 8016982:	440b      	add	r3, r1
 8016984:	b29b      	uxth	r3, r3
 8016986:	4413      	add	r3, r2
 8016988:	b29a      	uxth	r2, r3
 801698a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801698e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8016992:	b29b      	uxth	r3, r3
 8016994:	1ad3      	subs	r3, r2, r3
 8016996:	b29b      	uxth	r3, r3
 8016998:	b21b      	sxth	r3, r3
 801699a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
                flash_area.y1 = page->coords.y1 - page_h;
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80169a4:	b29a      	uxth	r2, r3
 80169a6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80169aa:	1ad3      	subs	r3, r2, r3
 80169ac:	b29b      	uxth	r3, r3
 80169ae:	b21b      	sxth	r3, r3
 80169b0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                flash_area.y2 = page->coords.y2 + page_h;
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80169ba:	b29a      	uxth	r2, r3
 80169bc:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80169c0:	4413      	add	r3, r2
 80169c2:	b29b      	uxth	r3, r3
 80169c4:	b21b      	sxth	r3, r3
 80169c6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80169ca:	e042      	b.n	8016a52 <lv_page_design+0x43e>
            } else if(ext->edge_flash.left_ip) {
 80169cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80169d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80169d4:	f003 0310 	and.w	r3, r3, #16
 80169d8:	b2db      	uxtb	r3, r3
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d039      	beq.n	8016a52 <lv_page_design+0x43e>
                flash_area.x1 = page->coords.x1 - 3 * page_h + ext->edge_flash.state;
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80169e4:	b29a      	uxth	r2, r3
 80169e6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80169ea:	4619      	mov	r1, r3
 80169ec:	009b      	lsls	r3, r3, #2
 80169ee:	1acb      	subs	r3, r1, r3
 80169f0:	b29b      	uxth	r3, r3
 80169f2:	4413      	add	r3, r2
 80169f4:	b29a      	uxth	r2, r3
 80169f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80169fa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80169fe:	b29b      	uxth	r3, r3
 8016a00:	4413      	add	r3, r2
 8016a02:	b29b      	uxth	r3, r3
 8016a04:	b21b      	sxth	r3, r3
 8016a06:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
                flash_area.x2 = page->coords.x1 + ext->edge_flash.state;
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016a10:	b29a      	uxth	r2, r3
 8016a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016a16:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8016a1a:	b29b      	uxth	r3, r3
 8016a1c:	4413      	add	r3, r2
 8016a1e:	b29b      	uxth	r3, r3
 8016a20:	b21b      	sxth	r3, r3
 8016a22:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
                flash_area.y1 = page->coords.y1 - page_h;
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8016a2c:	b29a      	uxth	r2, r3
 8016a2e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8016a32:	1ad3      	subs	r3, r2, r3
 8016a34:	b29b      	uxth	r3, r3
 8016a36:	b21b      	sxth	r3, r3
 8016a38:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
                flash_area.y2 = page->coords.y2 + page_h;
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8016a42:	b29a      	uxth	r2, r3
 8016a44:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8016a48:	4413      	add	r3, r2
 8016a4a:	b29b      	uxth	r3, r3
 8016a4c:	b21b      	sxth	r3, r3
 8016a4e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
            }

            if(ext->edge_flash.left_ip || ext->edge_flash.right_ip || ext->edge_flash.top_ip ||
 8016a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016a56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016a5a:	f003 0310 	and.w	r3, r3, #16
 8016a5e:	b2db      	uxtb	r3, r3
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d11a      	bne.n	8016a9a <lv_page_design+0x486>
 8016a64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016a68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016a6c:	f003 0308 	and.w	r3, r3, #8
 8016a70:	b2db      	uxtb	r3, r3
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d111      	bne.n	8016a9a <lv_page_design+0x486>
 8016a76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016a7e:	f003 0302 	and.w	r3, r3, #2
 8016a82:	b2db      	uxtb	r3, r3
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d108      	bne.n	8016a9a <lv_page_design+0x486>
 8016a88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016a90:	f003 0304 	and.w	r3, r3, #4
 8016a94:	b2db      	uxtb	r3, r3
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d02a      	beq.n	8016af0 <lv_page_design+0x4dc>
               ext->edge_flash.bottom_ip) {
                lv_style_t flash_style;
                lv_style_copy(&flash_style, ext->edge_flash.style);
 8016a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016a9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016aa0:	f107 0310 	add.w	r3, r7, #16
 8016aa4:	4611      	mov	r1, r2
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	f7f1 f9a6 	bl	8007df8 <lv_style_copy>
                flash_style.body.radius = LV_RADIUS_CIRCLE;
 8016aac:	f647 4318 	movw	r3, #31768	@ 0x7c18
 8016ab0:	82fb      	strh	r3, [r7, #22]
                uint32_t opa            = (flash_style.body.opa * ext->edge_flash.state) / LV_PAGE_END_FLASH_SIZE;
 8016ab2:	7e3b      	ldrb	r3, [r7, #24]
 8016ab4:	461a      	mov	r2, r3
 8016ab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016aba:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8016abe:	fb02 f303 	mul.w	r3, r2, r3
 8016ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8016afc <lv_page_design+0x4e8>)
 8016ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8016ac8:	10d2      	asrs	r2, r2, #3
 8016aca:	17db      	asrs	r3, r3, #31
 8016acc:	1ad3      	subs	r3, r2, r3
 8016ace:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                flash_style.body.opa    = opa;
 8016ad2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016ad6:	b2db      	uxtb	r3, r3
 8016ad8:	763b      	strb	r3, [r7, #24]
                lv_draw_rect(&flash_area, mask, &flash_style, lv_obj_get_opa_scale(page));
 8016ada:	68f8      	ldr	r0, [r7, #12]
 8016adc:	f7ef fed1 	bl	8006882 <lv_obj_get_opa_scale>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	f107 0210 	add.w	r2, r7, #16
 8016ae6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8016aea:	68b9      	ldr	r1, [r7, #8]
 8016aec:	f7f2 fcbe 	bl	800946c <lv_draw_rect>
            }
        }
#endif
    }

    return true;
 8016af0:	2301      	movs	r3, #1
}
 8016af2:	4618      	mov	r0, r3
 8016af4:	37ac      	adds	r7, #172	@ 0xac
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd90      	pop	{r4, r7, pc}
 8016afa:	bf00      	nop
 8016afc:	51eb851f 	.word	0x51eb851f

08016b00 <lv_scrl_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_scrl_design(lv_obj_t * scrl, const lv_area_t * mask, lv_design_mode_t mode)
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b08a      	sub	sp, #40	@ 0x28
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	60f8      	str	r0, [r7, #12]
 8016b08:	60b9      	str	r1, [r7, #8]
 8016b0a:	4613      	mov	r3, r2
 8016b0c:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 8016b0e:	79fb      	ldrb	r3, [r7, #7]
 8016b10:	2b02      	cmp	r3, #2
 8016b12:	d107      	bne.n	8016b24 <lv_scrl_design+0x24>
        return ancestor_design(scrl, mask, mode);
 8016b14:	4b2f      	ldr	r3, [pc, #188]	@ (8016bd4 <lv_scrl_design+0xd4>)
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	79fa      	ldrb	r2, [r7, #7]
 8016b1a:	68b9      	ldr	r1, [r7, #8]
 8016b1c:	68f8      	ldr	r0, [r7, #12]
 8016b1e:	4798      	blx	r3
 8016b20:	4603      	mov	r3, r0
 8016b22:	e052      	b.n	8016bca <lv_scrl_design+0xca>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 8016b24:	79fb      	ldrb	r3, [r7, #7]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d145      	bne.n	8016bb6 <lv_scrl_design+0xb6>
#if LV_USE_GROUP
        /* If the page is focused in a group and
         * the background object is not visible (transparent)
         * then "activate" the style of the scrollable*/
        const lv_style_t * style_scrl_ori = lv_obj_get_style(scrl);
 8016b2a:	68f8      	ldr	r0, [r7, #12]
 8016b2c:	f7ef fdde 	bl	80066ec <lv_obj_get_style>
 8016b30:	6238      	str	r0, [r7, #32]
        lv_obj_t * page                   = lv_obj_get_parent(scrl);
 8016b32:	68f8      	ldr	r0, [r7, #12]
 8016b34:	f7ef fd06 	bl	8006544 <lv_obj_get_parent>
 8016b38:	61f8      	str	r0, [r7, #28]
        const lv_style_t * style_page     = lv_obj_get_style(page);
 8016b3a:	69f8      	ldr	r0, [r7, #28]
 8016b3c:	f7ef fdd6 	bl	80066ec <lv_obj_get_style>
 8016b40:	61b8      	str	r0, [r7, #24]
        lv_group_t * g                    = lv_obj_get_group(page);
 8016b42:	69f8      	ldr	r0, [r7, #28]
 8016b44:	f7ef fef3 	bl	800692e <lv_obj_get_group>
 8016b48:	6178      	str	r0, [r7, #20]
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 8016b4a:	69bb      	ldr	r3, [r7, #24]
 8016b4c:	7a1b      	ldrb	r3, [r3, #8]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d127      	bne.n	8016ba2 <lv_scrl_design+0xa2>
           style_page->body.border.width == 0) { /*Is the background visible?*/
 8016b52:	69bb      	ldr	r3, [r7, #24]
 8016b54:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
        if((style_page->body.opa == LV_OPA_TRANSP) &&
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d122      	bne.n	8016ba2 <lv_scrl_design+0xa2>
            if(lv_group_get_focused(g) == page) {
 8016b5c:	6978      	ldr	r0, [r7, #20]
 8016b5e:	f7ec f8a1 	bl	8002ca4 <lv_group_get_focused>
 8016b62:	4602      	mov	r2, r0
 8016b64:	69fb      	ldr	r3, [r7, #28]
 8016b66:	4293      	cmp	r3, r2
 8016b68:	d11b      	bne.n	8016ba2 <lv_scrl_design+0xa2>
                lv_style_t * style_mod;
                style_mod = lv_group_mod_style(g, style_scrl_ori);
 8016b6a:	6a39      	ldr	r1, [r7, #32]
 8016b6c:	6978      	ldr	r0, [r7, #20]
 8016b6e:	f7ec f869 	bl	8002c44 <lv_group_mod_style>
 8016b72:	6278      	str	r0, [r7, #36]	@ 0x24
                /*If still not visible modify the style a littel bit*/
                if((style_mod->body.opa == LV_OPA_TRANSP) && style_mod->body.border.width == 0) {
 8016b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b76:	7a1b      	ldrb	r3, [r3, #8]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d10f      	bne.n	8016b9c <lv_scrl_design+0x9c>
 8016b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b7e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d10a      	bne.n	8016b9c <lv_scrl_design+0x9c>
                    style_mod->body.opa          = LV_OPA_50;
 8016b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b88:	227f      	movs	r2, #127	@ 0x7f
 8016b8a:	721a      	strb	r2, [r3, #8]
                    style_mod->body.border.width = 1;
 8016b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b8e:	2201      	movs	r2, #1
 8016b90:	819a      	strh	r2, [r3, #12]
                    style_mod                    = lv_group_mod_style(g, style_mod);
 8016b92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016b94:	6978      	ldr	r0, [r7, #20]
 8016b96:	f7ec f855 	bl	8002c44 <lv_group_mod_style>
 8016b9a:	6278      	str	r0, [r7, #36]	@ 0x24
                }

                scrl->style_p = style_mod; /*Temporally change the style to the activated */
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ba0:	629a      	str	r2, [r3, #40]	@ 0x28
            }
        }
#endif
        ancestor_design(scrl, mask, mode);
 8016ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8016bd4 <lv_scrl_design+0xd4>)
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	79fa      	ldrb	r2, [r7, #7]
 8016ba8:	68b9      	ldr	r1, [r7, #8]
 8016baa:	68f8      	ldr	r0, [r7, #12]
 8016bac:	4798      	blx	r3

#if LV_USE_GROUP
        scrl->style_p = style_scrl_ori; /*Revert the style*/
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	6a3a      	ldr	r2, [r7, #32]
 8016bb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8016bb4:	e008      	b.n	8016bc8 <lv_scrl_design+0xc8>
#endif
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8016bb6:	79fb      	ldrb	r3, [r7, #7]
 8016bb8:	2b01      	cmp	r3, #1
 8016bba:	d105      	bne.n	8016bc8 <lv_scrl_design+0xc8>
        ancestor_design(scrl, mask, mode);
 8016bbc:	4b05      	ldr	r3, [pc, #20]	@ (8016bd4 <lv_scrl_design+0xd4>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	79fa      	ldrb	r2, [r7, #7]
 8016bc2:	68b9      	ldr	r1, [r7, #8]
 8016bc4:	68f8      	ldr	r0, [r7, #12]
 8016bc6:	4798      	blx	r3
    }

    return true;
 8016bc8:	2301      	movs	r3, #1
}
 8016bca:	4618      	mov	r0, r3
 8016bcc:	3728      	adds	r7, #40	@ 0x28
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	bd80      	pop	{r7, pc}
 8016bd2:	bf00      	nop
 8016bd4:	2000ad94 	.word	0x2000ad94

08016bd8 <lv_page_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_page_signal(lv_obj_t * page, lv_signal_t sign, void * param)
{
 8016bd8:	b590      	push	{r4, r7, lr}
 8016bda:	b08f      	sub	sp, #60	@ 0x3c
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	60f8      	str	r0, [r7, #12]
 8016be0:	460b      	mov	r3, r1
 8016be2:	607a      	str	r2, [r7, #4]
 8016be4:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(page, sign, param);
 8016be6:	4b95      	ldr	r3, [pc, #596]	@ (8016e3c <lv_page_signal+0x264>)
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	7af9      	ldrb	r1, [r7, #11]
 8016bec:	687a      	ldr	r2, [r7, #4]
 8016bee:	68f8      	ldr	r0, [r7, #12]
 8016bf0:	4798      	blx	r3
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    if(res != LV_RES_OK) return res;
 8016bf8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8016bfc:	2b01      	cmp	r3, #1
 8016bfe:	d002      	beq.n	8016c06 <lv_page_signal+0x2e>
 8016c00:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8016c04:	e1c7      	b.n	8016f96 <lv_page_signal+0x3be>

    lv_page_ext_t * ext = lv_obj_get_ext_attr(page);
 8016c06:	68f8      	ldr	r0, [r7, #12]
 8016c08:	f7ef fe86 	bl	8006918 <lv_obj_get_ext_attr>
 8016c0c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    lv_obj_t * child;
    if(sign == LV_SIGNAL_CHILD_CHG) { /*Automatically move children to the scrollable object*/
 8016c0e:	7afb      	ldrb	r3, [r7, #11]
 8016c10:	2b01      	cmp	r3, #1
 8016c12:	f040 8086 	bne.w	8016d22 <lv_page_signal+0x14a>
        const lv_style_t * style = lv_page_get_style(page, LV_PAGE_STYLE_SCRL);
 8016c16:	2101      	movs	r1, #1
 8016c18:	68f8      	ldr	r0, [r7, #12]
 8016c1a:	f7ff fc07 	bl	801642c <lv_page_get_style>
 8016c1e:	61f8      	str	r0, [r7, #28]
        lv_fit_t fit_left        = lv_page_get_scrl_fit_left(page);
 8016c20:	68f8      	ldr	r0, [r7, #12]
 8016c22:	f7ff f950 	bl	8015ec6 <lv_page_get_scrl_fit_left>
 8016c26:	4603      	mov	r3, r0
 8016c28:	76fb      	strb	r3, [r7, #27]
        lv_fit_t fit_top         = lv_page_get_scrl_fit_top(page);
 8016c2a:	68f8      	ldr	r0, [r7, #12]
 8016c2c:	f7ff f95b 	bl	8015ee6 <lv_page_get_scrl_fit_top>
 8016c30:	4603      	mov	r3, r0
 8016c32:	76bb      	strb	r3, [r7, #26]
        child                    = lv_obj_get_child(page, NULL);
 8016c34:	2100      	movs	r1, #0
 8016c36:	68f8      	ldr	r0, [r7, #12]
 8016c38:	f7ef fc8f 	bl	800655a <lv_obj_get_child>
 8016c3c:	6378      	str	r0, [r7, #52]	@ 0x34
        while(child != NULL) {
 8016c3e:	e06c      	b.n	8016d1a <lv_page_signal+0x142>
            if(lv_obj_is_protected(child, LV_PROTECT_PARENT) == false) {
 8016c40:	2102      	movs	r1, #2
 8016c42:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016c44:	f7ef fe3c 	bl	80068c0 <lv_obj_is_protected>
 8016c48:	4603      	mov	r3, r0
 8016c4a:	f083 0301 	eor.w	r3, r3, #1
 8016c4e:	b2db      	uxtb	r3, r3
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d05d      	beq.n	8016d10 <lv_page_signal+0x138>
                lv_obj_t * tmp = child;
 8016c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016c56:	617b      	str	r3, [r7, #20]
                child          = lv_obj_get_child(page, child); /*Get the next child before move this*/
 8016c58:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016c5a:	68f8      	ldr	r0, [r7, #12]
 8016c5c:	f7ef fc7d 	bl	800655a <lv_obj_get_child>
 8016c60:	6378      	str	r0, [r7, #52]	@ 0x34

                /* Reposition the child to take padding into account (Only if it's on (0;0) now)
                 * It's required to keep new the object on the same coordinate if FIT is enabled.*/
                if((tmp->coords.x1 == page->coords.x1) && (fit_left == LV_FIT_TIGHT || fit_left == LV_FIT_FILL)) {
 8016c62:	697b      	ldr	r3, [r7, #20]
 8016c64:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d11f      	bne.n	8016cb2 <lv_page_signal+0xda>
 8016c72:	7efb      	ldrb	r3, [r7, #27]
 8016c74:	2b01      	cmp	r3, #1
 8016c76:	d002      	beq.n	8016c7e <lv_page_signal+0xa6>
 8016c78:	7efb      	ldrb	r3, [r7, #27]
 8016c7a:	2b03      	cmp	r3, #3
 8016c7c:	d119      	bne.n	8016cb2 <lv_page_signal+0xda>
                    tmp->coords.x1 += style->body.padding.left;
 8016c7e:	697b      	ldr	r3, [r7, #20]
 8016c80:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8016c84:	b29a      	uxth	r2, r3
 8016c86:	69fb      	ldr	r3, [r7, #28]
 8016c88:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8016c8c:	b29b      	uxth	r3, r3
 8016c8e:	4413      	add	r3, r2
 8016c90:	b29b      	uxth	r3, r3
 8016c92:	b21a      	sxth	r2, r3
 8016c94:	697b      	ldr	r3, [r7, #20]
 8016c96:	821a      	strh	r2, [r3, #16]
                    tmp->coords.x2 += style->body.padding.left;
 8016c98:	697b      	ldr	r3, [r7, #20]
 8016c9a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8016c9e:	b29a      	uxth	r2, r3
 8016ca0:	69fb      	ldr	r3, [r7, #28]
 8016ca2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8016ca6:	b29b      	uxth	r3, r3
 8016ca8:	4413      	add	r3, r2
 8016caa:	b29b      	uxth	r3, r3
 8016cac:	b21a      	sxth	r2, r3
 8016cae:	697b      	ldr	r3, [r7, #20]
 8016cb0:	829a      	strh	r2, [r3, #20]
                }
                if((tmp->coords.y1 == page->coords.y1) && (fit_top == LV_FIT_TIGHT || fit_top == LV_FIT_FILL)) {
 8016cb2:	697b      	ldr	r3, [r7, #20]
 8016cb4:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	d11f      	bne.n	8016d02 <lv_page_signal+0x12a>
 8016cc2:	7ebb      	ldrb	r3, [r7, #26]
 8016cc4:	2b01      	cmp	r3, #1
 8016cc6:	d002      	beq.n	8016cce <lv_page_signal+0xf6>
 8016cc8:	7ebb      	ldrb	r3, [r7, #26]
 8016cca:	2b03      	cmp	r3, #3
 8016ccc:	d119      	bne.n	8016d02 <lv_page_signal+0x12a>
                    tmp->coords.y1 += style->body.padding.top;
 8016cce:	697b      	ldr	r3, [r7, #20]
 8016cd0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8016cd4:	b29a      	uxth	r2, r3
 8016cd6:	69fb      	ldr	r3, [r7, #28]
 8016cd8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8016cdc:	b29b      	uxth	r3, r3
 8016cde:	4413      	add	r3, r2
 8016ce0:	b29b      	uxth	r3, r3
 8016ce2:	b21a      	sxth	r2, r3
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	825a      	strh	r2, [r3, #18]
                    tmp->coords.y2 += style->body.padding.top;
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8016cee:	b29a      	uxth	r2, r3
 8016cf0:	69fb      	ldr	r3, [r7, #28]
 8016cf2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8016cf6:	b29b      	uxth	r3, r3
 8016cf8:	4413      	add	r3, r2
 8016cfa:	b29b      	uxth	r3, r3
 8016cfc:	b21a      	sxth	r2, r3
 8016cfe:	697b      	ldr	r3, [r7, #20]
 8016d00:	82da      	strh	r2, [r3, #22]
                }
                lv_obj_set_parent(tmp, ext->scrl);
 8016d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d04:	685b      	ldr	r3, [r3, #4]
 8016d06:	4619      	mov	r1, r3
 8016d08:	6978      	ldr	r0, [r7, #20]
 8016d0a:	f7ee fbb6 	bl	800547a <lv_obj_set_parent>
 8016d0e:	e004      	b.n	8016d1a <lv_page_signal+0x142>
            } else {
                child = lv_obj_get_child(page, child);
 8016d10:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016d12:	68f8      	ldr	r0, [r7, #12]
 8016d14:	f7ef fc21 	bl	800655a <lv_obj_get_child>
 8016d18:	6378      	str	r0, [r7, #52]	@ 0x34
        while(child != NULL) {
 8016d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d18f      	bne.n	8016c40 <lv_page_signal+0x68>
 8016d20:	e137      	b.n	8016f92 <lv_page_signal+0x3ba>
            }
        }
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 8016d22:	7afb      	ldrb	r3, [r7, #11]
 8016d24:	2b04      	cmp	r3, #4
 8016d26:	d11e      	bne.n	8016d66 <lv_page_signal+0x18e>
        ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 8016d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d2a:	685b      	ldr	r3, [r3, #4]
 8016d2c:	69db      	ldr	r3, [r3, #28]
 8016d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016d30:	6850      	ldr	r0, [r2, #4]
 8016d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016d34:	6852      	ldr	r2, [r2, #4]
 8016d36:	3210      	adds	r2, #16
 8016d38:	2102      	movs	r1, #2
 8016d3a:	4798      	blx	r3

        /*The scrollbars are important only if they are visible now*/
        if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 8016d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d3e:	7f1b      	ldrb	r3, [r3, #28]
 8016d40:	f003 0301 	and.w	r3, r3, #1
 8016d44:	b2db      	uxtb	r3, r3
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d106      	bne.n	8016d58 <lv_page_signal+0x180>
 8016d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d4c:	7f1b      	ldrb	r3, [r3, #28]
 8016d4e:	f003 0302 	and.w	r3, r3, #2
 8016d52:	b2db      	uxtb	r3, r3
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d002      	beq.n	8016d5e <lv_page_signal+0x186>
 8016d58:	68f8      	ldr	r0, [r7, #12]
 8016d5a:	f000 fceb 	bl	8017734 <lv_page_sb_refresh>

        /*Refresh the ext. size because the scrollbars might be positioned out of the page*/
        lv_obj_refresh_ext_draw_pad(page);
 8016d5e:	68f8      	ldr	r0, [r7, #12]
 8016d60:	f7ef fb8e 	bl	8006480 <lv_obj_refresh_ext_draw_pad>
 8016d64:	e115      	b.n	8016f92 <lv_page_signal+0x3ba>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8016d66:	7afb      	ldrb	r3, [r7, #11]
 8016d68:	2b02      	cmp	r3, #2
 8016d6a:	d138      	bne.n	8016dde <lv_page_signal+0x206>
        /*Refresh the scrollbar and notify the scrl if the size is changed*/
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 8016d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d6e:	685b      	ldr	r3, [r3, #4]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	f000 810e 	beq.w	8016f92 <lv_page_signal+0x3ba>
 8016d76:	68f8      	ldr	r0, [r7, #12]
 8016d78:	f7ef fc4d 	bl	8006616 <lv_obj_get_width>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	461c      	mov	r4, r3
 8016d80:	6878      	ldr	r0, [r7, #4]
 8016d82:	f7ff f864 	bl	8015e4e <lv_area_get_width>
 8016d86:	4603      	mov	r3, r0
 8016d88:	429c      	cmp	r4, r3
 8016d8a:	d10b      	bne.n	8016da4 <lv_page_signal+0x1cc>
                                 lv_obj_get_height(page) != lv_area_get_height(param))) {
 8016d8c:	68f8      	ldr	r0, [r7, #12]
 8016d8e:	f7ef fc50 	bl	8006632 <lv_obj_get_height>
 8016d92:	4603      	mov	r3, r0
 8016d94:	461c      	mov	r4, r3
 8016d96:	6878      	ldr	r0, [r7, #4]
 8016d98:	f7ff f86f 	bl	8015e7a <lv_area_get_height>
 8016d9c:	4603      	mov	r3, r0
        if(ext->scrl != NULL && (lv_obj_get_width(page) != lv_area_get_width(param) ||
 8016d9e:	429c      	cmp	r4, r3
 8016da0:	f000 80f7 	beq.w	8016f92 <lv_page_signal+0x3ba>
            /*If no hor_fit enabled set the scrollable's width to the page's width*/
            ext->scrl->signal_cb(ext->scrl, LV_SIGNAL_CORD_CHG, &ext->scrl->coords);
 8016da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016da6:	685b      	ldr	r3, [r3, #4]
 8016da8:	69db      	ldr	r3, [r3, #28]
 8016daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016dac:	6850      	ldr	r0, [r2, #4]
 8016dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016db0:	6852      	ldr	r2, [r2, #4]
 8016db2:	3210      	adds	r2, #16
 8016db4:	2102      	movs	r1, #2
 8016db6:	4798      	blx	r3

            /*The scrollbars are important only if they are visible now*/
            if(ext->sb.hor_draw || ext->sb.ver_draw) lv_page_sb_refresh(page);
 8016db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dba:	7f1b      	ldrb	r3, [r3, #28]
 8016dbc:	f003 0301 	and.w	r3, r3, #1
 8016dc0:	b2db      	uxtb	r3, r3
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d107      	bne.n	8016dd6 <lv_page_signal+0x1fe>
 8016dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dc8:	7f1b      	ldrb	r3, [r3, #28]
 8016dca:	f003 0302 	and.w	r3, r3, #2
 8016dce:	b2db      	uxtb	r3, r3
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	f000 80de 	beq.w	8016f92 <lv_page_signal+0x3ba>
 8016dd6:	68f8      	ldr	r0, [r7, #12]
 8016dd8:	f000 fcac 	bl	8017734 <lv_page_sb_refresh>
 8016ddc:	e0d9      	b.n	8016f92 <lv_page_signal+0x3ba>
        }
    } else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 8016dde:	7afb      	ldrb	r3, [r7, #11]
 8016de0:	2b05      	cmp	r3, #5
 8016de2:	d12d      	bne.n	8016e40 <lv_page_signal+0x268>
        /*Ensure ext. size for the scrollbars if they are out of the page*/
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.right))
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8016dea:	461a      	mov	r2, r3
 8016dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dee:	689b      	ldr	r3, [r3, #8]
 8016df0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016df4:	425b      	negs	r3, r3
 8016df6:	429a      	cmp	r2, r3
 8016df8:	da09      	bge.n	8016e0e <lv_page_signal+0x236>
            page->ext_draw_pad = -ext->sb.style->body.padding.right;
 8016dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dfc:	689b      	ldr	r3, [r3, #8]
 8016dfe:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8016e02:	b29b      	uxth	r3, r3
 8016e04:	425b      	negs	r3, r3
 8016e06:	b29b      	uxth	r3, r3
 8016e08:	b21a      	sxth	r2, r3
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	869a      	strh	r2, [r3, #52]	@ 0x34
        if(page->ext_draw_pad < (-ext->sb.style->body.padding.bottom))
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8016e14:	461a      	mov	r2, r3
 8016e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e18:	689b      	ldr	r3, [r3, #8]
 8016e1a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8016e1e:	425b      	negs	r3, r3
 8016e20:	429a      	cmp	r2, r3
 8016e22:	f280 80b6 	bge.w	8016f92 <lv_page_signal+0x3ba>
            page->ext_draw_pad = -ext->sb.style->body.padding.bottom;
 8016e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e28:	689b      	ldr	r3, [r3, #8]
 8016e2a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8016e2e:	b29b      	uxth	r3, r3
 8016e30:	425b      	negs	r3, r3
 8016e32:	b29b      	uxth	r3, r3
 8016e34:	b21a      	sxth	r2, r3
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	869a      	strh	r2, [r3, #52]	@ 0x34
 8016e3a:	e0aa      	b.n	8016f92 <lv_page_signal+0x3ba>
 8016e3c:	2000ad98 	.word	0x2000ad98
    } else if(sign == LV_SIGNAL_CONTROL) {
 8016e40:	7afb      	ldrb	r3, [r7, #11]
 8016e42:	2b11      	cmp	r3, #17
 8016e44:	d17b      	bne.n	8016f3e <lv_page_signal+0x366>
        uint32_t c = *((uint32_t *)param);
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	623b      	str	r3, [r7, #32]

        if(c == LV_KEY_DOWN) {
 8016e4c:	6a3b      	ldr	r3, [r7, #32]
 8016e4e:	2b12      	cmp	r3, #18
 8016e50:	d10e      	bne.n	8016e70 <lv_page_signal+0x298>
            lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 8016e52:	68f8      	ldr	r0, [r7, #12]
 8016e54:	f7ef fbed 	bl	8006632 <lv_obj_get_height>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	da00      	bge.n	8016e60 <lv_page_signal+0x288>
 8016e5e:	3303      	adds	r3, #3
 8016e60:	109b      	asrs	r3, r3, #2
 8016e62:	425b      	negs	r3, r3
 8016e64:	b21b      	sxth	r3, r3
 8016e66:	4619      	mov	r1, r3
 8016e68:	68f8      	ldr	r0, [r7, #12]
 8016e6a:	f7ff fb53 	bl	8016514 <lv_page_scroll_ver>
 8016e6e:	e090      	b.n	8016f92 <lv_page_signal+0x3ba>
        } else if(c == LV_KEY_UP) {
 8016e70:	6a3b      	ldr	r3, [r7, #32]
 8016e72:	2b11      	cmp	r3, #17
 8016e74:	d10d      	bne.n	8016e92 <lv_page_signal+0x2ba>
            lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 8016e76:	68f8      	ldr	r0, [r7, #12]
 8016e78:	f7ef fbdb 	bl	8006632 <lv_obj_get_height>
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	da00      	bge.n	8016e84 <lv_page_signal+0x2ac>
 8016e82:	3303      	adds	r3, #3
 8016e84:	109b      	asrs	r3, r3, #2
 8016e86:	b21b      	sxth	r3, r3
 8016e88:	4619      	mov	r1, r3
 8016e8a:	68f8      	ldr	r0, [r7, #12]
 8016e8c:	f7ff fb42 	bl	8016514 <lv_page_scroll_ver>
 8016e90:	e07f      	b.n	8016f92 <lv_page_signal+0x3ba>
        } else if(c == LV_KEY_RIGHT) {
 8016e92:	6a3b      	ldr	r3, [r7, #32]
 8016e94:	2b13      	cmp	r3, #19
 8016e96:	d128      	bne.n	8016eea <lv_page_signal+0x312>
            /*If the page can't be scrolled horizontally because it's not wide enough then scroll it
             * vertically*/
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 8016e98:	68f8      	ldr	r0, [r7, #12]
 8016e9a:	f7ff f804 	bl	8015ea6 <lv_page_get_scrl_width>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	461c      	mov	r4, r3
 8016ea2:	68f8      	ldr	r0, [r7, #12]
 8016ea4:	f7ef fbb7 	bl	8006616 <lv_obj_get_width>
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	429c      	cmp	r4, r3
 8016eac:	dc0e      	bgt.n	8016ecc <lv_page_signal+0x2f4>
                lv_page_scroll_ver(page, -lv_obj_get_height(page) / 4);
 8016eae:	68f8      	ldr	r0, [r7, #12]
 8016eb0:	f7ef fbbf 	bl	8006632 <lv_obj_get_height>
 8016eb4:	4603      	mov	r3, r0
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	da00      	bge.n	8016ebc <lv_page_signal+0x2e4>
 8016eba:	3303      	adds	r3, #3
 8016ebc:	109b      	asrs	r3, r3, #2
 8016ebe:	425b      	negs	r3, r3
 8016ec0:	b21b      	sxth	r3, r3
 8016ec2:	4619      	mov	r1, r3
 8016ec4:	68f8      	ldr	r0, [r7, #12]
 8016ec6:	f7ff fb25 	bl	8016514 <lv_page_scroll_ver>
 8016eca:	e062      	b.n	8016f92 <lv_page_signal+0x3ba>
            else
                lv_page_scroll_hor(page, -lv_obj_get_width(page) / 4);
 8016ecc:	68f8      	ldr	r0, [r7, #12]
 8016ece:	f7ef fba2 	bl	8006616 <lv_obj_get_width>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	da00      	bge.n	8016eda <lv_page_signal+0x302>
 8016ed8:	3303      	adds	r3, #3
 8016eda:	109b      	asrs	r3, r3, #2
 8016edc:	425b      	negs	r3, r3
 8016ede:	b21b      	sxth	r3, r3
 8016ee0:	4619      	mov	r1, r3
 8016ee2:	68f8      	ldr	r0, [r7, #12]
 8016ee4:	f7ff fad8 	bl	8016498 <lv_page_scroll_hor>
 8016ee8:	e053      	b.n	8016f92 <lv_page_signal+0x3ba>
        } else if(c == LV_KEY_LEFT) {
 8016eea:	6a3b      	ldr	r3, [r7, #32]
 8016eec:	2b14      	cmp	r3, #20
 8016eee:	d150      	bne.n	8016f92 <lv_page_signal+0x3ba>
            /*If the page can't be scrolled horizontally because it's not wide enough then scroll it
             * vertically*/
            if(lv_page_get_scrl_width(page) <= lv_obj_get_width(page))
 8016ef0:	68f8      	ldr	r0, [r7, #12]
 8016ef2:	f7fe ffd8 	bl	8015ea6 <lv_page_get_scrl_width>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	461c      	mov	r4, r3
 8016efa:	68f8      	ldr	r0, [r7, #12]
 8016efc:	f7ef fb8b 	bl	8006616 <lv_obj_get_width>
 8016f00:	4603      	mov	r3, r0
 8016f02:	429c      	cmp	r4, r3
 8016f04:	dc0d      	bgt.n	8016f22 <lv_page_signal+0x34a>
                lv_page_scroll_ver(page, lv_obj_get_height(page) / 4);
 8016f06:	68f8      	ldr	r0, [r7, #12]
 8016f08:	f7ef fb93 	bl	8006632 <lv_obj_get_height>
 8016f0c:	4603      	mov	r3, r0
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	da00      	bge.n	8016f14 <lv_page_signal+0x33c>
 8016f12:	3303      	adds	r3, #3
 8016f14:	109b      	asrs	r3, r3, #2
 8016f16:	b21b      	sxth	r3, r3
 8016f18:	4619      	mov	r1, r3
 8016f1a:	68f8      	ldr	r0, [r7, #12]
 8016f1c:	f7ff fafa 	bl	8016514 <lv_page_scroll_ver>
 8016f20:	e037      	b.n	8016f92 <lv_page_signal+0x3ba>
            else
                lv_page_scroll_hor(page, lv_obj_get_width(page) / 4);
 8016f22:	68f8      	ldr	r0, [r7, #12]
 8016f24:	f7ef fb77 	bl	8006616 <lv_obj_get_width>
 8016f28:	4603      	mov	r3, r0
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	da00      	bge.n	8016f30 <lv_page_signal+0x358>
 8016f2e:	3303      	adds	r3, #3
 8016f30:	109b      	asrs	r3, r3, #2
 8016f32:	b21b      	sxth	r3, r3
 8016f34:	4619      	mov	r1, r3
 8016f36:	68f8      	ldr	r0, [r7, #12]
 8016f38:	f7ff faae 	bl	8016498 <lv_page_scroll_hor>
 8016f3c:	e029      	b.n	8016f92 <lv_page_signal+0x3ba>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 8016f3e:	7afb      	ldrb	r3, [r7, #11]
 8016f40:	2b12      	cmp	r3, #18
 8016f42:	d105      	bne.n	8016f50 <lv_page_signal+0x378>
        bool * editable = (bool *)param;
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	627b      	str	r3, [r7, #36]	@ 0x24
        *editable       = true;
 8016f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f4a:	2201      	movs	r2, #1
 8016f4c:	701a      	strb	r2, [r3, #0]
 8016f4e:	e020      	b.n	8016f92 <lv_page_signal+0x3ba>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 8016f50:	7afb      	ldrb	r3, [r7, #11]
 8016f52:	2b06      	cmp	r3, #6
 8016f54:	d11d      	bne.n	8016f92 <lv_page_signal+0x3ba>
        lv_obj_type_t * buf = param;
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	62bb      	str	r3, [r7, #40]	@ 0x28
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8016f60:	e00b      	b.n	8016f7a <lv_page_signal+0x3a2>
            if(buf->type[i] == NULL) break;
 8016f62:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8016f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d009      	beq.n	8016f84 <lv_page_signal+0x3ac>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8016f70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8016f74:	3301      	adds	r3, #1
 8016f76:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8016f7a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8016f7e:	2b06      	cmp	r3, #6
 8016f80:	d9ef      	bls.n	8016f62 <lv_page_signal+0x38a>
 8016f82:	e000      	b.n	8016f86 <lv_page_signal+0x3ae>
            if(buf->type[i] == NULL) break;
 8016f84:	bf00      	nop
        }
        buf->type[i] = "lv_page";
 8016f86:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8016f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f8c:	4904      	ldr	r1, [pc, #16]	@ (8016fa0 <lv_page_signal+0x3c8>)
 8016f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }

    return res;
 8016f92:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
}
 8016f96:	4618      	mov	r0, r3
 8016f98:	373c      	adds	r7, #60	@ 0x3c
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bd90      	pop	{r4, r7, pc}
 8016f9e:	bf00      	nop
 8016fa0:	0801c838 	.word	0x0801c838

08016fa4 <lv_page_scrollable_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_page_scrollable_signal(lv_obj_t * scrl, lv_signal_t sign, void * param)
{
 8016fa4:	b590      	push	{r4, r7, lr}
 8016fa6:	b097      	sub	sp, #92	@ 0x5c
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	60f8      	str	r0, [r7, #12]
 8016fac:	460b      	mov	r3, r1
 8016fae:	607a      	str	r2, [r7, #4]
 8016fb0:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(scrl, sign, param);
 8016fb2:	4b92      	ldr	r3, [pc, #584]	@ (80171fc <lv_page_scrollable_signal+0x258>)
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	7af9      	ldrb	r1, [r7, #11]
 8016fb8:	687a      	ldr	r2, [r7, #4]
 8016fba:	68f8      	ldr	r0, [r7, #12]
 8016fbc:	4798      	blx	r3
 8016fbe:	4603      	mov	r3, r0
 8016fc0:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    if(res != LV_RES_OK) return res;
 8016fc4:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8016fc8:	2b01      	cmp	r3, #1
 8016fca:	d002      	beq.n	8016fd2 <lv_page_scrollable_signal+0x2e>
 8016fcc:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8016fd0:	e37e      	b.n	80176d0 <lv_page_scrollable_signal+0x72c>

    lv_obj_t * page               = lv_obj_get_parent(scrl);
 8016fd2:	68f8      	ldr	r0, [r7, #12]
 8016fd4:	f7ef fab6 	bl	8006544 <lv_obj_get_parent>
 8016fd8:	64f8      	str	r0, [r7, #76]	@ 0x4c
    const lv_style_t * page_style = lv_obj_get_style(page);
 8016fda:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8016fdc:	f7ef fb86 	bl	80066ec <lv_obj_get_style>
 8016fe0:	64b8      	str	r0, [r7, #72]	@ 0x48
    lv_page_ext_t * page_ext      = lv_obj_get_ext_attr(page);
 8016fe2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8016fe4:	f7ef fc98 	bl	8006918 <lv_obj_get_ext_attr>
 8016fe8:	6478      	str	r0, [r7, #68]	@ 0x44

    if(sign == LV_SIGNAL_CORD_CHG) {
 8016fea:	7afb      	ldrb	r3, [r7, #11]
 8016fec:	2b02      	cmp	r3, #2
 8016fee:	f040 82c8 	bne.w	8017582 <lv_page_scrollable_signal+0x5de>
        /*Limit the position of the scrollable object to be always visible
         * (Do not let its edge inner then its parent respective edge)*/
        lv_coord_t new_x = lv_obj_get_x(scrl);
 8016ff2:	68f8      	ldr	r0, [r7, #12]
 8016ff4:	f7ef fadd 	bl	80065b2 <lv_obj_get_x>
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
        lv_coord_t new_y = lv_obj_get_y(scrl);
 8016ffe:	68f8      	ldr	r0, [r7, #12]
 8017000:	f7ef faf0 	bl	80065e4 <lv_obj_get_y>
 8017004:	4603      	mov	r3, r0
 8017006:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        bool refr_x      = false;
 801700a:	2300      	movs	r3, #0
 801700c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        bool refr_y      = false;
 8017010:	2300      	movs	r3, #0
 8017012:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
        lv_area_t page_coords;
        lv_area_t scrl_coords;
        lv_obj_get_coords(scrl, &scrl_coords);
 8017016:	f107 031c 	add.w	r3, r7, #28
 801701a:	4619      	mov	r1, r3
 801701c:	68f8      	ldr	r0, [r7, #12]
 801701e:	f7ef fab9 	bl	8006594 <lv_obj_get_coords>
        lv_obj_get_coords(page, &page_coords);
 8017022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017026:	4619      	mov	r1, r3
 8017028:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801702a:	f7ef fab3 	bl	8006594 <lv_obj_get_coords>

        lv_area_t * ori_coords = (lv_area_t *)param;
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	63fb      	str	r3, [r7, #60]	@ 0x3c
        lv_coord_t diff_x      = scrl->coords.x1 - ori_coords->x1;
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8017038:	b29a      	uxth	r2, r3
 801703a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801703c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017040:	b29b      	uxth	r3, r3
 8017042:	1ad3      	subs	r3, r2, r3
 8017044:	b29b      	uxth	r3, r3
 8017046:	877b      	strh	r3, [r7, #58]	@ 0x3a
        lv_coord_t diff_y      = scrl->coords.y1 - ori_coords->y1;
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801704e:	b29a      	uxth	r2, r3
 8017050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017052:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017056:	b29b      	uxth	r3, r3
 8017058:	1ad3      	subs	r3, r2, r3
 801705a:	b29b      	uxth	r3, r3
 801705c:	873b      	strh	r3, [r7, #56]	@ 0x38
        lv_coord_t hpad        = page_style->body.padding.left + page_style->body.padding.right;
 801705e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017060:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8017064:	b29a      	uxth	r2, r3
 8017066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017068:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801706c:	b29b      	uxth	r3, r3
 801706e:	4413      	add	r3, r2
 8017070:	b29b      	uxth	r3, r3
 8017072:	86fb      	strh	r3, [r7, #54]	@ 0x36
        lv_coord_t vpad        = page_style->body.padding.top + page_style->body.padding.bottom;
 8017074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017076:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801707a:	b29a      	uxth	r2, r3
 801707c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801707e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017082:	b29b      	uxth	r3, r3
 8017084:	4413      	add	r3, r2
 8017086:	b29b      	uxth	r3, r3
 8017088:	86bb      	strh	r3, [r7, #52]	@ 0x34
        lv_obj_t * page_parent = lv_obj_get_parent(page);
 801708a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801708c:	f7ef fa5a 	bl	8006544 <lv_obj_get_parent>
 8017090:	6338      	str	r0, [r7, #48]	@ 0x30

        lv_indev_t * indev = lv_indev_get_act();
 8017092:	f7ec f821 	bl	80030d8 <lv_indev_get_act>
 8017096:	62f8      	str	r0, [r7, #44]	@ 0x2c
        lv_point_t drag_vect;
        lv_indev_get_vect(indev, &drag_vect);
 8017098:	f107 0318 	add.w	r3, r7, #24
 801709c:	4619      	mov	r1, r3
 801709e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80170a0:	f7ec f8bc 	bl	800321c <lv_indev_get_vect>

        /* Start the scroll propagation if there is drag vector on the indev, but the drag is not
         * started yet and the scrollable is in a corner. It will enable the scroll propagation only
         * when a new scroll begins and not when the scrollable is already being scrolled.*/
        if(page_ext->scroll_prop && page_ext->scroll_prop_ip == 0 && lv_indev_is_dragging(indev) == false) {
 80170a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80170a6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80170aa:	f003 0301 	and.w	r3, r3, #1
 80170ae:	b2db      	uxtb	r3, r3
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d05d      	beq.n	8017170 <lv_page_scrollable_signal+0x1cc>
 80170b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80170b6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80170ba:	f003 0302 	and.w	r3, r3, #2
 80170be:	b2db      	uxtb	r3, r3
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d155      	bne.n	8017170 <lv_page_scrollable_signal+0x1cc>
 80170c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80170c6:	f7ec f886 	bl	80031d6 <lv_indev_is_dragging>
 80170ca:	4603      	mov	r3, r0
 80170cc:	f083 0301 	eor.w	r3, r3, #1
 80170d0:	b2db      	uxtb	r3, r3
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d04c      	beq.n	8017170 <lv_page_scrollable_signal+0x1cc>
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 80170d6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	dd0b      	ble.n	80170f6 <lv_page_scrollable_signal+0x152>
 80170de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80170e2:	461a      	mov	r2, r3
 80170e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80170e8:	4619      	mov	r1, r3
 80170ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80170ec:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80170f0:	440b      	add	r3, r1
 80170f2:	429a      	cmp	r2, r3
 80170f4:	d00f      	beq.n	8017116 <lv_page_scrollable_signal+0x172>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 80170f6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
            if(((drag_vect.y > 0 && scrl_coords.y1 == page_coords.y1 + page_style->body.padding.top) ||
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	da38      	bge.n	8017170 <lv_page_scrollable_signal+0x1cc>
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 80170fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8017102:	461a      	mov	r2, r3
 8017104:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8017108:	4619      	mov	r1, r3
 801710a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801710c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017110:	1acb      	subs	r3, r1, r3
 8017112:	429a      	cmp	r2, r3
 8017114:	d12c      	bne.n	8017170 <lv_page_scrollable_signal+0x1cc>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 8017116:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
                (drag_vect.y < 0 && scrl_coords.y2 == page_coords.y2 - page_style->body.padding.bottom)) &&
 801711a:	2b00      	cmp	r3, #0
 801711c:	dd0b      	ble.n	8017136 <lv_page_scrollable_signal+0x192>
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 801711e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017122:	461a      	mov	r2, r3
 8017124:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8017128:	4619      	mov	r1, r3
 801712a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801712c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8017130:	440b      	add	r3, r1
 8017132:	429a      	cmp	r2, r3
 8017134:	d00f      	beq.n	8017156 <lv_page_scrollable_signal+0x1b2>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 8017136:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
               ((drag_vect.x > 0 && scrl_coords.x1 == page_coords.x1 + page_style->body.padding.left) ||
 801713a:	2b00      	cmp	r3, #0
 801713c:	da18      	bge.n	8017170 <lv_page_scrollable_signal+0x1cc>
                (drag_vect.x < 0 && scrl_coords.x2 == page_coords.x2 - page_style->body.padding.right))) {
 801713e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017142:	461a      	mov	r2, r3
 8017144:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8017148:	4619      	mov	r1, r3
 801714a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801714c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017150:	1acb      	subs	r3, r1, r3
 8017152:	429a      	cmp	r2, r3
 8017154:	d10c      	bne.n	8017170 <lv_page_scrollable_signal+0x1cc>

                if(lv_obj_get_parent(page_parent) != NULL) { /*Do not propagate the scroll to a screen*/
 8017156:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017158:	f7ef f9f4 	bl	8006544 <lv_obj_get_parent>
 801715c:	4603      	mov	r3, r0
 801715e:	2b00      	cmp	r3, #0
 8017160:	d006      	beq.n	8017170 <lv_page_scrollable_signal+0x1cc>
                    page_ext->scroll_prop_ip = 1;
 8017162:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017164:	f892 302e 	ldrb.w	r3, [r2, #46]	@ 0x2e
 8017168:	f043 0302 	orr.w	r3, r3, #2
 801716c:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
                }
            }
        }

        /*scrollable width smaller then page width? -> align to left*/
        if(lv_area_get_width(&scrl_coords) + hpad <= lv_area_get_width(&page_coords)) {
 8017170:	f107 031c 	add.w	r3, r7, #28
 8017174:	4618      	mov	r0, r3
 8017176:	f7fe fe6a 	bl	8015e4e <lv_area_get_width>
 801717a:	4603      	mov	r3, r0
 801717c:	461a      	mov	r2, r3
 801717e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8017182:	18d4      	adds	r4, r2, r3
 8017184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017188:	4618      	mov	r0, r3
 801718a:	f7fe fe60 	bl	8015e4e <lv_area_get_width>
 801718e:	4603      	mov	r3, r0
 8017190:	429c      	cmp	r4, r3
 8017192:	dc14      	bgt.n	80171be <lv_page_scrollable_signal+0x21a>
            if(scrl_coords.x1 != page_coords.x1 + page_style->body.padding.left) {
 8017194:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017198:	461a      	mov	r2, r3
 801719a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801719e:	4619      	mov	r1, r3
 80171a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80171a2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80171a6:	440b      	add	r3, r1
 80171a8:	429a      	cmp	r2, r3
 80171aa:	f000 80c8 	beq.w	801733e <lv_page_scrollable_signal+0x39a>
                new_x  = page_style->body.padding.left;
 80171ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80171b0:	8b5b      	ldrh	r3, [r3, #26]
 80171b2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                refr_x = true;
 80171b6:	2301      	movs	r3, #1
 80171b8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80171bc:	e0bf      	b.n	801733e <lv_page_scrollable_signal+0x39a>
            }
        } else {
            /*If the scroll propagation is in progress revert the original coordinates (don't let
             * the page scroll)*/
            if(page_ext->scroll_prop_ip) {
 80171be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80171c0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80171c4:	f003 0302 	and.w	r3, r3, #2
 80171c8:	b2db      	uxtb	r3, r3
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d018      	beq.n	8017200 <lv_page_scrollable_signal+0x25c>
                if(drag_vect.x == diff_x) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 80171ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80171d2:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 80171d6:	429a      	cmp	r2, r3
 80171d8:	f040 80b1 	bne.w	801733e <lv_page_scrollable_signal+0x39a>
                                               is reverted. Handle only the pos. because of drag*/
                    new_x  = ori_coords->x1 - page_coords.x1;
 80171dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80171de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171e2:	b29a      	uxth	r2, r3
 80171e4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80171e8:	b29b      	uxth	r3, r3
 80171ea:	1ad3      	subs	r3, r2, r3
 80171ec:	b29b      	uxth	r3, r3
 80171ee:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                    refr_x = true;
 80171f2:	2301      	movs	r3, #1
 80171f4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80171f8:	e0a1      	b.n	801733e <lv_page_scrollable_signal+0x39a>
 80171fa:	bf00      	nop
 80171fc:	2000ad98 	.word	0x2000ad98
                }
            }
            /*The edges of the scrollable can not be in the page (minus hpad) */
            else if(scrl_coords.x2 < page_coords.x2 - page_style->body.padding.right) {
 8017200:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017204:	461a      	mov	r2, r3
 8017206:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801720a:	4619      	mov	r1, r3
 801720c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801720e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017212:	1acb      	subs	r3, r1, r3
 8017214:	429a      	cmp	r2, r3
 8017216:	da4d      	bge.n	80172b4 <lv_page_scrollable_signal+0x310>
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 8017218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801721c:	4618      	mov	r0, r3
 801721e:	f7fe fe16 	bl	8015e4e <lv_area_get_width>
 8017222:	4603      	mov	r3, r0
 8017224:	b29c      	uxth	r4, r3
 8017226:	f107 031c 	add.w	r3, r7, #28
 801722a:	4618      	mov	r0, r3
 801722c:	f7fe fe0f 	bl	8015e4e <lv_area_get_width>
 8017230:	4603      	mov	r3, r0
 8017232:	b29b      	uxth	r3, r3
 8017234:	1ae3      	subs	r3, r4, r3
 8017236:	b29a      	uxth	r2, r3
                        page_style->body.padding.right; /* Right align */
 8017238:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801723a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 801723e:	b29b      	uxth	r3, r3
                new_x = lv_area_get_width(&page_coords) - lv_area_get_width(&scrl_coords) -
 8017240:	1ad3      	subs	r3, r2, r3
 8017242:	b29b      	uxth	r3, r3
 8017244:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                refr_x = true;
 8017248:	2301      	movs	r3, #1
 801724a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801724e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017250:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017254:	f003 0301 	and.w	r3, r3, #1
 8017258:	b2db      	uxtb	r3, r3
 801725a:	2b00      	cmp	r3, #0
 801725c:	d06f      	beq.n	801733e <lv_page_scrollable_signal+0x39a>
 801725e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017260:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017264:	f003 0310 	and.w	r3, r3, #16
 8017268:	b2db      	uxtb	r3, r3
 801726a:	2b00      	cmp	r3, #0
 801726c:	d167      	bne.n	801733e <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801726e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017274:	f003 0308 	and.w	r3, r3, #8
 8017278:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 801727a:	2b00      	cmp	r3, #0
 801727c:	d15f      	bne.n	801733e <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801727e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017284:	f003 0302 	and.w	r3, r3, #2
 8017288:	b2db      	uxtb	r3, r3
 801728a:	2b00      	cmp	r3, #0
 801728c:	d157      	bne.n	801733e <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.bottom_ip == 0) {
 801728e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017294:	f003 0304 	and.w	r3, r3, #4
 8017298:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801729a:	2b00      	cmp	r3, #0
 801729c:	d14f      	bne.n	801733e <lv_page_scrollable_signal+0x39a>
                    lv_page_start_edge_flash(page);
 801729e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80172a0:	f7ff f976 	bl	8016590 <lv_page_start_edge_flash>
                    page_ext->edge_flash.right_ip = 1;
 80172a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80172a6:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 80172aa:	f043 0308 	orr.w	r3, r3, #8
 80172ae:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 80172b2:	e044      	b.n	801733e <lv_page_scrollable_signal+0x39a>
                }
#endif
            } else if(scrl_coords.x1 > page_coords.x1 + page_style->body.padding.left) {
 80172b4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80172b8:	461a      	mov	r2, r3
 80172ba:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80172be:	4619      	mov	r1, r3
 80172c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80172c2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80172c6:	440b      	add	r3, r1
 80172c8:	429a      	cmp	r2, r3
 80172ca:	dd38      	ble.n	801733e <lv_page_scrollable_signal+0x39a>
                new_x  = page_style->body.padding.left; /*Left align*/
 80172cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80172ce:	8b5b      	ldrh	r3, [r3, #26]
 80172d0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
                refr_x = true;
 80172d4:	2301      	movs	r3, #1
 80172d6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 80172da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80172dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80172e0:	f003 0301 	and.w	r3, r3, #1
 80172e4:	b2db      	uxtb	r3, r3
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d029      	beq.n	801733e <lv_page_scrollable_signal+0x39a>
 80172ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80172ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80172f0:	f003 0310 	and.w	r3, r3, #16
 80172f4:	b2db      	uxtb	r3, r3
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d121      	bne.n	801733e <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 80172fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80172fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017300:	f003 0308 	and.w	r3, r3, #8
 8017304:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8017306:	2b00      	cmp	r3, #0
 8017308:	d119      	bne.n	801733e <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 801730a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801730c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017310:	f003 0302 	and.w	r3, r3, #2
 8017314:	b2db      	uxtb	r3, r3
 8017316:	2b00      	cmp	r3, #0
 8017318:	d111      	bne.n	801733e <lv_page_scrollable_signal+0x39a>
                   page_ext->edge_flash.bottom_ip == 0) {
 801731a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801731c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017320:	f003 0304 	and.w	r3, r3, #4
 8017324:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8017326:	2b00      	cmp	r3, #0
 8017328:	d109      	bne.n	801733e <lv_page_scrollable_signal+0x39a>
                    lv_page_start_edge_flash(page);
 801732a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801732c:	f7ff f930 	bl	8016590 <lv_page_start_edge_flash>
                    page_ext->edge_flash.left_ip = 1;
 8017330:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017332:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8017336:	f043 0310 	orr.w	r3, r3, #16
 801733a:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
#endif
            }
        }

        /*scrollable height smaller then page height? -> align to top*/
        if(lv_area_get_height(&scrl_coords) + vpad <= lv_area_get_height(&page_coords)) {
 801733e:	f107 031c 	add.w	r3, r7, #28
 8017342:	4618      	mov	r0, r3
 8017344:	f7fe fd99 	bl	8015e7a <lv_area_get_height>
 8017348:	4603      	mov	r3, r0
 801734a:	461a      	mov	r2, r3
 801734c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8017350:	18d4      	adds	r4, r2, r3
 8017352:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017356:	4618      	mov	r0, r3
 8017358:	f7fe fd8f 	bl	8015e7a <lv_area_get_height>
 801735c:	4603      	mov	r3, r0
 801735e:	429c      	cmp	r4, r3
 8017360:	dc14      	bgt.n	801738c <lv_page_scrollable_signal+0x3e8>
            if(scrl_coords.y1 != page_coords.y1 + page_style->body.padding.top) {
 8017362:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017366:	461a      	mov	r2, r3
 8017368:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801736c:	4619      	mov	r1, r3
 801736e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017370:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8017374:	440b      	add	r3, r1
 8017376:	429a      	cmp	r2, r3
 8017378:	f000 80c5 	beq.w	8017506 <lv_page_scrollable_signal+0x562>
                new_y  = page_style->body.padding.top;
 801737c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801737e:	8adb      	ldrh	r3, [r3, #22]
 8017380:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
                refr_y = true;
 8017384:	2301      	movs	r3, #1
 8017386:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 801738a:	e0bc      	b.n	8017506 <lv_page_scrollable_signal+0x562>
            }
        } else {
            /*If the scroll propagation is in progress revert the original coordinates (don't let
             * the page scroll)*/
            if(page_ext->scroll_prop_ip) {
 801738c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801738e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8017392:	f003 0302 	and.w	r3, r3, #2
 8017396:	b2db      	uxtb	r3, r3
 8017398:	2b00      	cmp	r3, #0
 801739a:	d015      	beq.n	80173c8 <lv_page_scrollable_signal+0x424>
                if(drag_vect.y == diff_y) { /*`scrl` is bouncing: drag pos. it somewhere and here it
 801739c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80173a0:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 80173a4:	429a      	cmp	r2, r3
 80173a6:	f040 80ae 	bne.w	8017506 <lv_page_scrollable_signal+0x562>
                                               is reverted. Handle only the pos. because of drag*/
                    new_y  = ori_coords->y1 - page_coords.y1;
 80173aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80173ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80173b0:	b29a      	uxth	r2, r3
 80173b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80173b6:	b29b      	uxth	r3, r3
 80173b8:	1ad3      	subs	r3, r2, r3
 80173ba:	b29b      	uxth	r3, r3
 80173bc:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
                    refr_y = true;
 80173c0:	2301      	movs	r3, #1
 80173c2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80173c6:	e09e      	b.n	8017506 <lv_page_scrollable_signal+0x562>
                }
            }
            /*The edges of the scrollable can not be in the page (minus vpad) */
            else if(scrl_coords.y2 < page_coords.y2 - page_style->body.padding.bottom) {
 80173c8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80173cc:	461a      	mov	r2, r3
 80173ce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80173d2:	4619      	mov	r1, r3
 80173d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80173d6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80173da:	1acb      	subs	r3, r1, r3
 80173dc:	429a      	cmp	r2, r3
 80173de:	da4d      	bge.n	801747c <lv_page_scrollable_signal+0x4d8>
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 80173e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80173e4:	4618      	mov	r0, r3
 80173e6:	f7fe fd48 	bl	8015e7a <lv_area_get_height>
 80173ea:	4603      	mov	r3, r0
 80173ec:	b29c      	uxth	r4, r3
 80173ee:	f107 031c 	add.w	r3, r7, #28
 80173f2:	4618      	mov	r0, r3
 80173f4:	f7fe fd41 	bl	8015e7a <lv_area_get_height>
 80173f8:	4603      	mov	r3, r0
 80173fa:	b29b      	uxth	r3, r3
 80173fc:	1ae3      	subs	r3, r4, r3
 80173fe:	b29a      	uxth	r2, r3
                        page_style->body.padding.bottom; /* Bottom align */
 8017400:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017402:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017406:	b29b      	uxth	r3, r3
                new_y = lv_area_get_height(&page_coords) - lv_area_get_height(&scrl_coords) -
 8017408:	1ad3      	subs	r3, r2, r3
 801740a:	b29b      	uxth	r3, r3
 801740c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
                refr_y = true;
 8017410:	2301      	movs	r3, #1
 8017412:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8017416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017418:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801741c:	f003 0301 	and.w	r3, r3, #1
 8017420:	b2db      	uxtb	r3, r3
 8017422:	2b00      	cmp	r3, #0
 8017424:	d06f      	beq.n	8017506 <lv_page_scrollable_signal+0x562>
 8017426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801742c:	f003 0310 	and.w	r3, r3, #16
 8017430:	b2db      	uxtb	r3, r3
 8017432:	2b00      	cmp	r3, #0
 8017434:	d167      	bne.n	8017506 <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8017436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017438:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801743c:	f003 0308 	and.w	r3, r3, #8
 8017440:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 8017442:	2b00      	cmp	r3, #0
 8017444:	d15f      	bne.n	8017506 <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8017446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017448:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801744c:	f003 0302 	and.w	r3, r3, #2
 8017450:	b2db      	uxtb	r3, r3
 8017452:	2b00      	cmp	r3, #0
 8017454:	d157      	bne.n	8017506 <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.bottom_ip == 0) {
 8017456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017458:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801745c:	f003 0304 	and.w	r3, r3, #4
 8017460:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 8017462:	2b00      	cmp	r3, #0
 8017464:	d14f      	bne.n	8017506 <lv_page_scrollable_signal+0x562>
                    lv_page_start_edge_flash(page);
 8017466:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017468:	f7ff f892 	bl	8016590 <lv_page_start_edge_flash>
                    page_ext->edge_flash.bottom_ip = 1;
 801746c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801746e:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8017472:	f043 0304 	orr.w	r3, r3, #4
 8017476:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 801747a:	e044      	b.n	8017506 <lv_page_scrollable_signal+0x562>
                }
#endif
            } else if(scrl_coords.y1 > page_coords.y1 + page_style->body.padding.top) {
 801747c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017480:	461a      	mov	r2, r3
 8017482:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8017486:	4619      	mov	r1, r3
 8017488:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801748a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801748e:	440b      	add	r3, r1
 8017490:	429a      	cmp	r2, r3
 8017492:	dd38      	ble.n	8017506 <lv_page_scrollable_signal+0x562>
                new_y  = page_style->body.padding.top; /*Top align*/
 8017494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017496:	8adb      	ldrh	r3, [r3, #22]
 8017498:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
                refr_y = true;
 801749c:	2301      	movs	r3, #1
 801749e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
#if LV_USE_ANIMATION
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 80174a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80174a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80174a8:	f003 0301 	and.w	r3, r3, #1
 80174ac:	b2db      	uxtb	r3, r3
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d029      	beq.n	8017506 <lv_page_scrollable_signal+0x562>
 80174b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80174b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80174b8:	f003 0310 	and.w	r3, r3, #16
 80174bc:	b2db      	uxtb	r3, r3
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d121      	bne.n	8017506 <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 80174c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80174c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80174c8:	f003 0308 	and.w	r3, r3, #8
 80174cc:	b2db      	uxtb	r3, r3
                if(page_ext->edge_flash.enabled && page_ext->edge_flash.left_ip == 0 &&
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d119      	bne.n	8017506 <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 80174d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80174d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80174d8:	f003 0302 	and.w	r3, r3, #2
 80174dc:	b2db      	uxtb	r3, r3
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d111      	bne.n	8017506 <lv_page_scrollable_signal+0x562>
                   page_ext->edge_flash.bottom_ip == 0) {
 80174e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80174e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80174e8:	f003 0304 	and.w	r3, r3, #4
 80174ec:	b2db      	uxtb	r3, r3
                   page_ext->edge_flash.right_ip == 0 && page_ext->edge_flash.top_ip == 0 &&
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d109      	bne.n	8017506 <lv_page_scrollable_signal+0x562>
                    lv_page_start_edge_flash(page);
 80174f2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80174f4:	f7ff f84c 	bl	8016590 <lv_page_start_edge_flash>
                    page_ext->edge_flash.top_ip = 1;
 80174f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80174fa:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 80174fe:	f043 0302 	orr.w	r3, r3, #2
 8017502:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
                }
#endif
            }
        }

        if(refr_x || refr_y) {
 8017506:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801750a:	2b00      	cmp	r3, #0
 801750c:	d103      	bne.n	8017516 <lv_page_scrollable_signal+0x572>
 801750e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8017512:	2b00      	cmp	r3, #0
 8017514:	d031      	beq.n	801757a <lv_page_scrollable_signal+0x5d6>
            lv_obj_set_pos(scrl, new_x, new_y);
 8017516:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	@ 0x54
 801751a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 801751e:	4619      	mov	r1, r3
 8017520:	68f8      	ldr	r0, [r7, #12]
 8017522:	f7ee f81a 	bl	800555a <lv_obj_set_pos>

            if(page_ext->scroll_prop_ip) {
 8017526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017528:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801752c:	f003 0302 	and.w	r3, r3, #2
 8017530:	b2db      	uxtb	r3, r3
 8017532:	2b00      	cmp	r3, #0
 8017534:	d021      	beq.n	801757a <lv_page_scrollable_signal+0x5d6>
                if(refr_y) lv_obj_set_y(page_parent, lv_obj_get_y(page_parent) + diff_y);
 8017536:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 801753a:	2b00      	cmp	r3, #0
 801753c:	d00c      	beq.n	8017558 <lv_page_scrollable_signal+0x5b4>
 801753e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017540:	f7ef f850 	bl	80065e4 <lv_obj_get_y>
 8017544:	4603      	mov	r3, r0
 8017546:	b29a      	uxth	r2, r3
 8017548:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801754a:	4413      	add	r3, r2
 801754c:	b29b      	uxth	r3, r3
 801754e:	b21b      	sxth	r3, r3
 8017550:	4619      	mov	r1, r3
 8017552:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017554:	f7ee f8a1 	bl	800569a <lv_obj_set_y>
                if(refr_x) lv_obj_set_x(page_parent, lv_obj_get_x(page_parent) + diff_x);
 8017558:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 801755c:	2b00      	cmp	r3, #0
 801755e:	d00c      	beq.n	801757a <lv_page_scrollable_signal+0x5d6>
 8017560:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017562:	f7ef f826 	bl	80065b2 <lv_obj_get_x>
 8017566:	4603      	mov	r3, r0
 8017568:	b29a      	uxth	r2, r3
 801756a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801756c:	4413      	add	r3, r2
 801756e:	b29b      	uxth	r3, r3
 8017570:	b21b      	sxth	r3, r3
 8017572:	4619      	mov	r1, r3
 8017574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017576:	f7ee f87b 	bl	8005670 <lv_obj_set_x>
            }
        }

        lv_page_sb_refresh(page);
 801757a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801757c:	f000 f8da 	bl	8017734 <lv_page_sb_refresh>
 8017580:	e0a4      	b.n	80176cc <lv_page_scrollable_signal+0x728>
    } else if(sign == LV_SIGNAL_DRAG_END) {
 8017582:	7afb      	ldrb	r3, [r7, #11]
 8017584:	2b0e      	cmp	r3, #14
 8017586:	f040 80a1 	bne.w	80176cc <lv_page_scrollable_signal+0x728>

        /*Scroll propagation is finished on drag end*/
        page_ext->scroll_prop_ip = 0;
 801758a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801758c:	f892 302e 	ldrb.w	r3, [r2, #46]	@ 0x2e
 8017590:	f36f 0341 	bfc	r3, #1, #1
 8017594:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e

        /*Hide scrollbars if required*/
        if(page_ext->sb.mode == LV_SB_MODE_DRAG) {
 8017598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801759a:	7f1b      	ldrb	r3, [r3, #28]
 801759c:	f003 031c 	and.w	r3, r3, #28
 80175a0:	b2db      	uxtb	r3, r3
 80175a2:	2b08      	cmp	r3, #8
 80175a4:	f040 8092 	bne.w	80176cc <lv_page_scrollable_signal+0x728>
            lv_disp_t * disp = lv_obj_get_disp(page);
 80175a8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80175aa:	f7ee ff91 	bl	80064d0 <lv_obj_get_disp>
 80175ae:	6438      	str	r0, [r7, #64]	@ 0x40
            lv_area_t sb_area_tmp;
            if(page_ext->sb.hor_draw) {
 80175b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80175b2:	7f1b      	ldrb	r3, [r3, #28]
 80175b4:	f003 0301 	and.w	r3, r3, #1
 80175b8:	b2db      	uxtb	r3, r3
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d03f      	beq.n	801763e <lv_page_scrollable_signal+0x69a>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.hor_area);
 80175be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80175c0:	f103 020c 	add.w	r2, r3, #12
 80175c4:	f107 0310 	add.w	r3, r7, #16
 80175c8:	4611      	mov	r1, r2
 80175ca:	4618      	mov	r0, r3
 80175cc:	f7fe fc31 	bl	8015e32 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 80175d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80175d4:	b29a      	uxth	r2, r3
 80175d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80175d8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80175dc:	b29b      	uxth	r3, r3
 80175de:	4413      	add	r3, r2
 80175e0:	b29b      	uxth	r3, r3
 80175e2:	b21b      	sxth	r3, r3
 80175e4:	823b      	strh	r3, [r7, #16]
                sb_area_tmp.y1 += page->coords.y1;
 80175e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80175ea:	b29a      	uxth	r2, r3
 80175ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80175ee:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80175f2:	b29b      	uxth	r3, r3
 80175f4:	4413      	add	r3, r2
 80175f6:	b29b      	uxth	r3, r3
 80175f8:	b21b      	sxth	r3, r3
 80175fa:	827b      	strh	r3, [r7, #18]
                sb_area_tmp.x2 += page->coords.x1;
 80175fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8017600:	b29a      	uxth	r2, r3
 8017602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017604:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8017608:	b29b      	uxth	r3, r3
 801760a:	4413      	add	r3, r2
 801760c:	b29b      	uxth	r3, r3
 801760e:	b21b      	sxth	r3, r3
 8017610:	82bb      	strh	r3, [r7, #20]
                sb_area_tmp.y2 += page->coords.y1;
 8017612:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017616:	b29a      	uxth	r2, r3
 8017618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801761a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801761e:	b29b      	uxth	r3, r3
 8017620:	4413      	add	r3, r2
 8017622:	b29b      	uxth	r3, r3
 8017624:	b21b      	sxth	r3, r3
 8017626:	82fb      	strh	r3, [r7, #22]
                lv_inv_area(disp, &sb_area_tmp);
 8017628:	f107 0310 	add.w	r3, r7, #16
 801762c:	4619      	mov	r1, r3
 801762e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8017630:	f7ef fbc8 	bl	8006dc4 <lv_inv_area>
                page_ext->sb.hor_draw = 0;
 8017634:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017636:	7f13      	ldrb	r3, [r2, #28]
 8017638:	f36f 0300 	bfc	r3, #0, #1
 801763c:	7713      	strb	r3, [r2, #28]
            }
            if(page_ext->sb.ver_draw) {
 801763e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017640:	7f1b      	ldrb	r3, [r3, #28]
 8017642:	f003 0302 	and.w	r3, r3, #2
 8017646:	b2db      	uxtb	r3, r3
 8017648:	2b00      	cmp	r3, #0
 801764a:	d03f      	beq.n	80176cc <lv_page_scrollable_signal+0x728>
                lv_area_copy(&sb_area_tmp, &page_ext->sb.ver_area);
 801764c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801764e:	f103 0214 	add.w	r2, r3, #20
 8017652:	f107 0310 	add.w	r3, r7, #16
 8017656:	4611      	mov	r1, r2
 8017658:	4618      	mov	r0, r3
 801765a:	f7fe fbea 	bl	8015e32 <lv_area_copy>
                sb_area_tmp.x1 += page->coords.x1;
 801765e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8017662:	b29a      	uxth	r2, r3
 8017664:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017666:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801766a:	b29b      	uxth	r3, r3
 801766c:	4413      	add	r3, r2
 801766e:	b29b      	uxth	r3, r3
 8017670:	b21b      	sxth	r3, r3
 8017672:	823b      	strh	r3, [r7, #16]
                sb_area_tmp.y1 += page->coords.y1;
 8017674:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017678:	b29a      	uxth	r2, r3
 801767a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801767c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8017680:	b29b      	uxth	r3, r3
 8017682:	4413      	add	r3, r2
 8017684:	b29b      	uxth	r3, r3
 8017686:	b21b      	sxth	r3, r3
 8017688:	827b      	strh	r3, [r7, #18]
                sb_area_tmp.x2 += page->coords.x1;
 801768a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801768e:	b29a      	uxth	r2, r3
 8017690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017692:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8017696:	b29b      	uxth	r3, r3
 8017698:	4413      	add	r3, r2
 801769a:	b29b      	uxth	r3, r3
 801769c:	b21b      	sxth	r3, r3
 801769e:	82bb      	strh	r3, [r7, #20]
                sb_area_tmp.y2 += page->coords.y1;
 80176a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80176a4:	b29a      	uxth	r2, r3
 80176a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80176a8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80176ac:	b29b      	uxth	r3, r3
 80176ae:	4413      	add	r3, r2
 80176b0:	b29b      	uxth	r3, r3
 80176b2:	b21b      	sxth	r3, r3
 80176b4:	82fb      	strh	r3, [r7, #22]
                lv_inv_area(disp, &sb_area_tmp);
 80176b6:	f107 0310 	add.w	r3, r7, #16
 80176ba:	4619      	mov	r1, r3
 80176bc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80176be:	f7ef fb81 	bl	8006dc4 <lv_inv_area>
                page_ext->sb.ver_draw = 0;
 80176c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80176c4:	7f13      	ldrb	r3, [r2, #28]
 80176c6:	f36f 0341 	bfc	r3, #1, #1
 80176ca:	7713      	strb	r3, [r2, #28]
            }
        }
    }

    return res;
 80176cc:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
}
 80176d0:	4618      	mov	r0, r3
 80176d2:	375c      	adds	r7, #92	@ 0x5c
 80176d4:	46bd      	mov	sp, r7
 80176d6:	bd90      	pop	{r4, r7, pc}

080176d8 <scrl_def_event_cb>:
 * @param scrl pointer to the page's scrollable object
 * @param event type of the event
 * @param data data of the event
 */
static void scrl_def_event_cb(lv_obj_t * scrl, lv_event_t event)
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b084      	sub	sp, #16
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
 80176e0:	460b      	mov	r3, r1
 80176e2:	70fb      	strb	r3, [r7, #3]
    lv_obj_t * page = lv_obj_get_parent(scrl);
 80176e4:	6878      	ldr	r0, [r7, #4]
 80176e6:	f7ee ff2d 	bl	8006544 <lv_obj_get_parent>
 80176ea:	60f8      	str	r0, [r7, #12]

    /*clang-format off*/
    if(event == LV_EVENT_PRESSED || event == LV_EVENT_PRESSING || event == LV_EVENT_PRESS_LOST ||
 80176ec:	78fb      	ldrb	r3, [r7, #3]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d014      	beq.n	801771c <scrl_def_event_cb+0x44>
 80176f2:	78fb      	ldrb	r3, [r7, #3]
 80176f4:	2b01      	cmp	r3, #1
 80176f6:	d011      	beq.n	801771c <scrl_def_event_cb+0x44>
 80176f8:	78fb      	ldrb	r3, [r7, #3]
 80176fa:	2b02      	cmp	r3, #2
 80176fc:	d00e      	beq.n	801771c <scrl_def_event_cb+0x44>
 80176fe:	78fb      	ldrb	r3, [r7, #3]
 8017700:	2b07      	cmp	r3, #7
 8017702:	d00b      	beq.n	801771c <scrl_def_event_cb+0x44>
       event == LV_EVENT_RELEASED || event == LV_EVENT_SHORT_CLICKED || event == LV_EVENT_CLICKED ||
 8017704:	78fb      	ldrb	r3, [r7, #3]
 8017706:	2b03      	cmp	r3, #3
 8017708:	d008      	beq.n	801771c <scrl_def_event_cb+0x44>
 801770a:	78fb      	ldrb	r3, [r7, #3]
 801770c:	2b06      	cmp	r3, #6
 801770e:	d005      	beq.n	801771c <scrl_def_event_cb+0x44>
 8017710:	78fb      	ldrb	r3, [r7, #3]
 8017712:	2b04      	cmp	r3, #4
 8017714:	d002      	beq.n	801771c <scrl_def_event_cb+0x44>
       event == LV_EVENT_LONG_PRESSED || event == LV_EVENT_LONG_PRESSED_REPEAT) {
 8017716:	78fb      	ldrb	r3, [r7, #3]
 8017718:	2b05      	cmp	r3, #5
 801771a:	d107      	bne.n	801772c <scrl_def_event_cb+0x54>
        lv_event_send(page, event, lv_event_get_data());
 801771c:	f7ee fe76 	bl	800640c <lv_event_get_data>
 8017720:	4602      	mov	r2, r0
 8017722:	78fb      	ldrb	r3, [r7, #3]
 8017724:	4619      	mov	r1, r3
 8017726:	68f8      	ldr	r0, [r7, #12]
 8017728:	f7ee fdec 	bl	8006304 <lv_event_send>
    }
    /*clang-format on*/
}
 801772c:	bf00      	nop
 801772e:	3710      	adds	r7, #16
 8017730:	46bd      	mov	sp, r7
 8017732:	bd80      	pop	{r7, pc}

08017734 <lv_page_sb_refresh>:
/**
 * Refresh the position and size of the scroll bars.
 * @param page pointer to a page object
 */
static void lv_page_sb_refresh(lv_obj_t * page)
{
 8017734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017736:	b08d      	sub	sp, #52	@ 0x34
 8017738:	af00      	add	r7, sp, #0
 801773a:	6078      	str	r0, [r7, #4]
    lv_page_ext_t * ext      = lv_obj_get_ext_attr(page);
 801773c:	6878      	ldr	r0, [r7, #4]
 801773e:	f7ef f8eb 	bl	8006918 <lv_obj_get_ext_attr>
 8017742:	62b8      	str	r0, [r7, #40]	@ 0x28
    const lv_style_t * style = lv_obj_get_style(page);
 8017744:	6878      	ldr	r0, [r7, #4]
 8017746:	f7ee ffd1 	bl	80066ec <lv_obj_get_style>
 801774a:	6278      	str	r0, [r7, #36]	@ 0x24
    lv_obj_t * scrl          = ext->scrl;
 801774c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801774e:	685b      	ldr	r3, [r3, #4]
 8017750:	623b      	str	r3, [r7, #32]
    lv_coord_t size_tmp;
    lv_coord_t scrl_w = lv_obj_get_width(scrl);
 8017752:	6a38      	ldr	r0, [r7, #32]
 8017754:	f7ee ff5f 	bl	8006616 <lv_obj_get_width>
 8017758:	4603      	mov	r3, r0
 801775a:	83fb      	strh	r3, [r7, #30]
    lv_coord_t scrl_h = lv_obj_get_height(scrl);
 801775c:	6a38      	ldr	r0, [r7, #32]
 801775e:	f7ee ff68 	bl	8006632 <lv_obj_get_height>
 8017762:	4603      	mov	r3, r0
 8017764:	83bb      	strh	r3, [r7, #28]
    lv_coord_t obj_w  = lv_obj_get_width(page);
 8017766:	6878      	ldr	r0, [r7, #4]
 8017768:	f7ee ff55 	bl	8006616 <lv_obj_get_width>
 801776c:	4603      	mov	r3, r0
 801776e:	837b      	strh	r3, [r7, #26]
    lv_coord_t obj_h  = lv_obj_get_height(page);
 8017770:	6878      	ldr	r0, [r7, #4]
 8017772:	f7ee ff5e 	bl	8006632 <lv_obj_get_height>
 8017776:	4603      	mov	r3, r0
 8017778:	833b      	strh	r3, [r7, #24]

    /*Always let 'scrollbar width' padding above, under, left and right to the scrollbars
     * else:
     * - horizontal and vertical scrollbars can overlap on the corners
     * - if the page has radius the scrollbar can be out of the radius  */
    lv_coord_t sb_hor_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.right);
 801777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801777c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8017780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017782:	689b      	ldr	r3, [r3, #8]
 8017784:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8017788:	4293      	cmp	r3, r2
 801778a:	bfb8      	it	lt
 801778c:	4613      	movlt	r3, r2
 801778e:	82fb      	strh	r3, [r7, #22]
    lv_coord_t sb_ver_pad = LV_MATH_MAX(ext->sb.style->body.padding.inner, style->body.padding.bottom);
 8017790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017792:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8017796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017798:	689b      	ldr	r3, [r3, #8]
 801779a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801779e:	4293      	cmp	r3, r2
 80177a0:	bfb8      	it	lt
 80177a2:	4613      	movlt	r3, r2
 80177a4:	82bb      	strh	r3, [r7, #20]

    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 80177a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177a8:	7f1b      	ldrb	r3, [r3, #28]
 80177aa:	f003 031c 	and.w	r3, r3, #28
 80177ae:	b2db      	uxtb	r3, r3
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	f000 82ba 	beq.w	8017d2a <lv_page_sb_refresh+0x5f6>

    if(ext->sb.mode == LV_SB_MODE_ON) {
 80177b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177b8:	7f1b      	ldrb	r3, [r3, #28]
 80177ba:	f003 031c 	and.w	r3, r3, #28
 80177be:	b2db      	uxtb	r3, r3
 80177c0:	2b04      	cmp	r3, #4
 80177c2:	d109      	bne.n	80177d8 <lv_page_sb_refresh+0xa4>
        ext->sb.hor_draw = 1;
 80177c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80177c6:	7f13      	ldrb	r3, [r2, #28]
 80177c8:	f043 0301 	orr.w	r3, r3, #1
 80177cc:	7713      	strb	r3, [r2, #28]
        ext->sb.ver_draw = 1;
 80177ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80177d0:	7f13      	ldrb	r3, [r2, #28]
 80177d2:	f043 0302 	orr.w	r3, r3, #2
 80177d6:	7713      	strb	r3, [r2, #28]
    }

    /*Invalidate the current (old) scrollbar areas*/
    lv_disp_t * disp = lv_obj_get_disp(page);
 80177d8:	6878      	ldr	r0, [r7, #4]
 80177da:	f7ee fe79 	bl	80064d0 <lv_obj_get_disp>
 80177de:	6138      	str	r0, [r7, #16]
    lv_area_t sb_area_tmp;
    if(ext->sb.hor_draw != 0) {
 80177e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177e2:	7f1b      	ldrb	r3, [r3, #28]
 80177e4:	f003 0301 	and.w	r3, r3, #1
 80177e8:	b2db      	uxtb	r3, r3
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d03a      	beq.n	8017864 <lv_page_sb_refresh+0x130>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 80177ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177f0:	f103 020c 	add.w	r2, r3, #12
 80177f4:	f107 0308 	add.w	r3, r7, #8
 80177f8:	4611      	mov	r1, r2
 80177fa:	4618      	mov	r0, r3
 80177fc:	f7fe fb19 	bl	8015e32 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8017800:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8017804:	b29a      	uxth	r2, r3
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801780c:	b29b      	uxth	r3, r3
 801780e:	4413      	add	r3, r2
 8017810:	b29b      	uxth	r3, r3
 8017812:	b21b      	sxth	r3, r3
 8017814:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 8017816:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801781a:	b29a      	uxth	r2, r3
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8017822:	b29b      	uxth	r3, r3
 8017824:	4413      	add	r3, r2
 8017826:	b29b      	uxth	r3, r3
 8017828:	b21b      	sxth	r3, r3
 801782a:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 801782c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017830:	b29a      	uxth	r2, r3
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8017838:	b29b      	uxth	r3, r3
 801783a:	4413      	add	r3, r2
 801783c:	b29b      	uxth	r3, r3
 801783e:	b21b      	sxth	r3, r3
 8017840:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 8017842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017846:	b29a      	uxth	r2, r3
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801784e:	b29b      	uxth	r3, r3
 8017850:	4413      	add	r3, r2
 8017852:	b29b      	uxth	r3, r3
 8017854:	b21b      	sxth	r3, r3
 8017856:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 8017858:	f107 0308 	add.w	r3, r7, #8
 801785c:	4619      	mov	r1, r3
 801785e:	6938      	ldr	r0, [r7, #16]
 8017860:	f7ef fab0 	bl	8006dc4 <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0) {
 8017864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017866:	7f1b      	ldrb	r3, [r3, #28]
 8017868:	f003 0302 	and.w	r3, r3, #2
 801786c:	b2db      	uxtb	r3, r3
 801786e:	2b00      	cmp	r3, #0
 8017870:	d03a      	beq.n	80178e8 <lv_page_sb_refresh+0x1b4>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 8017872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017874:	f103 0214 	add.w	r2, r3, #20
 8017878:	f107 0308 	add.w	r3, r7, #8
 801787c:	4611      	mov	r1, r2
 801787e:	4618      	mov	r0, r3
 8017880:	f7fe fad7 	bl	8015e32 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8017884:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8017888:	b29a      	uxth	r2, r3
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8017890:	b29b      	uxth	r3, r3
 8017892:	4413      	add	r3, r2
 8017894:	b29b      	uxth	r3, r3
 8017896:	b21b      	sxth	r3, r3
 8017898:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 801789a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801789e:	b29a      	uxth	r2, r3
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80178a6:	b29b      	uxth	r3, r3
 80178a8:	4413      	add	r3, r2
 80178aa:	b29b      	uxth	r3, r3
 80178ac:	b21b      	sxth	r3, r3
 80178ae:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 80178b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80178b4:	b29a      	uxth	r2, r3
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80178bc:	b29b      	uxth	r3, r3
 80178be:	4413      	add	r3, r2
 80178c0:	b29b      	uxth	r3, r3
 80178c2:	b21b      	sxth	r3, r3
 80178c4:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 80178c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80178ca:	b29a      	uxth	r2, r3
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80178d2:	b29b      	uxth	r3, r3
 80178d4:	4413      	add	r3, r2
 80178d6:	b29b      	uxth	r3, r3
 80178d8:	b21b      	sxth	r3, r3
 80178da:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 80178dc:	f107 0308 	add.w	r3, r7, #8
 80178e0:	4619      	mov	r1, r3
 80178e2:	6938      	ldr	r0, [r7, #16]
 80178e4:	f7ef fa6e 	bl	8006dc4 <lv_inv_area>
    }

    if(ext->sb.mode == LV_SB_MODE_DRAG && lv_indev_is_dragging(lv_indev_get_act()) == false) {
 80178e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178ea:	7f1b      	ldrb	r3, [r3, #28]
 80178ec:	f003 031c 	and.w	r3, r3, #28
 80178f0:	b2db      	uxtb	r3, r3
 80178f2:	2b08      	cmp	r3, #8
 80178f4:	d116      	bne.n	8017924 <lv_page_sb_refresh+0x1f0>
 80178f6:	f7eb fbef 	bl	80030d8 <lv_indev_get_act>
 80178fa:	4603      	mov	r3, r0
 80178fc:	4618      	mov	r0, r3
 80178fe:	f7eb fc6a 	bl	80031d6 <lv_indev_is_dragging>
 8017902:	4603      	mov	r3, r0
 8017904:	f083 0301 	eor.w	r3, r3, #1
 8017908:	b2db      	uxtb	r3, r3
 801790a:	2b00      	cmp	r3, #0
 801790c:	d00a      	beq.n	8017924 <lv_page_sb_refresh+0x1f0>
        ext->sb.hor_draw = 0;
 801790e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017910:	7f13      	ldrb	r3, [r2, #28]
 8017912:	f36f 0300 	bfc	r3, #0, #1
 8017916:	7713      	strb	r3, [r2, #28]
        ext->sb.ver_draw = 0;
 8017918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801791a:	7f13      	ldrb	r3, [r2, #28]
 801791c:	f36f 0341 	bfc	r3, #1, #1
 8017920:	7713      	strb	r3, [r2, #28]
        return;
 8017922:	e203      	b.n	8017d2c <lv_page_sb_refresh+0x5f8>
    }

    /*Full sized horizontal scrollbar*/
    if(scrl_w <= obj_w - style->body.padding.left - style->body.padding.right) {
 8017924:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8017928:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801792c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801792e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8017932:	1a5b      	subs	r3, r3, r1
 8017934:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017936:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 801793a:	1a5b      	subs	r3, r3, r1
 801793c:	429a      	cmp	r2, r3
 801793e:	dc38      	bgt.n	80179b2 <lv_page_sb_refresh+0x27e>
        lv_area_set_width(&ext->sb.hor_area, obj_w - 2 * sb_hor_pad);
 8017940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017942:	f103 000c 	add.w	r0, r3, #12
 8017946:	8b7a      	ldrh	r2, [r7, #26]
 8017948:	8afb      	ldrh	r3, [r7, #22]
 801794a:	005b      	lsls	r3, r3, #1
 801794c:	b29b      	uxth	r3, r3
 801794e:	1ad3      	subs	r3, r2, r3
 8017950:	b29b      	uxth	r3, r3
 8017952:	b21b      	sxth	r3, r3
 8017954:	4619      	mov	r1, r3
 8017956:	f7f7 fd8b 	bl	800f470 <lv_area_set_width>
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 801795a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801795c:	f103 000c 	add.w	r0, r3, #12
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 8017960:	8b3a      	ldrh	r2, [r7, #24]
 8017962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017964:	689b      	ldr	r3, [r3, #8]
 8017966:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801796a:	b29b      	uxth	r3, r3
 801796c:	1ad3      	subs	r3, r2, r3
 801796e:	b29a      	uxth	r2, r3
 8017970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017972:	689b      	ldr	r3, [r3, #8]
 8017974:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017978:	b29b      	uxth	r3, r3
 801797a:	1ad3      	subs	r3, r2, r3
 801797c:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.hor_area, sb_hor_pad,
 801797e:	b21a      	sxth	r2, r3
 8017980:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017984:	4619      	mov	r1, r3
 8017986:	f7f7 fda1 	bl	800f4cc <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 0;
 801798a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801798c:	7f1b      	ldrb	r3, [r3, #28]
 801798e:	f003 031c 	and.w	r3, r3, #28
 8017992:	b2db      	uxtb	r3, r3
 8017994:	2b0c      	cmp	r3, #12
 8017996:	d006      	beq.n	80179a6 <lv_page_sb_refresh+0x272>
 8017998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801799a:	7f1b      	ldrb	r3, [r3, #28]
 801799c:	f003 031c 	and.w	r3, r3, #28
 80179a0:	b2db      	uxtb	r3, r3
 80179a2:	2b08      	cmp	r3, #8
 80179a4:	d17c      	bne.n	8017aa0 <lv_page_sb_refresh+0x36c>
 80179a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80179a8:	7f13      	ldrb	r3, [r2, #28]
 80179aa:	f36f 0300 	bfc	r3, #0, #1
 80179ae:	7713      	strb	r3, [r2, #28]
 80179b0:	e076      	b.n	8017aa0 <lv_page_sb_refresh+0x36c>
    }
    /*Smaller horizontal scrollbar*/
    else {
        size_tmp =
            (obj_w * (obj_w - (2 * sb_hor_pad))) / (scrl_w + style->body.padding.left + style->body.padding.right);
 80179b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80179b6:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80179ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80179be:	0052      	lsls	r2, r2, #1
 80179c0:	1a8a      	subs	r2, r1, r2
 80179c2:	fb03 f202 	mul.w	r2, r3, r2
 80179c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80179ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80179cc:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80179d0:	440b      	add	r3, r1
 80179d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80179d4:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 80179d8:	440b      	add	r3, r1
 80179da:	fb92 f3f3 	sdiv	r3, r2, r3
        size_tmp =
 80179de:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
 80179e0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80179e4:	2b0b      	cmp	r3, #11
 80179e6:	dc01      	bgt.n	80179ec <lv_page_sb_refresh+0x2b8>
 80179e8:	230c      	movs	r3, #12
 80179ea:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        lv_area_set_width(&ext->sb.hor_area, size_tmp);
 80179ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179ee:	330c      	adds	r3, #12
 80179f0:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 80179f4:	4611      	mov	r1, r2
 80179f6:	4618      	mov	r0, r3
 80179f8:	f7f7 fd3a 	bl	800f470 <lv_area_set_width>

        lv_area_set_pos(&ext->sb.hor_area,
 80179fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80179fe:	f103 040c 	add.w	r4, r3, #12
                        sb_hor_pad +
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 8017a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a04:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8017a08:	461d      	mov	r5, r3
 8017a0a:	6a38      	ldr	r0, [r7, #32]
 8017a0c:	f7ee fdd1 	bl	80065b2 <lv_obj_get_x>
 8017a10:	4603      	mov	r3, r0
 8017a12:	1aeb      	subs	r3, r5, r3
 8017a14:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8017a18:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8017a1c:	1a89      	subs	r1, r1, r2
 8017a1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017a22:	0052      	lsls	r2, r2, #1
 8017a24:	1a8a      	subs	r2, r1, r2
 8017a26:	fb03 f202 	mul.w	r2, r3, r2
                                (scrl_w + style->body.padding.left + style->body.padding.right - obj_w),
 8017a2a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017a2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017a30:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8017a34:	440b      	add	r3, r1
 8017a36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017a38:	f9b1 101c 	ldrsh.w	r1, [r1, #28]
 8017a3c:	4419      	add	r1, r3
 8017a3e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8017a42:	1acb      	subs	r3, r1, r3
                            (-(lv_obj_get_x(scrl) - style->body.padding.left) * (obj_w - size_tmp - 2 * sb_hor_pad)) /
 8017a44:	fb92 f3f3 	sdiv	r3, r2, r3
                        sb_hor_pad +
 8017a48:	b29a      	uxth	r2, r3
 8017a4a:	8afb      	ldrh	r3, [r7, #22]
 8017a4c:	4413      	add	r3, r2
 8017a4e:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.hor_area,
 8017a50:	b219      	sxth	r1, r3
                        obj_h - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.bottom);
 8017a52:	8b3a      	ldrh	r2, [r7, #24]
 8017a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a56:	689b      	ldr	r3, [r3, #8]
 8017a58:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8017a5c:	b29b      	uxth	r3, r3
 8017a5e:	1ad3      	subs	r3, r2, r3
 8017a60:	b29a      	uxth	r2, r3
 8017a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a64:	689b      	ldr	r3, [r3, #8]
 8017a66:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017a6a:	b29b      	uxth	r3, r3
 8017a6c:	1ad3      	subs	r3, r2, r3
 8017a6e:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.hor_area,
 8017a70:	b21b      	sxth	r3, r3
 8017a72:	461a      	mov	r2, r3
 8017a74:	4620      	mov	r0, r4
 8017a76:	f7f7 fd29 	bl	800f4cc <lv_area_set_pos>

        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.hor_draw = 1;
 8017a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a7c:	7f1b      	ldrb	r3, [r3, #28]
 8017a7e:	f003 031c 	and.w	r3, r3, #28
 8017a82:	b2db      	uxtb	r3, r3
 8017a84:	2b0c      	cmp	r3, #12
 8017a86:	d006      	beq.n	8017a96 <lv_page_sb_refresh+0x362>
 8017a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a8a:	7f1b      	ldrb	r3, [r3, #28]
 8017a8c:	f003 031c 	and.w	r3, r3, #28
 8017a90:	b2db      	uxtb	r3, r3
 8017a92:	2b08      	cmp	r3, #8
 8017a94:	d104      	bne.n	8017aa0 <lv_page_sb_refresh+0x36c>
 8017a96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017a98:	7f13      	ldrb	r3, [r2, #28]
 8017a9a:	f043 0301 	orr.w	r3, r3, #1
 8017a9e:	7713      	strb	r3, [r2, #28]
    }

    /*Full sized vertical scroll bar*/
    if(scrl_h <= obj_h - style->body.padding.top - style->body.padding.bottom) {
 8017aa0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8017aa4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8017aa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017aaa:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8017aae:	1a5b      	subs	r3, r3, r1
 8017ab0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017ab2:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 8017ab6:	1a5b      	subs	r3, r3, r1
 8017ab8:	429a      	cmp	r2, r3
 8017aba:	dc38      	bgt.n	8017b2e <lv_page_sb_refresh+0x3fa>
        lv_area_set_height(&ext->sb.ver_area, obj_h - 2 * sb_ver_pad);
 8017abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017abe:	f103 0014 	add.w	r0, r3, #20
 8017ac2:	8b3a      	ldrh	r2, [r7, #24]
 8017ac4:	8abb      	ldrh	r3, [r7, #20]
 8017ac6:	005b      	lsls	r3, r3, #1
 8017ac8:	b29b      	uxth	r3, r3
 8017aca:	1ad3      	subs	r3, r2, r3
 8017acc:	b29b      	uxth	r3, r3
 8017ace:	b21b      	sxth	r3, r3
 8017ad0:	4619      	mov	r1, r3
 8017ad2:	f7f7 fce4 	bl	800f49e <lv_area_set_height>
        lv_area_set_pos(&ext->sb.ver_area,
 8017ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ad8:	f103 0014 	add.w	r0, r3, #20
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right, sb_ver_pad);
 8017adc:	8b7a      	ldrh	r2, [r7, #26]
 8017ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ae0:	689b      	ldr	r3, [r3, #8]
 8017ae2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8017ae6:	b29b      	uxth	r3, r3
 8017ae8:	1ad3      	subs	r3, r2, r3
 8017aea:	b29a      	uxth	r2, r3
 8017aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017aee:	689b      	ldr	r3, [r3, #8]
 8017af0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017af4:	b29b      	uxth	r3, r3
 8017af6:	1ad3      	subs	r3, r2, r3
 8017af8:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.ver_area,
 8017afa:	b21b      	sxth	r3, r3
 8017afc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017b00:	4619      	mov	r1, r3
 8017b02:	f7f7 fce3 	bl	800f4cc <lv_area_set_pos>
        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 0;
 8017b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b08:	7f1b      	ldrb	r3, [r3, #28]
 8017b0a:	f003 031c 	and.w	r3, r3, #28
 8017b0e:	b2db      	uxtb	r3, r3
 8017b10:	2b0c      	cmp	r3, #12
 8017b12:	d006      	beq.n	8017b22 <lv_page_sb_refresh+0x3ee>
 8017b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b16:	7f1b      	ldrb	r3, [r3, #28]
 8017b18:	f003 031c 	and.w	r3, r3, #28
 8017b1c:	b2db      	uxtb	r3, r3
 8017b1e:	2b08      	cmp	r3, #8
 8017b20:	d17e      	bne.n	8017c20 <lv_page_sb_refresh+0x4ec>
 8017b22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017b24:	7f13      	ldrb	r3, [r2, #28]
 8017b26:	f36f 0341 	bfc	r3, #1, #1
 8017b2a:	7713      	strb	r3, [r2, #28]
 8017b2c:	e078      	b.n	8017c20 <lv_page_sb_refresh+0x4ec>
    }
    /*Smaller vertical scroll bar*/
    else {
        size_tmp =
            (obj_h * (obj_h - (2 * sb_ver_pad))) / (scrl_h + style->body.padding.top + style->body.padding.bottom);
 8017b2e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8017b32:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8017b36:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017b3a:	0052      	lsls	r2, r2, #1
 8017b3c:	1a8a      	subs	r2, r1, r2
 8017b3e:	fb03 f202 	mul.w	r2, r3, r2
 8017b42:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017b46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017b48:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8017b4c:	440b      	add	r3, r1
 8017b4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017b50:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 8017b54:	440b      	add	r3, r1
 8017b56:	fb92 f3f3 	sdiv	r3, r2, r3
        size_tmp =
 8017b5a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        if(size_tmp < LV_PAGE_SB_MIN_SIZE) size_tmp = LV_PAGE_SB_MIN_SIZE;
 8017b5c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8017b60:	2b0b      	cmp	r3, #11
 8017b62:	dc01      	bgt.n	8017b68 <lv_page_sb_refresh+0x434>
 8017b64:	230c      	movs	r3, #12
 8017b66:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        lv_area_set_height(&ext->sb.ver_area, size_tmp);
 8017b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b6a:	3314      	adds	r3, #20
 8017b6c:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8017b70:	4611      	mov	r1, r2
 8017b72:	4618      	mov	r0, r3
 8017b74:	f7f7 fc93 	bl	800f49e <lv_area_set_height>

        lv_area_set_pos(&ext->sb.ver_area,
 8017b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b7a:	f103 0414 	add.w	r4, r3, #20
                        obj_w - ext->sb.style->body.padding.inner - ext->sb.style->body.padding.right,
 8017b7e:	8b7a      	ldrh	r2, [r7, #26]
 8017b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b82:	689b      	ldr	r3, [r3, #8]
 8017b84:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8017b88:	b29b      	uxth	r3, r3
 8017b8a:	1ad3      	subs	r3, r2, r3
 8017b8c:	b29a      	uxth	r2, r3
 8017b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b90:	689b      	ldr	r3, [r3, #8]
 8017b92:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8017b96:	b29b      	uxth	r3, r3
 8017b98:	1ad3      	subs	r3, r2, r3
 8017b9a:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.ver_area,
 8017b9c:	b21d      	sxth	r5, r3
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8017b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ba0:	689b      	ldr	r3, [r3, #8]
 8017ba2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8017ba6:	461e      	mov	r6, r3
 8017ba8:	6a38      	ldr	r0, [r7, #32]
 8017baa:	f7ee fd1b 	bl	80065e4 <lv_obj_get_y>
 8017bae:	4603      	mov	r3, r0
 8017bb0:	1af3      	subs	r3, r6, r3
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 8017bb2:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8017bb6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	@ 0x2e
 8017bba:	1a89      	subs	r1, r1, r2
 8017bbc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017bc0:	0052      	lsls	r2, r2, #1
 8017bc2:	1a8a      	subs	r2, r1, r2
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8017bc4:	fb03 f202 	mul.w	r2, r3, r2
                                         (scrl_h + style->body.padding.top + style->body.padding.bottom - obj_h));
 8017bc8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017bcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017bce:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8017bd2:	440b      	add	r3, r1
 8017bd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017bd6:	f9b1 1018 	ldrsh.w	r1, [r1, #24]
 8017bda:	4419      	add	r1, r3
 8017bdc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8017be0:	1acb      	subs	r3, r1, r3
                                      (obj_h - size_tmp - 2 * sb_ver_pad)) /
 8017be2:	fb92 f3f3 	sdiv	r3, r2, r3
                        sb_ver_pad + (-(lv_obj_get_y(scrl) - ext->sb.style->body.padding.bottom) *
 8017be6:	b29a      	uxth	r2, r3
 8017be8:	8abb      	ldrh	r3, [r7, #20]
 8017bea:	4413      	add	r3, r2
 8017bec:	b29b      	uxth	r3, r3
        lv_area_set_pos(&ext->sb.ver_area,
 8017bee:	b21b      	sxth	r3, r3
 8017bf0:	461a      	mov	r2, r3
 8017bf2:	4629      	mov	r1, r5
 8017bf4:	4620      	mov	r0, r4
 8017bf6:	f7f7 fc69 	bl	800f4cc <lv_area_set_pos>

        if(ext->sb.mode == LV_SB_MODE_AUTO || ext->sb.mode == LV_SB_MODE_DRAG) ext->sb.ver_draw = 1;
 8017bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bfc:	7f1b      	ldrb	r3, [r3, #28]
 8017bfe:	f003 031c 	and.w	r3, r3, #28
 8017c02:	b2db      	uxtb	r3, r3
 8017c04:	2b0c      	cmp	r3, #12
 8017c06:	d006      	beq.n	8017c16 <lv_page_sb_refresh+0x4e2>
 8017c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c0a:	7f1b      	ldrb	r3, [r3, #28]
 8017c0c:	f003 031c 	and.w	r3, r3, #28
 8017c10:	b2db      	uxtb	r3, r3
 8017c12:	2b08      	cmp	r3, #8
 8017c14:	d104      	bne.n	8017c20 <lv_page_sb_refresh+0x4ec>
 8017c16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017c18:	7f13      	ldrb	r3, [r2, #28]
 8017c1a:	f043 0302 	orr.w	r3, r3, #2
 8017c1e:	7713      	strb	r3, [r2, #28]
    }

    /*Invalidate the new scrollbar areas*/
    if(ext->sb.hor_draw != 0) {
 8017c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c22:	7f1b      	ldrb	r3, [r3, #28]
 8017c24:	f003 0301 	and.w	r3, r3, #1
 8017c28:	b2db      	uxtb	r3, r3
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d03a      	beq.n	8017ca4 <lv_page_sb_refresh+0x570>
        lv_area_copy(&sb_area_tmp, &ext->sb.hor_area);
 8017c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c30:	f103 020c 	add.w	r2, r3, #12
 8017c34:	f107 0308 	add.w	r3, r7, #8
 8017c38:	4611      	mov	r1, r2
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	f7fe f8f9 	bl	8015e32 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8017c40:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8017c44:	b29a      	uxth	r2, r3
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8017c4c:	b29b      	uxth	r3, r3
 8017c4e:	4413      	add	r3, r2
 8017c50:	b29b      	uxth	r3, r3
 8017c52:	b21b      	sxth	r3, r3
 8017c54:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 8017c56:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017c5a:	b29a      	uxth	r2, r3
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8017c62:	b29b      	uxth	r3, r3
 8017c64:	4413      	add	r3, r2
 8017c66:	b29b      	uxth	r3, r3
 8017c68:	b21b      	sxth	r3, r3
 8017c6a:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 8017c6c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017c70:	b29a      	uxth	r2, r3
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8017c78:	b29b      	uxth	r3, r3
 8017c7a:	4413      	add	r3, r2
 8017c7c:	b29b      	uxth	r3, r3
 8017c7e:	b21b      	sxth	r3, r3
 8017c80:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 8017c82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017c86:	b29a      	uxth	r2, r3
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8017c8e:	b29b      	uxth	r3, r3
 8017c90:	4413      	add	r3, r2
 8017c92:	b29b      	uxth	r3, r3
 8017c94:	b21b      	sxth	r3, r3
 8017c96:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 8017c98:	f107 0308 	add.w	r3, r7, #8
 8017c9c:	4619      	mov	r1, r3
 8017c9e:	6938      	ldr	r0, [r7, #16]
 8017ca0:	f7ef f890 	bl	8006dc4 <lv_inv_area>
    }
    if(ext->sb.ver_draw != 0) {
 8017ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ca6:	7f1b      	ldrb	r3, [r3, #28]
 8017ca8:	f003 0302 	and.w	r3, r3, #2
 8017cac:	b2db      	uxtb	r3, r3
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d03c      	beq.n	8017d2c <lv_page_sb_refresh+0x5f8>
        lv_area_copy(&sb_area_tmp, &ext->sb.ver_area);
 8017cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cb4:	f103 0214 	add.w	r2, r3, #20
 8017cb8:	f107 0308 	add.w	r3, r7, #8
 8017cbc:	4611      	mov	r1, r2
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	f7fe f8b7 	bl	8015e32 <lv_area_copy>
        sb_area_tmp.x1 += page->coords.x1;
 8017cc4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8017cc8:	b29a      	uxth	r2, r3
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8017cd0:	b29b      	uxth	r3, r3
 8017cd2:	4413      	add	r3, r2
 8017cd4:	b29b      	uxth	r3, r3
 8017cd6:	b21b      	sxth	r3, r3
 8017cd8:	813b      	strh	r3, [r7, #8]
        sb_area_tmp.y1 += page->coords.y1;
 8017cda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8017cde:	b29a      	uxth	r2, r3
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8017ce6:	b29b      	uxth	r3, r3
 8017ce8:	4413      	add	r3, r2
 8017cea:	b29b      	uxth	r3, r3
 8017cec:	b21b      	sxth	r3, r3
 8017cee:	817b      	strh	r3, [r7, #10]
        sb_area_tmp.x2 += page->coords.x1;
 8017cf0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017cf4:	b29a      	uxth	r2, r3
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8017cfc:	b29b      	uxth	r3, r3
 8017cfe:	4413      	add	r3, r2
 8017d00:	b29b      	uxth	r3, r3
 8017d02:	b21b      	sxth	r3, r3
 8017d04:	81bb      	strh	r3, [r7, #12]
        sb_area_tmp.y2 += page->coords.y1;
 8017d06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017d0a:	b29a      	uxth	r2, r3
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8017d12:	b29b      	uxth	r3, r3
 8017d14:	4413      	add	r3, r2
 8017d16:	b29b      	uxth	r3, r3
 8017d18:	b21b      	sxth	r3, r3
 8017d1a:	81fb      	strh	r3, [r7, #14]
        lv_inv_area(disp, &sb_area_tmp);
 8017d1c:	f107 0308 	add.w	r3, r7, #8
 8017d20:	4619      	mov	r1, r3
 8017d22:	6938      	ldr	r0, [r7, #16]
 8017d24:	f7ef f84e 	bl	8006dc4 <lv_inv_area>
 8017d28:	e000      	b.n	8017d2c <lv_page_sb_refresh+0x5f8>
    if(ext->sb.mode == LV_SB_MODE_OFF) return;
 8017d2a:	bf00      	nop
    }
}
 8017d2c:	3734      	adds	r7, #52	@ 0x34
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d32 <edge_flash_anim>:

#if LV_USE_ANIMATION
static void edge_flash_anim(void * page, lv_anim_value_t v)
{
 8017d32:	b580      	push	{r7, lr}
 8017d34:	b084      	sub	sp, #16
 8017d36:	af00      	add	r7, sp, #0
 8017d38:	6078      	str	r0, [r7, #4]
 8017d3a:	460b      	mov	r3, r1
 8017d3c:	807b      	strh	r3, [r7, #2]
    lv_page_ext_t * ext   = lv_obj_get_ext_attr(page);
 8017d3e:	6878      	ldr	r0, [r7, #4]
 8017d40:	f7ee fdea 	bl	8006918 <lv_obj_get_ext_attr>
 8017d44:	60f8      	str	r0, [r7, #12]
    ext->edge_flash.state = v;
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	887a      	ldrh	r2, [r7, #2]
 8017d4a:	841a      	strh	r2, [r3, #32]
    lv_obj_invalidate(page);
 8017d4c:	6878      	ldr	r0, [r7, #4]
 8017d4e:	f7ed fb05 	bl	800535c <lv_obj_invalidate>
}
 8017d52:	bf00      	nop
 8017d54:	3710      	adds	r7, #16
 8017d56:	46bd      	mov	sp, r7
 8017d58:	bd80      	pop	{r7, pc}

08017d5a <edge_flash_anim_end>:

static void edge_flash_anim_end(lv_anim_t * a)
{
 8017d5a:	b580      	push	{r7, lr}
 8017d5c:	b084      	sub	sp, #16
 8017d5e:	af00      	add	r7, sp, #0
 8017d60:	6078      	str	r0, [r7, #4]
    lv_page_ext_t * ext       = lv_obj_get_ext_attr(a->var);
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	4618      	mov	r0, r3
 8017d68:	f7ee fdd6 	bl	8006918 <lv_obj_get_ext_attr>
 8017d6c:	60f8      	str	r0, [r7, #12]
    ext->edge_flash.top_ip    = 0;
 8017d6e:	68fa      	ldr	r2, [r7, #12]
 8017d70:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8017d74:	f36f 0341 	bfc	r3, #1, #1
 8017d78:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
    ext->edge_flash.bottom_ip = 0;
 8017d7c:	68fa      	ldr	r2, [r7, #12]
 8017d7e:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8017d82:	f36f 0382 	bfc	r3, #2, #1
 8017d86:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
    ext->edge_flash.left_ip   = 0;
 8017d8a:	68fa      	ldr	r2, [r7, #12]
 8017d8c:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8017d90:	f36f 1304 	bfc	r3, #4, #1
 8017d94:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
    ext->edge_flash.right_ip  = 0;
 8017d98:	68fa      	ldr	r2, [r7, #12]
 8017d9a:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8017d9e:	f36f 03c3 	bfc	r3, #3, #1
 8017da2:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
    lv_obj_invalidate(a->var);
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	4618      	mov	r0, r3
 8017dac:	f7ed fad6 	bl	800535c <lv_obj_invalidate>
}
 8017db0:	bf00      	nop
 8017db2:	3710      	adds	r7, #16
 8017db4:	46bd      	mov	sp, r7
 8017db6:	bd80      	pop	{r7, pc}

08017db8 <lv_font_get_line_height>:
{
 8017db8:	b480      	push	{r7}
 8017dba:	b083      	sub	sp, #12
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	6078      	str	r0, [r7, #4]
    return font_p->line_height;
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	7a1b      	ldrb	r3, [r3, #8]
}
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	370c      	adds	r7, #12
 8017dc8:	46bd      	mov	sp, r7
 8017dca:	bc80      	pop	{r7}
 8017dcc:	4770      	bx	lr

08017dce <lv_area_copy>:
{
 8017dce:	b580      	push	{r7, lr}
 8017dd0:	b082      	sub	sp, #8
 8017dd2:	af00      	add	r7, sp, #0
 8017dd4:	6078      	str	r0, [r7, #4]
 8017dd6:	6039      	str	r1, [r7, #0]
    memcpy(dest, src, sizeof(lv_area_t));
 8017dd8:	2208      	movs	r2, #8
 8017dda:	6839      	ldr	r1, [r7, #0]
 8017ddc:	6878      	ldr	r0, [r7, #4]
 8017dde:	f003 fe04 	bl	801b9ea <memcpy>
}
 8017de2:	bf00      	nop
 8017de4:	3708      	adds	r7, #8
 8017de6:	46bd      	mov	sp, r7
 8017de8:	bd80      	pop	{r7, pc}

08017dea <lv_area_get_width>:
{
 8017dea:	b480      	push	{r7}
 8017dec:	b083      	sub	sp, #12
 8017dee:	af00      	add	r7, sp, #0
 8017df0:	6078      	str	r0, [r7, #4]
    return area_p->x2 - area_p->x1 + 1;
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8017df8:	b29a      	uxth	r2, r3
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017e00:	b29b      	uxth	r3, r3
 8017e02:	1ad3      	subs	r3, r2, r3
 8017e04:	b29b      	uxth	r3, r3
 8017e06:	3301      	adds	r3, #1
 8017e08:	b29b      	uxth	r3, r3
 8017e0a:	b21b      	sxth	r3, r3
}
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	370c      	adds	r7, #12
 8017e10:	46bd      	mov	sp, r7
 8017e12:	bc80      	pop	{r7}
 8017e14:	4770      	bx	lr

08017e16 <lv_area_get_height>:
{
 8017e16:	b480      	push	{r7}
 8017e18:	b083      	sub	sp, #12
 8017e1a:	af00      	add	r7, sp, #0
 8017e1c:	6078      	str	r0, [r7, #4]
    return area_p->y2 - area_p->y1 + 1;
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8017e24:	b29a      	uxth	r2, r3
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017e2c:	b29b      	uxth	r3, r3
 8017e2e:	1ad3      	subs	r3, r2, r3
 8017e30:	b29b      	uxth	r3, r3
 8017e32:	3301      	adds	r3, #1
 8017e34:	b29b      	uxth	r3, r3
 8017e36:	b21b      	sxth	r3, r3
}
 8017e38:	4618      	mov	r0, r3
 8017e3a:	370c      	adds	r7, #12
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bc80      	pop	{r7}
 8017e40:	4770      	bx	lr

08017e42 <lv_cont_set_fit2>:
 * @param cont pointer to a container object
 * @param hot horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_cont_set_fit2(lv_obj_t * cont, lv_fit_t hor, lv_fit_t ver)
{
 8017e42:	b580      	push	{r7, lr}
 8017e44:	b084      	sub	sp, #16
 8017e46:	af02      	add	r7, sp, #8
 8017e48:	6078      	str	r0, [r7, #4]
 8017e4a:	460b      	mov	r3, r1
 8017e4c:	70fb      	strb	r3, [r7, #3]
 8017e4e:	4613      	mov	r3, r2
 8017e50:	70bb      	strb	r3, [r7, #2]
    lv_cont_set_fit4(cont, hor, hor, ver, ver);
 8017e52:	78b8      	ldrb	r0, [r7, #2]
 8017e54:	78fa      	ldrb	r2, [r7, #3]
 8017e56:	78f9      	ldrb	r1, [r7, #3]
 8017e58:	78bb      	ldrb	r3, [r7, #2]
 8017e5a:	9300      	str	r3, [sp, #0]
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	6878      	ldr	r0, [r7, #4]
 8017e60:	f7fb f83c 	bl	8012edc <lv_cont_set_fit4>
}
 8017e64:	bf00      	nop
 8017e66:	3708      	adds	r7, #8
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	bd80      	pop	{r7, pc}

08017e6c <lv_page_set_scrl_fit2>:
 * @param page pointer to a page object
 * @param hot horizontal fit policy from `lv_fit_t`
 * @param ver vertical fit policy from `lv_fit_t`
 */
static inline void lv_page_set_scrl_fit2(lv_obj_t * page, lv_fit_t hor, lv_fit_t ver)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b082      	sub	sp, #8
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	6078      	str	r0, [r7, #4]
 8017e74:	460b      	mov	r3, r1
 8017e76:	70fb      	strb	r3, [r7, #3]
 8017e78:	4613      	mov	r3, r2
 8017e7a:	70bb      	strb	r3, [r7, #2]
    lv_cont_set_fit2(lv_page_get_scrl(page), hor, ver);
 8017e7c:	6878      	ldr	r0, [r7, #4]
 8017e7e:	f7fe fa7f 	bl	8016380 <lv_page_get_scrl>
 8017e82:	78ba      	ldrb	r2, [r7, #2]
 8017e84:	78fb      	ldrb	r3, [r7, #3]
 8017e86:	4619      	mov	r1, r3
 8017e88:	f7ff ffdb 	bl	8017e42 <lv_cont_set_fit2>
}
 8017e8c:	bf00      	nop
 8017e8e:	3708      	adds	r7, #8
 8017e90:	46bd      	mov	sp, r7
 8017e92:	bd80      	pop	{r7, pc}

08017e94 <lv_label_set_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @param style pointer to a style
 */
static inline void lv_label_set_style(lv_obj_t * label, lv_label_style_t type, const lv_style_t * style)
{
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b084      	sub	sp, #16
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	60f8      	str	r0, [r7, #12]
 8017e9c:	460b      	mov	r3, r1
 8017e9e:	607a      	str	r2, [r7, #4]
 8017ea0:	72fb      	strb	r3, [r7, #11]
    (void)type; /*Unused*/
    lv_obj_set_style(label, style);
 8017ea2:	6879      	ldr	r1, [r7, #4]
 8017ea4:	68f8      	ldr	r0, [r7, #12]
 8017ea6:	f7ee f956 	bl	8006156 <lv_obj_set_style>
}
 8017eaa:	bf00      	nop
 8017eac:	3710      	adds	r7, #16
 8017eae:	46bd      	mov	sp, r7
 8017eb0:	bd80      	pop	{r7, pc}

08017eb2 <lv_label_get_style>:
 * @param label pointer to an label object
 * @param type which style should be get (can be only `LV_LABEL_STYLE_MAIN`)
 * @return pointer to the label's style
 */
static inline const lv_style_t * lv_label_get_style(const lv_obj_t * label, lv_label_style_t type)
{
 8017eb2:	b580      	push	{r7, lr}
 8017eb4:	b082      	sub	sp, #8
 8017eb6:	af00      	add	r7, sp, #0
 8017eb8:	6078      	str	r0, [r7, #4]
 8017eba:	460b      	mov	r3, r1
 8017ebc:	70fb      	strb	r3, [r7, #3]
    (void)type; /*Unused*/
    return lv_obj_get_style(label);
 8017ebe:	6878      	ldr	r0, [r7, #4]
 8017ec0:	f7ee fc14 	bl	80066ec <lv_obj_get_style>
 8017ec4:	4603      	mov	r3, r0
}
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	3708      	adds	r7, #8
 8017eca:	46bd      	mov	sp, r7
 8017ecc:	bd80      	pop	{r7, pc}

08017ece <lv_ta_set_sb_mode>:
 * Set the scroll bar mode of a text area
 * @param ta pointer to a text area object
 * @param sb_mode the new mode from 'lv_page_sb_mode_t' enum
 */
static inline void lv_ta_set_sb_mode(lv_obj_t * ta, lv_sb_mode_t mode)
{
 8017ece:	b580      	push	{r7, lr}
 8017ed0:	b082      	sub	sp, #8
 8017ed2:	af00      	add	r7, sp, #0
 8017ed4:	6078      	str	r0, [r7, #4]
 8017ed6:	460b      	mov	r3, r1
 8017ed8:	70fb      	strb	r3, [r7, #3]
    lv_page_set_sb_mode(ta, mode);
 8017eda:	78fb      	ldrb	r3, [r7, #3]
 8017edc:	4619      	mov	r1, r3
 8017ede:	6878      	ldr	r0, [r7, #4]
 8017ee0:	f7fe f986 	bl	80161f0 <lv_page_set_sb_mode>
}
 8017ee4:	bf00      	nop
 8017ee6:	3708      	adds	r7, #8
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	bd80      	pop	{r7, pc}

08017eec <lv_ta_set_edge_flash>:
 * Enable the edge flash effect. (Show an arc when the an edge is reached)
 * @param page pointer to a Text Area
 * @param en true or false to enable/disable end flash
 */
static inline void lv_ta_set_edge_flash(lv_obj_t * ta, bool en)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b082      	sub	sp, #8
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
 8017ef4:	460b      	mov	r3, r1
 8017ef6:	70fb      	strb	r3, [r7, #3]
    lv_page_set_edge_flash(ta, en);
 8017ef8:	78fb      	ldrb	r3, [r7, #3]
 8017efa:	4619      	mov	r1, r3
 8017efc:	6878      	ldr	r0, [r7, #4]
 8017efe:	f7fe f9d7 	bl	80162b0 <lv_page_set_edge_flash>
}
 8017f02:	bf00      	nop
 8017f04:	3708      	adds	r7, #8
 8017f06:	46bd      	mov	sp, r7
 8017f08:	bd80      	pop	{r7, pc}

08017f0a <lv_ta_get_edge_flash>:
 * Get the scroll propagation property
 * @param ta pointer to a Text area
 * @return true or false
 */
static inline bool lv_ta_get_edge_flash(lv_obj_t * ta)
{
 8017f0a:	b580      	push	{r7, lr}
 8017f0c:	b082      	sub	sp, #8
 8017f0e:	af00      	add	r7, sp, #0
 8017f10:	6078      	str	r0, [r7, #4]
    return lv_page_get_edge_flash(ta);
 8017f12:	6878      	ldr	r0, [r7, #4]
 8017f14:	f7fe fa42 	bl	801639c <lv_page_get_edge_flash>
 8017f18:	4603      	mov	r3, r0
}
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	3708      	adds	r7, #8
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd80      	pop	{r7, pc}
	...

08017f24 <lv_ta_create>:
 * @param par pointer to an object, it will be the parent of the new text area
 * @param copy pointer to a text area object, if not NULL then the new object will be copied from it
 * @return pointer to the created text area
 */
lv_obj_t * lv_ta_create(lv_obj_t * par, const lv_obj_t * copy)
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b090      	sub	sp, #64	@ 0x40
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
 8017f2c:	6039      	str	r1, [r7, #0]
    LV_LOG_TRACE("text area create started");

    /*Create the ancestor object*/
    lv_obj_t * new_ta = lv_page_create(par, copy);
 8017f2e:	6839      	ldr	r1, [r7, #0]
 8017f30:	6878      	ldr	r0, [r7, #4]
 8017f32:	f7fd ffe9 	bl	8015f08 <lv_page_create>
 8017f36:	63f8      	str	r0, [r7, #60]	@ 0x3c
    lv_mem_assert(new_ta);
 8017f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d101      	bne.n	8017f42 <lv_ta_create+0x1e>
 8017f3e:	bf00      	nop
 8017f40:	e7fd      	b.n	8017f3e <lv_ta_create+0x1a>
    if(new_ta == NULL) return NULL;
 8017f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d101      	bne.n	8017f4c <lv_ta_create+0x28>
 8017f48:	2300      	movs	r3, #0
 8017f4a:	e18c      	b.n	8018266 <lv_ta_create+0x342>

    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_ta);
 8017f4c:	4b74      	ldr	r3, [pc, #464]	@ (8018120 <lv_ta_create+0x1fc>)
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d105      	bne.n	8017f60 <lv_ta_create+0x3c>
 8017f54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017f56:	f7ee fcc9 	bl	80068ec <lv_obj_get_signal_cb>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	4a70      	ldr	r2, [pc, #448]	@ (8018120 <lv_ta_create+0x1fc>)
 8017f5e:	6013      	str	r3, [r2, #0]
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(new_ta);
 8017f60:	4b70      	ldr	r3, [pc, #448]	@ (8018124 <lv_ta_create+0x200>)
 8017f62:	681b      	ldr	r3, [r3, #0]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d105      	bne.n	8017f74 <lv_ta_create+0x50>
 8017f68:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017f6a:	f7ee fcca 	bl	8006902 <lv_obj_get_design_cb>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	4a6c      	ldr	r2, [pc, #432]	@ (8018124 <lv_ta_create+0x200>)
 8017f72:	6013      	str	r3, [r2, #0]
    if(scrl_signal == NULL) scrl_signal = lv_obj_get_signal_cb(lv_page_get_scrl(new_ta));
 8017f74:	4b6c      	ldr	r3, [pc, #432]	@ (8018128 <lv_ta_create+0x204>)
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d109      	bne.n	8017f90 <lv_ta_create+0x6c>
 8017f7c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017f7e:	f7fe f9ff 	bl	8016380 <lv_page_get_scrl>
 8017f82:	4603      	mov	r3, r0
 8017f84:	4618      	mov	r0, r3
 8017f86:	f7ee fcb1 	bl	80068ec <lv_obj_get_signal_cb>
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	4a66      	ldr	r2, [pc, #408]	@ (8018128 <lv_ta_create+0x204>)
 8017f8e:	6013      	str	r3, [r2, #0]
    if(scrl_design == NULL) scrl_design = lv_obj_get_design_cb(lv_page_get_scrl(new_ta));
 8017f90:	4b66      	ldr	r3, [pc, #408]	@ (801812c <lv_ta_create+0x208>)
 8017f92:	681b      	ldr	r3, [r3, #0]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d109      	bne.n	8017fac <lv_ta_create+0x88>
 8017f98:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017f9a:	f7fe f9f1 	bl	8016380 <lv_page_get_scrl>
 8017f9e:	4603      	mov	r3, r0
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f7ee fcae 	bl	8006902 <lv_obj_get_design_cb>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	4a60      	ldr	r2, [pc, #384]	@ (801812c <lv_ta_create+0x208>)
 8017faa:	6013      	str	r3, [r2, #0]

    /*Allocate the object type specific extended data*/
    lv_ta_ext_t * ext = lv_obj_allocate_ext_attr(new_ta, sizeof(lv_ta_ext_t));
 8017fac:	2160      	movs	r1, #96	@ 0x60
 8017fae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017fb0:	f7ee fa50 	bl	8006454 <lv_obj_allocate_ext_attr>
 8017fb4:	63b8      	str	r0, [r7, #56]	@ 0x38
    lv_mem_assert(ext);
 8017fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d101      	bne.n	8017fc0 <lv_ta_create+0x9c>
 8017fbc:	bf00      	nop
 8017fbe:	e7fd      	b.n	8017fbc <lv_ta_create+0x98>
    if(ext == NULL) return NULL;
 8017fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d101      	bne.n	8017fca <lv_ta_create+0xa6>
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	e14d      	b.n	8018266 <lv_ta_create+0x342>

    ext->cursor.state      = 1;
 8017fca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017fcc:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8017fd0:	f043 0310 	orr.w	r3, r3, #16
 8017fd4:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    ext->pwd_mode          = 0;
 8017fd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017fda:	f892 305c 	ldrb.w	r3, [r2, #92]	@ 0x5c
 8017fde:	f36f 0300 	bfc	r3, #0, #1
 8017fe2:	f882 305c 	strb.w	r3, [r2, #92]	@ 0x5c
    ext->pwd_tmp           = NULL;
 8017fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fe8:	2200      	movs	r2, #0
 8017fea:	639a      	str	r2, [r3, #56]	@ 0x38
    ext->pwd_show_time     = LV_TA_DEF_PWD_SHOW_TIME;
 8017fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017fee:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8017ff2:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
    ext->accapted_chars    = NULL;
 8017ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	63da      	str	r2, [r3, #60]	@ 0x3c
    ext->max_length        = 0;
 8017ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ffe:	2200      	movs	r2, #0
 8018000:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    ext->cursor.style      = NULL;
 8018004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018006:	2200      	movs	r2, #0
 8018008:	645a      	str	r2, [r3, #68]	@ 0x44
    ext->cursor.blink_time = LV_TA_DEF_CURSOR_BLINK_TIME;
 801800a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801800c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8018010:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    ext->cursor.pos        = 0;
 8018014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018016:	2200      	movs	r2, #0
 8018018:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    ext->cursor.click_pos  = 1;
 801801c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801801e:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8018022:	f043 0320 	orr.w	r3, r3, #32
 8018026:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    ext->cursor.type       = LV_CURSOR_LINE;
 801802a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801802c:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8018030:	2101      	movs	r1, #1
 8018032:	f361 0303 	bfi	r3, r1, #0, #4
 8018036:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    ext->cursor.valid_x    = 0;
 801803a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801803c:	2200      	movs	r2, #0
 801803e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    ext->one_line          = 0;
 8018042:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018044:	f892 305c 	ldrb.w	r3, [r2, #92]	@ 0x5c
 8018048:	f36f 0341 	bfc	r3, #1, #1
 801804c:	f882 305c 	strb.w	r3, [r2, #92]	@ 0x5c
#if LV_LABEL_TEXT_SEL
    ext->text_sel_en = 0;
#endif
    ext->label       = NULL;
 8018050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018052:	2200      	movs	r2, #0
 8018054:	631a      	str	r2, [r3, #48]	@ 0x30
    ext->placeholder = NULL;
 8018056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018058:	2200      	movs	r2, #0
 801805a:	635a      	str	r2, [r3, #52]	@ 0x34
#if LV_USE_ANIMATION == 0
    ext->pwd_show_time     = 0;
    ext->cursor.blink_time = 0;
#endif

    lv_obj_set_signal_cb(new_ta, lv_ta_signal);
 801805c:	4934      	ldr	r1, [pc, #208]	@ (8018130 <lv_ta_create+0x20c>)
 801805e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018060:	f7ee f9de 	bl	8006420 <lv_obj_set_signal_cb>
    lv_obj_set_signal_cb(lv_page_get_scrl(new_ta), lv_ta_scrollable_signal);
 8018064:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018066:	f7fe f98b 	bl	8016380 <lv_page_get_scrl>
 801806a:	4603      	mov	r3, r0
 801806c:	4931      	ldr	r1, [pc, #196]	@ (8018134 <lv_ta_create+0x210>)
 801806e:	4618      	mov	r0, r3
 8018070:	f7ee f9d6 	bl	8006420 <lv_obj_set_signal_cb>
    lv_obj_set_design_cb(new_ta, lv_ta_design);
 8018074:	4930      	ldr	r1, [pc, #192]	@ (8018138 <lv_ta_create+0x214>)
 8018076:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018078:	f7ee f9df 	bl	800643a <lv_obj_set_design_cb>

    /*Init the new text area object*/
    if(copy == NULL) {
 801807c:	683b      	ldr	r3, [r7, #0]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d164      	bne.n	801814c <lv_ta_create+0x228>
        lv_page_set_scrl_fit2(new_ta, LV_FIT_FLOOD, LV_FIT_TIGHT);
 8018082:	2201      	movs	r2, #1
 8018084:	2102      	movs	r1, #2
 8018086:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018088:	f7ff fef0 	bl	8017e6c <lv_page_set_scrl_fit2>

        ext->label = lv_label_create(new_ta, NULL);
 801808c:	2100      	movs	r1, #0
 801808e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018090:	f7fc fabe 	bl	8014610 <lv_label_create>
 8018094:	4602      	mov	r2, r0
 8018096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018098:	631a      	str	r2, [r3, #48]	@ 0x30

        lv_obj_set_design_cb(ext->page.scrl, lv_ta_scrollable_design);
 801809a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801809c:	685b      	ldr	r3, [r3, #4]
 801809e:	4927      	ldr	r1, [pc, #156]	@ (801813c <lv_ta_create+0x218>)
 80180a0:	4618      	mov	r0, r3
 80180a2:	f7ee f9ca 	bl	800643a <lv_obj_set_design_cb>

        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_BREAK);
 80180a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80180aa:	2101      	movs	r1, #1
 80180ac:	4618      	mov	r0, r3
 80180ae:	f7fc fc81 	bl	80149b4 <lv_label_set_long_mode>
        lv_label_set_text(ext->label, "Text area");
 80180b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80180b6:	4922      	ldr	r1, [pc, #136]	@ (8018140 <lv_ta_create+0x21c>)
 80180b8:	4618      	mov	r0, r3
 80180ba:	f7fc fbdd 	bl	8014878 <lv_label_set_text>
        lv_obj_set_click(ext->label, false);
 80180be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80180c2:	2100      	movs	r1, #0
 80180c4:	4618      	mov	r0, r3
 80180c6:	f7ee f8a6 	bl	8006216 <lv_obj_set_click>
        lv_obj_set_size(new_ta, LV_TA_DEF_WIDTH, LV_TA_DEF_HEIGHT);
 80180ca:	2264      	movs	r2, #100	@ 0x64
 80180cc:	21c8      	movs	r1, #200	@ 0xc8
 80180ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80180d0:	f7ed faf8 	bl	80056c4 <lv_obj_set_size>
        lv_ta_set_sb_mode(new_ta, LV_SB_MODE_DRAG);
 80180d4:	2102      	movs	r1, #2
 80180d6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80180d8:	f7ff fef9 	bl	8017ece <lv_ta_set_sb_mode>
        lv_page_set_style(new_ta, LV_PAGE_STYLE_SCRL, &lv_style_transp_tight);
 80180dc:	4a19      	ldr	r2, [pc, #100]	@ (8018144 <lv_ta_create+0x220>)
 80180de:	2101      	movs	r1, #1
 80180e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80180e2:	f7fe f8fb 	bl	80162dc <lv_page_set_style>

        /*Set the default styles*/
        lv_theme_t * th = lv_theme_get_current();
 80180e6:	f002 f945 	bl	801a374 <lv_theme_get_current>
 80180ea:	6338      	str	r0, [r7, #48]	@ 0x30
        if(th) {
 80180ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d010      	beq.n	8018114 <lv_ta_create+0x1f0>
            lv_ta_set_style(new_ta, LV_TA_STYLE_BG, th->style.ta.area);
 80180f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80180f4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80180f8:	461a      	mov	r2, r3
 80180fa:	2100      	movs	r1, #0
 80180fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80180fe:	f000 fe7d 	bl	8018dfc <lv_ta_set_style>
            lv_ta_set_style(new_ta, LV_TA_STYLE_SB, th->style.ta.sb);
 8018102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018104:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018108:	461a      	mov	r2, r3
 801810a:	2101      	movs	r1, #1
 801810c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801810e:	f000 fe75 	bl	8018dfc <lv_ta_set_style>
 8018112:	e07b      	b.n	801820c <lv_ta_create+0x2e8>
        } else {
            lv_ta_set_style(new_ta, LV_TA_STYLE_BG, &lv_style_pretty);
 8018114:	4a0c      	ldr	r2, [pc, #48]	@ (8018148 <lv_ta_create+0x224>)
 8018116:	2100      	movs	r1, #0
 8018118:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801811a:	f000 fe6f 	bl	8018dfc <lv_ta_set_style>
 801811e:	e075      	b.n	801820c <lv_ta_create+0x2e8>
 8018120:	2000ada4 	.word	0x2000ada4
 8018124:	2000ad9c 	.word	0x2000ad9c
 8018128:	2000ada8 	.word	0x2000ada8
 801812c:	2000ada0 	.word	0x2000ada0
 8018130:	08019481 	.word	0x08019481
 8018134:	080198a1 	.word	0x080198a1
 8018138:	080191b1 	.word	0x080191b1
 801813c:	08019209 	.word	0x08019209
 8018140:	0801c840 	.word	0x0801c840
 8018144:	20002a90 	.word	0x20002a90
 8018148:	20002b44 	.word	0x20002b44
        }
    }
    /*Copy an existing object*/
    else {
        lv_obj_set_design_cb(ext->page.scrl, lv_ta_scrollable_design);
 801814c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801814e:	685b      	ldr	r3, [r3, #4]
 8018150:	4947      	ldr	r1, [pc, #284]	@ (8018270 <lv_ta_create+0x34c>)
 8018152:	4618      	mov	r0, r3
 8018154:	f7ee f971 	bl	800643a <lv_obj_set_design_cb>
        lv_ta_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
 8018158:	6838      	ldr	r0, [r7, #0]
 801815a:	f7ee fbdd 	bl	8006918 <lv_obj_get_ext_attr>
 801815e:	6378      	str	r0, [r7, #52]	@ 0x34
        ext->label             = lv_label_create(new_ta, copy_ext->label);
 8018160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018164:	4619      	mov	r1, r3
 8018166:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018168:	f7fc fa52 	bl	8014610 <lv_label_create>
 801816c:	4602      	mov	r2, r0
 801816e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018170:	631a      	str	r2, [r3, #48]	@ 0x30
        ext->pwd_mode          = copy_ext->pwd_mode;
 8018172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018174:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8018178:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801817c:	b2d9      	uxtb	r1, r3
 801817e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018180:	f892 305c 	ldrb.w	r3, [r2, #92]	@ 0x5c
 8018184:	f361 0300 	bfi	r3, r1, #0, #1
 8018188:	f882 305c 	strb.w	r3, [r2, #92]	@ 0x5c
        ext->accapted_chars    = copy_ext->accapted_chars;
 801818c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801818e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8018190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018192:	63da      	str	r2, [r3, #60]	@ 0x3c
        ext->max_length        = copy_ext->max_length;
 8018194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018196:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 801819a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801819c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
        ext->cursor.style      = copy_ext->cursor.style;
 80181a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80181a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181a6:	645a      	str	r2, [r3, #68]	@ 0x44
        ext->cursor.pos        = copy_ext->cursor.pos;
 80181a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80181ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181b0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
        ext->cursor.valid_x    = copy_ext->cursor.valid_x;
 80181b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181b6:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	@ 0x48
 80181ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80181bc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        ext->cursor.type       = copy_ext->cursor.type;
 80181c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80181c6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80181ca:	b2d9      	uxtb	r1, r3
 80181cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80181ce:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80181d2:	f361 0303 	bfi	r3, r1, #0, #4
 80181d6:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
        if(copy_ext->one_line) lv_ta_set_one_line(new_ta, true);
 80181da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80181dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80181e0:	f003 0302 	and.w	r3, r3, #2
 80181e4:	b2db      	uxtb	r3, r3
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d003      	beq.n	80181f2 <lv_ta_create+0x2ce>
 80181ea:	2101      	movs	r1, #1
 80181ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80181ee:	f000 fd52 	bl	8018c96 <lv_ta_set_one_line>

        lv_ta_set_style(new_ta, LV_TA_STYLE_CURSOR, lv_ta_get_style(copy, LV_TA_STYLE_CURSOR));
 80181f2:	2102      	movs	r1, #2
 80181f4:	6838      	ldr	r0, [r7, #0]
 80181f6:	f000 feab 	bl	8018f50 <lv_ta_get_style>
 80181fa:	4603      	mov	r3, r0
 80181fc:	461a      	mov	r2, r3
 80181fe:	2102      	movs	r1, #2
 8018200:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018202:	f000 fdfb 	bl	8018dfc <lv_ta_set_style>

        /*Refresh the style with new signal function*/
        lv_obj_refresh_style(new_ta);
 8018206:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8018208:	f7ed ffb7 	bl	800617a <lv_obj_refresh_style>
    }

#if LV_USE_ANIMATION
    if(ext->cursor.blink_time) {
 801820c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801820e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8018212:	2b00      	cmp	r3, #0
 8018214:	d026      	beq.n	8018264 <lv_ta_create+0x340>
        /*Create a cursor blinker animation*/
        lv_anim_t a;
        a.var            = new_ta;
 8018216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018218:	60bb      	str	r3, [r7, #8]
        a.exec_cb        = (lv_anim_exec_xcb_t)cursor_blink_anim;
 801821a:	4b16      	ldr	r3, [pc, #88]	@ (8018274 <lv_ta_create+0x350>)
 801821c:	60fb      	str	r3, [r7, #12]
        a.time           = ext->cursor.blink_time;
 801821e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018220:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8018224:	843b      	strh	r3, [r7, #32]
        a.act_time       = 0;
 8018226:	2300      	movs	r3, #0
 8018228:	847b      	strh	r3, [r7, #34]	@ 0x22
        a.ready_cb       = NULL;
 801822a:	2300      	movs	r3, #0
 801822c:	617b      	str	r3, [r7, #20]
        a.start          = 1;
 801822e:	2301      	movs	r3, #1
 8018230:	61bb      	str	r3, [r7, #24]
        a.end            = 0;
 8018232:	2300      	movs	r3, #0
 8018234:	61fb      	str	r3, [r7, #28]
        a.repeat         = 1;
 8018236:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801823a:	f043 0302 	orr.w	r3, r3, #2
 801823e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        a.repeat_pause   = 0;
 8018242:	2300      	movs	r3, #0
 8018244:	84fb      	strh	r3, [r7, #38]	@ 0x26
        a.playback       = 1;
 8018246:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801824a:	f043 0301 	orr.w	r3, r3, #1
 801824e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        a.playback_pause = 0;
 8018252:	2300      	movs	r3, #0
 8018254:	84bb      	strh	r3, [r7, #36]	@ 0x24
        a.path_cb        = lv_anim_path_step;
 8018256:	4b08      	ldr	r3, [pc, #32]	@ (8018278 <lv_ta_create+0x354>)
 8018258:	613b      	str	r3, [r7, #16]
        lv_anim_create(&a);
 801825a:	f107 0308 	add.w	r3, r7, #8
 801825e:	4618      	mov	r0, r3
 8018260:	f7f6 feae 	bl	800efc0 <lv_anim_create>
    }
#endif

    LV_LOG_INFO("text area created");

    return new_ta;
 8018264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8018266:	4618      	mov	r0, r3
 8018268:	3740      	adds	r7, #64	@ 0x40
 801826a:	46bd      	mov	sp, r7
 801826c:	bd80      	pop	{r7, pc}
 801826e:	bf00      	nop
 8018270:	08019209 	.word	0x08019209
 8018274:	080199d5 	.word	0x080199d5
 8018278:	0800f175 	.word	0x0800f175

0801827c <lv_ta_add_char>:
 * To add a wide char, e.g. 'Á' use `lv_txt_encoded_conv_wc('Á')`
 * @param ta pointer to a text area object
 * @param c a character (e.g. 'a')
 */
void lv_ta_add_char(lv_obj_t * ta, uint32_t c)
{
 801827c:	b590      	push	{r4, r7, lr}
 801827e:	b093      	sub	sp, #76	@ 0x4c
 8018280:	af00      	add	r7, sp, #0
 8018282:	6078      	str	r0, [r7, #4]
 8018284:	6039      	str	r1, [r7, #0]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018286:	6878      	ldr	r0, [r7, #4]
 8018288:	f7ee fb46 	bl	8006918 <lv_obj_get_ext_attr>
 801828c:	6478      	str	r0, [r7, #68]	@ 0x44

    uint32_t letter_buf[2];
    letter_buf[0] = c;
 801828e:	683b      	ldr	r3, [r7, #0]
 8018290:	637b      	str	r3, [r7, #52]	@ 0x34
    letter_buf[1] = '\0';
 8018292:	2300      	movs	r3, #0
 8018294:	63bb      	str	r3, [r7, #56]	@ 0x38

    ta_insert_replace = NULL;
 8018296:	4b71      	ldr	r3, [pc, #452]	@ (801845c <lv_ta_add_char+0x1e0>)
 8018298:	2200      	movs	r2, #0
 801829a:	601a      	str	r2, [r3, #0]
    lv_event_send(ta, LV_EVENT_INSERT, letter_buf);
 801829c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80182a0:	461a      	mov	r2, r3
 80182a2:	210f      	movs	r1, #15
 80182a4:	6878      	ldr	r0, [r7, #4]
 80182a6:	f7ee f82d 	bl	8006304 <lv_event_send>
    if(ta_insert_replace) {
 80182aa:	4b6c      	ldr	r3, [pc, #432]	@ (801845c <lv_ta_add_char+0x1e0>)
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d017      	beq.n	80182e2 <lv_ta_add_char+0x66>
        if(ta_insert_replace[0] == '\0') return; /*Drop this text*/
 80182b2:	4b6a      	ldr	r3, [pc, #424]	@ (801845c <lv_ta_add_char+0x1e0>)
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	781b      	ldrb	r3, [r3, #0]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	f000 80c5 	beq.w	8018448 <lv_ta_add_char+0x1cc>

        /*Add the replaced text directly it's different from the original*/
        if(strcmp(ta_insert_replace, (char *)letter_buf)) {
 80182be:	4b67      	ldr	r3, [pc, #412]	@ (801845c <lv_ta_add_char+0x1e0>)
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80182c6:	4611      	mov	r1, r2
 80182c8:	4618      	mov	r0, r3
 80182ca:	f7e7 ffab 	bl	8000224 <strcmp>
 80182ce:	4603      	mov	r3, r0
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d006      	beq.n	80182e2 <lv_ta_add_char+0x66>
            lv_ta_add_text(ta, ta_insert_replace);
 80182d4:	4b61      	ldr	r3, [pc, #388]	@ (801845c <lv_ta_add_char+0x1e0>)
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	4619      	mov	r1, r3
 80182da:	6878      	ldr	r0, [r7, #4]
 80182dc:	f000 f8c8 	bl	8018470 <lv_ta_add_text>
            return;
 80182e0:	e0b9      	b.n	8018456 <lv_ta_add_char+0x1da>
        }
    }

    if(ext->one_line && (c == '\n' || c == '\r')) {
 80182e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80182e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80182e8:	f003 0302 	and.w	r3, r3, #2
 80182ec:	b2db      	uxtb	r3, r3
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d007      	beq.n	8018302 <lv_ta_add_char+0x86>
 80182f2:	683b      	ldr	r3, [r7, #0]
 80182f4:	2b0a      	cmp	r3, #10
 80182f6:	f000 80a9 	beq.w	801844c <lv_ta_add_char+0x1d0>
 80182fa:	683b      	ldr	r3, [r7, #0]
 80182fc:	2b0d      	cmp	r3, #13
 80182fe:	f000 80a5 	beq.w	801844c <lv_ta_add_char+0x1d0>
        LV_LOG_INFO("Text area: line break ignored in one-line mode");
        return;
    }

    uint32_t c_uni = lv_txt_encoded_next((const char *)&c, NULL);
 8018302:	4b57      	ldr	r3, [pc, #348]	@ (8018460 <lv_ta_add_char+0x1e4>)
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	463a      	mov	r2, r7
 8018308:	2100      	movs	r1, #0
 801830a:	4610      	mov	r0, r2
 801830c:	4798      	blx	r3
 801830e:	6438      	str	r0, [r7, #64]	@ 0x40

    if(char_is_accepted(ta, c_uni) == false) {
 8018310:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8018312:	6878      	ldr	r0, [r7, #4]
 8018314:	f001 fc36 	bl	8019b84 <char_is_accepted>
 8018318:	4603      	mov	r3, r0
 801831a:	f083 0301 	eor.w	r3, r3, #1
 801831e:	b2db      	uxtb	r3, r3
 8018320:	2b00      	cmp	r3, #0
 8018322:	f040 8095 	bne.w	8018450 <lv_ta_add_char+0x1d4>
                    "accepted list)");
        return;
    }

    /*If a new line was added it shouldn't show edge flash effect*/
    bool edge_flash_en = lv_ta_get_edge_flash(ta);
 8018326:	6878      	ldr	r0, [r7, #4]
 8018328:	f7ff fdef 	bl	8017f0a <lv_ta_get_edge_flash>
 801832c:	4603      	mov	r3, r0
 801832e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    lv_ta_set_edge_flash(ta, false);
 8018332:	2100      	movs	r1, #0
 8018334:	6878      	ldr	r0, [r7, #4]
 8018336:	f7ff fdd9 	bl	8017eec <lv_ta_set_edge_flash>

    if(ext->pwd_mode != 0) pwd_char_hider(ta); /*Make sure all the current text contains only '*'*/
 801833a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801833c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8018340:	f003 0301 	and.w	r3, r3, #1
 8018344:	b2db      	uxtb	r3, r3
 8018346:	2b00      	cmp	r3, #0
 8018348:	d002      	beq.n	8018350 <lv_ta_add_char+0xd4>
 801834a:	6878      	ldr	r0, [r7, #4]
 801834c:	f001 fbd6 	bl	8019afc <pwd_char_hider>

    lv_label_ins_text(ext->label, ext->cursor.pos, (const char *)letter_buf); /*Insert the character*/
 8018350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018352:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8018354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018356:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801835a:	4619      	mov	r1, r3
 801835c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018360:	461a      	mov	r2, r3
 8018362:	f7fc fed5 	bl	8015110 <lv_label_ins_text>
    lv_ta_clear_selection(ta);                                                /*Clear selection*/
 8018366:	6878      	ldr	r0, [r7, #4]
 8018368:	f000 fe3a 	bl	8018fe0 <lv_ta_clear_selection>

    if(ext->pwd_mode != 0) {
 801836c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801836e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8018372:	f003 0301 	and.w	r3, r3, #1
 8018376:	b2db      	uxtb	r3, r3
 8018378:	2b00      	cmp	r3, #0
 801837a:	d04b      	beq.n	8018414 <lv_ta_add_char+0x198>

        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + 2); /*+2: the new char + \0 */
 801837c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801837e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8018380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018384:	4618      	mov	r0, r3
 8018386:	f7e7 ff57 	bl	8000238 <strlen>
 801838a:	4603      	mov	r3, r0
 801838c:	3302      	adds	r3, #2
 801838e:	4619      	mov	r1, r3
 8018390:	4620      	mov	r0, r4
 8018392:	f7f7 ff1b 	bl	80101cc <lv_mem_realloc>
 8018396:	4602      	mov	r2, r0
 8018398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801839a:	639a      	str	r2, [r3, #56]	@ 0x38
        lv_mem_assert(ext->pwd_tmp);
 801839c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801839e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d101      	bne.n	80183a8 <lv_ta_add_char+0x12c>
 80183a4:	bf00      	nop
 80183a6:	e7fd      	b.n	80183a4 <lv_ta_add_char+0x128>
        if(ext->pwd_tmp == NULL) return;
 80183a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80183aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d051      	beq.n	8018454 <lv_ta_add_char+0x1d8>

        lv_txt_ins(ext->pwd_tmp, ext->cursor.pos, (const char *)letter_buf);
 80183b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80183b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80183b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80183b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80183ba:	4619      	mov	r1, r3
 80183bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80183c0:	461a      	mov	r2, r3
 80183c2:	f7f8 fc9f 	bl	8010d04 <lv_txt_ins>

#if LV_USE_ANIMATION
        /*Auto hide characters*/
        lv_anim_t a;
        a.var            = ta;
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	60fb      	str	r3, [r7, #12]
        a.exec_cb        = (lv_anim_exec_xcb_t)pwd_char_hider_anim;
 80183ca:	4b26      	ldr	r3, [pc, #152]	@ (8018464 <lv_ta_add_char+0x1e8>)
 80183cc:	613b      	str	r3, [r7, #16]
        a.time           = ext->pwd_show_time;
 80183ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80183d0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80183d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
        a.act_time       = 0;
 80183d6:	2300      	movs	r3, #0
 80183d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        a.ready_cb       = pwd_char_hider_anim_ready;
 80183da:	4b23      	ldr	r3, [pc, #140]	@ (8018468 <lv_ta_add_char+0x1ec>)
 80183dc:	61bb      	str	r3, [r7, #24]
        a.start          = 0;
 80183de:	2300      	movs	r3, #0
 80183e0:	61fb      	str	r3, [r7, #28]
        a.end            = 1;
 80183e2:	2301      	movs	r3, #1
 80183e4:	623b      	str	r3, [r7, #32]
        a.repeat         = 0;
 80183e6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80183ea:	f36f 0341 	bfc	r3, #1, #1
 80183ee:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        a.repeat_pause   = 0;
 80183f2:	2300      	movs	r3, #0
 80183f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
        a.playback       = 0;
 80183f6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80183fa:	f36f 0300 	bfc	r3, #0, #1
 80183fe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        a.playback_pause = 0;
 8018402:	2300      	movs	r3, #0
 8018404:	853b      	strh	r3, [r7, #40]	@ 0x28
        a.path_cb        = lv_anim_path_step;
 8018406:	4b19      	ldr	r3, [pc, #100]	@ (801846c <lv_ta_add_char+0x1f0>)
 8018408:	617b      	str	r3, [r7, #20]
        lv_anim_create(&a);
 801840a:	f107 030c 	add.w	r3, r7, #12
 801840e:	4618      	mov	r0, r3
 8018410:	f7f6 fdd6 	bl	800efc0 <lv_anim_create>
        pwd_char_hider(ta);
#endif
    }

    /*Move the cursor after the new character*/
    lv_ta_set_cursor_pos(ta, lv_ta_get_cursor_pos(ta) + 1);
 8018414:	6878      	ldr	r0, [r7, #4]
 8018416:	f000 fd5c 	bl	8018ed2 <lv_ta_get_cursor_pos>
 801841a:	4603      	mov	r3, r0
 801841c:	3301      	adds	r3, #1
 801841e:	b29b      	uxth	r3, r3
 8018420:	b21b      	sxth	r3, r3
 8018422:	4619      	mov	r1, r3
 8018424:	6878      	ldr	r0, [r7, #4]
 8018426:	f000 fad9 	bl	80189dc <lv_ta_set_cursor_pos>

    /*Revert the original edge flash state*/
    lv_ta_set_edge_flash(ta, edge_flash_en);
 801842a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801842e:	4619      	mov	r1, r3
 8018430:	6878      	ldr	r0, [r7, #4]
 8018432:	f7ff fd5b 	bl	8017eec <lv_ta_set_edge_flash>

    placeholder_update(ta);
 8018436:	6878      	ldr	r0, [r7, #4]
 8018438:	f001 febc 	bl	801a1b4 <placeholder_update>

    lv_event_send(ta, LV_EVENT_VALUE_CHANGED, NULL);
 801843c:	2200      	movs	r2, #0
 801843e:	210e      	movs	r1, #14
 8018440:	6878      	ldr	r0, [r7, #4]
 8018442:	f7ed ff5f 	bl	8006304 <lv_event_send>
 8018446:	e006      	b.n	8018456 <lv_ta_add_char+0x1da>
        if(ta_insert_replace[0] == '\0') return; /*Drop this text*/
 8018448:	bf00      	nop
 801844a:	e004      	b.n	8018456 <lv_ta_add_char+0x1da>
        return;
 801844c:	bf00      	nop
 801844e:	e002      	b.n	8018456 <lv_ta_add_char+0x1da>
        return;
 8018450:	bf00      	nop
 8018452:	e000      	b.n	8018456 <lv_ta_add_char+0x1da>
        if(ext->pwd_tmp == NULL) return;
 8018454:	bf00      	nop
}
 8018456:	374c      	adds	r7, #76	@ 0x4c
 8018458:	46bd      	mov	sp, r7
 801845a:	bd90      	pop	{r4, r7, pc}
 801845c:	2000adac 	.word	0x2000adac
 8018460:	20000ca0 	.word	0x20000ca0
 8018464:	08019acb 	.word	0x08019acb
 8018468:	08019ae1 	.word	0x08019ae1
 801846c:	0800f175 	.word	0x0800f175

08018470 <lv_ta_add_text>:
 * Insert a text to the current cursor position
 * @param ta pointer to a text area object
 * @param txt a '\0' terminated string to insert
 */
void lv_ta_add_text(lv_obj_t * ta, const char * txt)
{
 8018470:	b5b0      	push	{r4, r5, r7, lr}
 8018472:	b090      	sub	sp, #64	@ 0x40
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]
 8018478:	6039      	str	r1, [r7, #0]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801847a:	6878      	ldr	r0, [r7, #4]
 801847c:	f7ee fa4c 	bl	8006918 <lv_obj_get_ext_attr>
 8018480:	63f8      	str	r0, [r7, #60]	@ 0x3c

    ta_insert_replace = NULL;
 8018482:	4b74      	ldr	r3, [pc, #464]	@ (8018654 <lv_ta_add_text+0x1e4>)
 8018484:	2200      	movs	r2, #0
 8018486:	601a      	str	r2, [r3, #0]
    lv_event_send(ta, LV_EVENT_INSERT, txt);
 8018488:	683a      	ldr	r2, [r7, #0]
 801848a:	210f      	movs	r1, #15
 801848c:	6878      	ldr	r0, [r7, #4]
 801848e:	f7ed ff39 	bl	8006304 <lv_event_send>
    if(ta_insert_replace) {
 8018492:	4b70      	ldr	r3, [pc, #448]	@ (8018654 <lv_ta_add_text+0x1e4>)
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d015      	beq.n	80184c6 <lv_ta_add_text+0x56>
        if(ta_insert_replace[0] == '\0') return; /*Drop this text*/
 801849a:	4b6e      	ldr	r3, [pc, #440]	@ (8018654 <lv_ta_add_text+0x1e4>)
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	781b      	ldrb	r3, [r3, #0]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	f000 80d0 	beq.w	8018646 <lv_ta_add_text+0x1d6>

        /*Add the replaced text directly it's different from the original*/
        if(strcmp(ta_insert_replace, txt)) {
 80184a6:	4b6b      	ldr	r3, [pc, #428]	@ (8018654 <lv_ta_add_text+0x1e4>)
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	6839      	ldr	r1, [r7, #0]
 80184ac:	4618      	mov	r0, r3
 80184ae:	f7e7 feb9 	bl	8000224 <strcmp>
 80184b2:	4603      	mov	r3, r0
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d006      	beq.n	80184c6 <lv_ta_add_text+0x56>
            lv_ta_add_text(ta, ta_insert_replace);
 80184b8:	4b66      	ldr	r3, [pc, #408]	@ (8018654 <lv_ta_add_text+0x1e4>)
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	4619      	mov	r1, r3
 80184be:	6878      	ldr	r0, [r7, #4]
 80184c0:	f7ff ffd6 	bl	8018470 <lv_ta_add_text>
            return;
 80184c4:	e0c2      	b.n	801864c <lv_ta_add_text+0x1dc>
        }
    }

    if(ext->pwd_mode != 0) pwd_char_hider(ta); /*Make sure all the current text contains only '*'*/
 80184c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184c8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80184cc:	f003 0301 	and.w	r3, r3, #1
 80184d0:	b2db      	uxtb	r3, r3
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d002      	beq.n	80184dc <lv_ta_add_text+0x6c>
 80184d6:	6878      	ldr	r0, [r7, #4]
 80184d8:	f001 fb10 	bl	8019afc <pwd_char_hider>

    /*Add the character one-by-one if not all characters are accepted or there is character limit.*/
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 80184dc:	6878      	ldr	r0, [r7, #4]
 80184de:	f000 fd19 	bl	8018f14 <lv_ta_get_accepted_chars>
 80184e2:	4603      	mov	r3, r0
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d105      	bne.n	80184f4 <lv_ta_add_text+0x84>
 80184e8:	6878      	ldr	r0, [r7, #4]
 80184ea:	f000 fd21 	bl	8018f30 <lv_ta_get_max_length>
 80184ee:	4603      	mov	r3, r0
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d01a      	beq.n	801852a <lv_ta_add_text+0xba>
        uint32_t i = 0;
 80184f4:	2300      	movs	r3, #0
 80184f6:	633b      	str	r3, [r7, #48]	@ 0x30
        while(txt[i] != '\0') {
 80184f8:	e010      	b.n	801851c <lv_ta_add_text+0xac>
            uint32_t c = lv_txt_encoded_next(txt, &i);
 80184fa:	4b57      	ldr	r3, [pc, #348]	@ (8018658 <lv_ta_add_text+0x1e8>)
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8018502:	4611      	mov	r1, r2
 8018504:	6838      	ldr	r0, [r7, #0]
 8018506:	4798      	blx	r3
 8018508:	6378      	str	r0, [r7, #52]	@ 0x34
            lv_ta_add_char(ta, lv_txt_unicode_to_encoded(c));
 801850a:	4b54      	ldr	r3, [pc, #336]	@ (801865c <lv_ta_add_text+0x1ec>)
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018510:	4798      	blx	r3
 8018512:	4603      	mov	r3, r0
 8018514:	4619      	mov	r1, r3
 8018516:	6878      	ldr	r0, [r7, #4]
 8018518:	f7ff feb0 	bl	801827c <lv_ta_add_char>
        while(txt[i] != '\0') {
 801851c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801851e:	683a      	ldr	r2, [r7, #0]
 8018520:	4413      	add	r3, r2
 8018522:	781b      	ldrb	r3, [r3, #0]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d1e8      	bne.n	80184fa <lv_ta_add_text+0x8a>
 8018528:	e090      	b.n	801864c <lv_ta_add_text+0x1dc>
        }
        return;
    }

    /*If a new line was added it shouldn't show edge flash effect*/
    bool edge_flash_en = lv_ta_get_edge_flash(ta);
 801852a:	6878      	ldr	r0, [r7, #4]
 801852c:	f7ff fced 	bl	8017f0a <lv_ta_get_edge_flash>
 8018530:	4603      	mov	r3, r0
 8018532:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    lv_ta_set_edge_flash(ta, false);
 8018536:	2100      	movs	r1, #0
 8018538:	6878      	ldr	r0, [r7, #4]
 801853a:	f7ff fcd7 	bl	8017eec <lv_ta_set_edge_flash>

    /*Insert the text*/
    lv_label_ins_text(ext->label, ext->cursor.pos, txt);
 801853e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018540:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8018542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018544:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8018548:	683a      	ldr	r2, [r7, #0]
 801854a:	4619      	mov	r1, r3
 801854c:	f7fc fde0 	bl	8015110 <lv_label_ins_text>
    lv_ta_clear_selection(ta);
 8018550:	6878      	ldr	r0, [r7, #4]
 8018552:	f000 fd45 	bl	8018fe0 <lv_ta_clear_selection>

    if(ext->pwd_mode != 0) {
 8018556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018558:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 801855c:	f003 0301 	and.w	r3, r3, #1
 8018560:	b2db      	uxtb	r3, r3
 8018562:	2b00      	cmp	r3, #0
 8018564:	d04e      	beq.n	8018604 <lv_ta_add_text+0x194>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + strlen(txt) + 1);
 8018566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018568:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 801856a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801856c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801856e:	4618      	mov	r0, r3
 8018570:	f7e7 fe62 	bl	8000238 <strlen>
 8018574:	4605      	mov	r5, r0
 8018576:	6838      	ldr	r0, [r7, #0]
 8018578:	f7e7 fe5e 	bl	8000238 <strlen>
 801857c:	4603      	mov	r3, r0
 801857e:	442b      	add	r3, r5
 8018580:	3301      	adds	r3, #1
 8018582:	4619      	mov	r1, r3
 8018584:	4620      	mov	r0, r4
 8018586:	f7f7 fe21 	bl	80101cc <lv_mem_realloc>
 801858a:	4602      	mov	r2, r0
 801858c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801858e:	639a      	str	r2, [r3, #56]	@ 0x38
        lv_mem_assert(ext->pwd_tmp);
 8018590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018594:	2b00      	cmp	r3, #0
 8018596:	d101      	bne.n	801859c <lv_ta_add_text+0x12c>
 8018598:	bf00      	nop
 801859a:	e7fd      	b.n	8018598 <lv_ta_add_text+0x128>
        if(ext->pwd_tmp == NULL) return;
 801859c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801859e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d052      	beq.n	801864a <lv_ta_add_text+0x1da>

        lv_txt_ins(ext->pwd_tmp, ext->cursor.pos, txt);
 80185a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80185a6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80185a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80185aa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80185ae:	683a      	ldr	r2, [r7, #0]
 80185b0:	4619      	mov	r1, r3
 80185b2:	f7f8 fba7 	bl	8010d04 <lv_txt_ins>

#if LV_USE_ANIMATION
        /*Auto hide characters*/
        lv_anim_t a;
        a.var            = ta;
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	60bb      	str	r3, [r7, #8]
        a.exec_cb        = (lv_anim_exec_xcb_t)pwd_char_hider_anim;
 80185ba:	4b29      	ldr	r3, [pc, #164]	@ (8018660 <lv_ta_add_text+0x1f0>)
 80185bc:	60fb      	str	r3, [r7, #12]
        a.time           = ext->pwd_show_time;
 80185be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80185c0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80185c4:	843b      	strh	r3, [r7, #32]
        a.act_time       = 0;
 80185c6:	2300      	movs	r3, #0
 80185c8:	847b      	strh	r3, [r7, #34]	@ 0x22
        a.ready_cb       = pwd_char_hider_anim_ready;
 80185ca:	4b26      	ldr	r3, [pc, #152]	@ (8018664 <lv_ta_add_text+0x1f4>)
 80185cc:	617b      	str	r3, [r7, #20]
        a.start          = 0;
 80185ce:	2300      	movs	r3, #0
 80185d0:	61bb      	str	r3, [r7, #24]
        a.end            = 1;
 80185d2:	2301      	movs	r3, #1
 80185d4:	61fb      	str	r3, [r7, #28]
        a.repeat         = 0;
 80185d6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80185da:	f36f 0341 	bfc	r3, #1, #1
 80185de:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        a.repeat_pause   = 0;
 80185e2:	2300      	movs	r3, #0
 80185e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        a.playback       = 0;
 80185e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80185ea:	f36f 0300 	bfc	r3, #0, #1
 80185ee:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        a.playback_pause = 0;
 80185f2:	2300      	movs	r3, #0
 80185f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
        a.path_cb        = lv_anim_path_step;
 80185f6:	4b1c      	ldr	r3, [pc, #112]	@ (8018668 <lv_ta_add_text+0x1f8>)
 80185f8:	613b      	str	r3, [r7, #16]
        lv_anim_create(&a);
 80185fa:	f107 0308 	add.w	r3, r7, #8
 80185fe:	4618      	mov	r0, r3
 8018600:	f7f6 fcde 	bl	800efc0 <lv_anim_create>
        pwd_char_hider(ta);
#endif
    }

    /*Move the cursor after the new text*/
    lv_ta_set_cursor_pos(ta, lv_ta_get_cursor_pos(ta) + lv_txt_get_encoded_length(txt));
 8018604:	6878      	ldr	r0, [r7, #4]
 8018606:	f000 fc64 	bl	8018ed2 <lv_ta_get_cursor_pos>
 801860a:	4603      	mov	r3, r0
 801860c:	461c      	mov	r4, r3
 801860e:	4b17      	ldr	r3, [pc, #92]	@ (801866c <lv_ta_add_text+0x1fc>)
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	6838      	ldr	r0, [r7, #0]
 8018614:	4798      	blx	r3
 8018616:	4603      	mov	r3, r0
 8018618:	b29b      	uxth	r3, r3
 801861a:	4423      	add	r3, r4
 801861c:	b29b      	uxth	r3, r3
 801861e:	b21b      	sxth	r3, r3
 8018620:	4619      	mov	r1, r3
 8018622:	6878      	ldr	r0, [r7, #4]
 8018624:	f000 f9da 	bl	80189dc <lv_ta_set_cursor_pos>

    /*Revert the original edge flash state*/
    lv_ta_set_edge_flash(ta, edge_flash_en);
 8018628:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801862c:	4619      	mov	r1, r3
 801862e:	6878      	ldr	r0, [r7, #4]
 8018630:	f7ff fc5c 	bl	8017eec <lv_ta_set_edge_flash>

    placeholder_update(ta);
 8018634:	6878      	ldr	r0, [r7, #4]
 8018636:	f001 fdbd 	bl	801a1b4 <placeholder_update>

    lv_event_send(ta, LV_EVENT_VALUE_CHANGED, NULL);
 801863a:	2200      	movs	r2, #0
 801863c:	210e      	movs	r1, #14
 801863e:	6878      	ldr	r0, [r7, #4]
 8018640:	f7ed fe60 	bl	8006304 <lv_event_send>
 8018644:	e002      	b.n	801864c <lv_ta_add_text+0x1dc>
        if(ta_insert_replace[0] == '\0') return; /*Drop this text*/
 8018646:	bf00      	nop
 8018648:	e000      	b.n	801864c <lv_ta_add_text+0x1dc>
        if(ext->pwd_tmp == NULL) return;
 801864a:	bf00      	nop
}
 801864c:	3740      	adds	r7, #64	@ 0x40
 801864e:	46bd      	mov	sp, r7
 8018650:	bdb0      	pop	{r4, r5, r7, pc}
 8018652:	bf00      	nop
 8018654:	2000adac 	.word	0x2000adac
 8018658:	20000ca0 	.word	0x20000ca0
 801865c:	20000c9c 	.word	0x20000c9c
 8018660:	08019acb 	.word	0x08019acb
 8018664:	08019ae1 	.word	0x08019ae1
 8018668:	0800f175 	.word	0x0800f175
 801866c:	20000cb0 	.word	0x20000cb0

08018670 <lv_ta_del_char>:
/**
 * Delete a the left character from the current cursor position
 * @param ta pointer to a text area object
 */
void lv_ta_del_char(lv_obj_t * ta)
{
 8018670:	b5b0      	push	{r4, r5, r7, lr}
 8018672:	b088      	sub	sp, #32
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018678:	6878      	ldr	r0, [r7, #4]
 801867a:	f7ee f94d 	bl	8006918 <lv_obj_get_ext_attr>
 801867e:	61f8      	str	r0, [r7, #28]
    uint16_t cur_pos  = ext->cursor.pos;
 8018680:	69fb      	ldr	r3, [r7, #28]
 8018682:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8018686:	837b      	strh	r3, [r7, #26]

    if(cur_pos == 0) return;
 8018688:	8b7b      	ldrh	r3, [r7, #26]
 801868a:	2b00      	cmp	r3, #0
 801868c:	f000 80ab 	beq.w	80187e6 <lv_ta_del_char+0x176>

    ta_insert_replace = NULL;
 8018690:	4b59      	ldr	r3, [pc, #356]	@ (80187f8 <lv_ta_del_char+0x188>)
 8018692:	2200      	movs	r2, #0
 8018694:	601a      	str	r2, [r3, #0]
    char del_buf[2]   = {LV_KEY_DEL, '\0'};
 8018696:	237f      	movs	r3, #127	@ 0x7f
 8018698:	813b      	strh	r3, [r7, #8]
    lv_event_send(ta, LV_EVENT_INSERT, del_buf);
 801869a:	f107 0308 	add.w	r3, r7, #8
 801869e:	461a      	mov	r2, r3
 80186a0:	210f      	movs	r1, #15
 80186a2:	6878      	ldr	r0, [r7, #4]
 80186a4:	f7ed fe2e 	bl	8006304 <lv_event_send>
    if(ta_insert_replace) {
 80186a8:	4b53      	ldr	r3, [pc, #332]	@ (80187f8 <lv_ta_del_char+0x188>)
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d017      	beq.n	80186e0 <lv_ta_del_char+0x70>
        if(ta_insert_replace[0] == '\0') return; /*Drop this text*/
 80186b0:	4b51      	ldr	r3, [pc, #324]	@ (80187f8 <lv_ta_del_char+0x188>)
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	781b      	ldrb	r3, [r3, #0]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	f000 8097 	beq.w	80187ea <lv_ta_del_char+0x17a>

        /*Add the replaced text directly it's different from the original*/
        if(strcmp(ta_insert_replace, del_buf)) {
 80186bc:	4b4e      	ldr	r3, [pc, #312]	@ (80187f8 <lv_ta_del_char+0x188>)
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	f107 0208 	add.w	r2, r7, #8
 80186c4:	4611      	mov	r1, r2
 80186c6:	4618      	mov	r0, r3
 80186c8:	f7e7 fdac 	bl	8000224 <strcmp>
 80186cc:	4603      	mov	r3, r0
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d006      	beq.n	80186e0 <lv_ta_del_char+0x70>
            lv_ta_add_text(ta, ta_insert_replace);
 80186d2:	4b49      	ldr	r3, [pc, #292]	@ (80187f8 <lv_ta_del_char+0x188>)
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	4619      	mov	r1, r3
 80186d8:	6878      	ldr	r0, [r7, #4]
 80186da:	f7ff fec9 	bl	8018470 <lv_ta_add_text>
            return;
 80186de:	e087      	b.n	80187f0 <lv_ta_del_char+0x180>
        }
    }

    char * label_txt = lv_label_get_text(ext->label);
 80186e0:	69fb      	ldr	r3, [r7, #28]
 80186e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80186e4:	4618      	mov	r0, r3
 80186e6:	f7fc fa38 	bl	8014b5a <lv_label_get_text>
 80186ea:	6178      	str	r0, [r7, #20]
    /*Delete a character*/
    lv_txt_cut(label_txt, ext->cursor.pos - 1, 1);
 80186ec:	69fb      	ldr	r3, [r7, #28]
 80186ee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80186f2:	3b01      	subs	r3, #1
 80186f4:	2201      	movs	r2, #1
 80186f6:	4619      	mov	r1, r3
 80186f8:	6978      	ldr	r0, [r7, #20]
 80186fa:	f7f8 fb3f 	bl	8010d7c <lv_txt_cut>
    /*Refresh the label*/
    lv_label_set_text(ext->label, label_txt);
 80186fe:	69fb      	ldr	r3, [r7, #28]
 8018700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018702:	6979      	ldr	r1, [r7, #20]
 8018704:	4618      	mov	r0, r3
 8018706:	f7fc f8b7 	bl	8014878 <lv_label_set_text>
    lv_ta_clear_selection(ta);
 801870a:	6878      	ldr	r0, [r7, #4]
 801870c:	f000 fc68 	bl	8018fe0 <lv_ta_clear_selection>

    /*Don't let 'width == 0' because cursor will not be visible*/
    if(lv_obj_get_width(ext->label) == 0) {
 8018710:	69fb      	ldr	r3, [r7, #28]
 8018712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018714:	4618      	mov	r0, r3
 8018716:	f7ed ff7e 	bl	8006616 <lv_obj_get_width>
 801871a:	4603      	mov	r3, r0
 801871c:	2b00      	cmp	r3, #0
 801871e:	d10e      	bne.n	801873e <lv_ta_del_char+0xce>
        const lv_style_t * style = lv_obj_get_style(ext->label);
 8018720:	69fb      	ldr	r3, [r7, #28]
 8018722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018724:	4618      	mov	r0, r3
 8018726:	f7ed ffe1 	bl	80066ec <lv_obj_get_style>
 801872a:	6138      	str	r0, [r7, #16]
        lv_obj_set_width(ext->label, style->line.width);
 801872c:	69fb      	ldr	r3, [r7, #28]
 801872e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8018730:	693b      	ldr	r3, [r7, #16]
 8018732:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	@ 0x36
 8018736:	4619      	mov	r1, r3
 8018738:	4610      	mov	r0, r2
 801873a:	f7ed f83c 	bl	80057b6 <lv_obj_set_width>
    }

    if(ext->pwd_mode != 0) {
 801873e:	69fb      	ldr	r3, [r7, #28]
 8018740:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8018744:	f003 0301 	and.w	r3, r3, #1
 8018748:	b2db      	uxtb	r3, r3
 801874a:	2b00      	cmp	r3, #0
 801874c:	d038      	beq.n	80187c0 <lv_ta_del_char+0x150>
        uint32_t byte_pos = lv_txt_encoded_get_byte_id(ext->pwd_tmp, ext->cursor.pos - 1);
 801874e:	4b2b      	ldr	r3, [pc, #172]	@ (80187fc <lv_ta_del_char+0x18c>)
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	69fa      	ldr	r2, [r7, #28]
 8018754:	6b90      	ldr	r0, [r2, #56]	@ 0x38
 8018756:	69fa      	ldr	r2, [r7, #28]
 8018758:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 801875c:	3a01      	subs	r2, #1
 801875e:	4611      	mov	r1, r2
 8018760:	4798      	blx	r3
 8018762:	60f8      	str	r0, [r7, #12]
        lv_txt_cut(ext->pwd_tmp, ext->cursor.pos - 1, lv_txt_encoded_size(&label_txt[byte_pos]));
 8018764:	69fb      	ldr	r3, [r7, #28]
 8018766:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8018768:	69fb      	ldr	r3, [r7, #28]
 801876a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801876e:	3b01      	subs	r3, #1
 8018770:	461d      	mov	r5, r3
 8018772:	4b23      	ldr	r3, [pc, #140]	@ (8018800 <lv_ta_del_char+0x190>)
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	6979      	ldr	r1, [r7, #20]
 8018778:	68fa      	ldr	r2, [r7, #12]
 801877a:	440a      	add	r2, r1
 801877c:	4610      	mov	r0, r2
 801877e:	4798      	blx	r3
 8018780:	4603      	mov	r3, r0
 8018782:	461a      	mov	r2, r3
 8018784:	4629      	mov	r1, r5
 8018786:	4620      	mov	r0, r4
 8018788:	f7f8 faf8 	bl	8010d7c <lv_txt_cut>

        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(ext->pwd_tmp) + 1);
 801878c:	69fb      	ldr	r3, [r7, #28]
 801878e:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8018790:	69fb      	ldr	r3, [r7, #28]
 8018792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018794:	4618      	mov	r0, r3
 8018796:	f7e7 fd4f 	bl	8000238 <strlen>
 801879a:	4603      	mov	r3, r0
 801879c:	3301      	adds	r3, #1
 801879e:	4619      	mov	r1, r3
 80187a0:	4620      	mov	r0, r4
 80187a2:	f7f7 fd13 	bl	80101cc <lv_mem_realloc>
 80187a6:	4602      	mov	r2, r0
 80187a8:	69fb      	ldr	r3, [r7, #28]
 80187aa:	639a      	str	r2, [r3, #56]	@ 0x38
        lv_mem_assert(ext->pwd_tmp);
 80187ac:	69fb      	ldr	r3, [r7, #28]
 80187ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d101      	bne.n	80187b8 <lv_ta_del_char+0x148>
 80187b4:	bf00      	nop
 80187b6:	e7fd      	b.n	80187b4 <lv_ta_del_char+0x144>
        if(ext->pwd_tmp == NULL) return;
 80187b8:	69fb      	ldr	r3, [r7, #28]
 80187ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d016      	beq.n	80187ee <lv_ta_del_char+0x17e>
    }

    /*Move the cursor to the place of the deleted character*/
    lv_ta_set_cursor_pos(ta, ext->cursor.pos - 1);
 80187c0:	69fb      	ldr	r3, [r7, #28]
 80187c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80187c6:	3b01      	subs	r3, #1
 80187c8:	b29b      	uxth	r3, r3
 80187ca:	b21b      	sxth	r3, r3
 80187cc:	4619      	mov	r1, r3
 80187ce:	6878      	ldr	r0, [r7, #4]
 80187d0:	f000 f904 	bl	80189dc <lv_ta_set_cursor_pos>

    placeholder_update(ta);
 80187d4:	6878      	ldr	r0, [r7, #4]
 80187d6:	f001 fced 	bl	801a1b4 <placeholder_update>

    lv_event_send(ta, LV_EVENT_VALUE_CHANGED, NULL);
 80187da:	2200      	movs	r2, #0
 80187dc:	210e      	movs	r1, #14
 80187de:	6878      	ldr	r0, [r7, #4]
 80187e0:	f7ed fd90 	bl	8006304 <lv_event_send>
 80187e4:	e004      	b.n	80187f0 <lv_ta_del_char+0x180>
    if(cur_pos == 0) return;
 80187e6:	bf00      	nop
 80187e8:	e002      	b.n	80187f0 <lv_ta_del_char+0x180>
        if(ta_insert_replace[0] == '\0') return; /*Drop this text*/
 80187ea:	bf00      	nop
 80187ec:	e000      	b.n	80187f0 <lv_ta_del_char+0x180>
        if(ext->pwd_tmp == NULL) return;
 80187ee:	bf00      	nop
}
 80187f0:	3720      	adds	r7, #32
 80187f2:	46bd      	mov	sp, r7
 80187f4:	bdb0      	pop	{r4, r5, r7, pc}
 80187f6:	bf00      	nop
 80187f8:	2000adac 	.word	0x2000adac
 80187fc:	20000ca8 	.word	0x20000ca8
 8018800:	20000c98 	.word	0x20000c98

08018804 <lv_ta_del_char_forward>:
/**
 * Delete the right character from the current cursor position
 * @param ta pointer to a text area object
 */
void lv_ta_del_char_forward(lv_obj_t * ta)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b084      	sub	sp, #16
 8018808:	af00      	add	r7, sp, #0
 801880a:	6078      	str	r0, [r7, #4]
    uint16_t cp = lv_ta_get_cursor_pos(ta);
 801880c:	6878      	ldr	r0, [r7, #4]
 801880e:	f000 fb60 	bl	8018ed2 <lv_ta_get_cursor_pos>
 8018812:	4603      	mov	r3, r0
 8018814:	81fb      	strh	r3, [r7, #14]
    lv_ta_set_cursor_pos(ta, cp + 1);
 8018816:	89fb      	ldrh	r3, [r7, #14]
 8018818:	3301      	adds	r3, #1
 801881a:	b29b      	uxth	r3, r3
 801881c:	b21b      	sxth	r3, r3
 801881e:	4619      	mov	r1, r3
 8018820:	6878      	ldr	r0, [r7, #4]
 8018822:	f000 f8db 	bl	80189dc <lv_ta_set_cursor_pos>
    if(cp != lv_ta_get_cursor_pos(ta)) lv_ta_del_char(ta);
 8018826:	6878      	ldr	r0, [r7, #4]
 8018828:	f000 fb53 	bl	8018ed2 <lv_ta_get_cursor_pos>
 801882c:	4603      	mov	r3, r0
 801882e:	461a      	mov	r2, r3
 8018830:	89fb      	ldrh	r3, [r7, #14]
 8018832:	4293      	cmp	r3, r2
 8018834:	d002      	beq.n	801883c <lv_ta_del_char_forward+0x38>
 8018836:	6878      	ldr	r0, [r7, #4]
 8018838:	f7ff ff1a 	bl	8018670 <lv_ta_del_char>
}
 801883c:	bf00      	nop
 801883e:	3710      	adds	r7, #16
 8018840:	46bd      	mov	sp, r7
 8018842:	bd80      	pop	{r7, pc}

08018844 <lv_ta_set_text>:
 * Set the text of a text area
 * @param ta pointer to a text area
 * @param txt pointer to the text
 */
void lv_ta_set_text(lv_obj_t * ta, const char * txt)
{
 8018844:	b590      	push	{r4, r7, lr}
 8018846:	b091      	sub	sp, #68	@ 0x44
 8018848:	af00      	add	r7, sp, #0
 801884a:	6078      	str	r0, [r7, #4]
 801884c:	6039      	str	r1, [r7, #0]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801884e:	6878      	ldr	r0, [r7, #4]
 8018850:	f7ee f862 	bl	8006918 <lv_obj_get_ext_attr>
 8018854:	63f8      	str	r0, [r7, #60]	@ 0x3c

    /*Clear the existing selection*/
    lv_ta_clear_selection(ta);
 8018856:	6878      	ldr	r0, [r7, #4]
 8018858:	f000 fbc2 	bl	8018fe0 <lv_ta_clear_selection>

    /*Add the character one-by-one if not all characters are accepted or there is character limit.*/
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 801885c:	6878      	ldr	r0, [r7, #4]
 801885e:	f000 fb59 	bl	8018f14 <lv_ta_get_accepted_chars>
 8018862:	4603      	mov	r3, r0
 8018864:	2b00      	cmp	r3, #0
 8018866:	d105      	bne.n	8018874 <lv_ta_set_text+0x30>
 8018868:	6878      	ldr	r0, [r7, #4]
 801886a:	f000 fb61 	bl	8018f30 <lv_ta_get_max_length>
 801886e:	4603      	mov	r3, r0
 8018870:	2b00      	cmp	r3, #0
 8018872:	d025      	beq.n	80188c0 <lv_ta_set_text+0x7c>
        lv_label_set_text(ext->label, "");
 8018874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018878:	4952      	ldr	r1, [pc, #328]	@ (80189c4 <lv_ta_set_text+0x180>)
 801887a:	4618      	mov	r0, r3
 801887c:	f7fb fffc 	bl	8014878 <lv_label_set_text>
        lv_ta_set_cursor_pos(ta, LV_TA_CURSOR_LAST);
 8018880:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8018884:	6878      	ldr	r0, [r7, #4]
 8018886:	f000 f8a9 	bl	80189dc <lv_ta_set_cursor_pos>

        uint32_t i = 0;
 801888a:	2300      	movs	r3, #0
 801888c:	633b      	str	r3, [r7, #48]	@ 0x30
        while(txt[i] != '\0') {
 801888e:	e010      	b.n	80188b2 <lv_ta_set_text+0x6e>
            uint32_t c = lv_txt_encoded_next(txt, &i);
 8018890:	4b4d      	ldr	r3, [pc, #308]	@ (80189c8 <lv_ta_set_text+0x184>)
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8018898:	4611      	mov	r1, r2
 801889a:	6838      	ldr	r0, [r7, #0]
 801889c:	4798      	blx	r3
 801889e:	63b8      	str	r0, [r7, #56]	@ 0x38
            lv_ta_add_char(ta, lv_txt_unicode_to_encoded(c));
 80188a0:	4b4a      	ldr	r3, [pc, #296]	@ (80189cc <lv_ta_set_text+0x188>)
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80188a6:	4798      	blx	r3
 80188a8:	4603      	mov	r3, r0
 80188aa:	4619      	mov	r1, r3
 80188ac:	6878      	ldr	r0, [r7, #4]
 80188ae:	f7ff fce5 	bl	801827c <lv_ta_add_char>
        while(txt[i] != '\0') {
 80188b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80188b4:	683a      	ldr	r2, [r7, #0]
 80188b6:	4413      	add	r3, r2
 80188b8:	781b      	ldrb	r3, [r3, #0]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d1e8      	bne.n	8018890 <lv_ta_set_text+0x4c>
    if(lv_ta_get_accepted_chars(ta) || lv_ta_get_max_length(ta)) {
 80188be:	e00a      	b.n	80188d6 <lv_ta_set_text+0x92>
        }
    } else {
        lv_label_set_text(ext->label, txt);
 80188c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80188c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80188c4:	6839      	ldr	r1, [r7, #0]
 80188c6:	4618      	mov	r0, r3
 80188c8:	f7fb ffd6 	bl	8014878 <lv_label_set_text>
        lv_ta_set_cursor_pos(ta, LV_TA_CURSOR_LAST);
 80188cc:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80188d0:	6878      	ldr	r0, [r7, #4]
 80188d2:	f000 f883 	bl	80189dc <lv_ta_set_cursor_pos>
    }

    /*Don't let 'width == 0' because the cursor will not be visible*/
    if(lv_obj_get_width(ext->label) == 0) {
 80188d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80188d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80188da:	4618      	mov	r0, r3
 80188dc:	f7ed fe9b 	bl	8006616 <lv_obj_get_width>
 80188e0:	4603      	mov	r3, r0
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d114      	bne.n	8018910 <lv_ta_set_text+0xcc>
        const lv_style_t * style = lv_obj_get_style(ext->label);
 80188e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80188e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80188ea:	4618      	mov	r0, r3
 80188ec:	f7ed fefe 	bl	80066ec <lv_obj_get_style>
 80188f0:	6378      	str	r0, [r7, #52]	@ 0x34
        lv_obj_set_width(ext->label, lv_font_get_glyph_width(style->text.font, ' ', '\0'));
 80188f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80188f4:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80188f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80188f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80188fa:	2200      	movs	r2, #0
 80188fc:	2120      	movs	r1, #32
 80188fe:	4618      	mov	r0, r3
 8018900:	f7f5 fd8a 	bl	800e418 <lv_font_get_glyph_width>
 8018904:	4603      	mov	r3, r0
 8018906:	b21b      	sxth	r3, r3
 8018908:	4619      	mov	r1, r3
 801890a:	4620      	mov	r0, r4
 801890c:	f7ec ff53 	bl	80057b6 <lv_obj_set_width>
    }

    if(ext->pwd_mode != 0) {
 8018910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018912:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8018916:	f003 0301 	and.w	r3, r3, #1
 801891a:	b2db      	uxtb	r3, r3
 801891c:	2b00      	cmp	r3, #0
 801891e:	d044      	beq.n	80189aa <lv_ta_set_text+0x166>
        ext->pwd_tmp = lv_mem_realloc(ext->pwd_tmp, strlen(txt) + 1);
 8018920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018922:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8018924:	6838      	ldr	r0, [r7, #0]
 8018926:	f7e7 fc87 	bl	8000238 <strlen>
 801892a:	4603      	mov	r3, r0
 801892c:	3301      	adds	r3, #1
 801892e:	4619      	mov	r1, r3
 8018930:	4620      	mov	r0, r4
 8018932:	f7f7 fc4b 	bl	80101cc <lv_mem_realloc>
 8018936:	4602      	mov	r2, r0
 8018938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801893a:	639a      	str	r2, [r3, #56]	@ 0x38
        lv_mem_assert(ext->pwd_tmp);
 801893c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801893e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018940:	2b00      	cmp	r3, #0
 8018942:	d101      	bne.n	8018948 <lv_ta_set_text+0x104>
 8018944:	bf00      	nop
 8018946:	e7fd      	b.n	8018944 <lv_ta_set_text+0x100>
        if(ext->pwd_tmp == NULL) return;
 8018948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801894a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801894c:	2b00      	cmp	r3, #0
 801894e:	d035      	beq.n	80189bc <lv_ta_set_text+0x178>
        strcpy(ext->pwd_tmp, txt);
 8018950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018954:	6839      	ldr	r1, [r7, #0]
 8018956:	4618      	mov	r0, r3
 8018958:	f003 f83f 	bl	801b9da <strcpy>

#if LV_USE_ANIMATION
        /*Auto hide characters*/
        lv_anim_t a;
        a.var            = ta;
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	60bb      	str	r3, [r7, #8]
        a.exec_cb        = (lv_anim_exec_xcb_t)pwd_char_hider_anim;
 8018960:	4b1b      	ldr	r3, [pc, #108]	@ (80189d0 <lv_ta_set_text+0x18c>)
 8018962:	60fb      	str	r3, [r7, #12]
        a.time           = ext->pwd_show_time;
 8018964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018966:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 801896a:	843b      	strh	r3, [r7, #32]
        a.act_time       = 0;
 801896c:	2300      	movs	r3, #0
 801896e:	847b      	strh	r3, [r7, #34]	@ 0x22
        a.ready_cb       = pwd_char_hider_anim_ready;
 8018970:	4b18      	ldr	r3, [pc, #96]	@ (80189d4 <lv_ta_set_text+0x190>)
 8018972:	617b      	str	r3, [r7, #20]
        a.start          = 0;
 8018974:	2300      	movs	r3, #0
 8018976:	61bb      	str	r3, [r7, #24]
        a.end            = 1;
 8018978:	2301      	movs	r3, #1
 801897a:	61fb      	str	r3, [r7, #28]
        a.repeat         = 0;
 801897c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018980:	f36f 0341 	bfc	r3, #1, #1
 8018984:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        a.repeat_pause   = 0;
 8018988:	2300      	movs	r3, #0
 801898a:	84fb      	strh	r3, [r7, #38]	@ 0x26
        a.playback       = 0;
 801898c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018990:	f36f 0300 	bfc	r3, #0, #1
 8018994:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        a.playback_pause = 0;
 8018998:	2300      	movs	r3, #0
 801899a:	84bb      	strh	r3, [r7, #36]	@ 0x24
        a.path_cb        = lv_anim_path_step;
 801899c:	4b0e      	ldr	r3, [pc, #56]	@ (80189d8 <lv_ta_set_text+0x194>)
 801899e:	613b      	str	r3, [r7, #16]
        lv_anim_create(&a);
 80189a0:	f107 0308 	add.w	r3, r7, #8
 80189a4:	4618      	mov	r0, r3
 80189a6:	f7f6 fb0b 	bl	800efc0 <lv_anim_create>
#else
        pwd_char_hider(ta);
#endif
    }

    placeholder_update(ta);
 80189aa:	6878      	ldr	r0, [r7, #4]
 80189ac:	f001 fc02 	bl	801a1b4 <placeholder_update>

    lv_event_send(ta, LV_EVENT_VALUE_CHANGED, NULL);
 80189b0:	2200      	movs	r2, #0
 80189b2:	210e      	movs	r1, #14
 80189b4:	6878      	ldr	r0, [r7, #4]
 80189b6:	f7ed fca5 	bl	8006304 <lv_event_send>
 80189ba:	e000      	b.n	80189be <lv_ta_set_text+0x17a>
        if(ext->pwd_tmp == NULL) return;
 80189bc:	bf00      	nop
}
 80189be:	3744      	adds	r7, #68	@ 0x44
 80189c0:	46bd      	mov	sp, r7
 80189c2:	bd90      	pop	{r4, r7, pc}
 80189c4:	0801c84c 	.word	0x0801c84c
 80189c8:	20000ca0 	.word	0x20000ca0
 80189cc:	20000c9c 	.word	0x20000c9c
 80189d0:	08019acb 	.word	0x08019acb
 80189d4:	08019ae1 	.word	0x08019ae1
 80189d8:	0800f175 	.word	0x0800f175

080189dc <lv_ta_set_cursor_pos>:
 * @param pos the new cursor position in character index
 *             < 0 : index from the end of the text
 *             LV_TA_CURSOR_LAST: go after the last character
 */
void lv_ta_set_cursor_pos(lv_obj_t * ta, int16_t pos)
{
 80189dc:	b590      	push	{r4, r7, lr}
 80189de:	b099      	sub	sp, #100	@ 0x64
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
 80189e4:	460b      	mov	r3, r1
 80189e6:	807b      	strh	r3, [r7, #2]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80189e8:	6878      	ldr	r0, [r7, #4]
 80189ea:	f7ed ff95 	bl	8006918 <lv_obj_get_ext_attr>
 80189ee:	65f8      	str	r0, [r7, #92]	@ 0x5c
    if(ext->cursor.pos == pos) return;
 80189f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80189f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80189f6:	461a      	mov	r2, r3
 80189f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80189fc:	429a      	cmp	r2, r3
 80189fe:	f000 8118 	beq.w	8018c32 <lv_ta_set_cursor_pos+0x256>

    uint16_t len = lv_txt_get_encoded_length(lv_label_get_text(ext->label));
 8018a02:	4b8e      	ldr	r3, [pc, #568]	@ (8018c3c <lv_ta_set_cursor_pos+0x260>)
 8018a04:	681c      	ldr	r4, [r3, #0]
 8018a06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	f7fc f8a5 	bl	8014b5a <lv_label_get_text>
 8018a10:	4603      	mov	r3, r0
 8018a12:	4618      	mov	r0, r3
 8018a14:	47a0      	blx	r4
 8018a16:	4603      	mov	r3, r0
 8018a18:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

    if(pos < 0) pos = len + pos;
 8018a1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	da05      	bge.n	8018a30 <lv_ta_set_cursor_pos+0x54>
 8018a24:	887a      	ldrh	r2, [r7, #2]
 8018a26:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8018a2a:	4413      	add	r3, r2
 8018a2c:	b29b      	uxth	r3, r3
 8018a2e:	807b      	strh	r3, [r7, #2]

    if(pos > len || pos == LV_TA_CURSOR_LAST) pos = len;
 8018a30:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8018a34:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8018a38:	429a      	cmp	r2, r3
 8018a3a:	dc05      	bgt.n	8018a48 <lv_ta_set_cursor_pos+0x6c>
 8018a3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018a40:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8018a44:	4293      	cmp	r3, r2
 8018a46:	d102      	bne.n	8018a4e <lv_ta_set_cursor_pos+0x72>
 8018a48:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8018a4c:	807b      	strh	r3, [r7, #2]

    ext->cursor.pos = pos;
 8018a4e:	887a      	ldrh	r2, [r7, #2]
 8018a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018a52:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /*Position the label to make the cursor visible*/
    lv_obj_t * label_par = lv_obj_get_parent(ext->label);
 8018a56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	f7ed fd72 	bl	8006544 <lv_obj_get_parent>
 8018a60:	6578      	str	r0, [r7, #84]	@ 0x54
    lv_point_t cur_pos;
    const lv_style_t * style = lv_obj_get_style(ta);
 8018a62:	6878      	ldr	r0, [r7, #4]
 8018a64:	f7ed fe42 	bl	80066ec <lv_obj_get_style>
 8018a68:	6538      	str	r0, [r7, #80]	@ 0x50
    const lv_font_t * font_p = style->text.font;
 8018a6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    lv_area_t label_cords;
    lv_area_t ta_cords;
    lv_label_get_letter_pos(ext->label, pos, &cur_pos);
 8018a70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a74:	8879      	ldrh	r1, [r7, #2]
 8018a76:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	f7fc f8ca 	bl	8014c14 <lv_label_get_letter_pos>
    lv_obj_get_coords(ta, &ta_cords);
 8018a80:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018a84:	4619      	mov	r1, r3
 8018a86:	6878      	ldr	r0, [r7, #4]
 8018a88:	f7ed fd84 	bl	8006594 <lv_obj_get_coords>
    lv_obj_get_coords(ext->label, &label_cords);
 8018a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a90:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8018a94:	4611      	mov	r1, r2
 8018a96:	4618      	mov	r0, r3
 8018a98:	f7ed fd7c 	bl	8006594 <lv_obj_get_coords>

    /*Check the top*/
    lv_coord_t font_h = lv_font_get_line_height(font_p);
 8018a9c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8018a9e:	f7ff f98b 	bl	8017db8 <lv_font_get_line_height>
 8018aa2:	4603      	mov	r3, r0
 8018aa4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    if(lv_obj_get_y(label_par) + cur_pos.y < 0) {
 8018aa8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018aaa:	f7ed fd9b 	bl	80065e4 <lv_obj_get_y>
 8018aae:	4603      	mov	r3, r0
 8018ab0:	461a      	mov	r2, r3
 8018ab2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8018ab6:	4413      	add	r3, r2
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	da0d      	bge.n	8018ad8 <lv_ta_set_cursor_pos+0xfc>
        lv_obj_set_y(label_par, -cur_pos.y + style->body.padding.top);
 8018abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018abe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8018ac2:	b29a      	uxth	r2, r3
 8018ac4:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8018ac8:	b29b      	uxth	r3, r3
 8018aca:	1ad3      	subs	r3, r2, r3
 8018acc:	b29b      	uxth	r3, r3
 8018ace:	b21b      	sxth	r3, r3
 8018ad0:	4619      	mov	r1, r3
 8018ad2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018ad4:	f7ec fde1 	bl	800569a <lv_obj_set_y>
    }

    /*Check the bottom*/
    if(label_cords.y1 + cur_pos.y + font_h + style->body.padding.bottom > ta_cords.y2) {
 8018ad8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8018adc:	461a      	mov	r2, r3
 8018ade:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8018ae2:	441a      	add	r2, r3
 8018ae4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8018ae8:	4413      	add	r3, r2
 8018aea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8018aec:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8018af0:	4413      	add	r3, r2
 8018af2:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 8018af6:	4293      	cmp	r3, r2
 8018af8:	dd1e      	ble.n	8018b38 <lv_ta_set_cursor_pos+0x15c>
        lv_obj_set_y(label_par, -(cur_pos.y - lv_obj_get_height(ta) + font_h + style->body.padding.top +
 8018afa:	6878      	ldr	r0, [r7, #4]
 8018afc:	f7ed fd99 	bl	8006632 <lv_obj_get_height>
 8018b00:	4603      	mov	r3, r0
 8018b02:	b29a      	uxth	r2, r3
 8018b04:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8018b08:	b29b      	uxth	r3, r3
 8018b0a:	1ad3      	subs	r3, r2, r3
 8018b0c:	b29a      	uxth	r2, r3
 8018b0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8018b12:	1ad3      	subs	r3, r2, r3
 8018b14:	b29a      	uxth	r2, r3
 8018b16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b18:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8018b1c:	b29b      	uxth	r3, r3
 8018b1e:	1ad3      	subs	r3, r2, r3
 8018b20:	b29a      	uxth	r2, r3
                                  style->body.padding.bottom));
 8018b22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018b24:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8018b28:	b29b      	uxth	r3, r3
        lv_obj_set_y(label_par, -(cur_pos.y - lv_obj_get_height(ta) + font_h + style->body.padding.top +
 8018b2a:	1ad3      	subs	r3, r2, r3
 8018b2c:	b29b      	uxth	r3, r3
 8018b2e:	b21b      	sxth	r3, r3
 8018b30:	4619      	mov	r1, r3
 8018b32:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018b34:	f7ec fdb1 	bl	800569a <lv_obj_set_y>
    }
    /*Check the left (use the font_h as general unit)*/
    if(lv_obj_get_x(label_par) + cur_pos.x < font_h) {
 8018b38:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018b3a:	f7ed fd3a 	bl	80065b2 <lv_obj_get_x>
 8018b3e:	4603      	mov	r3, r0
 8018b40:	461a      	mov	r2, r3
 8018b42:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8018b46:	441a      	add	r2, r3
 8018b48:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8018b4c:	429a      	cmp	r2, r3
 8018b4e:	da0b      	bge.n	8018b68 <lv_ta_set_cursor_pos+0x18c>
        lv_obj_set_x(label_par, -cur_pos.x + font_h);
 8018b50:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8018b54:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8018b58:	b29b      	uxth	r3, r3
 8018b5a:	1ad3      	subs	r3, r2, r3
 8018b5c:	b29b      	uxth	r3, r3
 8018b5e:	b21b      	sxth	r3, r3
 8018b60:	4619      	mov	r1, r3
 8018b62:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018b64:	f7ec fd84 	bl	8005670 <lv_obj_set_x>
    }

    /*Check the right (use the font_h as general unit)*/
    if(label_cords.x1 + cur_pos.x + font_h + style->body.padding.right > ta_cords.x2) {
 8018b68:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8018b6c:	461a      	mov	r2, r3
 8018b6e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8018b72:	441a      	add	r2, r3
 8018b74:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8018b78:	4413      	add	r3, r2
 8018b7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8018b7c:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8018b80:	4413      	add	r3, r2
 8018b82:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8018b86:	4293      	cmp	r3, r2
 8018b88:	dd1e      	ble.n	8018bc8 <lv_ta_set_cursor_pos+0x1ec>
        lv_obj_set_x(label_par, -(cur_pos.x - lv_obj_get_width(ta) + font_h + style->body.padding.left +
 8018b8a:	6878      	ldr	r0, [r7, #4]
 8018b8c:	f7ed fd43 	bl	8006616 <lv_obj_get_width>
 8018b90:	4603      	mov	r3, r0
 8018b92:	b29a      	uxth	r2, r3
 8018b94:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8018b98:	b29b      	uxth	r3, r3
 8018b9a:	1ad3      	subs	r3, r2, r3
 8018b9c:	b29a      	uxth	r2, r3
 8018b9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8018ba2:	1ad3      	subs	r3, r2, r3
 8018ba4:	b29a      	uxth	r2, r3
 8018ba6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018ba8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8018bac:	b29b      	uxth	r3, r3
 8018bae:	1ad3      	subs	r3, r2, r3
 8018bb0:	b29a      	uxth	r2, r3
                                  style->body.padding.right));
 8018bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018bb4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8018bb8:	b29b      	uxth	r3, r3
        lv_obj_set_x(label_par, -(cur_pos.x - lv_obj_get_width(ta) + font_h + style->body.padding.left +
 8018bba:	1ad3      	subs	r3, r2, r3
 8018bbc:	b29b      	uxth	r3, r3
 8018bbe:	b21b      	sxth	r3, r3
 8018bc0:	4619      	mov	r1, r3
 8018bc2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8018bc4:	f7ec fd54 	bl	8005670 <lv_obj_set_x>
    }

    ext->cursor.valid_x = cur_pos.x;
 8018bc8:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 8018bcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018bce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48

#if LV_USE_ANIMATION
    if(ext->cursor.blink_time) {
 8018bd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018bd4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d026      	beq.n	8018c2a <lv_ta_set_cursor_pos+0x24e>
        /*Reset cursor blink animation*/
        lv_anim_t a;
        a.var            = ta;
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	60fb      	str	r3, [r7, #12]
        a.exec_cb        = (lv_anim_exec_xcb_t)cursor_blink_anim;
 8018be0:	4b17      	ldr	r3, [pc, #92]	@ (8018c40 <lv_ta_set_cursor_pos+0x264>)
 8018be2:	613b      	str	r3, [r7, #16]
        a.time           = ext->cursor.blink_time;
 8018be4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018be6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8018bea:	84bb      	strh	r3, [r7, #36]	@ 0x24
        a.act_time       = 0;
 8018bec:	2300      	movs	r3, #0
 8018bee:	84fb      	strh	r3, [r7, #38]	@ 0x26
        a.ready_cb       = NULL;
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	61bb      	str	r3, [r7, #24]
        a.start          = 1;
 8018bf4:	2301      	movs	r3, #1
 8018bf6:	61fb      	str	r3, [r7, #28]
        a.end            = 0;
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	623b      	str	r3, [r7, #32]
        a.repeat         = 1;
 8018bfc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8018c00:	f043 0302 	orr.w	r3, r3, #2
 8018c04:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        a.repeat_pause   = 0;
 8018c08:	2300      	movs	r3, #0
 8018c0a:	857b      	strh	r3, [r7, #42]	@ 0x2a
        a.playback       = 1;
 8018c0c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8018c10:	f043 0301 	orr.w	r3, r3, #1
 8018c14:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        a.playback_pause = 0;
 8018c18:	2300      	movs	r3, #0
 8018c1a:	853b      	strh	r3, [r7, #40]	@ 0x28
        a.path_cb        = lv_anim_path_step;
 8018c1c:	4b09      	ldr	r3, [pc, #36]	@ (8018c44 <lv_ta_set_cursor_pos+0x268>)
 8018c1e:	617b      	str	r3, [r7, #20]
        lv_anim_create(&a);
 8018c20:	f107 030c 	add.w	r3, r7, #12
 8018c24:	4618      	mov	r0, r3
 8018c26:	f7f6 f9cb 	bl	800efc0 <lv_anim_create>
    }
#endif

    refr_cursor_area(ta);
 8018c2a:	6878      	ldr	r0, [r7, #4]
 8018c2c:	f001 f850 	bl	8019cd0 <refr_cursor_area>
 8018c30:	e000      	b.n	8018c34 <lv_ta_set_cursor_pos+0x258>
    if(ext->cursor.pos == pos) return;
 8018c32:	bf00      	nop
}
 8018c34:	3764      	adds	r7, #100	@ 0x64
 8018c36:	46bd      	mov	sp, r7
 8018c38:	bd90      	pop	{r4, r7, pc}
 8018c3a:	bf00      	nop
 8018c3c:	20000cb0 	.word	0x20000cb0
 8018c40:	080199d5 	.word	0x080199d5
 8018c44:	0800f175 	.word	0x0800f175

08018c48 <lv_ta_set_cursor_type>:
 * Set the cursor type.
 * @param ta pointer to a text area object
 * @param cur_type: element of 'lv_ta_cursor_type_t'
 */
void lv_ta_set_cursor_type(lv_obj_t * ta, lv_cursor_type_t cur_type)
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b084      	sub	sp, #16
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
 8018c50:	460b      	mov	r3, r1
 8018c52:	70fb      	strb	r3, [r7, #3]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018c54:	6878      	ldr	r0, [r7, #4]
 8018c56:	f7ed fe5f 	bl	8006918 <lv_obj_get_ext_attr>
 8018c5a:	60f8      	str	r0, [r7, #12]
    if(ext->cursor.type == cur_type) return;
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8018c62:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018c66:	b2db      	uxtb	r3, r3
 8018c68:	461a      	mov	r2, r3
 8018c6a:	78fb      	ldrb	r3, [r7, #3]
 8018c6c:	429a      	cmp	r2, r3
 8018c6e:	d00e      	beq.n	8018c8e <lv_ta_set_cursor_type+0x46>

    ext->cursor.type = cur_type;
 8018c70:	78fb      	ldrb	r3, [r7, #3]
 8018c72:	f003 030f 	and.w	r3, r3, #15
 8018c76:	b2d9      	uxtb	r1, r3
 8018c78:	68fa      	ldr	r2, [r7, #12]
 8018c7a:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8018c7e:	f361 0303 	bfi	r3, r1, #0, #4
 8018c82:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

    refr_cursor_area(ta);
 8018c86:	6878      	ldr	r0, [r7, #4]
 8018c88:	f001 f822 	bl	8019cd0 <refr_cursor_area>
 8018c8c:	e000      	b.n	8018c90 <lv_ta_set_cursor_type+0x48>
    if(ext->cursor.type == cur_type) return;
 8018c8e:	bf00      	nop
}
 8018c90:	3710      	adds	r7, #16
 8018c92:	46bd      	mov	sp, r7
 8018c94:	bd80      	pop	{r7, pc}

08018c96 <lv_ta_set_one_line>:
 * Configure the text area to one line or back to normal
 * @param ta pointer to a Text area object
 * @param en true: one line, false: normal
 */
void lv_ta_set_one_line(lv_obj_t * ta, bool en)
{
 8018c96:	b580      	push	{r7, lr}
 8018c98:	b088      	sub	sp, #32
 8018c9a:	af00      	add	r7, sp, #0
 8018c9c:	6078      	str	r0, [r7, #4]
 8018c9e:	460b      	mov	r3, r1
 8018ca0:	70fb      	strb	r3, [r7, #3]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018ca2:	6878      	ldr	r0, [r7, #4]
 8018ca4:	f7ed fe38 	bl	8006918 <lv_obj_get_ext_attr>
 8018ca8:	61f8      	str	r0, [r7, #28]
    if(ext->one_line == en) return;
 8018caa:	69fb      	ldr	r3, [r7, #28]
 8018cac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8018cb0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018cb4:	b2db      	uxtb	r3, r3
 8018cb6:	78fa      	ldrb	r2, [r7, #3]
 8018cb8:	429a      	cmp	r2, r3
 8018cba:	f000 809a 	beq.w	8018df2 <lv_ta_set_one_line+0x15c>

    if(en) {
 8018cbe:	78fb      	ldrb	r3, [r7, #3]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d05f      	beq.n	8018d84 <lv_ta_set_one_line+0xee>
        const lv_style_t * style_ta    = lv_obj_get_style(ta);
 8018cc4:	6878      	ldr	r0, [r7, #4]
 8018cc6:	f7ed fd11 	bl	80066ec <lv_obj_get_style>
 8018cca:	6178      	str	r0, [r7, #20]
        const lv_style_t * style_scrl  = lv_obj_get_style(lv_page_get_scrl(ta));
 8018ccc:	6878      	ldr	r0, [r7, #4]
 8018cce:	f7fd fb57 	bl	8016380 <lv_page_get_scrl>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	4618      	mov	r0, r3
 8018cd6:	f7ed fd09 	bl	80066ec <lv_obj_get_style>
 8018cda:	6138      	str	r0, [r7, #16]
        const lv_style_t * style_label = lv_obj_get_style(ext->label);
 8018cdc:	69fb      	ldr	r3, [r7, #28]
 8018cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f7ed fd03 	bl	80066ec <lv_obj_get_style>
 8018ce6:	60f8      	str	r0, [r7, #12]
        lv_coord_t font_h              = lv_font_get_line_height(style_label->text.font);
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018cec:	4618      	mov	r0, r3
 8018cee:	f7ff f863 	bl	8017db8 <lv_font_get_line_height>
 8018cf2:	4603      	mov	r3, r0
 8018cf4:	817b      	strh	r3, [r7, #10]

        ext->one_line = 1;
 8018cf6:	69fa      	ldr	r2, [r7, #28]
 8018cf8:	f892 305c 	ldrb.w	r3, [r2, #92]	@ 0x5c
 8018cfc:	f043 0302 	orr.w	r3, r3, #2
 8018d00:	f882 305c 	strb.w	r3, [r2, #92]	@ 0x5c
        lv_page_set_scrl_fit2(ta, LV_FIT_TIGHT, LV_FIT_FLOOD);
 8018d04:	2202      	movs	r2, #2
 8018d06:	2101      	movs	r1, #1
 8018d08:	6878      	ldr	r0, [r7, #4]
 8018d0a:	f7ff f8af 	bl	8017e6c <lv_page_set_scrl_fit2>
        lv_obj_set_height(ta, font_h + style_ta->body.padding.top + style_ta->body.padding.bottom +
 8018d0e:	697b      	ldr	r3, [r7, #20]
 8018d10:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8018d14:	b29a      	uxth	r2, r3
 8018d16:	897b      	ldrh	r3, [r7, #10]
 8018d18:	4413      	add	r3, r2
 8018d1a:	b29a      	uxth	r2, r3
 8018d1c:	697b      	ldr	r3, [r7, #20]
 8018d1e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8018d22:	b29b      	uxth	r3, r3
 8018d24:	4413      	add	r3, r2
 8018d26:	b29a      	uxth	r2, r3
                                  style_scrl->body.padding.top + style_scrl->body.padding.bottom);
 8018d28:	693b      	ldr	r3, [r7, #16]
 8018d2a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8018d2e:	b29b      	uxth	r3, r3
        lv_obj_set_height(ta, font_h + style_ta->body.padding.top + style_ta->body.padding.bottom +
 8018d30:	4413      	add	r3, r2
 8018d32:	b29a      	uxth	r2, r3
                                  style_scrl->body.padding.top + style_scrl->body.padding.bottom);
 8018d34:	693b      	ldr	r3, [r7, #16]
 8018d36:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8018d3a:	b29b      	uxth	r3, r3
 8018d3c:	4413      	add	r3, r2
 8018d3e:	b29b      	uxth	r3, r3
        lv_obj_set_height(ta, font_h + style_ta->body.padding.top + style_ta->body.padding.bottom +
 8018d40:	b21b      	sxth	r3, r3
 8018d42:	4619      	mov	r1, r3
 8018d44:	6878      	ldr	r0, [r7, #4]
 8018d46:	f7ec fd4b 	bl	80057e0 <lv_obj_set_height>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_EXPAND);
 8018d4a:	69fb      	ldr	r3, [r7, #28]
 8018d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018d4e:	2100      	movs	r1, #0
 8018d50:	4618      	mov	r0, r3
 8018d52:	f7fb fe2f 	bl	80149b4 <lv_label_set_long_mode>
        if(ext->placeholder) lv_label_set_long_mode(ext->placeholder, LV_LABEL_LONG_EXPAND);
 8018d56:	69fb      	ldr	r3, [r7, #28]
 8018d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d005      	beq.n	8018d6a <lv_ta_set_one_line+0xd4>
 8018d5e:	69fb      	ldr	r3, [r7, #28]
 8018d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018d62:	2100      	movs	r1, #0
 8018d64:	4618      	mov	r0, r3
 8018d66:	f7fb fe25 	bl	80149b4 <lv_label_set_long_mode>
        lv_obj_set_pos(lv_page_get_scrl(ta), style_ta->body.padding.left, style_ta->body.padding.top);
 8018d6a:	6878      	ldr	r0, [r7, #4]
 8018d6c:	f7fd fb08 	bl	8016380 <lv_page_get_scrl>
 8018d70:	697b      	ldr	r3, [r7, #20]
 8018d72:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 8018d76:	697b      	ldr	r3, [r7, #20]
 8018d78:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8018d7c:	461a      	mov	r2, r3
 8018d7e:	f7ec fbec 	bl	800555a <lv_obj_set_pos>
 8018d82:	e02f      	b.n	8018de4 <lv_ta_set_one_line+0x14e>
    } else {
        const lv_style_t * style_ta = lv_obj_get_style(ta);
 8018d84:	6878      	ldr	r0, [r7, #4]
 8018d86:	f7ed fcb1 	bl	80066ec <lv_obj_get_style>
 8018d8a:	61b8      	str	r0, [r7, #24]

        ext->one_line = 0;
 8018d8c:	69fa      	ldr	r2, [r7, #28]
 8018d8e:	f892 305c 	ldrb.w	r3, [r2, #92]	@ 0x5c
 8018d92:	f36f 0341 	bfc	r3, #1, #1
 8018d96:	f882 305c 	strb.w	r3, [r2, #92]	@ 0x5c
        lv_page_set_scrl_fit2(ta, LV_FIT_FLOOD, LV_FIT_TIGHT);
 8018d9a:	2201      	movs	r2, #1
 8018d9c:	2102      	movs	r1, #2
 8018d9e:	6878      	ldr	r0, [r7, #4]
 8018da0:	f7ff f864 	bl	8017e6c <lv_page_set_scrl_fit2>
        lv_label_set_long_mode(ext->label, LV_LABEL_LONG_BREAK);
 8018da4:	69fb      	ldr	r3, [r7, #28]
 8018da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018da8:	2101      	movs	r1, #1
 8018daa:	4618      	mov	r0, r3
 8018dac:	f7fb fe02 	bl	80149b4 <lv_label_set_long_mode>
        if(ext->placeholder) lv_label_set_long_mode(ext->placeholder, LV_LABEL_LONG_BREAK);
 8018db0:	69fb      	ldr	r3, [r7, #28]
 8018db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d005      	beq.n	8018dc4 <lv_ta_set_one_line+0x12e>
 8018db8:	69fb      	ldr	r3, [r7, #28]
 8018dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018dbc:	2101      	movs	r1, #1
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	f7fb fdf8 	bl	80149b4 <lv_label_set_long_mode>

        lv_obj_set_height(ta, LV_TA_DEF_HEIGHT);
 8018dc4:	2164      	movs	r1, #100	@ 0x64
 8018dc6:	6878      	ldr	r0, [r7, #4]
 8018dc8:	f7ec fd0a 	bl	80057e0 <lv_obj_set_height>
        lv_obj_set_pos(lv_page_get_scrl(ta), style_ta->body.padding.left, style_ta->body.padding.top);
 8018dcc:	6878      	ldr	r0, [r7, #4]
 8018dce:	f7fd fad7 	bl	8016380 <lv_page_get_scrl>
 8018dd2:	69bb      	ldr	r3, [r7, #24]
 8018dd4:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 8018dd8:	69bb      	ldr	r3, [r7, #24]
 8018dda:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8018dde:	461a      	mov	r2, r3
 8018de0:	f7ec fbbb 	bl	800555a <lv_obj_set_pos>
    }

    placeholder_update(ta);
 8018de4:	6878      	ldr	r0, [r7, #4]
 8018de6:	f001 f9e5 	bl	801a1b4 <placeholder_update>
    refr_cursor_area(ta);
 8018dea:	6878      	ldr	r0, [r7, #4]
 8018dec:	f000 ff70 	bl	8019cd0 <refr_cursor_area>
 8018df0:	e000      	b.n	8018df4 <lv_ta_set_one_line+0x15e>
    if(ext->one_line == en) return;
 8018df2:	bf00      	nop
}
 8018df4:	3720      	adds	r7, #32
 8018df6:	46bd      	mov	sp, r7
 8018df8:	bd80      	pop	{r7, pc}
	...

08018dfc <lv_ta_set_style>:
 * @param ta pointer to a text area object
 * @param type which style should be set
 * @param style pointer to a style
 */
void lv_ta_set_style(lv_obj_t * ta, lv_ta_style_t type, const lv_style_t * style)
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b086      	sub	sp, #24
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	60f8      	str	r0, [r7, #12]
 8018e04:	460b      	mov	r3, r1
 8018e06:	607a      	str	r2, [r7, #4]
 8018e08:	72fb      	strb	r3, [r7, #11]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018e0a:	68f8      	ldr	r0, [r7, #12]
 8018e0c:	f7ed fd84 	bl	8006918 <lv_obj_get_ext_attr>
 8018e10:	6178      	str	r0, [r7, #20]

    switch(type) {
 8018e12:	7afb      	ldrb	r3, [r7, #11]
 8018e14:	2b04      	cmp	r3, #4
 8018e16:	d839      	bhi.n	8018e8c <lv_ta_set_style+0x90>
 8018e18:	a201      	add	r2, pc, #4	@ (adr r2, 8018e20 <lv_ta_set_style+0x24>)
 8018e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e1e:	bf00      	nop
 8018e20:	08018e35 	.word	0x08018e35
 8018e24:	08018e41 	.word	0x08018e41
 8018e28:	08018e59 	.word	0x08018e59
 8018e2c:	08018e4d 	.word	0x08018e4d
 8018e30:	08018e75 	.word	0x08018e75
        case LV_TA_STYLE_BG: lv_page_set_style(ta, LV_PAGE_STYLE_BG, style); break;
 8018e34:	687a      	ldr	r2, [r7, #4]
 8018e36:	2100      	movs	r1, #0
 8018e38:	68f8      	ldr	r0, [r7, #12]
 8018e3a:	f7fd fa4f 	bl	80162dc <lv_page_set_style>
 8018e3e:	e025      	b.n	8018e8c <lv_ta_set_style+0x90>
        case LV_TA_STYLE_SB: lv_page_set_style(ta, LV_PAGE_STYLE_SB, style); break;
 8018e40:	687a      	ldr	r2, [r7, #4]
 8018e42:	2102      	movs	r1, #2
 8018e44:	68f8      	ldr	r0, [r7, #12]
 8018e46:	f7fd fa49 	bl	80162dc <lv_page_set_style>
 8018e4a:	e01f      	b.n	8018e8c <lv_ta_set_style+0x90>
        case LV_TA_STYLE_EDGE_FLASH: lv_page_set_style(ta, LV_PAGE_STYLE_EDGE_FLASH, style); break;
 8018e4c:	687a      	ldr	r2, [r7, #4]
 8018e4e:	2103      	movs	r1, #3
 8018e50:	68f8      	ldr	r0, [r7, #12]
 8018e52:	f7fd fa43 	bl	80162dc <lv_page_set_style>
 8018e56:	e019      	b.n	8018e8c <lv_ta_set_style+0x90>
        case LV_TA_STYLE_CURSOR:
            ext->cursor.style = style;
 8018e58:	697b      	ldr	r3, [r7, #20]
 8018e5a:	687a      	ldr	r2, [r7, #4]
 8018e5c:	645a      	str	r2, [r3, #68]	@ 0x44
            lv_obj_refresh_ext_draw_pad(lv_page_get_scrl(ta)); /*Refresh ext. size because of cursor drawing*/
 8018e5e:	68f8      	ldr	r0, [r7, #12]
 8018e60:	f7fd fa8e 	bl	8016380 <lv_page_get_scrl>
 8018e64:	4603      	mov	r3, r0
 8018e66:	4618      	mov	r0, r3
 8018e68:	f7ed fb0a 	bl	8006480 <lv_obj_refresh_ext_draw_pad>
            refr_cursor_area(ta);
 8018e6c:	68f8      	ldr	r0, [r7, #12]
 8018e6e:	f000 ff2f 	bl	8019cd0 <refr_cursor_area>
            break;
 8018e72:	e00b      	b.n	8018e8c <lv_ta_set_style+0x90>
        case LV_TA_STYLE_PLACEHOLDER:
            if(ext->placeholder) lv_label_set_style(ext->placeholder, LV_LABEL_STYLE_MAIN, style);
 8018e74:	697b      	ldr	r3, [r7, #20]
 8018e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d006      	beq.n	8018e8a <lv_ta_set_style+0x8e>
 8018e7c:	697b      	ldr	r3, [r7, #20]
 8018e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018e80:	687a      	ldr	r2, [r7, #4]
 8018e82:	2100      	movs	r1, #0
 8018e84:	4618      	mov	r0, r3
 8018e86:	f7ff f805 	bl	8017e94 <lv_label_set_style>
            break;
 8018e8a:	bf00      	nop
    }
}
 8018e8c:	bf00      	nop
 8018e8e:	3718      	adds	r7, #24
 8018e90:	46bd      	mov	sp, r7
 8018e92:	bd80      	pop	{r7, pc}

08018e94 <lv_ta_get_text>:
 * Get the text of a text area. In password mode it gives the real text (not '*'s).
 * @param ta pointer to a text area object
 * @return pointer to the text
 */
const char * lv_ta_get_text(const lv_obj_t * ta)
{
 8018e94:	b580      	push	{r7, lr}
 8018e96:	b084      	sub	sp, #16
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	6078      	str	r0, [r7, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018e9c:	6878      	ldr	r0, [r7, #4]
 8018e9e:	f7ed fd3b 	bl	8006918 <lv_obj_get_ext_attr>
 8018ea2:	60b8      	str	r0, [r7, #8]

    const char * txt;
    if(ext->pwd_mode == 0) {
 8018ea4:	68bb      	ldr	r3, [r7, #8]
 8018ea6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8018eaa:	f003 0301 	and.w	r3, r3, #1
 8018eae:	b2db      	uxtb	r3, r3
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	d106      	bne.n	8018ec2 <lv_ta_get_text+0x2e>
        txt = lv_label_get_text(ext->label);
 8018eb4:	68bb      	ldr	r3, [r7, #8]
 8018eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018eb8:	4618      	mov	r0, r3
 8018eba:	f7fb fe4e 	bl	8014b5a <lv_label_get_text>
 8018ebe:	60f8      	str	r0, [r7, #12]
 8018ec0:	e002      	b.n	8018ec8 <lv_ta_get_text+0x34>
    } else {
        txt = ext->pwd_tmp;
 8018ec2:	68bb      	ldr	r3, [r7, #8]
 8018ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018ec6:	60fb      	str	r3, [r7, #12]
    }

    return txt;
 8018ec8:	68fb      	ldr	r3, [r7, #12]
}
 8018eca:	4618      	mov	r0, r3
 8018ecc:	3710      	adds	r7, #16
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	bd80      	pop	{r7, pc}

08018ed2 <lv_ta_get_cursor_pos>:
 * Get the current cursor position in character index
 * @param ta pointer to a text area object
 * @return the cursor position
 */
uint16_t lv_ta_get_cursor_pos(const lv_obj_t * ta)
{
 8018ed2:	b580      	push	{r7, lr}
 8018ed4:	b084      	sub	sp, #16
 8018ed6:	af00      	add	r7, sp, #0
 8018ed8:	6078      	str	r0, [r7, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018eda:	6878      	ldr	r0, [r7, #4]
 8018edc:	f7ed fd1c 	bl	8006918 <lv_obj_get_ext_attr>
 8018ee0:	60f8      	str	r0, [r7, #12]
    return ext->cursor.pos;
 8018ee2:	68fb      	ldr	r3, [r7, #12]
 8018ee4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
}
 8018ee8:	4618      	mov	r0, r3
 8018eea:	3710      	adds	r7, #16
 8018eec:	46bd      	mov	sp, r7
 8018eee:	bd80      	pop	{r7, pc}

08018ef0 <lv_ta_get_cursor_type>:
 * Get the current cursor type.
 * @param ta pointer to a text area object
 * @return element of 'lv_ta_cursor_type_t'
 */
lv_cursor_type_t lv_ta_get_cursor_type(const lv_obj_t * ta)
{
 8018ef0:	b580      	push	{r7, lr}
 8018ef2:	b084      	sub	sp, #16
 8018ef4:	af00      	add	r7, sp, #0
 8018ef6:	6078      	str	r0, [r7, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018ef8:	6878      	ldr	r0, [r7, #4]
 8018efa:	f7ed fd0d 	bl	8006918 <lv_obj_get_ext_attr>
 8018efe:	60f8      	str	r0, [r7, #12]
    return ext->cursor.type;
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8018f06:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8018f0a:	b2db      	uxtb	r3, r3
}
 8018f0c:	4618      	mov	r0, r3
 8018f0e:	3710      	adds	r7, #16
 8018f10:	46bd      	mov	sp, r7
 8018f12:	bd80      	pop	{r7, pc}

08018f14 <lv_ta_get_accepted_chars>:
 * Get a list of accepted characters.
 * @param ta pointer to  Text Area
 * @return list of accented characters.
 */
const char * lv_ta_get_accepted_chars(lv_obj_t * ta)
{
 8018f14:	b580      	push	{r7, lr}
 8018f16:	b084      	sub	sp, #16
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	6078      	str	r0, [r7, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018f1c:	6878      	ldr	r0, [r7, #4]
 8018f1e:	f7ed fcfb 	bl	8006918 <lv_obj_get_ext_attr>
 8018f22:	60f8      	str	r0, [r7, #12]

    return ext->accapted_chars;
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8018f28:	4618      	mov	r0, r3
 8018f2a:	3710      	adds	r7, #16
 8018f2c:	46bd      	mov	sp, r7
 8018f2e:	bd80      	pop	{r7, pc}

08018f30 <lv_ta_get_max_length>:
 * Set max length of a Text Area.
 * @param ta pointer to  Text Area
 * @return the maximal number of characters to be add
 */
uint16_t lv_ta_get_max_length(lv_obj_t * ta)
{
 8018f30:	b580      	push	{r7, lr}
 8018f32:	b084      	sub	sp, #16
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	6078      	str	r0, [r7, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8018f38:	6878      	ldr	r0, [r7, #4]
 8018f3a:	f7ed fced 	bl	8006918 <lv_obj_get_ext_attr>
 8018f3e:	60f8      	str	r0, [r7, #12]
    return ext->max_length;
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
}
 8018f46:	4618      	mov	r0, r3
 8018f48:	3710      	adds	r7, #16
 8018f4a:	46bd      	mov	sp, r7
 8018f4c:	bd80      	pop	{r7, pc}
	...

08018f50 <lv_ta_get_style>:
 * @param ta pointer to a text area object
 * @param type which style should be get
 * @return style pointer to a style
 */
const lv_style_t * lv_ta_get_style(const lv_obj_t * ta, lv_ta_style_t type)
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b084      	sub	sp, #16
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
 8018f58:	460b      	mov	r3, r1
 8018f5a:	70fb      	strb	r3, [r7, #3]
    const lv_style_t * style = NULL;
 8018f5c:	2300      	movs	r3, #0
 8018f5e:	60fb      	str	r3, [r7, #12]
    lv_ta_ext_t * ext        = lv_obj_get_ext_attr(ta);
 8018f60:	6878      	ldr	r0, [r7, #4]
 8018f62:	f7ed fcd9 	bl	8006918 <lv_obj_get_ext_attr>
 8018f66:	60b8      	str	r0, [r7, #8]

    switch(type) {
 8018f68:	78fb      	ldrb	r3, [r7, #3]
 8018f6a:	2b04      	cmp	r3, #4
 8018f6c:	d82e      	bhi.n	8018fcc <lv_ta_get_style+0x7c>
 8018f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8018f74 <lv_ta_get_style+0x24>)
 8018f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f74:	08018f89 	.word	0x08018f89
 8018f78:	08018f95 	.word	0x08018f95
 8018f7c:	08018fad 	.word	0x08018fad
 8018f80:	08018fa1 	.word	0x08018fa1
 8018f84:	08018fb5 	.word	0x08018fb5
        case LV_TA_STYLE_BG: style = lv_page_get_style(ta, LV_PAGE_STYLE_BG); break;
 8018f88:	2100      	movs	r1, #0
 8018f8a:	6878      	ldr	r0, [r7, #4]
 8018f8c:	f7fd fa4e 	bl	801642c <lv_page_get_style>
 8018f90:	60f8      	str	r0, [r7, #12]
 8018f92:	e01f      	b.n	8018fd4 <lv_ta_get_style+0x84>
        case LV_TA_STYLE_SB: style = lv_page_get_style(ta, LV_PAGE_STYLE_SB); break;
 8018f94:	2102      	movs	r1, #2
 8018f96:	6878      	ldr	r0, [r7, #4]
 8018f98:	f7fd fa48 	bl	801642c <lv_page_get_style>
 8018f9c:	60f8      	str	r0, [r7, #12]
 8018f9e:	e019      	b.n	8018fd4 <lv_ta_get_style+0x84>
        case LV_TA_STYLE_EDGE_FLASH: style = lv_page_get_style(ta, LV_PAGE_STYLE_EDGE_FLASH); break;
 8018fa0:	2103      	movs	r1, #3
 8018fa2:	6878      	ldr	r0, [r7, #4]
 8018fa4:	f7fd fa42 	bl	801642c <lv_page_get_style>
 8018fa8:	60f8      	str	r0, [r7, #12]
 8018faa:	e013      	b.n	8018fd4 <lv_ta_get_style+0x84>
        case LV_TA_STYLE_CURSOR: style = ext->cursor.style; break;
 8018fac:	68bb      	ldr	r3, [r7, #8]
 8018fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018fb0:	60fb      	str	r3, [r7, #12]
 8018fb2:	e00f      	b.n	8018fd4 <lv_ta_get_style+0x84>
        case LV_TA_STYLE_PLACEHOLDER:
            if(ext->placeholder) style = lv_label_get_style(ext->placeholder, LV_LABEL_STYLE_MAIN);
 8018fb4:	68bb      	ldr	r3, [r7, #8]
 8018fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d00a      	beq.n	8018fd2 <lv_ta_get_style+0x82>
 8018fbc:	68bb      	ldr	r3, [r7, #8]
 8018fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018fc0:	2100      	movs	r1, #0
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	f7fe ff75 	bl	8017eb2 <lv_label_get_style>
 8018fc8:	60f8      	str	r0, [r7, #12]
            break;
 8018fca:	e002      	b.n	8018fd2 <lv_ta_get_style+0x82>
        default: style = NULL; break;
 8018fcc:	2300      	movs	r3, #0
 8018fce:	60fb      	str	r3, [r7, #12]
 8018fd0:	e000      	b.n	8018fd4 <lv_ta_get_style+0x84>
            break;
 8018fd2:	bf00      	nop
    }

    return style;
 8018fd4:	68fb      	ldr	r3, [r7, #12]
}
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	3710      	adds	r7, #16
 8018fda:	46bd      	mov	sp, r7
 8018fdc:	bd80      	pop	{r7, pc}
 8018fde:	bf00      	nop

08018fe0 <lv_ta_clear_selection>:
/**
 * Clear the selection on the text area.
 * @param ta Text area object
 */
void lv_ta_clear_selection(lv_obj_t * ta)
{
 8018fe0:	b480      	push	{r7}
 8018fe2:	b083      	sub	sp, #12
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]
        lv_label_set_text_sel_end(ext->label, LV_LABEL_TEXT_SEL_OFF);
    }
#else
    (void)ta; /*Unused*/
#endif
}
 8018fe8:	bf00      	nop
 8018fea:	370c      	adds	r7, #12
 8018fec:	46bd      	mov	sp, r7
 8018fee:	bc80      	pop	{r7}
 8018ff0:	4770      	bx	lr

08018ff2 <lv_ta_cursor_right>:
/**
 * Move the cursor one character right
 * @param ta pointer to a text area object
 */
void lv_ta_cursor_right(lv_obj_t * ta)
{
 8018ff2:	b580      	push	{r7, lr}
 8018ff4:	b084      	sub	sp, #16
 8018ff6:	af00      	add	r7, sp, #0
 8018ff8:	6078      	str	r0, [r7, #4]
    uint16_t cp = lv_ta_get_cursor_pos(ta);
 8018ffa:	6878      	ldr	r0, [r7, #4]
 8018ffc:	f7ff ff69 	bl	8018ed2 <lv_ta_get_cursor_pos>
 8019000:	4603      	mov	r3, r0
 8019002:	81fb      	strh	r3, [r7, #14]
    cp++;
 8019004:	89fb      	ldrh	r3, [r7, #14]
 8019006:	3301      	adds	r3, #1
 8019008:	81fb      	strh	r3, [r7, #14]
    lv_ta_set_cursor_pos(ta, cp);
 801900a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801900e:	4619      	mov	r1, r3
 8019010:	6878      	ldr	r0, [r7, #4]
 8019012:	f7ff fce3 	bl	80189dc <lv_ta_set_cursor_pos>
}
 8019016:	bf00      	nop
 8019018:	3710      	adds	r7, #16
 801901a:	46bd      	mov	sp, r7
 801901c:	bd80      	pop	{r7, pc}

0801901e <lv_ta_cursor_left>:
/**
 * Move the cursor one character left
 * @param ta pointer to a text area object
 */
void lv_ta_cursor_left(lv_obj_t * ta)
{
 801901e:	b580      	push	{r7, lr}
 8019020:	b084      	sub	sp, #16
 8019022:	af00      	add	r7, sp, #0
 8019024:	6078      	str	r0, [r7, #4]
    uint16_t cp = lv_ta_get_cursor_pos(ta);
 8019026:	6878      	ldr	r0, [r7, #4]
 8019028:	f7ff ff53 	bl	8018ed2 <lv_ta_get_cursor_pos>
 801902c:	4603      	mov	r3, r0
 801902e:	81fb      	strh	r3, [r7, #14]
    if(cp > 0) {
 8019030:	89fb      	ldrh	r3, [r7, #14]
 8019032:	2b00      	cmp	r3, #0
 8019034:	d008      	beq.n	8019048 <lv_ta_cursor_left+0x2a>
        cp--;
 8019036:	89fb      	ldrh	r3, [r7, #14]
 8019038:	3b01      	subs	r3, #1
 801903a:	81fb      	strh	r3, [r7, #14]
        lv_ta_set_cursor_pos(ta, cp);
 801903c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019040:	4619      	mov	r1, r3
 8019042:	6878      	ldr	r0, [r7, #4]
 8019044:	f7ff fcca 	bl	80189dc <lv_ta_set_cursor_pos>
    }
}
 8019048:	bf00      	nop
 801904a:	3710      	adds	r7, #16
 801904c:	46bd      	mov	sp, r7
 801904e:	bd80      	pop	{r7, pc}

08019050 <lv_ta_cursor_down>:
/**
 * Move the cursor one line down
 * @param ta pointer to a text area object
 */
void lv_ta_cursor_down(lv_obj_t * ta)
{
 8019050:	b590      	push	{r4, r7, lr}
 8019052:	b089      	sub	sp, #36	@ 0x24
 8019054:	af00      	add	r7, sp, #0
 8019056:	6078      	str	r0, [r7, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8019058:	6878      	ldr	r0, [r7, #4]
 801905a:	f7ed fc5d 	bl	8006918 <lv_obj_get_ext_attr>
 801905e:	61f8      	str	r0, [r7, #28]
    lv_point_t pos;

    /*Get the position of the current letter*/
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 8019060:	69fb      	ldr	r3, [r7, #28]
 8019062:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8019064:	6878      	ldr	r0, [r7, #4]
 8019066:	f7ff ff34 	bl	8018ed2 <lv_ta_get_cursor_pos>
 801906a:	4603      	mov	r3, r0
 801906c:	4619      	mov	r1, r3
 801906e:	f107 0308 	add.w	r3, r7, #8
 8019072:	461a      	mov	r2, r3
 8019074:	4620      	mov	r0, r4
 8019076:	f7fb fdcd 	bl	8014c14 <lv_label_get_letter_pos>

    /*Increment the y with one line and keep the valid x*/
    const lv_style_t * label_style = lv_obj_get_style(ext->label);
 801907a:	69fb      	ldr	r3, [r7, #28]
 801907c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801907e:	4618      	mov	r0, r3
 8019080:	f7ed fb34 	bl	80066ec <lv_obj_get_style>
 8019084:	61b8      	str	r0, [r7, #24]
    const lv_font_t * font_p       = label_style->text.font;
 8019086:	69bb      	ldr	r3, [r7, #24]
 8019088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801908a:	617b      	str	r3, [r7, #20]
    lv_coord_t font_h              = lv_font_get_line_height(font_p);
 801908c:	6978      	ldr	r0, [r7, #20]
 801908e:	f7fe fe93 	bl	8017db8 <lv_font_get_line_height>
 8019092:	4603      	mov	r3, r0
 8019094:	827b      	strh	r3, [r7, #18]
    pos.y += font_h + label_style->text.line_space + 1;
 8019096:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801909a:	b29a      	uxth	r2, r3
 801909c:	69bb      	ldr	r3, [r7, #24]
 801909e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 80190a2:	b299      	uxth	r1, r3
 80190a4:	8a7b      	ldrh	r3, [r7, #18]
 80190a6:	440b      	add	r3, r1
 80190a8:	b29b      	uxth	r3, r3
 80190aa:	4413      	add	r3, r2
 80190ac:	b29b      	uxth	r3, r3
 80190ae:	3301      	adds	r3, #1
 80190b0:	b29b      	uxth	r3, r3
 80190b2:	b21b      	sxth	r3, r3
 80190b4:	817b      	strh	r3, [r7, #10]
    pos.x = ext->cursor.valid_x;
 80190b6:	69fb      	ldr	r3, [r7, #28]
 80190b8:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 80190bc:	813b      	strh	r3, [r7, #8]

    /*Do not go below the last line*/
    if(pos.y < lv_obj_get_height(ext->label)) {
 80190be:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 80190c2:	69fb      	ldr	r3, [r7, #28]
 80190c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80190c6:	4618      	mov	r0, r3
 80190c8:	f7ed fab3 	bl	8006632 <lv_obj_get_height>
 80190cc:	4603      	mov	r3, r0
 80190ce:	429c      	cmp	r4, r3
 80190d0:	da17      	bge.n	8019102 <lv_ta_cursor_down+0xb2>
        /*Get the letter index on the new cursor position and set it*/
        uint16_t new_cur_pos = lv_label_get_letter_on(ext->label, &pos);
 80190d2:	69fb      	ldr	r3, [r7, #28]
 80190d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80190d6:	f107 0208 	add.w	r2, r7, #8
 80190da:	4611      	mov	r1, r2
 80190dc:	4618      	mov	r0, r3
 80190de:	f7fb fedb 	bl	8014e98 <lv_label_get_letter_on>
 80190e2:	4603      	mov	r3, r0
 80190e4:	823b      	strh	r3, [r7, #16]

        lv_coord_t cur_valid_x_tmp = ext->cursor.valid_x; /*Cursor position set overwrites the valid positon */
 80190e6:	69fb      	ldr	r3, [r7, #28]
 80190e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80190ec:	81fb      	strh	r3, [r7, #14]
        lv_ta_set_cursor_pos(ta, new_cur_pos);
 80190ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80190f2:	4619      	mov	r1, r3
 80190f4:	6878      	ldr	r0, [r7, #4]
 80190f6:	f7ff fc71 	bl	80189dc <lv_ta_set_cursor_pos>
        ext->cursor.valid_x = cur_valid_x_tmp;
 80190fa:	69fb      	ldr	r3, [r7, #28]
 80190fc:	89fa      	ldrh	r2, [r7, #14]
 80190fe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    }
}
 8019102:	bf00      	nop
 8019104:	3724      	adds	r7, #36	@ 0x24
 8019106:	46bd      	mov	sp, r7
 8019108:	bd90      	pop	{r4, r7, pc}

0801910a <lv_ta_cursor_up>:
/**
 * Move the cursor one line up
 * @param ta pointer to a text area object
 */
void lv_ta_cursor_up(lv_obj_t * ta)
{
 801910a:	b590      	push	{r4, r7, lr}
 801910c:	b089      	sub	sp, #36	@ 0x24
 801910e:	af00      	add	r7, sp, #0
 8019110:	6078      	str	r0, [r7, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8019112:	6878      	ldr	r0, [r7, #4]
 8019114:	f7ed fc00 	bl	8006918 <lv_obj_get_ext_attr>
 8019118:	61f8      	str	r0, [r7, #28]
    lv_point_t pos;

    /*Get the position of the current letter*/
    lv_label_get_letter_pos(ext->label, lv_ta_get_cursor_pos(ta), &pos);
 801911a:	69fb      	ldr	r3, [r7, #28]
 801911c:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 801911e:	6878      	ldr	r0, [r7, #4]
 8019120:	f7ff fed7 	bl	8018ed2 <lv_ta_get_cursor_pos>
 8019124:	4603      	mov	r3, r0
 8019126:	4619      	mov	r1, r3
 8019128:	f107 0308 	add.w	r3, r7, #8
 801912c:	461a      	mov	r2, r3
 801912e:	4620      	mov	r0, r4
 8019130:	f7fb fd70 	bl	8014c14 <lv_label_get_letter_pos>

    /*Decrement the y with one line and keep the valid x*/
    const lv_style_t * label_style = lv_obj_get_style(ext->label);
 8019134:	69fb      	ldr	r3, [r7, #28]
 8019136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019138:	4618      	mov	r0, r3
 801913a:	f7ed fad7 	bl	80066ec <lv_obj_get_style>
 801913e:	61b8      	str	r0, [r7, #24]
    const lv_font_t * font         = label_style->text.font;
 8019140:	69bb      	ldr	r3, [r7, #24]
 8019142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019144:	617b      	str	r3, [r7, #20]
    lv_coord_t font_h              = lv_font_get_line_height(font);
 8019146:	6978      	ldr	r0, [r7, #20]
 8019148:	f7fe fe36 	bl	8017db8 <lv_font_get_line_height>
 801914c:	4603      	mov	r3, r0
 801914e:	827b      	strh	r3, [r7, #18]
    pos.y -= font_h + label_style->text.line_space - 1;
 8019150:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019154:	b29a      	uxth	r2, r3
 8019156:	69bb      	ldr	r3, [r7, #24]
 8019158:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 801915c:	b299      	uxth	r1, r3
 801915e:	8a7b      	ldrh	r3, [r7, #18]
 8019160:	440b      	add	r3, r1
 8019162:	b29b      	uxth	r3, r3
 8019164:	1ad3      	subs	r3, r2, r3
 8019166:	b29b      	uxth	r3, r3
 8019168:	3301      	adds	r3, #1
 801916a:	b29b      	uxth	r3, r3
 801916c:	b21b      	sxth	r3, r3
 801916e:	817b      	strh	r3, [r7, #10]
    pos.x = ext->cursor.valid_x;
 8019170:	69fb      	ldr	r3, [r7, #28]
 8019172:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	@ 0x48
 8019176:	813b      	strh	r3, [r7, #8]

    /*Get the letter index on the new cursor position and set it*/
    uint16_t new_cur_pos       = lv_label_get_letter_on(ext->label, &pos);
 8019178:	69fb      	ldr	r3, [r7, #28]
 801917a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801917c:	f107 0208 	add.w	r2, r7, #8
 8019180:	4611      	mov	r1, r2
 8019182:	4618      	mov	r0, r3
 8019184:	f7fb fe88 	bl	8014e98 <lv_label_get_letter_on>
 8019188:	4603      	mov	r3, r0
 801918a:	823b      	strh	r3, [r7, #16]
    lv_coord_t cur_valid_x_tmp = ext->cursor.valid_x; /*Cursor position set overwrites the valid positon */
 801918c:	69fb      	ldr	r3, [r7, #28]
 801918e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019192:	81fb      	strh	r3, [r7, #14]
    lv_ta_set_cursor_pos(ta, new_cur_pos);
 8019194:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8019198:	4619      	mov	r1, r3
 801919a:	6878      	ldr	r0, [r7, #4]
 801919c:	f7ff fc1e 	bl	80189dc <lv_ta_set_cursor_pos>
    ext->cursor.valid_x = cur_valid_x_tmp;
 80191a0:	69fb      	ldr	r3, [r7, #28]
 80191a2:	89fa      	ldrh	r2, [r7, #14]
 80191a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
}
 80191a8:	bf00      	nop
 80191aa:	3724      	adds	r7, #36	@ 0x24
 80191ac:	46bd      	mov	sp, r7
 80191ae:	bd90      	pop	{r4, r7, pc}

080191b0 <lv_ta_design>:
 *             LV_DESIGN_DRAW_MAIN: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return true/false, depends on 'mode'
 */
static bool lv_ta_design(lv_obj_t * ta, const lv_area_t * mask, lv_design_mode_t mode)
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b084      	sub	sp, #16
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	60f8      	str	r0, [r7, #12]
 80191b8:	60b9      	str	r1, [r7, #8]
 80191ba:	4613      	mov	r3, r2
 80191bc:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 80191be:	79fb      	ldrb	r3, [r7, #7]
 80191c0:	2b02      	cmp	r3, #2
 80191c2:	d107      	bne.n	80191d4 <lv_ta_design+0x24>
        /*Return false if the object is not covers the mask_p area*/
        return ancestor_design(ta, mask, mode);
 80191c4:	4b0f      	ldr	r3, [pc, #60]	@ (8019204 <lv_ta_design+0x54>)
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	79fa      	ldrb	r2, [r7, #7]
 80191ca:	68b9      	ldr	r1, [r7, #8]
 80191cc:	68f8      	ldr	r0, [r7, #12]
 80191ce:	4798      	blx	r3
 80191d0:	4603      	mov	r3, r0
 80191d2:	e013      	b.n	80191fc <lv_ta_design+0x4c>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 80191d4:	79fb      	ldrb	r3, [r7, #7]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d106      	bne.n	80191e8 <lv_ta_design+0x38>
        /*Draw the object*/
        ancestor_design(ta, mask, mode);
 80191da:	4b0a      	ldr	r3, [pc, #40]	@ (8019204 <lv_ta_design+0x54>)
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	79fa      	ldrb	r2, [r7, #7]
 80191e0:	68b9      	ldr	r1, [r7, #8]
 80191e2:	68f8      	ldr	r0, [r7, #12]
 80191e4:	4798      	blx	r3
 80191e6:	e008      	b.n	80191fa <lv_ta_design+0x4a>

    } else if(mode == LV_DESIGN_DRAW_POST) {
 80191e8:	79fb      	ldrb	r3, [r7, #7]
 80191ea:	2b01      	cmp	r3, #1
 80191ec:	d105      	bne.n	80191fa <lv_ta_design+0x4a>
        ancestor_design(ta, mask, mode);
 80191ee:	4b05      	ldr	r3, [pc, #20]	@ (8019204 <lv_ta_design+0x54>)
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	79fa      	ldrb	r2, [r7, #7]
 80191f4:	68b9      	ldr	r1, [r7, #8]
 80191f6:	68f8      	ldr	r0, [r7, #12]
 80191f8:	4798      	blx	r3
    }
    return true;
 80191fa:	2301      	movs	r3, #1
}
 80191fc:	4618      	mov	r0, r3
 80191fe:	3710      	adds	r7, #16
 8019200:	46bd      	mov	sp, r7
 8019202:	bd80      	pop	{r7, pc}
 8019204:	2000ad9c 	.word	0x2000ad9c

08019208 <lv_ta_scrollable_design>:
 *             LV_DESIGN_DRAW_MAIN: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @return return true/false, depends on 'mode'
 */
static bool lv_ta_scrollable_design(lv_obj_t * scrl, const lv_area_t * mask, lv_design_mode_t mode)
{
 8019208:	b590      	push	{r4, r7, lr}
 801920a:	b0a3      	sub	sp, #140	@ 0x8c
 801920c:	af06      	add	r7, sp, #24
 801920e:	60f8      	str	r0, [r7, #12]
 8019210:	60b9      	str	r1, [r7, #8]
 8019212:	4613      	mov	r3, r2
 8019214:	71fb      	strb	r3, [r7, #7]
    if(mode == LV_DESIGN_COVER_CHK) {
 8019216:	79fb      	ldrb	r3, [r7, #7]
 8019218:	2b02      	cmp	r3, #2
 801921a:	d107      	bne.n	801922c <lv_ta_scrollable_design+0x24>
        /*Return false if the object is not covers the mask_p area*/
        return scrl_design(scrl, mask, mode);
 801921c:	4b96      	ldr	r3, [pc, #600]	@ (8019478 <lv_ta_scrollable_design+0x270>)
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	79fa      	ldrb	r2, [r7, #7]
 8019222:	68b9      	ldr	r1, [r7, #8]
 8019224:	68f8      	ldr	r0, [r7, #12]
 8019226:	4798      	blx	r3
 8019228:	4603      	mov	r3, r0
 801922a:	e121      	b.n	8019470 <lv_ta_scrollable_design+0x268>
    } else if(mode == LV_DESIGN_DRAW_MAIN) {
 801922c:	79fb      	ldrb	r3, [r7, #7]
 801922e:	2b00      	cmp	r3, #0
 8019230:	d106      	bne.n	8019240 <lv_ta_scrollable_design+0x38>
        /*Draw the object*/
        scrl_design(scrl, mask, mode);
 8019232:	4b91      	ldr	r3, [pc, #580]	@ (8019478 <lv_ta_scrollable_design+0x270>)
 8019234:	681b      	ldr	r3, [r3, #0]
 8019236:	79fa      	ldrb	r2, [r7, #7]
 8019238:	68b9      	ldr	r1, [r7, #8]
 801923a:	68f8      	ldr	r0, [r7, #12]
 801923c:	4798      	blx	r3
 801923e:	e116      	b.n	801946e <lv_ta_scrollable_design+0x266>
    } else if(mode == LV_DESIGN_DRAW_POST) {
 8019240:	79fb      	ldrb	r3, [r7, #7]
 8019242:	2b01      	cmp	r3, #1
 8019244:	f040 8113 	bne.w	801946e <lv_ta_scrollable_design+0x266>
        scrl_design(scrl, mask, mode);
 8019248:	4b8b      	ldr	r3, [pc, #556]	@ (8019478 <lv_ta_scrollable_design+0x270>)
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	79fa      	ldrb	r2, [r7, #7]
 801924e:	68b9      	ldr	r1, [r7, #8]
 8019250:	68f8      	ldr	r0, [r7, #12]
 8019252:	4798      	blx	r3

        /*Draw the cursor*/
        lv_obj_t * ta     = lv_obj_get_parent(scrl);
 8019254:	68f8      	ldr	r0, [r7, #12]
 8019256:	f7ed f975 	bl	8006544 <lv_obj_get_parent>
 801925a:	66f8      	str	r0, [r7, #108]	@ 0x6c
        lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801925c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801925e:	f7ed fb5b 	bl	8006918 <lv_obj_get_ext_attr>
 8019262:	66b8      	str	r0, [r7, #104]	@ 0x68

        if(ext->cursor.type == LV_CURSOR_NONE || (ext->cursor.type & LV_CURSOR_HIDDEN) || ext->cursor.state == 0) {
 8019264:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019266:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 801926a:	f003 030f 	and.w	r3, r3, #15
 801926e:	b2db      	uxtb	r3, r3
 8019270:	2b00      	cmp	r3, #0
 8019272:	d011      	beq.n	8019298 <lv_ta_scrollable_design+0x90>
 8019274:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019276:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 801927a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801927e:	b2db      	uxtb	r3, r3
 8019280:	f003 0308 	and.w	r3, r3, #8
 8019284:	2b00      	cmp	r3, #0
 8019286:	d107      	bne.n	8019298 <lv_ta_scrollable_design+0x90>
 8019288:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801928a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 801928e:	f003 0310 	and.w	r3, r3, #16
 8019292:	b2db      	uxtb	r3, r3
 8019294:	2b00      	cmp	r3, #0
 8019296:	d101      	bne.n	801929c <lv_ta_scrollable_design+0x94>
            return true; /*The cursor is not visible now*/
 8019298:	2301      	movs	r3, #1
 801929a:	e0e9      	b.n	8019470 <lv_ta_scrollable_design+0x268>
        }

        lv_style_t cur_style;
        get_cursor_style(ta, &cur_style);
 801929c:	f107 0314 	add.w	r3, r7, #20
 80192a0:	4619      	mov	r1, r3
 80192a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80192a4:	f000 fcc0 	bl	8019c28 <get_cursor_style>

        const char * txt = lv_label_get_text(ext->label);
 80192a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80192aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80192ac:	4618      	mov	r0, r3
 80192ae:	f7fb fc54 	bl	8014b5a <lv_label_get_text>
 80192b2:	6678      	str	r0, [r7, #100]	@ 0x64

        /*Draw he cursor according to the type*/
        lv_area_t cur_area;
        lv_area_copy(&cur_area, &ext->cursor.area);
 80192b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80192b6:	f103 024e 	add.w	r2, r3, #78	@ 0x4e
 80192ba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80192be:	4611      	mov	r1, r2
 80192c0:	4618      	mov	r0, r3
 80192c2:	f7fe fd84 	bl	8017dce <lv_area_copy>

        cur_area.x1 += ext->label->coords.x1;
 80192c6:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 80192ca:	b29a      	uxth	r2, r3
 80192cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80192ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80192d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80192d4:	b29b      	uxth	r3, r3
 80192d6:	4413      	add	r3, r2
 80192d8:	b29b      	uxth	r3, r3
 80192da:	b21b      	sxth	r3, r3
 80192dc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
        cur_area.y1 += ext->label->coords.y1;
 80192e0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 80192e4:	b29a      	uxth	r2, r3
 80192e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80192e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80192ea:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80192ee:	b29b      	uxth	r3, r3
 80192f0:	4413      	add	r3, r2
 80192f2:	b29b      	uxth	r3, r3
 80192f4:	b21b      	sxth	r3, r3
 80192f6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
        cur_area.x2 += ext->label->coords.x1;
 80192fa:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	@ 0x5c
 80192fe:	b29a      	uxth	r2, r3
 8019300:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019304:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8019308:	b29b      	uxth	r3, r3
 801930a:	4413      	add	r3, r2
 801930c:	b29b      	uxth	r3, r3
 801930e:	b21b      	sxth	r3, r3
 8019310:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
        cur_area.y2 += ext->label->coords.y1;
 8019314:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8019318:	b29a      	uxth	r2, r3
 801931a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801931c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801931e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8019322:	b29b      	uxth	r3, r3
 8019324:	4413      	add	r3, r2
 8019326:	b29b      	uxth	r3, r3
 8019328:	b21b      	sxth	r3, r3
 801932a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e

        lv_opa_t opa_scale = lv_obj_get_opa_scale(ta);
 801932e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8019330:	f7ed faa7 	bl	8006882 <lv_obj_get_opa_scale>
 8019334:	4603      	mov	r3, r0
 8019336:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

        if(ext->cursor.type == LV_CURSOR_LINE) {
 801933a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801933c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8019340:	f003 030f 	and.w	r3, r3, #15
 8019344:	b2db      	uxtb	r3, r3
 8019346:	2b01      	cmp	r3, #1
 8019348:	d109      	bne.n	801935e <lv_ta_scrollable_design+0x156>
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 801934a:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 801934e:	f107 0214 	add.w	r2, r7, #20
 8019352:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8019356:	68b9      	ldr	r1, [r7, #8]
 8019358:	f7f0 f888 	bl	800946c <lv_draw_rect>
 801935c:	e087      	b.n	801946e <lv_ta_scrollable_design+0x266>
        } else if(ext->cursor.type == LV_CURSOR_BLOCK) {
 801935e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8019360:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8019364:	f003 030f 	and.w	r3, r3, #15
 8019368:	b2db      	uxtb	r3, r3
 801936a:	2b02      	cmp	r3, #2
 801936c:	d154      	bne.n	8019418 <lv_ta_scrollable_design+0x210>
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 801936e:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8019372:	f107 0214 	add.w	r2, r7, #20
 8019376:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 801937a:	68b9      	ldr	r1, [r7, #8]
 801937c:	f7f0 f876 	bl	800946c <lv_draw_rect>

            char letter_buf[8] = {0};
 8019380:	2300      	movs	r3, #0
 8019382:	653b      	str	r3, [r7, #80]	@ 0x50
 8019384:	2300      	movs	r3, #0
 8019386:	657b      	str	r3, [r7, #84]	@ 0x54
            memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));
 8019388:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801938a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801938e:	461a      	mov	r2, r3
 8019390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019392:	189c      	adds	r4, r3, r2
 8019394:	4b39      	ldr	r3, [pc, #228]	@ (801947c <lv_ta_scrollable_design+0x274>)
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801939a:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 801939e:	4611      	mov	r1, r2
 80193a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80193a2:	440a      	add	r2, r1
 80193a4:	4610      	mov	r0, r2
 80193a6:	4798      	blx	r3
 80193a8:	4603      	mov	r3, r0
 80193aa:	461a      	mov	r2, r3
 80193ac:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80193b0:	4621      	mov	r1, r4
 80193b2:	4618      	mov	r0, r3
 80193b4:	f002 fb19 	bl	801b9ea <memcpy>

            cur_area.x1 += cur_style.body.padding.left;
 80193b8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 80193bc:	b29a      	uxth	r2, r3
 80193be:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80193c2:	b29b      	uxth	r3, r3
 80193c4:	4413      	add	r3, r2
 80193c6:	b29b      	uxth	r3, r3
 80193c8:	b21b      	sxth	r3, r3
 80193ca:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
            cur_area.y1 += cur_style.body.padding.top;
 80193ce:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 80193d2:	b29a      	uxth	r2, r3
 80193d4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80193d8:	b29b      	uxth	r3, r3
 80193da:	4413      	add	r3, r2
 80193dc:	b29b      	uxth	r3, r3
 80193de:	b21b      	sxth	r3, r3
 80193e0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
            lv_draw_label(&cur_area, mask, &cur_style, opa_scale, letter_buf, LV_TXT_FLAG_NONE, 0,
 80193e4:	f897 1063 	ldrb.w	r1, [r7, #99]	@ 0x63
 80193e8:	f107 0214 	add.w	r2, r7, #20
 80193ec:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80193f0:	2300      	movs	r3, #0
 80193f2:	9305      	str	r3, [sp, #20]
 80193f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80193f8:	9304      	str	r3, [sp, #16]
 80193fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80193fe:	9303      	str	r3, [sp, #12]
 8019400:	2300      	movs	r3, #0
 8019402:	9302      	str	r3, [sp, #8]
 8019404:	2300      	movs	r3, #0
 8019406:	9301      	str	r3, [sp, #4]
 8019408:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801940c:	9300      	str	r3, [sp, #0]
 801940e:	460b      	mov	r3, r1
 8019410:	68b9      	ldr	r1, [r7, #8]
 8019412:	f7ef fb9b 	bl	8008b4c <lv_draw_label>
 8019416:	e02a      	b.n	801946e <lv_ta_scrollable_design+0x266>
                          LV_LABEL_TEXT_SEL_OFF, LV_LABEL_TEXT_SEL_OFF, NULL);

        } else if(ext->cursor.type == LV_CURSOR_OUTLINE) {
 8019418:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801941a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 801941e:	f003 030f 	and.w	r3, r3, #15
 8019422:	b2db      	uxtb	r3, r3
 8019424:	2b03      	cmp	r3, #3
 8019426:	d111      	bne.n	801944c <lv_ta_scrollable_design+0x244>
            cur_style.body.opa = LV_OPA_TRANSP;
 8019428:	2300      	movs	r3, #0
 801942a:	773b      	strb	r3, [r7, #28]
            if(cur_style.body.border.width == 0) cur_style.body.border.width = 1; /*Be sure the border will be drawn*/
 801942c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019430:	2b00      	cmp	r3, #0
 8019432:	d101      	bne.n	8019438 <lv_ta_scrollable_design+0x230>
 8019434:	2301      	movs	r3, #1
 8019436:	843b      	strh	r3, [r7, #32]
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 8019438:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 801943c:	f107 0214 	add.w	r2, r7, #20
 8019440:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8019444:	68b9      	ldr	r1, [r7, #8]
 8019446:	f7f0 f811 	bl	800946c <lv_draw_rect>
 801944a:	e010      	b.n	801946e <lv_ta_scrollable_design+0x266>
        } else if(ext->cursor.type == LV_CURSOR_UNDERLINE) {
 801944c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801944e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8019452:	f003 030f 	and.w	r3, r3, #15
 8019456:	b2db      	uxtb	r3, r3
 8019458:	2b04      	cmp	r3, #4
 801945a:	d108      	bne.n	801946e <lv_ta_scrollable_design+0x266>
            lv_draw_rect(&cur_area, mask, &cur_style, opa_scale);
 801945c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8019460:	f107 0214 	add.w	r2, r7, #20
 8019464:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8019468:	68b9      	ldr	r1, [r7, #8]
 801946a:	f7ef ffff 	bl	800946c <lv_draw_rect>
        }
    }

    return true;
 801946e:	2301      	movs	r3, #1
}
 8019470:	4618      	mov	r0, r3
 8019472:	3774      	adds	r7, #116	@ 0x74
 8019474:	46bd      	mov	sp, r7
 8019476:	bd90      	pop	{r4, r7, pc}
 8019478:	2000ada0 	.word	0x2000ada0
 801947c:	20000c98 	.word	0x20000c98

08019480 <lv_ta_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_ta_signal(lv_obj_t * ta, lv_signal_t sign, void * param)
{
 8019480:	b590      	push	{r4, r7, lr}
 8019482:	b097      	sub	sp, #92	@ 0x5c
 8019484:	af00      	add	r7, sp, #0
 8019486:	60f8      	str	r0, [r7, #12]
 8019488:	460b      	mov	r3, r1
 801948a:	607a      	str	r2, [r7, #4]
 801948c:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(ta, sign, param);
 801948e:	4ba7      	ldr	r3, [pc, #668]	@ (801972c <lv_ta_signal+0x2ac>)
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	7af9      	ldrb	r1, [r7, #11]
 8019494:	687a      	ldr	r2, [r7, #4]
 8019496:	68f8      	ldr	r0, [r7, #12]
 8019498:	4798      	blx	r3
 801949a:	4603      	mov	r3, r0
 801949c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    if(res != LV_RES_OK) return res;
 80194a0:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80194a4:	2b01      	cmp	r3, #1
 80194a6:	d002      	beq.n	80194ae <lv_ta_signal+0x2e>
 80194a8:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80194ac:	e1f1      	b.n	8019892 <lv_ta_signal+0x412>

    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80194ae:	68f8      	ldr	r0, [r7, #12]
 80194b0:	f7ed fa32 	bl	8006918 <lv_obj_get_ext_attr>
 80194b4:	6538      	str	r0, [r7, #80]	@ 0x50
    if(sign == LV_SIGNAL_CLEANUP) {
 80194b6:	7afb      	ldrb	r3, [r7, #11]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d10a      	bne.n	80194d2 <lv_ta_signal+0x52>
        if(ext->pwd_tmp != NULL) lv_mem_free(ext->pwd_tmp);
 80194bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80194be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	f000 81e4 	beq.w	801988e <lv_ta_signal+0x40e>
 80194c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80194c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80194ca:	4618      	mov	r0, r3
 80194cc:	f7f6 fe32 	bl	8010134 <lv_mem_free>
 80194d0:	e1dd      	b.n	801988e <lv_ta_signal+0x40e>

        /* (The created label will be deleted automatically) */
    } else if(sign == LV_SIGNAL_STYLE_CHG) {
 80194d2:	7afb      	ldrb	r3, [r7, #11]
 80194d4:	2b04      	cmp	r3, #4
 80194d6:	d179      	bne.n	80195cc <lv_ta_signal+0x14c>
        if(ext->label) {
 80194d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80194da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80194dc:	2b00      	cmp	r3, #0
 80194de:	f000 81d6 	beq.w	801988e <lv_ta_signal+0x40e>
            lv_obj_t * scrl               = lv_page_get_scrl(ta);
 80194e2:	68f8      	ldr	r0, [r7, #12]
 80194e4:	f7fc ff4c 	bl	8016380 <lv_page_get_scrl>
 80194e8:	6278      	str	r0, [r7, #36]	@ 0x24
            const lv_style_t * style_ta   = lv_obj_get_style(ta);
 80194ea:	68f8      	ldr	r0, [r7, #12]
 80194ec:	f7ed f8fe 	bl	80066ec <lv_obj_get_style>
 80194f0:	6238      	str	r0, [r7, #32]
            const lv_style_t * style_scrl = lv_obj_get_style(scrl);
 80194f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80194f4:	f7ed f8fa 	bl	80066ec <lv_obj_get_style>
 80194f8:	61f8      	str	r0, [r7, #28]
            if(ext->one_line) {
 80194fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80194fc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8019500:	f003 0302 	and.w	r3, r3, #2
 8019504:	b2db      	uxtb	r3, r3
 8019506:	2b00      	cmp	r3, #0
 8019508:	d02b      	beq.n	8019562 <lv_ta_signal+0xe2>
                /*In one line mode refresh the Text Area height because 'vpad' can modify it*/
                const lv_style_t * style_label = lv_obj_get_style(ext->label);
 801950a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801950c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801950e:	4618      	mov	r0, r3
 8019510:	f7ed f8ec 	bl	80066ec <lv_obj_get_style>
 8019514:	61b8      	str	r0, [r7, #24]
                lv_coord_t font_h              = lv_font_get_line_height(style_label->text.font);
 8019516:	69bb      	ldr	r3, [r7, #24]
 8019518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801951a:	4618      	mov	r0, r3
 801951c:	f7fe fc4c 	bl	8017db8 <lv_font_get_line_height>
 8019520:	4603      	mov	r3, r0
 8019522:	82fb      	strh	r3, [r7, #22]
                lv_obj_set_height(ta, font_h + style_ta->body.padding.top + style_ta->body.padding.bottom +
 8019524:	6a3b      	ldr	r3, [r7, #32]
 8019526:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801952a:	b29a      	uxth	r2, r3
 801952c:	8afb      	ldrh	r3, [r7, #22]
 801952e:	4413      	add	r3, r2
 8019530:	b29a      	uxth	r2, r3
 8019532:	6a3b      	ldr	r3, [r7, #32]
 8019534:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8019538:	b29b      	uxth	r3, r3
 801953a:	4413      	add	r3, r2
 801953c:	b29a      	uxth	r2, r3
                                          style_scrl->body.padding.top + style_scrl->body.padding.bottom);
 801953e:	69fb      	ldr	r3, [r7, #28]
 8019540:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8019544:	b29b      	uxth	r3, r3
                lv_obj_set_height(ta, font_h + style_ta->body.padding.top + style_ta->body.padding.bottom +
 8019546:	4413      	add	r3, r2
 8019548:	b29a      	uxth	r2, r3
                                          style_scrl->body.padding.top + style_scrl->body.padding.bottom);
 801954a:	69fb      	ldr	r3, [r7, #28]
 801954c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8019550:	b29b      	uxth	r3, r3
 8019552:	4413      	add	r3, r2
 8019554:	b29b      	uxth	r3, r3
                lv_obj_set_height(ta, font_h + style_ta->body.padding.top + style_ta->body.padding.bottom +
 8019556:	b21b      	sxth	r3, r3
 8019558:	4619      	mov	r1, r3
 801955a:	68f8      	ldr	r0, [r7, #12]
 801955c:	f7ec f940 	bl	80057e0 <lv_obj_set_height>
 8019560:	e02d      	b.n	80195be <lv_ta_signal+0x13e>
            } else {
                /*In not one line mode refresh the Label width because 'hpad' can modify it*/
                lv_obj_set_width(ext->label, lv_page_get_fit_width(ta));
 8019562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019564:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8019566:	68f8      	ldr	r0, [r7, #12]
 8019568:	f7fc ff2f 	bl	80163ca <lv_page_get_fit_width>
 801956c:	4603      	mov	r3, r0
 801956e:	4619      	mov	r1, r3
 8019570:	4620      	mov	r0, r4
 8019572:	f7ec f920 	bl	80057b6 <lv_obj_set_width>
                lv_obj_set_pos(ext->label, style_scrl->body.padding.left,
 8019576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019578:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801957a:	69fb      	ldr	r3, [r7, #28]
 801957c:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
                               style_scrl->body.padding.right); /*Be sure the Label is in the correct position*/
 8019580:	69fb      	ldr	r3, [r7, #28]
 8019582:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
                lv_obj_set_pos(ext->label, style_scrl->body.padding.left,
 8019586:	461a      	mov	r2, r3
 8019588:	f7eb ffe7 	bl	800555a <lv_obj_set_pos>

                if(ext->placeholder) {
 801958c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801958e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019590:	2b00      	cmp	r3, #0
 8019592:	d014      	beq.n	80195be <lv_ta_signal+0x13e>
                    lv_obj_set_width(ext->placeholder, lv_page_get_fit_width(ta));
 8019594:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019596:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8019598:	68f8      	ldr	r0, [r7, #12]
 801959a:	f7fc ff16 	bl	80163ca <lv_page_get_fit_width>
 801959e:	4603      	mov	r3, r0
 80195a0:	4619      	mov	r1, r3
 80195a2:	4620      	mov	r0, r4
 80195a4:	f7ec f907 	bl	80057b6 <lv_obj_set_width>
                    lv_obj_set_pos(ext->placeholder, style_scrl->body.padding.left,
 80195a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80195aa:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80195ac:	69fb      	ldr	r3, [r7, #28]
 80195ae:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
                                   style_scrl->body.padding.top); /*Be sure the placeholder is in the correct position*/
 80195b2:	69fb      	ldr	r3, [r7, #28]
 80195b4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
                    lv_obj_set_pos(ext->placeholder, style_scrl->body.padding.left,
 80195b8:	461a      	mov	r2, r3
 80195ba:	f7eb ffce 	bl	800555a <lv_obj_set_pos>
                }
            }
            lv_label_set_text(ext->label, NULL);
 80195be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80195c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80195c2:	2100      	movs	r1, #0
 80195c4:	4618      	mov	r0, r3
 80195c6:	f7fb f957 	bl	8014878 <lv_label_set_text>
 80195ca:	e160      	b.n	801988e <lv_ta_signal+0x40e>
        }
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 80195cc:	7afb      	ldrb	r3, [r7, #11]
 80195ce:	2b02      	cmp	r3, #2
 80195d0:	f040 8083 	bne.w	80196da <lv_ta_signal+0x25a>
        /*Set the label width according to the text area width*/
        if(ext->label) {
 80195d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80195d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d03b      	beq.n	8019654 <lv_ta_signal+0x1d4>
            if(lv_obj_get_width(ta) != lv_area_get_width(param) || lv_obj_get_height(ta) != lv_area_get_height(param)) {
 80195dc:	68f8      	ldr	r0, [r7, #12]
 80195de:	f7ed f81a 	bl	8006616 <lv_obj_get_width>
 80195e2:	4603      	mov	r3, r0
 80195e4:	461c      	mov	r4, r3
 80195e6:	6878      	ldr	r0, [r7, #4]
 80195e8:	f7fe fbff 	bl	8017dea <lv_area_get_width>
 80195ec:	4603      	mov	r3, r0
 80195ee:	429c      	cmp	r4, r3
 80195f0:	d10a      	bne.n	8019608 <lv_ta_signal+0x188>
 80195f2:	68f8      	ldr	r0, [r7, #12]
 80195f4:	f7ed f81d 	bl	8006632 <lv_obj_get_height>
 80195f8:	4603      	mov	r3, r0
 80195fa:	461c      	mov	r4, r3
 80195fc:	6878      	ldr	r0, [r7, #4]
 80195fe:	f7fe fc0a 	bl	8017e16 <lv_area_get_height>
 8019602:	4603      	mov	r3, r0
 8019604:	429c      	cmp	r4, r3
 8019606:	d025      	beq.n	8019654 <lv_ta_signal+0x1d4>
                lv_obj_t * scrl               = lv_page_get_scrl(ta);
 8019608:	68f8      	ldr	r0, [r7, #12]
 801960a:	f7fc feb9 	bl	8016380 <lv_page_get_scrl>
 801960e:	6378      	str	r0, [r7, #52]	@ 0x34
                const lv_style_t * style_scrl = lv_obj_get_style(scrl);
 8019610:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8019612:	f7ed f86b 	bl	80066ec <lv_obj_get_style>
 8019616:	6338      	str	r0, [r7, #48]	@ 0x30
                lv_obj_set_width(ext->label, lv_page_get_fit_width(ta));
 8019618:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801961a:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 801961c:	68f8      	ldr	r0, [r7, #12]
 801961e:	f7fc fed4 	bl	80163ca <lv_page_get_fit_width>
 8019622:	4603      	mov	r3, r0
 8019624:	4619      	mov	r1, r3
 8019626:	4620      	mov	r0, r4
 8019628:	f7ec f8c5 	bl	80057b6 <lv_obj_set_width>
                lv_obj_set_pos(ext->label, style_scrl->body.padding.left, style_scrl->body.padding.top);
 801962c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801962e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8019630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019632:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 8019636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019638:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801963c:	461a      	mov	r2, r3
 801963e:	f7eb ff8c 	bl	800555a <lv_obj_set_pos>
                lv_label_set_text(ext->label, NULL); /*Refresh the label*/
 8019642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019646:	2100      	movs	r1, #0
 8019648:	4618      	mov	r0, r3
 801964a:	f7fb f915 	bl	8014878 <lv_label_set_text>

                refr_cursor_area(ta);
 801964e:	68f8      	ldr	r0, [r7, #12]
 8019650:	f000 fb3e 	bl	8019cd0 <refr_cursor_area>
            }
        }
        /*Set the placeholder width according to the text area width*/
        if(ext->placeholder) {
 8019654:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019658:	2b00      	cmp	r3, #0
 801965a:	f000 8118 	beq.w	801988e <lv_ta_signal+0x40e>
            if(lv_obj_get_width(ta) != lv_area_get_width(param) || lv_obj_get_height(ta) != lv_area_get_height(param)) {
 801965e:	68f8      	ldr	r0, [r7, #12]
 8019660:	f7ec ffd9 	bl	8006616 <lv_obj_get_width>
 8019664:	4603      	mov	r3, r0
 8019666:	461c      	mov	r4, r3
 8019668:	6878      	ldr	r0, [r7, #4]
 801966a:	f7fe fbbe 	bl	8017dea <lv_area_get_width>
 801966e:	4603      	mov	r3, r0
 8019670:	429c      	cmp	r4, r3
 8019672:	d10b      	bne.n	801968c <lv_ta_signal+0x20c>
 8019674:	68f8      	ldr	r0, [r7, #12]
 8019676:	f7ec ffdc 	bl	8006632 <lv_obj_get_height>
 801967a:	4603      	mov	r3, r0
 801967c:	461c      	mov	r4, r3
 801967e:	6878      	ldr	r0, [r7, #4]
 8019680:	f7fe fbc9 	bl	8017e16 <lv_area_get_height>
 8019684:	4603      	mov	r3, r0
 8019686:	429c      	cmp	r4, r3
 8019688:	f000 8101 	beq.w	801988e <lv_ta_signal+0x40e>
                lv_obj_t * scrl               = lv_page_get_scrl(ta);
 801968c:	68f8      	ldr	r0, [r7, #12]
 801968e:	f7fc fe77 	bl	8016380 <lv_page_get_scrl>
 8019692:	62f8      	str	r0, [r7, #44]	@ 0x2c
                const lv_style_t * style_scrl = lv_obj_get_style(scrl);
 8019694:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019696:	f7ed f829 	bl	80066ec <lv_obj_get_style>
 801969a:	62b8      	str	r0, [r7, #40]	@ 0x28
                lv_obj_set_width(ext->placeholder, lv_page_get_fit_width(ta));
 801969c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801969e:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80196a0:	68f8      	ldr	r0, [r7, #12]
 80196a2:	f7fc fe92 	bl	80163ca <lv_page_get_fit_width>
 80196a6:	4603      	mov	r3, r0
 80196a8:	4619      	mov	r1, r3
 80196aa:	4620      	mov	r0, r4
 80196ac:	f7ec f883 	bl	80057b6 <lv_obj_set_width>
                lv_obj_set_pos(ext->placeholder, style_scrl->body.padding.left, style_scrl->body.padding.top);
 80196b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80196b2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80196b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196b6:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 80196ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196bc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80196c0:	461a      	mov	r2, r3
 80196c2:	f7eb ff4a 	bl	800555a <lv_obj_set_pos>
                lv_label_set_text(ext->placeholder, NULL); /*Refresh the label*/
 80196c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80196c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80196ca:	2100      	movs	r1, #0
 80196cc:	4618      	mov	r0, r3
 80196ce:	f7fb f8d3 	bl	8014878 <lv_label_set_text>

                refr_cursor_area(ta);
 80196d2:	68f8      	ldr	r0, [r7, #12]
 80196d4:	f000 fafc 	bl	8019cd0 <refr_cursor_area>
 80196d8:	e0d9      	b.n	801988e <lv_ta_signal+0x40e>
            }
        }
    } else if(sign == LV_SIGNAL_CONTROL) {
 80196da:	7afb      	ldrb	r3, [r7, #11]
 80196dc:	2b11      	cmp	r3, #17
 80196de:	d144      	bne.n	801976a <lv_ta_signal+0x2ea>
        uint32_t c = *((uint32_t *)param); /*uint32_t because can be UTF-8*/
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	63bb      	str	r3, [r7, #56]	@ 0x38
        if(c == LV_KEY_RIGHT)
 80196e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196e8:	2b13      	cmp	r3, #19
 80196ea:	d103      	bne.n	80196f4 <lv_ta_signal+0x274>
            lv_ta_cursor_right(ta);
 80196ec:	68f8      	ldr	r0, [r7, #12]
 80196ee:	f7ff fc80 	bl	8018ff2 <lv_ta_cursor_right>
 80196f2:	e0cc      	b.n	801988e <lv_ta_signal+0x40e>
        else if(c == LV_KEY_LEFT)
 80196f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80196f6:	2b14      	cmp	r3, #20
 80196f8:	d103      	bne.n	8019702 <lv_ta_signal+0x282>
            lv_ta_cursor_left(ta);
 80196fa:	68f8      	ldr	r0, [r7, #12]
 80196fc:	f7ff fc8f 	bl	801901e <lv_ta_cursor_left>
 8019700:	e0c5      	b.n	801988e <lv_ta_signal+0x40e>
        else if(c == LV_KEY_UP)
 8019702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019704:	2b11      	cmp	r3, #17
 8019706:	d103      	bne.n	8019710 <lv_ta_signal+0x290>
            lv_ta_cursor_up(ta);
 8019708:	68f8      	ldr	r0, [r7, #12]
 801970a:	f7ff fcfe 	bl	801910a <lv_ta_cursor_up>
 801970e:	e0be      	b.n	801988e <lv_ta_signal+0x40e>
        else if(c == LV_KEY_DOWN)
 8019710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019712:	2b12      	cmp	r3, #18
 8019714:	d103      	bne.n	801971e <lv_ta_signal+0x29e>
            lv_ta_cursor_down(ta);
 8019716:	68f8      	ldr	r0, [r7, #12]
 8019718:	f7ff fc9a 	bl	8019050 <lv_ta_cursor_down>
 801971c:	e0b7      	b.n	801988e <lv_ta_signal+0x40e>
        else if(c == LV_KEY_BACKSPACE)
 801971e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019720:	2b08      	cmp	r3, #8
 8019722:	d105      	bne.n	8019730 <lv_ta_signal+0x2b0>
            lv_ta_del_char(ta);
 8019724:	68f8      	ldr	r0, [r7, #12]
 8019726:	f7fe ffa3 	bl	8018670 <lv_ta_del_char>
 801972a:	e0b0      	b.n	801988e <lv_ta_signal+0x40e>
 801972c:	2000ada4 	.word	0x2000ada4
        else if(c == LV_KEY_DEL)
 8019730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019732:	2b7f      	cmp	r3, #127	@ 0x7f
 8019734:	d103      	bne.n	801973e <lv_ta_signal+0x2be>
            lv_ta_del_char_forward(ta);
 8019736:	68f8      	ldr	r0, [r7, #12]
 8019738:	f7ff f864 	bl	8018804 <lv_ta_del_char_forward>
 801973c:	e0a7      	b.n	801988e <lv_ta_signal+0x40e>
        else if(c == LV_KEY_HOME)
 801973e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019740:	2b02      	cmp	r3, #2
 8019742:	d104      	bne.n	801974e <lv_ta_signal+0x2ce>
            lv_ta_set_cursor_pos(ta, 0);
 8019744:	2100      	movs	r1, #0
 8019746:	68f8      	ldr	r0, [r7, #12]
 8019748:	f7ff f948 	bl	80189dc <lv_ta_set_cursor_pos>
 801974c:	e09f      	b.n	801988e <lv_ta_signal+0x40e>
        else if(c == LV_KEY_END)
 801974e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019750:	2b03      	cmp	r3, #3
 8019752:	d105      	bne.n	8019760 <lv_ta_signal+0x2e0>
            lv_ta_set_cursor_pos(ta, LV_TA_CURSOR_LAST);
 8019754:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8019758:	68f8      	ldr	r0, [r7, #12]
 801975a:	f7ff f93f 	bl	80189dc <lv_ta_set_cursor_pos>
 801975e:	e096      	b.n	801988e <lv_ta_signal+0x40e>
        else {
            lv_ta_add_char(ta, c);
 8019760:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019762:	68f8      	ldr	r0, [r7, #12]
 8019764:	f7fe fd8a 	bl	801827c <lv_ta_add_char>
 8019768:	e091      	b.n	801988e <lv_ta_signal+0x40e>
        }
    } else if(sign == LV_SIGNAL_GET_EDITABLE) {
 801976a:	7afb      	ldrb	r3, [r7, #11]
 801976c:	2b12      	cmp	r3, #18
 801976e:	d105      	bne.n	801977c <lv_ta_signal+0x2fc>
        bool * editable = (bool *)param;
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        *editable       = true;
 8019774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019776:	2201      	movs	r2, #1
 8019778:	701a      	strb	r2, [r3, #0]
 801977a:	e088      	b.n	801988e <lv_ta_signal+0x40e>
    } else if(sign == LV_SIGNAL_GET_TYPE) {
 801977c:	7afb      	ldrb	r3, [r7, #11]
 801977e:	2b06      	cmp	r3, #6
 8019780:	d11e      	bne.n	80197c0 <lv_ta_signal+0x340>
        lv_obj_type_t * buf = param;
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	643b      	str	r3, [r7, #64]	@ 0x40
        uint8_t i;
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 8019786:	2300      	movs	r3, #0
 8019788:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 801978c:	e00b      	b.n	80197a6 <lv_ta_signal+0x326>
            if(buf->type[i] == NULL) break;
 801978e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8019792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d009      	beq.n	80197b0 <lv_ta_signal+0x330>
        for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
 801979c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80197a0:	3301      	adds	r3, #1
 80197a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80197a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80197aa:	2b06      	cmp	r3, #6
 80197ac:	d9ef      	bls.n	801978e <lv_ta_signal+0x30e>
 80197ae:	e000      	b.n	80197b2 <lv_ta_signal+0x332>
            if(buf->type[i] == NULL) break;
 80197b0:	bf00      	nop
        }
        buf->type[i] = "lv_ta";
 80197b2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80197b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80197b8:	4938      	ldr	r1, [pc, #224]	@ (801989c <lv_ta_signal+0x41c>)
 80197ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80197be:	e066      	b.n	801988e <lv_ta_signal+0x40e>
    } else if(sign == LV_SIGNAL_DEFOCUS) {
 80197c0:	7afb      	ldrb	r3, [r7, #11]
 80197c2:	2b10      	cmp	r3, #16
 80197c4:	d10f      	bne.n	80197e6 <lv_ta_signal+0x366>
        lv_cursor_type_t cur_type;
        cur_type = lv_ta_get_cursor_type(ta);
 80197c6:	68f8      	ldr	r0, [r7, #12]
 80197c8:	f7ff fb92 	bl	8018ef0 <lv_ta_get_cursor_type>
 80197cc:	4603      	mov	r3, r0
 80197ce:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
        lv_ta_set_cursor_type(ta, cur_type | LV_CURSOR_HIDDEN);
 80197d2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80197d6:	f043 0308 	orr.w	r3, r3, #8
 80197da:	b2db      	uxtb	r3, r3
 80197dc:	4619      	mov	r1, r3
 80197de:	68f8      	ldr	r0, [r7, #12]
 80197e0:	f7ff fa32 	bl	8018c48 <lv_ta_set_cursor_type>
 80197e4:	e053      	b.n	801988e <lv_ta_signal+0x40e>
    } else if(sign == LV_SIGNAL_FOCUS) {
 80197e6:	7afb      	ldrb	r3, [r7, #11]
 80197e8:	2b0f      	cmp	r3, #15
 80197ea:	d13e      	bne.n	801986a <lv_ta_signal+0x3ea>
#if LV_USE_GROUP
        lv_cursor_type_t cur_type;
        cur_type                   = lv_ta_get_cursor_type(ta);
 80197ec:	68f8      	ldr	r0, [r7, #12]
 80197ee:	f7ff fb7f 	bl	8018ef0 <lv_ta_get_cursor_type>
 80197f2:	4603      	mov	r3, r0
 80197f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        lv_group_t * g             = lv_obj_get_group(ta);
 80197f8:	68f8      	ldr	r0, [r7, #12]
 80197fa:	f7ed f898 	bl	800692e <lv_obj_get_group>
 80197fe:	64b8      	str	r0, [r7, #72]	@ 0x48
        bool editing               = lv_group_get_editing(g);
 8019800:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8019802:	f7e9 fa66 	bl	8002cd2 <lv_group_get_editing>
 8019806:	4603      	mov	r3, r0
 8019808:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        lv_indev_type_t indev_type = lv_indev_get_type(lv_indev_get_act());
 801980c:	f7e9 fc64 	bl	80030d8 <lv_indev_get_act>
 8019810:	4603      	mov	r3, r0
 8019812:	4618      	mov	r0, r3
 8019814:	f7e9 fc6a 	bl	80030ec <lv_indev_get_type>
 8019818:	4603      	mov	r3, r0
 801981a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        /*Encoders need special handling*/
        if(indev_type == LV_INDEV_TYPE_ENCODER) {
 801981e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8019822:	2b04      	cmp	r3, #4
 8019824:	d117      	bne.n	8019856 <lv_ta_signal+0x3d6>
            if(editing)
 8019826:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801982a:	2b00      	cmp	r3, #0
 801982c:	d009      	beq.n	8019842 <lv_ta_signal+0x3c2>
                lv_ta_set_cursor_type(ta, cur_type & (~LV_CURSOR_HIDDEN));
 801982e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8019832:	f023 0308 	bic.w	r3, r3, #8
 8019836:	b2db      	uxtb	r3, r3
 8019838:	4619      	mov	r1, r3
 801983a:	68f8      	ldr	r0, [r7, #12]
 801983c:	f7ff fa04 	bl	8018c48 <lv_ta_set_cursor_type>
 8019840:	e025      	b.n	801988e <lv_ta_signal+0x40e>
            else
                lv_ta_set_cursor_type(ta, cur_type | LV_CURSOR_HIDDEN);
 8019842:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8019846:	f043 0308 	orr.w	r3, r3, #8
 801984a:	b2db      	uxtb	r3, r3
 801984c:	4619      	mov	r1, r3
 801984e:	68f8      	ldr	r0, [r7, #12]
 8019850:	f7ff f9fa 	bl	8018c48 <lv_ta_set_cursor_type>
 8019854:	e01b      	b.n	801988e <lv_ta_signal+0x40e>
        } else {
            lv_ta_set_cursor_type(ta, cur_type & (~LV_CURSOR_HIDDEN));
 8019856:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801985a:	f023 0308 	bic.w	r3, r3, #8
 801985e:	b2db      	uxtb	r3, r3
 8019860:	4619      	mov	r1, r3
 8019862:	68f8      	ldr	r0, [r7, #12]
 8019864:	f7ff f9f0 	bl	8018c48 <lv_ta_set_cursor_type>
 8019868:	e011      	b.n	801988e <lv_ta_signal+0x40e>
        }
#endif
    } else if(sign == LV_SIGNAL_PRESSED || sign == LV_SIGNAL_PRESSING || sign == LV_SIGNAL_PRESS_LOST ||
 801986a:	7afb      	ldrb	r3, [r7, #11]
 801986c:	2b07      	cmp	r3, #7
 801986e:	d008      	beq.n	8019882 <lv_ta_signal+0x402>
 8019870:	7afb      	ldrb	r3, [r7, #11]
 8019872:	2b08      	cmp	r3, #8
 8019874:	d005      	beq.n	8019882 <lv_ta_signal+0x402>
 8019876:	7afb      	ldrb	r3, [r7, #11]
 8019878:	2b09      	cmp	r3, #9
 801987a:	d002      	beq.n	8019882 <lv_ta_signal+0x402>
 801987c:	7afb      	ldrb	r3, [r7, #11]
 801987e:	2b0a      	cmp	r3, #10
 8019880:	d105      	bne.n	801988e <lv_ta_signal+0x40e>
              sign == LV_SIGNAL_RELEASED) {
        update_cursor_position_on_click(ta, sign, (lv_indev_t *)param);
 8019882:	7afb      	ldrb	r3, [r7, #11]
 8019884:	687a      	ldr	r2, [r7, #4]
 8019886:	4619      	mov	r1, r3
 8019888:	68f8      	ldr	r0, [r7, #12]
 801988a:	f000 fce1 	bl	801a250 <update_cursor_position_on_click>
    }
    return res;
 801988e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
}
 8019892:	4618      	mov	r0, r3
 8019894:	375c      	adds	r7, #92	@ 0x5c
 8019896:	46bd      	mov	sp, r7
 8019898:	bd90      	pop	{r4, r7, pc}
 801989a:	bf00      	nop
 801989c:	0801c850 	.word	0x0801c850

080198a0 <lv_ta_scrollable_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_ta_scrollable_signal(lv_obj_t * scrl, lv_signal_t sign, void * param)
{
 80198a0:	b590      	push	{r4, r7, lr}
 80198a2:	b08b      	sub	sp, #44	@ 0x2c
 80198a4:	af00      	add	r7, sp, #0
 80198a6:	60f8      	str	r0, [r7, #12]
 80198a8:	460b      	mov	r3, r1
 80198aa:	607a      	str	r2, [r7, #4]
 80198ac:	72fb      	strb	r3, [r7, #11]
    lv_res_t res;

    /* Include the ancient signal function */
    res = scrl_signal(scrl, sign, param);
 80198ae:	4b48      	ldr	r3, [pc, #288]	@ (80199d0 <lv_ta_scrollable_signal+0x130>)
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	7af9      	ldrb	r1, [r7, #11]
 80198b4:	687a      	ldr	r2, [r7, #4]
 80198b6:	68f8      	ldr	r0, [r7, #12]
 80198b8:	4798      	blx	r3
 80198ba:	4603      	mov	r3, r0
 80198bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if(res != LV_RES_OK) return res;
 80198c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80198c4:	2b01      	cmp	r3, #1
 80198c6:	d002      	beq.n	80198ce <lv_ta_scrollable_signal+0x2e>
 80198c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80198cc:	e07c      	b.n	80199c8 <lv_ta_scrollable_signal+0x128>

    lv_obj_t * ta     = lv_obj_get_parent(scrl);
 80198ce:	68f8      	ldr	r0, [r7, #12]
 80198d0:	f7ec fe38 	bl	8006544 <lv_obj_get_parent>
 80198d4:	6238      	str	r0, [r7, #32]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80198d6:	6a38      	ldr	r0, [r7, #32]
 80198d8:	f7ed f81e 	bl	8006918 <lv_obj_get_ext_attr>
 80198dc:	61f8      	str	r0, [r7, #28]

    if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
 80198de:	7afb      	ldrb	r3, [r7, #11]
 80198e0:	2b05      	cmp	r3, #5
 80198e2:	d11d      	bne.n	8019920 <lv_ta_scrollable_signal+0x80>
        /*Set ext. size because the cursor might be out of this object*/
        const lv_style_t * style_label = lv_obj_get_style(ext->label);
 80198e4:	69fb      	ldr	r3, [r7, #28]
 80198e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80198e8:	4618      	mov	r0, r3
 80198ea:	f7ec feff 	bl	80066ec <lv_obj_get_style>
 80198ee:	6178      	str	r0, [r7, #20]
        lv_coord_t font_h              = lv_font_get_line_height(style_label->text.font);
 80198f0:	697b      	ldr	r3, [r7, #20]
 80198f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80198f4:	4618      	mov	r0, r3
 80198f6:	f7fe fa5f 	bl	8017db8 <lv_font_get_line_height>
 80198fa:	4603      	mov	r3, r0
 80198fc:	827b      	strh	r3, [r7, #18]
        scrl->ext_draw_pad             = LV_MATH_MAX(scrl->ext_draw_pad, style_label->text.line_space + font_h);
 80198fe:	697b      	ldr	r3, [r7, #20]
 8019900:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8019904:	461a      	mov	r2, r3
 8019906:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801990a:	4413      	add	r3, r2
 801990c:	68fa      	ldr	r2, [r7, #12]
 801990e:	f9b2 2034 	ldrsh.w	r2, [r2, #52]	@ 0x34
 8019912:	4293      	cmp	r3, r2
 8019914:	bfb8      	it	lt
 8019916:	4613      	movlt	r3, r2
 8019918:	b21a      	sxth	r2, r3
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	869a      	strh	r2, [r3, #52]	@ 0x34
 801991e:	e051      	b.n	80199c4 <lv_ta_scrollable_signal+0x124>
    } else if(sign == LV_SIGNAL_CORD_CHG) {
 8019920:	7afb      	ldrb	r3, [r7, #11]
 8019922:	2b02      	cmp	r3, #2
 8019924:	d13c      	bne.n	80199a0 <lv_ta_scrollable_signal+0x100>
        /*Set the label width according to the text area width*/
        if(ext->label) {
 8019926:	69fb      	ldr	r3, [r7, #28]
 8019928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801992a:	2b00      	cmp	r3, #0
 801992c:	d04a      	beq.n	80199c4 <lv_ta_scrollable_signal+0x124>
            if(lv_obj_get_width(scrl) != lv_area_get_width(param) ||
 801992e:	68f8      	ldr	r0, [r7, #12]
 8019930:	f7ec fe71 	bl	8006616 <lv_obj_get_width>
 8019934:	4603      	mov	r3, r0
 8019936:	461c      	mov	r4, r3
 8019938:	6878      	ldr	r0, [r7, #4]
 801993a:	f7fe fa56 	bl	8017dea <lv_area_get_width>
 801993e:	4603      	mov	r3, r0
 8019940:	429c      	cmp	r4, r3
 8019942:	d10a      	bne.n	801995a <lv_ta_scrollable_signal+0xba>
               lv_obj_get_height(scrl) != lv_area_get_height(param)) {
 8019944:	68f8      	ldr	r0, [r7, #12]
 8019946:	f7ec fe74 	bl	8006632 <lv_obj_get_height>
 801994a:	4603      	mov	r3, r0
 801994c:	461c      	mov	r4, r3
 801994e:	6878      	ldr	r0, [r7, #4]
 8019950:	f7fe fa61 	bl	8017e16 <lv_area_get_height>
 8019954:	4603      	mov	r3, r0
            if(lv_obj_get_width(scrl) != lv_area_get_width(param) ||
 8019956:	429c      	cmp	r4, r3
 8019958:	d034      	beq.n	80199c4 <lv_ta_scrollable_signal+0x124>

                const lv_style_t * style_scrl = lv_obj_get_style(scrl);
 801995a:	68f8      	ldr	r0, [r7, #12]
 801995c:	f7ec fec6 	bl	80066ec <lv_obj_get_style>
 8019960:	61b8      	str	r0, [r7, #24]
                lv_obj_set_width(ext->label, lv_page_get_fit_width(ta));
 8019962:	69fb      	ldr	r3, [r7, #28]
 8019964:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8019966:	6a38      	ldr	r0, [r7, #32]
 8019968:	f7fc fd2f 	bl	80163ca <lv_page_get_fit_width>
 801996c:	4603      	mov	r3, r0
 801996e:	4619      	mov	r1, r3
 8019970:	4620      	mov	r0, r4
 8019972:	f7eb ff20 	bl	80057b6 <lv_obj_set_width>
                lv_obj_set_pos(ext->label, style_scrl->body.padding.left, style_scrl->body.padding.top);
 8019976:	69fb      	ldr	r3, [r7, #28]
 8019978:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801997a:	69bb      	ldr	r3, [r7, #24]
 801997c:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 8019980:	69bb      	ldr	r3, [r7, #24]
 8019982:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8019986:	461a      	mov	r2, r3
 8019988:	f7eb fde7 	bl	800555a <lv_obj_set_pos>
                lv_label_set_text(ext->label, NULL); /*Refresh the label*/
 801998c:	69fb      	ldr	r3, [r7, #28]
 801998e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019990:	2100      	movs	r1, #0
 8019992:	4618      	mov	r0, r3
 8019994:	f7fa ff70 	bl	8014878 <lv_label_set_text>

                refr_cursor_area(ta);
 8019998:	6a38      	ldr	r0, [r7, #32]
 801999a:	f000 f999 	bl	8019cd0 <refr_cursor_area>
 801999e:	e011      	b.n	80199c4 <lv_ta_scrollable_signal+0x124>
            }
        }
    } else if(sign == LV_SIGNAL_PRESSING || sign == LV_SIGNAL_PRESSED || sign == LV_SIGNAL_PRESS_LOST ||
 80199a0:	7afb      	ldrb	r3, [r7, #11]
 80199a2:	2b08      	cmp	r3, #8
 80199a4:	d008      	beq.n	80199b8 <lv_ta_scrollable_signal+0x118>
 80199a6:	7afb      	ldrb	r3, [r7, #11]
 80199a8:	2b07      	cmp	r3, #7
 80199aa:	d005      	beq.n	80199b8 <lv_ta_scrollable_signal+0x118>
 80199ac:	7afb      	ldrb	r3, [r7, #11]
 80199ae:	2b09      	cmp	r3, #9
 80199b0:	d002      	beq.n	80199b8 <lv_ta_scrollable_signal+0x118>
 80199b2:	7afb      	ldrb	r3, [r7, #11]
 80199b4:	2b0a      	cmp	r3, #10
 80199b6:	d105      	bne.n	80199c4 <lv_ta_scrollable_signal+0x124>
              sign == LV_SIGNAL_RELEASED) {
        update_cursor_position_on_click(ta, sign, (lv_indev_t *)param);
 80199b8:	7afb      	ldrb	r3, [r7, #11]
 80199ba:	687a      	ldr	r2, [r7, #4]
 80199bc:	4619      	mov	r1, r3
 80199be:	6a38      	ldr	r0, [r7, #32]
 80199c0:	f000 fc46 	bl	801a250 <update_cursor_position_on_click>
    }

    return res;
 80199c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80199c8:	4618      	mov	r0, r3
 80199ca:	372c      	adds	r7, #44	@ 0x2c
 80199cc:	46bd      	mov	sp, r7
 80199ce:	bd90      	pop	{r4, r7, pc}
 80199d0:	2000ada8 	.word	0x2000ada8

080199d4 <cursor_blink_anim>:
 * Called to blink the cursor
 * @param ta pointer to a text area
 * @param hide 1: hide the cursor, 0: show it
 */
static void cursor_blink_anim(lv_obj_t * ta, lv_anim_value_t show)
{
 80199d4:	b580      	push	{r7, lr}
 80199d6:	b086      	sub	sp, #24
 80199d8:	af00      	add	r7, sp, #0
 80199da:	6078      	str	r0, [r7, #4]
 80199dc:	460b      	mov	r3, r1
 80199de:	807b      	strh	r3, [r7, #2]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 80199e0:	6878      	ldr	r0, [r7, #4]
 80199e2:	f7ec ff99 	bl	8006918 <lv_obj_get_ext_attr>
 80199e6:	6178      	str	r0, [r7, #20]
    if(show != ext->cursor.state) {
 80199e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80199ec:	697a      	ldr	r2, [r7, #20]
 80199ee:	f892 2058 	ldrb.w	r2, [r2, #88]	@ 0x58
 80199f2:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80199f6:	b2d2      	uxtb	r2, r2
 80199f8:	4293      	cmp	r3, r2
 80199fa:	d062      	beq.n	8019ac2 <cursor_blink_anim+0xee>
        ext->cursor.state = show == 0 ? 0 : 1;
 80199fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	bf14      	ite	ne
 8019a04:	2301      	movne	r3, #1
 8019a06:	2300      	moveq	r3, #0
 8019a08:	b2d9      	uxtb	r1, r3
 8019a0a:	697a      	ldr	r2, [r7, #20]
 8019a0c:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 8019a10:	f361 1304 	bfi	r3, r1, #4, #1
 8019a14:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
        if(ext->cursor.type != LV_CURSOR_NONE && (ext->cursor.type & LV_CURSOR_HIDDEN) == 0) {
 8019a18:	697b      	ldr	r3, [r7, #20]
 8019a1a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8019a1e:	f003 030f 	and.w	r3, r3, #15
 8019a22:	b2db      	uxtb	r3, r3
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d04c      	beq.n	8019ac2 <cursor_blink_anim+0xee>
 8019a28:	697b      	ldr	r3, [r7, #20]
 8019a2a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8019a2e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8019a32:	b2db      	uxtb	r3, r3
 8019a34:	f003 0308 	and.w	r3, r3, #8
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d142      	bne.n	8019ac2 <cursor_blink_anim+0xee>
            lv_disp_t * disp = lv_obj_get_disp(ta);
 8019a3c:	6878      	ldr	r0, [r7, #4]
 8019a3e:	f7ec fd47 	bl	80064d0 <lv_obj_get_disp>
 8019a42:	6138      	str	r0, [r7, #16]
            lv_area_t area_tmp;
            lv_area_copy(&area_tmp, &ext->cursor.area);
 8019a44:	697b      	ldr	r3, [r7, #20]
 8019a46:	f103 024e 	add.w	r2, r3, #78	@ 0x4e
 8019a4a:	f107 0308 	add.w	r3, r7, #8
 8019a4e:	4611      	mov	r1, r2
 8019a50:	4618      	mov	r0, r3
 8019a52:	f7fe f9bc 	bl	8017dce <lv_area_copy>
            area_tmp.x1 += ext->label->coords.x1;
 8019a56:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019a5a:	b29a      	uxth	r2, r3
 8019a5c:	697b      	ldr	r3, [r7, #20]
 8019a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019a60:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8019a64:	b29b      	uxth	r3, r3
 8019a66:	4413      	add	r3, r2
 8019a68:	b29b      	uxth	r3, r3
 8019a6a:	b21b      	sxth	r3, r3
 8019a6c:	813b      	strh	r3, [r7, #8]
            area_tmp.y1 += ext->label->coords.y1;
 8019a6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019a72:	b29a      	uxth	r2, r3
 8019a74:	697b      	ldr	r3, [r7, #20]
 8019a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019a78:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8019a7c:	b29b      	uxth	r3, r3
 8019a7e:	4413      	add	r3, r2
 8019a80:	b29b      	uxth	r3, r3
 8019a82:	b21b      	sxth	r3, r3
 8019a84:	817b      	strh	r3, [r7, #10]
            area_tmp.x2 += ext->label->coords.x1;
 8019a86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8019a8a:	b29a      	uxth	r2, r3
 8019a8c:	697b      	ldr	r3, [r7, #20]
 8019a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019a90:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8019a94:	b29b      	uxth	r3, r3
 8019a96:	4413      	add	r3, r2
 8019a98:	b29b      	uxth	r3, r3
 8019a9a:	b21b      	sxth	r3, r3
 8019a9c:	81bb      	strh	r3, [r7, #12]
            area_tmp.y2 += ext->label->coords.y1;
 8019a9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019aa2:	b29a      	uxth	r2, r3
 8019aa4:	697b      	ldr	r3, [r7, #20]
 8019aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019aa8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8019aac:	b29b      	uxth	r3, r3
 8019aae:	4413      	add	r3, r2
 8019ab0:	b29b      	uxth	r3, r3
 8019ab2:	b21b      	sxth	r3, r3
 8019ab4:	81fb      	strh	r3, [r7, #14]
            lv_inv_area(disp, &area_tmp);
 8019ab6:	f107 0308 	add.w	r3, r7, #8
 8019aba:	4619      	mov	r1, r3
 8019abc:	6938      	ldr	r0, [r7, #16]
 8019abe:	f7ed f981 	bl	8006dc4 <lv_inv_area>
        }
    }
}
 8019ac2:	bf00      	nop
 8019ac4:	3718      	adds	r7, #24
 8019ac6:	46bd      	mov	sp, r7
 8019ac8:	bd80      	pop	{r7, pc}

08019aca <pwd_char_hider_anim>:
 * (pwd_char_hider callback do the real job)
 * @param ta unused
 * @param x unused
 */
static void pwd_char_hider_anim(lv_obj_t * ta, lv_anim_value_t x)
{
 8019aca:	b480      	push	{r7}
 8019acc:	b083      	sub	sp, #12
 8019ace:	af00      	add	r7, sp, #0
 8019ad0:	6078      	str	r0, [r7, #4]
 8019ad2:	460b      	mov	r3, r1
 8019ad4:	807b      	strh	r3, [r7, #2]
    (void)ta;
    (void)x;
}
 8019ad6:	bf00      	nop
 8019ad8:	370c      	adds	r7, #12
 8019ada:	46bd      	mov	sp, r7
 8019adc:	bc80      	pop	{r7}
 8019ade:	4770      	bx	lr

08019ae0 <pwd_char_hider_anim_ready>:
/**
 * Call when an animation is ready to convert all characters to '*'
 * @param a pointer to the animation
 */
static void pwd_char_hider_anim_ready(lv_anim_t * a)
{
 8019ae0:	b580      	push	{r7, lr}
 8019ae2:	b084      	sub	sp, #16
 8019ae4:	af00      	add	r7, sp, #0
 8019ae6:	6078      	str	r0, [r7, #4]
    lv_obj_t * ta = a->var;
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	60fb      	str	r3, [r7, #12]
    pwd_char_hider(ta);
 8019aee:	68f8      	ldr	r0, [r7, #12]
 8019af0:	f000 f804 	bl	8019afc <pwd_char_hider>
}
 8019af4:	bf00      	nop
 8019af6:	3710      	adds	r7, #16
 8019af8:	46bd      	mov	sp, r7
 8019afa:	bd80      	pop	{r7, pc}

08019afc <pwd_char_hider>:
/**
 * Hide all characters (convert them to '*')
 * @param ta: pointer to text area object
 */
static void pwd_char_hider(lv_obj_t * ta)
{
 8019afc:	b580      	push	{r7, lr}
 8019afe:	b086      	sub	sp, #24
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	6078      	str	r0, [r7, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8019b04:	6878      	ldr	r0, [r7, #4]
 8019b06:	f7ec ff07 	bl	8006918 <lv_obj_get_ext_attr>
 8019b0a:	6138      	str	r0, [r7, #16]
    if(ext->pwd_mode != 0) {
 8019b0c:	693b      	ldr	r3, [r7, #16]
 8019b0e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8019b12:	f003 0301 	and.w	r3, r3, #1
 8019b16:	b2db      	uxtb	r3, r3
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d02d      	beq.n	8019b78 <pwd_char_hider+0x7c>
        char * txt  = lv_label_get_text(ext->label);
 8019b1c:	693b      	ldr	r3, [r7, #16]
 8019b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019b20:	4618      	mov	r0, r3
 8019b22:	f7fb f81a 	bl	8014b5a <lv_label_get_text>
 8019b26:	60f8      	str	r0, [r7, #12]
        int16_t len = lv_txt_get_encoded_length(txt);
 8019b28:	4b15      	ldr	r3, [pc, #84]	@ (8019b80 <pwd_char_hider+0x84>)
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	68f8      	ldr	r0, [r7, #12]
 8019b2e:	4798      	blx	r3
 8019b30:	4603      	mov	r3, r0
 8019b32:	817b      	strh	r3, [r7, #10]
        bool refr   = false;
 8019b34:	2300      	movs	r3, #0
 8019b36:	75fb      	strb	r3, [r7, #23]
        uint16_t i;
        for(i = 0; i < len; i++) {
 8019b38:	2300      	movs	r3, #0
 8019b3a:	82bb      	strh	r3, [r7, #20]
 8019b3c:	e009      	b.n	8019b52 <pwd_char_hider+0x56>
            txt[i] = '*';
 8019b3e:	8abb      	ldrh	r3, [r7, #20]
 8019b40:	68fa      	ldr	r2, [r7, #12]
 8019b42:	4413      	add	r3, r2
 8019b44:	222a      	movs	r2, #42	@ 0x2a
 8019b46:	701a      	strb	r2, [r3, #0]
            refr   = true;
 8019b48:	2301      	movs	r3, #1
 8019b4a:	75fb      	strb	r3, [r7, #23]
        for(i = 0; i < len; i++) {
 8019b4c:	8abb      	ldrh	r3, [r7, #20]
 8019b4e:	3301      	adds	r3, #1
 8019b50:	82bb      	strh	r3, [r7, #20]
 8019b52:	8aba      	ldrh	r2, [r7, #20]
 8019b54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019b58:	429a      	cmp	r2, r3
 8019b5a:	dbf0      	blt.n	8019b3e <pwd_char_hider+0x42>
        }

        txt[i] = '\0';
 8019b5c:	8abb      	ldrh	r3, [r7, #20]
 8019b5e:	68fa      	ldr	r2, [r7, #12]
 8019b60:	4413      	add	r3, r2
 8019b62:	2200      	movs	r2, #0
 8019b64:	701a      	strb	r2, [r3, #0]

        if(refr != false) lv_label_set_text(ext->label, txt);
 8019b66:	7dfb      	ldrb	r3, [r7, #23]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d005      	beq.n	8019b78 <pwd_char_hider+0x7c>
 8019b6c:	693b      	ldr	r3, [r7, #16]
 8019b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019b70:	68f9      	ldr	r1, [r7, #12]
 8019b72:	4618      	mov	r0, r3
 8019b74:	f7fa fe80 	bl	8014878 <lv_label_set_text>
    }
}
 8019b78:	bf00      	nop
 8019b7a:	3718      	adds	r7, #24
 8019b7c:	46bd      	mov	sp, r7
 8019b7e:	bd80      	pop	{r7, pc}
 8019b80:	20000cb0 	.word	0x20000cb0

08019b84 <char_is_accepted>:
 * @param ta pointer to a test area object
 * @param c an unicode character
 * @return true: accapted; false: rejected
 */
static bool char_is_accepted(lv_obj_t * ta, uint32_t c)
{
 8019b84:	b590      	push	{r4, r7, lr}
 8019b86:	b087      	sub	sp, #28
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	6078      	str	r0, [r7, #4]
 8019b8c:	6039      	str	r1, [r7, #0]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8019b8e:	6878      	ldr	r0, [r7, #4]
 8019b90:	f7ec fec2 	bl	8006918 <lv_obj_get_ext_attr>
 8019b94:	6178      	str	r0, [r7, #20]

    /*If no restriction accept it*/
    if(ext->accapted_chars == NULL && ext->max_length == 0) return true;
 8019b96:	697b      	ldr	r3, [r7, #20]
 8019b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d106      	bne.n	8019bac <char_is_accepted+0x28>
 8019b9e:	697b      	ldr	r3, [r7, #20]
 8019ba0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d101      	bne.n	8019bac <char_is_accepted+0x28>
 8019ba8:	2301      	movs	r3, #1
 8019baa:	e034      	b.n	8019c16 <char_is_accepted+0x92>

    /*Too many characters?*/
    if(ext->max_length > 0 && lv_txt_get_encoded_length(lv_ta_get_text(ta)) >= ext->max_length) {
 8019bac:	697b      	ldr	r3, [r7, #20]
 8019bae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d00f      	beq.n	8019bd6 <char_is_accepted+0x52>
 8019bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8019c20 <char_is_accepted+0x9c>)
 8019bb8:	681c      	ldr	r4, [r3, #0]
 8019bba:	6878      	ldr	r0, [r7, #4]
 8019bbc:	f7ff f96a 	bl	8018e94 <lv_ta_get_text>
 8019bc0:	4603      	mov	r3, r0
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	47a0      	blx	r4
 8019bc6:	4602      	mov	r2, r0
 8019bc8:	697b      	ldr	r3, [r7, #20]
 8019bca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8019bce:	429a      	cmp	r2, r3
 8019bd0:	d301      	bcc.n	8019bd6 <char_is_accepted+0x52>
        return false;
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	e01f      	b.n	8019c16 <char_is_accepted+0x92>
    }

    /*Accepted character?*/
    if(ext->accapted_chars) {
 8019bd6:	697b      	ldr	r3, [r7, #20]
 8019bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d01a      	beq.n	8019c14 <char_is_accepted+0x90>
        uint32_t i = 0;
 8019bde:	2300      	movs	r3, #0
 8019be0:	60fb      	str	r3, [r7, #12]
        uint32_t a;
        while(ext->accapted_chars[i] != '\0') {
 8019be2:	e00e      	b.n	8019c02 <char_is_accepted+0x7e>
            a = lv_txt_encoded_next(ext->accapted_chars, &i);
 8019be4:	4b0f      	ldr	r3, [pc, #60]	@ (8019c24 <char_is_accepted+0xa0>)
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	697a      	ldr	r2, [r7, #20]
 8019bea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8019bec:	f107 010c 	add.w	r1, r7, #12
 8019bf0:	4610      	mov	r0, r2
 8019bf2:	4798      	blx	r3
 8019bf4:	6138      	str	r0, [r7, #16]
            if(a == c) return true; /*Accepted*/
 8019bf6:	693a      	ldr	r2, [r7, #16]
 8019bf8:	683b      	ldr	r3, [r7, #0]
 8019bfa:	429a      	cmp	r2, r3
 8019bfc:	d101      	bne.n	8019c02 <char_is_accepted+0x7e>
 8019bfe:	2301      	movs	r3, #1
 8019c00:	e009      	b.n	8019c16 <char_is_accepted+0x92>
        while(ext->accapted_chars[i] != '\0') {
 8019c02:	697b      	ldr	r3, [r7, #20]
 8019c04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	4413      	add	r3, r2
 8019c0a:	781b      	ldrb	r3, [r3, #0]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d1e9      	bne.n	8019be4 <char_is_accepted+0x60>
        }

        return false; /*The character wasn't in the list*/
 8019c10:	2300      	movs	r3, #0
 8019c12:	e000      	b.n	8019c16 <char_is_accepted+0x92>
    } else {
        return true; /*If the accepted char list in not specified the accept the character*/
 8019c14:	2301      	movs	r3, #1
    }
}
 8019c16:	4618      	mov	r0, r3
 8019c18:	371c      	adds	r7, #28
 8019c1a:	46bd      	mov	sp, r7
 8019c1c:	bd90      	pop	{r4, r7, pc}
 8019c1e:	bf00      	nop
 8019c20:	20000cb0 	.word	0x20000cb0
 8019c24:	20000ca0 	.word	0x20000ca0

08019c28 <get_cursor_style>:

static void get_cursor_style(lv_obj_t * ta, lv_style_t * style_res)
{
 8019c28:	b580      	push	{r7, lr}
 8019c2a:	b086      	sub	sp, #24
 8019c2c:	af00      	add	r7, sp, #0
 8019c2e:	6078      	str	r0, [r7, #4]
 8019c30:	6039      	str	r1, [r7, #0]
    lv_ta_ext_t * ext              = lv_obj_get_ext_attr(ta);
 8019c32:	6878      	ldr	r0, [r7, #4]
 8019c34:	f7ec fe70 	bl	8006918 <lv_obj_get_ext_attr>
 8019c38:	6178      	str	r0, [r7, #20]
    const lv_style_t * label_style = lv_obj_get_style(ext->label);
 8019c3a:	697b      	ldr	r3, [r7, #20]
 8019c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019c3e:	4618      	mov	r0, r3
 8019c40:	f7ec fd54 	bl	80066ec <lv_obj_get_style>
 8019c44:	6138      	str	r0, [r7, #16]

    if(ext->cursor.style) {
 8019c46:	697b      	ldr	r3, [r7, #20]
 8019c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d006      	beq.n	8019c5c <get_cursor_style+0x34>
        lv_style_copy(style_res, ext->cursor.style);
 8019c4e:	697b      	ldr	r3, [r7, #20]
 8019c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019c52:	4619      	mov	r1, r3
 8019c54:	6838      	ldr	r0, [r7, #0]
 8019c56:	f7ee f8cf 	bl	8007df8 <lv_style_copy>
        style_res->body.padding.top    = 0;
        style_res->body.padding.bottom = 0;
        style_res->line.width          = 1;
        style_res->body.opa            = LV_OPA_COVER;
    }
}
 8019c5a:	e034      	b.n	8019cc6 <get_cursor_style+0x9e>
        lv_style_copy(style_res, label_style);
 8019c5c:	6939      	ldr	r1, [r7, #16]
 8019c5e:	6838      	ldr	r0, [r7, #0]
 8019c60:	f7ee f8ca 	bl	8007df8 <lv_style_copy>
        lv_color_t clv_color_tmp = style_res->text.color; /*Make letter color to cursor color*/
 8019c64:	683b      	ldr	r3, [r7, #0]
 8019c66:	8c1b      	ldrh	r3, [r3, #32]
 8019c68:	81bb      	strh	r3, [r7, #12]
        style_res->text.color =
 8019c6a:	683b      	ldr	r3, [r7, #0]
 8019c6c:	683a      	ldr	r2, [r7, #0]
 8019c6e:	8852      	ldrh	r2, [r2, #2]
 8019c70:	841a      	strh	r2, [r3, #32]
        style_res->body.main_color     = clv_color_tmp;
 8019c72:	683b      	ldr	r3, [r7, #0]
 8019c74:	89ba      	ldrh	r2, [r7, #12]
 8019c76:	805a      	strh	r2, [r3, #2]
        style_res->body.grad_color     = clv_color_tmp;
 8019c78:	683b      	ldr	r3, [r7, #0]
 8019c7a:	89ba      	ldrh	r2, [r7, #12]
 8019c7c:	809a      	strh	r2, [r3, #4]
        style_res->body.border.color   = clv_color_tmp;
 8019c7e:	683b      	ldr	r3, [r7, #0]
 8019c80:	89ba      	ldrh	r2, [r7, #12]
 8019c82:	815a      	strh	r2, [r3, #10]
        style_res->body.border.opa     = LV_OPA_COVER;
 8019c84:	683b      	ldr	r3, [r7, #0]
 8019c86:	22ff      	movs	r2, #255	@ 0xff
 8019c88:	73da      	strb	r2, [r3, #15]
        style_res->body.border.width   = 1;
 8019c8a:	683b      	ldr	r3, [r7, #0]
 8019c8c:	2201      	movs	r2, #1
 8019c8e:	819a      	strh	r2, [r3, #12]
        style_res->body.shadow.width   = 0;
 8019c90:	683b      	ldr	r3, [r7, #0]
 8019c92:	2200      	movs	r2, #0
 8019c94:	825a      	strh	r2, [r3, #18]
        style_res->body.radius         = 0;
 8019c96:	683b      	ldr	r3, [r7, #0]
 8019c98:	2200      	movs	r2, #0
 8019c9a:	80da      	strh	r2, [r3, #6]
        style_res->body.opa            = LV_OPA_COVER;
 8019c9c:	683b      	ldr	r3, [r7, #0]
 8019c9e:	22ff      	movs	r2, #255	@ 0xff
 8019ca0:	721a      	strb	r2, [r3, #8]
        style_res->body.padding.left   = 0;
 8019ca2:	683b      	ldr	r3, [r7, #0]
 8019ca4:	2200      	movs	r2, #0
 8019ca6:	835a      	strh	r2, [r3, #26]
        style_res->body.padding.right  = 0;
 8019ca8:	683b      	ldr	r3, [r7, #0]
 8019caa:	2200      	movs	r2, #0
 8019cac:	839a      	strh	r2, [r3, #28]
        style_res->body.padding.top    = 0;
 8019cae:	683b      	ldr	r3, [r7, #0]
 8019cb0:	2200      	movs	r2, #0
 8019cb2:	82da      	strh	r2, [r3, #22]
        style_res->body.padding.bottom = 0;
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	2200      	movs	r2, #0
 8019cb8:	831a      	strh	r2, [r3, #24]
        style_res->line.width          = 1;
 8019cba:	683b      	ldr	r3, [r7, #0]
 8019cbc:	2201      	movs	r2, #1
 8019cbe:	86da      	strh	r2, [r3, #54]	@ 0x36
        style_res->body.opa            = LV_OPA_COVER;
 8019cc0:	683b      	ldr	r3, [r7, #0]
 8019cc2:	22ff      	movs	r2, #255	@ 0xff
 8019cc4:	721a      	strb	r2, [r3, #8]
}
 8019cc6:	bf00      	nop
 8019cc8:	3718      	adds	r7, #24
 8019cca:	46bd      	mov	sp, r7
 8019ccc:	bd80      	pop	{r7, pc}
	...

08019cd0 <refr_cursor_area>:

static void refr_cursor_area(lv_obj_t * ta)
{
 8019cd0:	b580      	push	{r7, lr}
 8019cd2:	b0a0      	sub	sp, #128	@ 0x80
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	6078      	str	r0, [r7, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 8019cd8:	6878      	ldr	r0, [r7, #4]
 8019cda:	f7ec fe1d 	bl	8006918 <lv_obj_get_ext_attr>
 8019cde:	6738      	str	r0, [r7, #112]	@ 0x70

    const lv_style_t * label_style = lv_obj_get_style(ext->label);
 8019ce0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	f7ec fd01 	bl	80066ec <lv_obj_get_style>
 8019cea:	66f8      	str	r0, [r7, #108]	@ 0x6c

    lv_style_t cur_style;
    get_cursor_style(ta, &cur_style);
 8019cec:	f107 0320 	add.w	r3, r7, #32
 8019cf0:	4619      	mov	r1, r3
 8019cf2:	6878      	ldr	r0, [r7, #4]
 8019cf4:	f7ff ff98 	bl	8019c28 <get_cursor_style>

    uint16_t cur_pos = lv_ta_get_cursor_pos(ta);
 8019cf8:	6878      	ldr	r0, [r7, #4]
 8019cfa:	f7ff f8ea 	bl	8018ed2 <lv_ta_get_cursor_pos>
 8019cfe:	4603      	mov	r3, r0
 8019d00:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    const char * txt = lv_label_get_text(ext->label);
 8019d04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019d08:	4618      	mov	r0, r3
 8019d0a:	f7fa ff26 	bl	8014b5a <lv_label_get_text>
 8019d0e:	6678      	str	r0, [r7, #100]	@ 0x64

    uint32_t byte_pos;
    byte_pos = lv_txt_encoded_get_byte_id(txt, cur_pos);
 8019d10:	4b98      	ldr	r3, [pc, #608]	@ (8019f74 <refr_cursor_area+0x2a4>)
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	f8b7 206a 	ldrh.w	r2, [r7, #106]	@ 0x6a
 8019d18:	4611      	mov	r1, r2
 8019d1a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8019d1c:	4798      	blx	r3
 8019d1e:	67f8      	str	r0, [r7, #124]	@ 0x7c

    uint32_t letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 8019d20:	4b95      	ldr	r3, [pc, #596]	@ (8019f78 <refr_cursor_area+0x2a8>)
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8019d26:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019d28:	440a      	add	r2, r1
 8019d2a:	2100      	movs	r1, #0
 8019d2c:	4610      	mov	r0, r2
 8019d2e:	4798      	blx	r3
 8019d30:	67b8      	str	r0, [r7, #120]	@ 0x78

    lv_coord_t letter_h = lv_font_get_line_height(label_style->text.font);
 8019d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d36:	4618      	mov	r0, r3
 8019d38:	f7fe f83e 	bl	8017db8 <lv_font_get_line_height>
 8019d3c:	4603      	mov	r3, r0
 8019d3e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

    /*Set letter_w (set not 0 on non printable but valid chars)*/
    lv_coord_t letter_w;
    if(letter == '\0' || letter == '\n' || letter == '\r') {
 8019d42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d005      	beq.n	8019d54 <refr_cursor_area+0x84>
 8019d48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019d4a:	2b0a      	cmp	r3, #10
 8019d4c:	d002      	beq.n	8019d54 <refr_cursor_area+0x84>
 8019d4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019d50:	2b0d      	cmp	r3, #13
 8019d52:	d10a      	bne.n	8019d6a <refr_cursor_area+0x9a>
        letter_w = lv_font_get_glyph_width(label_style->text.font, ' ', '\0');
 8019d54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d58:	2200      	movs	r2, #0
 8019d5a:	2120      	movs	r1, #32
 8019d5c:	4618      	mov	r0, r3
 8019d5e:	f7f4 fb5b 	bl	800e418 <lv_font_get_glyph_width>
 8019d62:	4603      	mov	r3, r0
 8019d64:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8019d68:	e009      	b.n	8019d7e <refr_cursor_area+0xae>
    } else {
        /*`letter_next` parameter is '\0' to ignore kerning*/
        letter_w = lv_font_get_glyph_width(label_style->text.font, letter, '\0');
 8019d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d6e:	2200      	movs	r2, #0
 8019d70:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8019d72:	4618      	mov	r0, r3
 8019d74:	f7f4 fb50 	bl	800e418 <lv_font_get_glyph_width>
 8019d78:	4603      	mov	r3, r0
 8019d7a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    }

    lv_point_t letter_pos;
    lv_label_get_letter_pos(ext->label, cur_pos, &letter_pos);
 8019d7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019d82:	f107 021c 	add.w	r2, r7, #28
 8019d86:	f8b7 106a 	ldrh.w	r1, [r7, #106]	@ 0x6a
 8019d8a:	4618      	mov	r0, r3
 8019d8c:	f7fa ff42 	bl	8014c14 <lv_label_get_letter_pos>

    /*If the cursor is out of the text (most right) draw it to the next line*/
    if(letter_pos.x + ext->label->coords.x1 + letter_w > ext->label->coords.x2 && ext->one_line == 0 &&
 8019d90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8019d94:	461a      	mov	r2, r3
 8019d96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019d9a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8019d9e:	441a      	add	r2, r3
 8019da0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8019da4:	4413      	add	r3, r2
 8019da6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8019da8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8019daa:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8019dae:	4293      	cmp	r3, r2
 8019db0:	dd56      	ble.n	8019e60 <refr_cursor_area+0x190>
 8019db2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019db4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8019db8:	f003 0302 	and.w	r3, r3, #2
 8019dbc:	b2db      	uxtb	r3, r3
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d14e      	bne.n	8019e60 <refr_cursor_area+0x190>
       lv_label_get_align(ext->label) != LV_LABEL_ALIGN_RIGHT) {
 8019dc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	f7fa fee6 	bl	8014b98 <lv_label_get_align>
 8019dcc:	4603      	mov	r3, r0
    if(letter_pos.x + ext->label->coords.x1 + letter_w > ext->label->coords.x2 && ext->one_line == 0 &&
 8019dce:	2b02      	cmp	r3, #2
 8019dd0:	d046      	beq.n	8019e60 <refr_cursor_area+0x190>
        letter_pos.x = 0;
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	83bb      	strh	r3, [r7, #28]
        letter_pos.y += letter_h + label_style->text.line_space;
 8019dd6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019dda:	b29a      	uxth	r2, r3
 8019ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019dde:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8019de2:	b299      	uxth	r1, r3
 8019de4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8019de8:	440b      	add	r3, r1
 8019dea:	b29b      	uxth	r3, r3
 8019dec:	4413      	add	r3, r2
 8019dee:	b29b      	uxth	r3, r3
 8019df0:	b21b      	sxth	r3, r3
 8019df2:	83fb      	strh	r3, [r7, #30]

        if(letter != '\0') {
 8019df4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d014      	beq.n	8019e24 <refr_cursor_area+0x154>
            byte_pos += lv_txt_encoded_size(&txt[byte_pos]);
 8019dfa:	4b60      	ldr	r3, [pc, #384]	@ (8019f7c <refr_cursor_area+0x2ac>)
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8019e00:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019e02:	440a      	add	r2, r1
 8019e04:	4610      	mov	r0, r2
 8019e06:	4798      	blx	r3
 8019e08:	4603      	mov	r3, r0
 8019e0a:	461a      	mov	r2, r3
 8019e0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019e0e:	4413      	add	r3, r2
 8019e10:	67fb      	str	r3, [r7, #124]	@ 0x7c
            letter = lv_txt_encoded_next(&txt[byte_pos], NULL);
 8019e12:	4b59      	ldr	r3, [pc, #356]	@ (8019f78 <refr_cursor_area+0x2a8>)
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8019e18:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8019e1a:	440a      	add	r2, r1
 8019e1c:	2100      	movs	r1, #0
 8019e1e:	4610      	mov	r0, r2
 8019e20:	4798      	blx	r3
 8019e22:	67b8      	str	r0, [r7, #120]	@ 0x78
        }

        if(letter == '\0' || letter == '\n' || letter == '\r') {
 8019e24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d005      	beq.n	8019e36 <refr_cursor_area+0x166>
 8019e2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019e2c:	2b0a      	cmp	r3, #10
 8019e2e:	d002      	beq.n	8019e36 <refr_cursor_area+0x166>
 8019e30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019e32:	2b0d      	cmp	r3, #13
 8019e34:	d10a      	bne.n	8019e4c <refr_cursor_area+0x17c>
            letter_w = lv_font_get_glyph_width(label_style->text.font, ' ', '\0');
 8019e36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e3a:	2200      	movs	r2, #0
 8019e3c:	2120      	movs	r1, #32
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f7f4 faea 	bl	800e418 <lv_font_get_glyph_width>
 8019e44:	4603      	mov	r3, r0
 8019e46:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8019e4a:	e009      	b.n	8019e60 <refr_cursor_area+0x190>
        } else {
            letter_w = lv_font_get_glyph_width(label_style->text.font, letter, '\0');
 8019e4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8019e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e50:	2200      	movs	r2, #0
 8019e52:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8019e54:	4618      	mov	r0, r3
 8019e56:	f7f4 fadf 	bl	800e418 <lv_font_get_glyph_width>
 8019e5a:	4603      	mov	r3, r0
 8019e5c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
        }
    }

    /*Save the byte position. It is required to draw `LV_CURSOR_BLOCK`*/
    ext->cursor.txt_byte_pos = byte_pos;
 8019e60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019e62:	b29a      	uxth	r2, r3
 8019e64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019e66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /*Draw he cursor according to the type*/
    lv_area_t cur_area;

    if(ext->cursor.type == LV_CURSOR_LINE) {
 8019e6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019e6c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8019e70:	f003 030f 	and.w	r3, r3, #15
 8019e74:	b2db      	uxtb	r3, r3
 8019e76:	2b01      	cmp	r3, #1
 8019e78:	d142      	bne.n	8019f00 <refr_cursor_area+0x230>
        cur_area.x1 =
            letter_pos.x + cur_style.body.padding.left - (cur_style.line.width >> 1) - (cur_style.line.width & 0x1);
 8019e7a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8019e7e:	b29a      	uxth	r2, r3
 8019e80:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8019e84:	b29b      	uxth	r3, r3
 8019e86:	4413      	add	r3, r2
 8019e88:	b29a      	uxth	r2, r3
 8019e8a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8019e8e:	105b      	asrs	r3, r3, #1
 8019e90:	b21b      	sxth	r3, r3
 8019e92:	b29b      	uxth	r3, r3
 8019e94:	1ad3      	subs	r3, r2, r3
 8019e96:	b29a      	uxth	r2, r3
 8019e98:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8019e9c:	b29b      	uxth	r3, r3
 8019e9e:	f003 0301 	and.w	r3, r3, #1
 8019ea2:	b29b      	uxth	r3, r3
 8019ea4:	1ad3      	subs	r3, r2, r3
 8019ea6:	b29b      	uxth	r3, r3
 8019ea8:	b21b      	sxth	r3, r3
        cur_area.x1 =
 8019eaa:	82bb      	strh	r3, [r7, #20]
        cur_area.y1 = letter_pos.y + cur_style.body.padding.top;
 8019eac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019eb0:	b29a      	uxth	r2, r3
 8019eb2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8019eb6:	b29b      	uxth	r3, r3
 8019eb8:	4413      	add	r3, r2
 8019eba:	b29b      	uxth	r3, r3
 8019ebc:	b21b      	sxth	r3, r3
 8019ebe:	82fb      	strh	r3, [r7, #22]
        cur_area.x2 = letter_pos.x + cur_style.body.padding.right + (cur_style.line.width >> 1);
 8019ec0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8019ec4:	b29a      	uxth	r2, r3
 8019ec6:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8019eca:	b29b      	uxth	r3, r3
 8019ecc:	4413      	add	r3, r2
 8019ece:	b29a      	uxth	r2, r3
 8019ed0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 8019ed4:	105b      	asrs	r3, r3, #1
 8019ed6:	b21b      	sxth	r3, r3
 8019ed8:	b29b      	uxth	r3, r3
 8019eda:	4413      	add	r3, r2
 8019edc:	b29b      	uxth	r3, r3
 8019ede:	b21b      	sxth	r3, r3
 8019ee0:	833b      	strh	r3, [r7, #24]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.bottom + letter_h;
 8019ee2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019ee6:	b29a      	uxth	r2, r3
 8019ee8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8019eec:	b29b      	uxth	r3, r3
 8019eee:	4413      	add	r3, r2
 8019ef0:	b29a      	uxth	r2, r3
 8019ef2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8019ef6:	4413      	add	r3, r2
 8019ef8:	b29b      	uxth	r3, r3
 8019efa:	b21b      	sxth	r3, r3
 8019efc:	837b      	strh	r3, [r7, #26]
 8019efe:	e0ca      	b.n	801a096 <refr_cursor_area+0x3c6>
    } else if(ext->cursor.type == LV_CURSOR_BLOCK) {
 8019f00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019f02:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8019f06:	f003 030f 	and.w	r3, r3, #15
 8019f0a:	b2db      	uxtb	r3, r3
 8019f0c:	2b02      	cmp	r3, #2
 8019f0e:	d137      	bne.n	8019f80 <refr_cursor_area+0x2b0>
        cur_area.x1 = letter_pos.x - cur_style.body.padding.left;
 8019f10:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8019f14:	b29a      	uxth	r2, r3
 8019f16:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8019f1a:	b29b      	uxth	r3, r3
 8019f1c:	1ad3      	subs	r3, r2, r3
 8019f1e:	b29b      	uxth	r3, r3
 8019f20:	b21b      	sxth	r3, r3
 8019f22:	82bb      	strh	r3, [r7, #20]
        cur_area.y1 = letter_pos.y - cur_style.body.padding.top;
 8019f24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019f28:	b29a      	uxth	r2, r3
 8019f2a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8019f2e:	b29b      	uxth	r3, r3
 8019f30:	1ad3      	subs	r3, r2, r3
 8019f32:	b29b      	uxth	r3, r3
 8019f34:	b21b      	sxth	r3, r3
 8019f36:	82fb      	strh	r3, [r7, #22]
        cur_area.x2 = letter_pos.x + cur_style.body.padding.right + letter_w;
 8019f38:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8019f3c:	b29a      	uxth	r2, r3
 8019f3e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8019f42:	b29b      	uxth	r3, r3
 8019f44:	4413      	add	r3, r2
 8019f46:	b29a      	uxth	r2, r3
 8019f48:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8019f4c:	4413      	add	r3, r2
 8019f4e:	b29b      	uxth	r3, r3
 8019f50:	b21b      	sxth	r3, r3
 8019f52:	833b      	strh	r3, [r7, #24]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.bottom + letter_h;
 8019f54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019f58:	b29a      	uxth	r2, r3
 8019f5a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8019f5e:	b29b      	uxth	r3, r3
 8019f60:	4413      	add	r3, r2
 8019f62:	b29a      	uxth	r2, r3
 8019f64:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8019f68:	4413      	add	r3, r2
 8019f6a:	b29b      	uxth	r3, r3
 8019f6c:	b21b      	sxth	r3, r3
 8019f6e:	837b      	strh	r3, [r7, #26]
 8019f70:	e091      	b.n	801a096 <refr_cursor_area+0x3c6>
 8019f72:	bf00      	nop
 8019f74:	20000ca8 	.word	0x20000ca8
 8019f78:	20000ca0 	.word	0x20000ca0
 8019f7c:	20000c98 	.word	0x20000c98

    } else if(ext->cursor.type == LV_CURSOR_OUTLINE) {
 8019f80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019f82:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8019f86:	f003 030f 	and.w	r3, r3, #15
 8019f8a:	b2db      	uxtb	r3, r3
 8019f8c:	2b03      	cmp	r3, #3
 8019f8e:	d130      	bne.n	8019ff2 <refr_cursor_area+0x322>
        cur_area.x1 = letter_pos.x - cur_style.body.padding.left;
 8019f90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8019f94:	b29a      	uxth	r2, r3
 8019f96:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8019f9a:	b29b      	uxth	r3, r3
 8019f9c:	1ad3      	subs	r3, r2, r3
 8019f9e:	b29b      	uxth	r3, r3
 8019fa0:	b21b      	sxth	r3, r3
 8019fa2:	82bb      	strh	r3, [r7, #20]
        cur_area.y1 = letter_pos.y - cur_style.body.padding.top;
 8019fa4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019fa8:	b29a      	uxth	r2, r3
 8019faa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8019fae:	b29b      	uxth	r3, r3
 8019fb0:	1ad3      	subs	r3, r2, r3
 8019fb2:	b29b      	uxth	r3, r3
 8019fb4:	b21b      	sxth	r3, r3
 8019fb6:	82fb      	strh	r3, [r7, #22]
        cur_area.x2 = letter_pos.x + cur_style.body.padding.right + letter_w;
 8019fb8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8019fbc:	b29a      	uxth	r2, r3
 8019fbe:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8019fc2:	b29b      	uxth	r3, r3
 8019fc4:	4413      	add	r3, r2
 8019fc6:	b29a      	uxth	r2, r3
 8019fc8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8019fcc:	4413      	add	r3, r2
 8019fce:	b29b      	uxth	r3, r3
 8019fd0:	b21b      	sxth	r3, r3
 8019fd2:	833b      	strh	r3, [r7, #24]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.bottom + letter_h;
 8019fd4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019fd8:	b29a      	uxth	r2, r3
 8019fda:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8019fde:	b29b      	uxth	r3, r3
 8019fe0:	4413      	add	r3, r2
 8019fe2:	b29a      	uxth	r2, r3
 8019fe4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8019fe8:	4413      	add	r3, r2
 8019fea:	b29b      	uxth	r3, r3
 8019fec:	b21b      	sxth	r3, r3
 8019fee:	837b      	strh	r3, [r7, #26]
 8019ff0:	e051      	b.n	801a096 <refr_cursor_area+0x3c6>
    } else if(ext->cursor.type == LV_CURSOR_UNDERLINE) {
 8019ff2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019ff4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8019ff8:	f003 030f 	and.w	r3, r3, #15
 8019ffc:	b2db      	uxtb	r3, r3
 8019ffe:	2b04      	cmp	r3, #4
 801a000:	d149      	bne.n	801a096 <refr_cursor_area+0x3c6>
        cur_area.x1 = letter_pos.x + cur_style.body.padding.left;
 801a002:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801a006:	b29a      	uxth	r2, r3
 801a008:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 801a00c:	b29b      	uxth	r3, r3
 801a00e:	4413      	add	r3, r2
 801a010:	b29b      	uxth	r3, r3
 801a012:	b21b      	sxth	r3, r3
 801a014:	82bb      	strh	r3, [r7, #20]
        cur_area.y1 = letter_pos.y + cur_style.body.padding.top + letter_h - (cur_style.line.width >> 1);
 801a016:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a01a:	b29a      	uxth	r2, r3
 801a01c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 801a020:	b29b      	uxth	r3, r3
 801a022:	4413      	add	r3, r2
 801a024:	b29a      	uxth	r2, r3
 801a026:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 801a02a:	4413      	add	r3, r2
 801a02c:	b29a      	uxth	r2, r3
 801a02e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 801a032:	105b      	asrs	r3, r3, #1
 801a034:	b21b      	sxth	r3, r3
 801a036:	b29b      	uxth	r3, r3
 801a038:	1ad3      	subs	r3, r2, r3
 801a03a:	b29b      	uxth	r3, r3
 801a03c:	b21b      	sxth	r3, r3
 801a03e:	82fb      	strh	r3, [r7, #22]
        cur_area.x2 = letter_pos.x + cur_style.body.padding.right + letter_w;
 801a040:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801a044:	b29a      	uxth	r2, r3
 801a046:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 801a04a:	b29b      	uxth	r3, r3
 801a04c:	4413      	add	r3, r2
 801a04e:	b29a      	uxth	r2, r3
 801a050:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 801a054:	4413      	add	r3, r2
 801a056:	b29b      	uxth	r3, r3
 801a058:	b21b      	sxth	r3, r3
 801a05a:	833b      	strh	r3, [r7, #24]
        cur_area.y2 = letter_pos.y + cur_style.body.padding.bottom + letter_h + (cur_style.line.width >> 1) +
 801a05c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a060:	b29a      	uxth	r2, r3
 801a062:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 801a066:	b29b      	uxth	r3, r3
 801a068:	4413      	add	r3, r2
 801a06a:	b29a      	uxth	r2, r3
 801a06c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 801a070:	4413      	add	r3, r2
 801a072:	b29a      	uxth	r2, r3
 801a074:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 801a078:	105b      	asrs	r3, r3, #1
 801a07a:	b21b      	sxth	r3, r3
 801a07c:	b29b      	uxth	r3, r3
 801a07e:	4413      	add	r3, r2
 801a080:	b29a      	uxth	r2, r3
                      (cur_style.line.width & 0x1);
 801a082:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 801a086:	b29b      	uxth	r3, r3
 801a088:	f003 0301 	and.w	r3, r3, #1
 801a08c:	b29b      	uxth	r3, r3
        cur_area.y2 = letter_pos.y + cur_style.body.padding.bottom + letter_h + (cur_style.line.width >> 1) +
 801a08e:	4413      	add	r3, r2
 801a090:	b29b      	uxth	r3, r3
 801a092:	b21b      	sxth	r3, r3
 801a094:	837b      	strh	r3, [r7, #26]
    }

    /*Save the new area*/
    lv_disp_t * disp = lv_obj_get_disp(ta);
 801a096:	6878      	ldr	r0, [r7, #4]
 801a098:	f7ec fa1a 	bl	80064d0 <lv_obj_get_disp>
 801a09c:	65f8      	str	r0, [r7, #92]	@ 0x5c
    lv_area_t area_tmp;
    lv_area_copy(&area_tmp, &ext->cursor.area);
 801a09e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a0a0:	f103 024e 	add.w	r2, r3, #78	@ 0x4e
 801a0a4:	f107 030c 	add.w	r3, r7, #12
 801a0a8:	4611      	mov	r1, r2
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	f7fd fe8f 	bl	8017dce <lv_area_copy>
    area_tmp.x1 += ext->label->coords.x1;
 801a0b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801a0b4:	b29a      	uxth	r2, r3
 801a0b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a0b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a0ba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801a0be:	b29b      	uxth	r3, r3
 801a0c0:	4413      	add	r3, r2
 801a0c2:	b29b      	uxth	r3, r3
 801a0c4:	b21b      	sxth	r3, r3
 801a0c6:	81bb      	strh	r3, [r7, #12]
    area_tmp.y1 += ext->label->coords.y1;
 801a0c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a0cc:	b29a      	uxth	r2, r3
 801a0ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a0d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a0d2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801a0d6:	b29b      	uxth	r3, r3
 801a0d8:	4413      	add	r3, r2
 801a0da:	b29b      	uxth	r3, r3
 801a0dc:	b21b      	sxth	r3, r3
 801a0de:	81fb      	strh	r3, [r7, #14]
    area_tmp.x2 += ext->label->coords.x1;
 801a0e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801a0e4:	b29a      	uxth	r2, r3
 801a0e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a0e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a0ea:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801a0ee:	b29b      	uxth	r3, r3
 801a0f0:	4413      	add	r3, r2
 801a0f2:	b29b      	uxth	r3, r3
 801a0f4:	b21b      	sxth	r3, r3
 801a0f6:	823b      	strh	r3, [r7, #16]
    area_tmp.y2 += ext->label->coords.y1;
 801a0f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a0fc:	b29a      	uxth	r2, r3
 801a0fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a102:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801a106:	b29b      	uxth	r3, r3
 801a108:	4413      	add	r3, r2
 801a10a:	b29b      	uxth	r3, r3
 801a10c:	b21b      	sxth	r3, r3
 801a10e:	827b      	strh	r3, [r7, #18]
    lv_inv_area(disp, &area_tmp);
 801a110:	f107 030c 	add.w	r3, r7, #12
 801a114:	4619      	mov	r1, r3
 801a116:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801a118:	f7ec fe54 	bl	8006dc4 <lv_inv_area>

    lv_area_copy(&ext->cursor.area, &cur_area);
 801a11c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a11e:	334e      	adds	r3, #78	@ 0x4e
 801a120:	f107 0214 	add.w	r2, r7, #20
 801a124:	4611      	mov	r1, r2
 801a126:	4618      	mov	r0, r3
 801a128:	f7fd fe51 	bl	8017dce <lv_area_copy>

    lv_area_copy(&area_tmp, &ext->cursor.area);
 801a12c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a12e:	f103 024e 	add.w	r2, r3, #78	@ 0x4e
 801a132:	f107 030c 	add.w	r3, r7, #12
 801a136:	4611      	mov	r1, r2
 801a138:	4618      	mov	r0, r3
 801a13a:	f7fd fe48 	bl	8017dce <lv_area_copy>
    area_tmp.x1 += ext->label->coords.x1;
 801a13e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801a142:	b29a      	uxth	r2, r3
 801a144:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a148:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801a14c:	b29b      	uxth	r3, r3
 801a14e:	4413      	add	r3, r2
 801a150:	b29b      	uxth	r3, r3
 801a152:	b21b      	sxth	r3, r3
 801a154:	81bb      	strh	r3, [r7, #12]
    area_tmp.y1 += ext->label->coords.y1;
 801a156:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a15a:	b29a      	uxth	r2, r3
 801a15c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a15e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a160:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801a164:	b29b      	uxth	r3, r3
 801a166:	4413      	add	r3, r2
 801a168:	b29b      	uxth	r3, r3
 801a16a:	b21b      	sxth	r3, r3
 801a16c:	81fb      	strh	r3, [r7, #14]
    area_tmp.x2 += ext->label->coords.x1;
 801a16e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801a172:	b29a      	uxth	r2, r3
 801a174:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a178:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801a17c:	b29b      	uxth	r3, r3
 801a17e:	4413      	add	r3, r2
 801a180:	b29b      	uxth	r3, r3
 801a182:	b21b      	sxth	r3, r3
 801a184:	823b      	strh	r3, [r7, #16]
    area_tmp.y2 += ext->label->coords.y1;
 801a186:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a18a:	b29a      	uxth	r2, r3
 801a18c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a18e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a190:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801a194:	b29b      	uxth	r3, r3
 801a196:	4413      	add	r3, r2
 801a198:	b29b      	uxth	r3, r3
 801a19a:	b21b      	sxth	r3, r3
 801a19c:	827b      	strh	r3, [r7, #18]
    lv_inv_area(disp, &area_tmp);
 801a19e:	f107 030c 	add.w	r3, r7, #12
 801a1a2:	4619      	mov	r1, r3
 801a1a4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801a1a6:	f7ec fe0d 	bl	8006dc4 <lv_inv_area>
}
 801a1aa:	bf00      	nop
 801a1ac:	3780      	adds	r7, #128	@ 0x80
 801a1ae:	46bd      	mov	sp, r7
 801a1b0:	bd80      	pop	{r7, pc}
 801a1b2:	bf00      	nop

0801a1b4 <placeholder_update>:

static void placeholder_update(lv_obj_t * ta)
{
 801a1b4:	b590      	push	{r4, r7, lr}
 801a1b6:	b087      	sub	sp, #28
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	6078      	str	r0, [r7, #4]
    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801a1bc:	6878      	ldr	r0, [r7, #4]
 801a1be:	f7ec fbab 	bl	8006918 <lv_obj_get_ext_attr>
 801a1c2:	6178      	str	r0, [r7, #20]
    const char * ta_text;

    if(ext->placeholder == NULL) return;
 801a1c4:	697b      	ldr	r3, [r7, #20]
 801a1c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d03d      	beq.n	801a248 <placeholder_update+0x94>

    ta_text = lv_ta_get_text(ta);
 801a1cc:	6878      	ldr	r0, [r7, #4]
 801a1ce:	f7fe fe61 	bl	8018e94 <lv_ta_get_text>
 801a1d2:	6138      	str	r0, [r7, #16]

    if(ta_text[0] == '\0') {
 801a1d4:	693b      	ldr	r3, [r7, #16]
 801a1d6:	781b      	ldrb	r3, [r3, #0]
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d12e      	bne.n	801a23a <placeholder_update+0x86>
        /*Be sure the main label and the placeholder has the same coordinates*/
        lv_obj_t * scrl               = lv_page_get_scrl(ta);
 801a1dc:	6878      	ldr	r0, [r7, #4]
 801a1de:	f7fc f8cf 	bl	8016380 <lv_page_get_scrl>
 801a1e2:	60f8      	str	r0, [r7, #12]
        const lv_style_t * style_scrl = lv_obj_get_style(scrl);
 801a1e4:	68f8      	ldr	r0, [r7, #12]
 801a1e6:	f7ec fa81 	bl	80066ec <lv_obj_get_style>
 801a1ea:	60b8      	str	r0, [r7, #8]
        lv_obj_set_pos(ext->placeholder, style_scrl->body.padding.left, style_scrl->body.padding.top);
 801a1ec:	697b      	ldr	r3, [r7, #20]
 801a1ee:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801a1f0:	68bb      	ldr	r3, [r7, #8]
 801a1f2:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 801a1f6:	68bb      	ldr	r3, [r7, #8]
 801a1f8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801a1fc:	461a      	mov	r2, r3
 801a1fe:	f7eb f9ac 	bl	800555a <lv_obj_set_pos>
        lv_obj_set_pos(ext->label, style_scrl->body.padding.left, style_scrl->body.padding.top);
 801a202:	697b      	ldr	r3, [r7, #20]
 801a204:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801a206:	68bb      	ldr	r3, [r7, #8]
 801a208:	f9b3 101a 	ldrsh.w	r1, [r3, #26]
 801a20c:	68bb      	ldr	r3, [r7, #8]
 801a20e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801a212:	461a      	mov	r2, r3
 801a214:	f7eb f9a1 	bl	800555a <lv_obj_set_pos>

        lv_obj_set_width(ext->placeholder, lv_page_get_fit_width(ta));
 801a218:	697b      	ldr	r3, [r7, #20]
 801a21a:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 801a21c:	6878      	ldr	r0, [r7, #4]
 801a21e:	f7fc f8d4 	bl	80163ca <lv_page_get_fit_width>
 801a222:	4603      	mov	r3, r0
 801a224:	4619      	mov	r1, r3
 801a226:	4620      	mov	r0, r4
 801a228:	f7eb fac5 	bl	80057b6 <lv_obj_set_width>
        lv_obj_set_hidden(ext->placeholder, false);
 801a22c:	697b      	ldr	r3, [r7, #20]
 801a22e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a230:	2100      	movs	r1, #0
 801a232:	4618      	mov	r0, r3
 801a234:	f7eb ffb5 	bl	80061a2 <lv_obj_set_hidden>
 801a238:	e007      	b.n	801a24a <placeholder_update+0x96>
    } else {
        lv_obj_set_hidden(ext->placeholder, true);
 801a23a:	697b      	ldr	r3, [r7, #20]
 801a23c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a23e:	2101      	movs	r1, #1
 801a240:	4618      	mov	r0, r3
 801a242:	f7eb ffae 	bl	80061a2 <lv_obj_set_hidden>
 801a246:	e000      	b.n	801a24a <placeholder_update+0x96>
    if(ext->placeholder == NULL) return;
 801a248:	bf00      	nop
    }
}
 801a24a:	371c      	adds	r7, #28
 801a24c:	46bd      	mov	sp, r7
 801a24e:	bd90      	pop	{r4, r7, pc}

0801a250 <update_cursor_position_on_click>:

static void update_cursor_position_on_click(lv_obj_t * ta, lv_signal_t sign, lv_indev_t * click_source)
{
 801a250:	b580      	push	{r7, lr}
 801a252:	b08c      	sub	sp, #48	@ 0x30
 801a254:	af00      	add	r7, sp, #0
 801a256:	60f8      	str	r0, [r7, #12]
 801a258:	460b      	mov	r3, r1
 801a25a:	607a      	str	r2, [r7, #4]
 801a25c:	72fb      	strb	r3, [r7, #11]

    if(click_source == NULL) return;
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	2b00      	cmp	r3, #0
 801a262:	d07b      	beq.n	801a35c <update_cursor_position_on_click+0x10c>

    lv_ta_ext_t * ext = lv_obj_get_ext_attr(ta);
 801a264:	68f8      	ldr	r0, [r7, #12]
 801a266:	f7ec fb57 	bl	8006918 <lv_obj_get_ext_attr>
 801a26a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if(ext->cursor.click_pos == 0) return;
 801a26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a26e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 801a272:	f003 0320 	and.w	r3, r3, #32
 801a276:	b2db      	uxtb	r3, r3
 801a278:	2b00      	cmp	r3, #0
 801a27a:	d071      	beq.n	801a360 <update_cursor_position_on_click+0x110>
    if(ext->cursor.type == LV_CURSOR_NONE) return;
 801a27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a27e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 801a282:	f003 030f 	and.w	r3, r3, #15
 801a286:	b2db      	uxtb	r3, r3
 801a288:	2b00      	cmp	r3, #0
 801a28a:	d06b      	beq.n	801a364 <update_cursor_position_on_click+0x114>

    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 801a28c:	6878      	ldr	r0, [r7, #4]
 801a28e:	f7e8 ff2d 	bl	80030ec <lv_indev_get_type>
 801a292:	4603      	mov	r3, r0
 801a294:	2b02      	cmp	r3, #2
 801a296:	d067      	beq.n	801a368 <update_cursor_position_on_click+0x118>
       lv_indev_get_type(click_source) == LV_INDEV_TYPE_ENCODER) {
 801a298:	6878      	ldr	r0, [r7, #4]
 801a29a:	f7e8 ff27 	bl	80030ec <lv_indev_get_type>
 801a29e:	4603      	mov	r3, r0
    if(lv_indev_get_type(click_source) == LV_INDEV_TYPE_KEYPAD ||
 801a2a0:	2b04      	cmp	r3, #4
 801a2a2:	d061      	beq.n	801a368 <update_cursor_position_on_click+0x118>
        return;
    }

    lv_area_t label_coords;
    lv_obj_get_coords(ext->label, &label_coords);
 801a2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a2a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a2a8:	f107 021c 	add.w	r2, r7, #28
 801a2ac:	4611      	mov	r1, r2
 801a2ae:	4618      	mov	r0, r3
 801a2b0:	f7ec f970 	bl	8006594 <lv_obj_get_coords>

    lv_point_t point_act, vect_act;
    lv_indev_get_point(click_source, &point_act);
 801a2b4:	f107 0318 	add.w	r3, r7, #24
 801a2b8:	4619      	mov	r1, r3
 801a2ba:	6878      	ldr	r0, [r7, #4]
 801a2bc:	f7e8 ff65 	bl	800318a <lv_indev_get_point>
    lv_indev_get_vect(click_source, &vect_act);
 801a2c0:	f107 0314 	add.w	r3, r7, #20
 801a2c4:	4619      	mov	r1, r3
 801a2c6:	6878      	ldr	r0, [r7, #4]
 801a2c8:	f7e8 ffa8 	bl	800321c <lv_indev_get_vect>

    if(point_act.x < 0 || point_act.y < 0) return; /*Ignore event from keypad*/
 801a2cc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	db4b      	blt.n	801a36c <update_cursor_position_on_click+0x11c>
 801a2d4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	db47      	blt.n	801a36c <update_cursor_position_on_click+0x11c>
    lv_point_t relative_position;
    relative_position.x = point_act.x - label_coords.x1;
 801a2dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 801a2e0:	b29a      	uxth	r2, r3
 801a2e2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801a2e6:	b29b      	uxth	r3, r3
 801a2e8:	1ad3      	subs	r3, r2, r3
 801a2ea:	b29b      	uxth	r3, r3
 801a2ec:	b21b      	sxth	r3, r3
 801a2ee:	823b      	strh	r3, [r7, #16]
    relative_position.y = point_act.y - label_coords.y1;
 801a2f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801a2f4:	b29a      	uxth	r2, r3
 801a2f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a2fa:	b29b      	uxth	r3, r3
 801a2fc:	1ad3      	subs	r3, r2, r3
 801a2fe:	b29b      	uxth	r3, r3
 801a300:	b21b      	sxth	r3, r3
 801a302:	827b      	strh	r3, [r7, #18]

    lv_coord_t label_width = lv_obj_get_width(ext->label);
 801a304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a308:	4618      	mov	r0, r3
 801a30a:	f7ec f984 	bl	8006616 <lv_obj_get_width>
 801a30e:	4603      	mov	r3, r0
 801a310:	84fb      	strh	r3, [r7, #38]	@ 0x26
            ext->text_sel_in_prog = 0;
        }
    }
#else
    /*Check if the click happened on the left side of the area outside the label*/
    if(relative_position.x < 0) {
 801a312:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801a316:	2b00      	cmp	r3, #0
 801a318:	da02      	bge.n	801a320 <update_cursor_position_on_click+0xd0>
        index_of_char_at_position = 0;
 801a31a:	2300      	movs	r3, #0
 801a31c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801a31e:	e013      	b.n	801a348 <update_cursor_position_on_click+0xf8>
    }
    /*Check if the click happened on the right side of the area outside the label*/
    else if(relative_position.x >= label_width) {
 801a320:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801a324:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801a328:	429a      	cmp	r2, r3
 801a32a:	dc03      	bgt.n	801a334 <update_cursor_position_on_click+0xe4>
        index_of_char_at_position = LV_TA_CURSOR_LAST;
 801a32c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801a330:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801a332:	e009      	b.n	801a348 <update_cursor_position_on_click+0xf8>
    } else {
        index_of_char_at_position = lv_label_get_letter_on(ext->label, &relative_position);
 801a334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a338:	f107 0210 	add.w	r2, r7, #16
 801a33c:	4611      	mov	r1, r2
 801a33e:	4618      	mov	r0, r3
 801a340:	f7fa fdaa 	bl	8014e98 <lv_label_get_letter_on>
 801a344:	4603      	mov	r3, r0
 801a346:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    }

    if(sign == LV_SIGNAL_PRESSED) lv_ta_set_cursor_pos(ta, index_of_char_at_position);
 801a348:	7afb      	ldrb	r3, [r7, #11]
 801a34a:	2b07      	cmp	r3, #7
 801a34c:	d10f      	bne.n	801a36e <update_cursor_position_on_click+0x11e>
 801a34e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 801a352:	4619      	mov	r1, r3
 801a354:	68f8      	ldr	r0, [r7, #12]
 801a356:	f7fe fb41 	bl	80189dc <lv_ta_set_cursor_pos>
 801a35a:	e008      	b.n	801a36e <update_cursor_position_on_click+0x11e>
    if(click_source == NULL) return;
 801a35c:	bf00      	nop
 801a35e:	e006      	b.n	801a36e <update_cursor_position_on_click+0x11e>
    if(ext->cursor.click_pos == 0) return;
 801a360:	bf00      	nop
 801a362:	e004      	b.n	801a36e <update_cursor_position_on_click+0x11e>
    if(ext->cursor.type == LV_CURSOR_NONE) return;
 801a364:	bf00      	nop
 801a366:	e002      	b.n	801a36e <update_cursor_position_on_click+0x11e>
        return;
 801a368:	bf00      	nop
 801a36a:	e000      	b.n	801a36e <update_cursor_position_on_click+0x11e>
    if(point_act.x < 0 || point_act.y < 0) return; /*Ignore event from keypad*/
 801a36c:	bf00      	nop
#endif
}
 801a36e:	3730      	adds	r7, #48	@ 0x30
 801a370:	46bd      	mov	sp, r7
 801a372:	bd80      	pop	{r7, pc}

0801a374 <lv_theme_get_current>:
/**
 * Get the current system theme.
 * @return pointer to the current system theme. NULL if not set.
 */
lv_theme_t * lv_theme_get_current(void)
{
 801a374:	b480      	push	{r7}
 801a376:	af00      	add	r7, sp, #0
#if LV_THEME_LIVE_UPDATE == 0
    return current_theme;
 801a378:	4b02      	ldr	r3, [pc, #8]	@ (801a384 <lv_theme_get_current+0x10>)
 801a37a:	681b      	ldr	r3, [r3, #0]
    if(!inited)
        return NULL;
    else
        return &current_theme;
#endif
}
 801a37c:	4618      	mov	r0, r3
 801a37e:	46bd      	mov	sp, r7
 801a380:	bc80      	pop	{r7}
 801a382:	4770      	bx	lr
 801a384:	2000adb0 	.word	0x2000adb0

0801a388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801a388:	b580      	push	{r7, lr}
 801a38a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801a38c:	4b08      	ldr	r3, [pc, #32]	@ (801a3b0 <HAL_Init+0x28>)
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	4a07      	ldr	r2, [pc, #28]	@ (801a3b0 <HAL_Init+0x28>)
 801a392:	f043 0310 	orr.w	r3, r3, #16
 801a396:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801a398:	2003      	movs	r0, #3
 801a39a:	f000 f8f5 	bl	801a588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801a39e:	200f      	movs	r0, #15
 801a3a0:	f7e8 f8cc 	bl	800253c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801a3a4:	f7e8 f898 	bl	80024d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801a3a8:	2300      	movs	r3, #0
}
 801a3aa:	4618      	mov	r0, r3
 801a3ac:	bd80      	pop	{r7, pc}
 801a3ae:	bf00      	nop
 801a3b0:	40022000 	.word	0x40022000

0801a3b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801a3b4:	b480      	push	{r7}
 801a3b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801a3b8:	4b05      	ldr	r3, [pc, #20]	@ (801a3d0 <HAL_IncTick+0x1c>)
 801a3ba:	781b      	ldrb	r3, [r3, #0]
 801a3bc:	461a      	mov	r2, r3
 801a3be:	4b05      	ldr	r3, [pc, #20]	@ (801a3d4 <HAL_IncTick+0x20>)
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	4413      	add	r3, r2
 801a3c4:	4a03      	ldr	r2, [pc, #12]	@ (801a3d4 <HAL_IncTick+0x20>)
 801a3c6:	6013      	str	r3, [r2, #0]
}
 801a3c8:	bf00      	nop
 801a3ca:	46bd      	mov	sp, r7
 801a3cc:	bc80      	pop	{r7}
 801a3ce:	4770      	bx	lr
 801a3d0:	20000f38 	.word	0x20000f38
 801a3d4:	2000adb4 	.word	0x2000adb4

0801a3d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801a3d8:	b480      	push	{r7}
 801a3da:	af00      	add	r7, sp, #0
  return uwTick;
 801a3dc:	4b02      	ldr	r3, [pc, #8]	@ (801a3e8 <HAL_GetTick+0x10>)
 801a3de:	681b      	ldr	r3, [r3, #0]
}
 801a3e0:	4618      	mov	r0, r3
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	bc80      	pop	{r7}
 801a3e6:	4770      	bx	lr
 801a3e8:	2000adb4 	.word	0x2000adb4

0801a3ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b084      	sub	sp, #16
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801a3f4:	f7ff fff0 	bl	801a3d8 <HAL_GetTick>
 801a3f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a404:	d005      	beq.n	801a412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801a406:	4b0a      	ldr	r3, [pc, #40]	@ (801a430 <HAL_Delay+0x44>)
 801a408:	781b      	ldrb	r3, [r3, #0]
 801a40a:	461a      	mov	r2, r3
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	4413      	add	r3, r2
 801a410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801a412:	bf00      	nop
 801a414:	f7ff ffe0 	bl	801a3d8 <HAL_GetTick>
 801a418:	4602      	mov	r2, r0
 801a41a:	68bb      	ldr	r3, [r7, #8]
 801a41c:	1ad3      	subs	r3, r2, r3
 801a41e:	68fa      	ldr	r2, [r7, #12]
 801a420:	429a      	cmp	r2, r3
 801a422:	d8f7      	bhi.n	801a414 <HAL_Delay+0x28>
  {
  }
}
 801a424:	bf00      	nop
 801a426:	bf00      	nop
 801a428:	3710      	adds	r7, #16
 801a42a:	46bd      	mov	sp, r7
 801a42c:	bd80      	pop	{r7, pc}
 801a42e:	bf00      	nop
 801a430:	20000f38 	.word	0x20000f38

0801a434 <__NVIC_SetPriorityGrouping>:
{
 801a434:	b480      	push	{r7}
 801a436:	b085      	sub	sp, #20
 801a438:	af00      	add	r7, sp, #0
 801a43a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	f003 0307 	and.w	r3, r3, #7
 801a442:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a444:	4b0c      	ldr	r3, [pc, #48]	@ (801a478 <__NVIC_SetPriorityGrouping+0x44>)
 801a446:	68db      	ldr	r3, [r3, #12]
 801a448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a44a:	68ba      	ldr	r2, [r7, #8]
 801a44c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801a450:	4013      	ands	r3, r2
 801a452:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801a458:	68bb      	ldr	r3, [r7, #8]
 801a45a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801a45c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 801a460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801a464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801a466:	4a04      	ldr	r2, [pc, #16]	@ (801a478 <__NVIC_SetPriorityGrouping+0x44>)
 801a468:	68bb      	ldr	r3, [r7, #8]
 801a46a:	60d3      	str	r3, [r2, #12]
}
 801a46c:	bf00      	nop
 801a46e:	3714      	adds	r7, #20
 801a470:	46bd      	mov	sp, r7
 801a472:	bc80      	pop	{r7}
 801a474:	4770      	bx	lr
 801a476:	bf00      	nop
 801a478:	e000ed00 	.word	0xe000ed00

0801a47c <__NVIC_GetPriorityGrouping>:
{
 801a47c:	b480      	push	{r7}
 801a47e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801a480:	4b04      	ldr	r3, [pc, #16]	@ (801a494 <__NVIC_GetPriorityGrouping+0x18>)
 801a482:	68db      	ldr	r3, [r3, #12]
 801a484:	0a1b      	lsrs	r3, r3, #8
 801a486:	f003 0307 	and.w	r3, r3, #7
}
 801a48a:	4618      	mov	r0, r3
 801a48c:	46bd      	mov	sp, r7
 801a48e:	bc80      	pop	{r7}
 801a490:	4770      	bx	lr
 801a492:	bf00      	nop
 801a494:	e000ed00 	.word	0xe000ed00

0801a498 <__NVIC_EnableIRQ>:
{
 801a498:	b480      	push	{r7}
 801a49a:	b083      	sub	sp, #12
 801a49c:	af00      	add	r7, sp, #0
 801a49e:	4603      	mov	r3, r0
 801a4a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a4a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	db0b      	blt.n	801a4c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a4aa:	79fb      	ldrb	r3, [r7, #7]
 801a4ac:	f003 021f 	and.w	r2, r3, #31
 801a4b0:	4906      	ldr	r1, [pc, #24]	@ (801a4cc <__NVIC_EnableIRQ+0x34>)
 801a4b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a4b6:	095b      	lsrs	r3, r3, #5
 801a4b8:	2001      	movs	r0, #1
 801a4ba:	fa00 f202 	lsl.w	r2, r0, r2
 801a4be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a4c2:	bf00      	nop
 801a4c4:	370c      	adds	r7, #12
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	bc80      	pop	{r7}
 801a4ca:	4770      	bx	lr
 801a4cc:	e000e100 	.word	0xe000e100

0801a4d0 <__NVIC_SetPriority>:
{
 801a4d0:	b480      	push	{r7}
 801a4d2:	b083      	sub	sp, #12
 801a4d4:	af00      	add	r7, sp, #0
 801a4d6:	4603      	mov	r3, r0
 801a4d8:	6039      	str	r1, [r7, #0]
 801a4da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801a4dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	db0a      	blt.n	801a4fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a4e4:	683b      	ldr	r3, [r7, #0]
 801a4e6:	b2da      	uxtb	r2, r3
 801a4e8:	490c      	ldr	r1, [pc, #48]	@ (801a51c <__NVIC_SetPriority+0x4c>)
 801a4ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a4ee:	0112      	lsls	r2, r2, #4
 801a4f0:	b2d2      	uxtb	r2, r2
 801a4f2:	440b      	add	r3, r1
 801a4f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801a4f8:	e00a      	b.n	801a510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a4fa:	683b      	ldr	r3, [r7, #0]
 801a4fc:	b2da      	uxtb	r2, r3
 801a4fe:	4908      	ldr	r1, [pc, #32]	@ (801a520 <__NVIC_SetPriority+0x50>)
 801a500:	79fb      	ldrb	r3, [r7, #7]
 801a502:	f003 030f 	and.w	r3, r3, #15
 801a506:	3b04      	subs	r3, #4
 801a508:	0112      	lsls	r2, r2, #4
 801a50a:	b2d2      	uxtb	r2, r2
 801a50c:	440b      	add	r3, r1
 801a50e:	761a      	strb	r2, [r3, #24]
}
 801a510:	bf00      	nop
 801a512:	370c      	adds	r7, #12
 801a514:	46bd      	mov	sp, r7
 801a516:	bc80      	pop	{r7}
 801a518:	4770      	bx	lr
 801a51a:	bf00      	nop
 801a51c:	e000e100 	.word	0xe000e100
 801a520:	e000ed00 	.word	0xe000ed00

0801a524 <NVIC_EncodePriority>:
{
 801a524:	b480      	push	{r7}
 801a526:	b089      	sub	sp, #36	@ 0x24
 801a528:	af00      	add	r7, sp, #0
 801a52a:	60f8      	str	r0, [r7, #12]
 801a52c:	60b9      	str	r1, [r7, #8]
 801a52e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801a530:	68fb      	ldr	r3, [r7, #12]
 801a532:	f003 0307 	and.w	r3, r3, #7
 801a536:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801a538:	69fb      	ldr	r3, [r7, #28]
 801a53a:	f1c3 0307 	rsb	r3, r3, #7
 801a53e:	2b04      	cmp	r3, #4
 801a540:	bf28      	it	cs
 801a542:	2304      	movcs	r3, #4
 801a544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a546:	69fb      	ldr	r3, [r7, #28]
 801a548:	3304      	adds	r3, #4
 801a54a:	2b06      	cmp	r3, #6
 801a54c:	d902      	bls.n	801a554 <NVIC_EncodePriority+0x30>
 801a54e:	69fb      	ldr	r3, [r7, #28]
 801a550:	3b03      	subs	r3, #3
 801a552:	e000      	b.n	801a556 <NVIC_EncodePriority+0x32>
 801a554:	2300      	movs	r3, #0
 801a556:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a558:	f04f 32ff 	mov.w	r2, #4294967295
 801a55c:	69bb      	ldr	r3, [r7, #24]
 801a55e:	fa02 f303 	lsl.w	r3, r2, r3
 801a562:	43da      	mvns	r2, r3
 801a564:	68bb      	ldr	r3, [r7, #8]
 801a566:	401a      	ands	r2, r3
 801a568:	697b      	ldr	r3, [r7, #20]
 801a56a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801a56c:	f04f 31ff 	mov.w	r1, #4294967295
 801a570:	697b      	ldr	r3, [r7, #20]
 801a572:	fa01 f303 	lsl.w	r3, r1, r3
 801a576:	43d9      	mvns	r1, r3
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a57c:	4313      	orrs	r3, r2
}
 801a57e:	4618      	mov	r0, r3
 801a580:	3724      	adds	r7, #36	@ 0x24
 801a582:	46bd      	mov	sp, r7
 801a584:	bc80      	pop	{r7}
 801a586:	4770      	bx	lr

0801a588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a588:	b580      	push	{r7, lr}
 801a58a:	b082      	sub	sp, #8
 801a58c:	af00      	add	r7, sp, #0
 801a58e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801a590:	6878      	ldr	r0, [r7, #4]
 801a592:	f7ff ff4f 	bl	801a434 <__NVIC_SetPriorityGrouping>
}
 801a596:	bf00      	nop
 801a598:	3708      	adds	r7, #8
 801a59a:	46bd      	mov	sp, r7
 801a59c:	bd80      	pop	{r7, pc}

0801a59e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801a59e:	b580      	push	{r7, lr}
 801a5a0:	b086      	sub	sp, #24
 801a5a2:	af00      	add	r7, sp, #0
 801a5a4:	4603      	mov	r3, r0
 801a5a6:	60b9      	str	r1, [r7, #8]
 801a5a8:	607a      	str	r2, [r7, #4]
 801a5aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801a5ac:	2300      	movs	r3, #0
 801a5ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801a5b0:	f7ff ff64 	bl	801a47c <__NVIC_GetPriorityGrouping>
 801a5b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801a5b6:	687a      	ldr	r2, [r7, #4]
 801a5b8:	68b9      	ldr	r1, [r7, #8]
 801a5ba:	6978      	ldr	r0, [r7, #20]
 801a5bc:	f7ff ffb2 	bl	801a524 <NVIC_EncodePriority>
 801a5c0:	4602      	mov	r2, r0
 801a5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a5c6:	4611      	mov	r1, r2
 801a5c8:	4618      	mov	r0, r3
 801a5ca:	f7ff ff81 	bl	801a4d0 <__NVIC_SetPriority>
}
 801a5ce:	bf00      	nop
 801a5d0:	3718      	adds	r7, #24
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	bd80      	pop	{r7, pc}

0801a5d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801a5d6:	b580      	push	{r7, lr}
 801a5d8:	b082      	sub	sp, #8
 801a5da:	af00      	add	r7, sp, #0
 801a5dc:	4603      	mov	r3, r0
 801a5de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801a5e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a5e4:	4618      	mov	r0, r3
 801a5e6:	f7ff ff57 	bl	801a498 <__NVIC_EnableIRQ>
}
 801a5ea:	bf00      	nop
 801a5ec:	3708      	adds	r7, #8
 801a5ee:	46bd      	mov	sp, r7
 801a5f0:	bd80      	pop	{r7, pc}
	...

0801a5f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801a5f4:	b480      	push	{r7}
 801a5f6:	b08b      	sub	sp, #44	@ 0x2c
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	6078      	str	r0, [r7, #4]
 801a5fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801a5fe:	2300      	movs	r3, #0
 801a600:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 801a602:	2300      	movs	r3, #0
 801a604:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801a606:	e179      	b.n	801a8fc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 801a608:	2201      	movs	r2, #1
 801a60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a60c:	fa02 f303 	lsl.w	r3, r2, r3
 801a610:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801a612:	683b      	ldr	r3, [r7, #0]
 801a614:	681b      	ldr	r3, [r3, #0]
 801a616:	69fa      	ldr	r2, [r7, #28]
 801a618:	4013      	ands	r3, r2
 801a61a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 801a61c:	69ba      	ldr	r2, [r7, #24]
 801a61e:	69fb      	ldr	r3, [r7, #28]
 801a620:	429a      	cmp	r2, r3
 801a622:	f040 8168 	bne.w	801a8f6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 801a626:	683b      	ldr	r3, [r7, #0]
 801a628:	685b      	ldr	r3, [r3, #4]
 801a62a:	4a96      	ldr	r2, [pc, #600]	@ (801a884 <HAL_GPIO_Init+0x290>)
 801a62c:	4293      	cmp	r3, r2
 801a62e:	d05e      	beq.n	801a6ee <HAL_GPIO_Init+0xfa>
 801a630:	4a94      	ldr	r2, [pc, #592]	@ (801a884 <HAL_GPIO_Init+0x290>)
 801a632:	4293      	cmp	r3, r2
 801a634:	d875      	bhi.n	801a722 <HAL_GPIO_Init+0x12e>
 801a636:	4a94      	ldr	r2, [pc, #592]	@ (801a888 <HAL_GPIO_Init+0x294>)
 801a638:	4293      	cmp	r3, r2
 801a63a:	d058      	beq.n	801a6ee <HAL_GPIO_Init+0xfa>
 801a63c:	4a92      	ldr	r2, [pc, #584]	@ (801a888 <HAL_GPIO_Init+0x294>)
 801a63e:	4293      	cmp	r3, r2
 801a640:	d86f      	bhi.n	801a722 <HAL_GPIO_Init+0x12e>
 801a642:	4a92      	ldr	r2, [pc, #584]	@ (801a88c <HAL_GPIO_Init+0x298>)
 801a644:	4293      	cmp	r3, r2
 801a646:	d052      	beq.n	801a6ee <HAL_GPIO_Init+0xfa>
 801a648:	4a90      	ldr	r2, [pc, #576]	@ (801a88c <HAL_GPIO_Init+0x298>)
 801a64a:	4293      	cmp	r3, r2
 801a64c:	d869      	bhi.n	801a722 <HAL_GPIO_Init+0x12e>
 801a64e:	4a90      	ldr	r2, [pc, #576]	@ (801a890 <HAL_GPIO_Init+0x29c>)
 801a650:	4293      	cmp	r3, r2
 801a652:	d04c      	beq.n	801a6ee <HAL_GPIO_Init+0xfa>
 801a654:	4a8e      	ldr	r2, [pc, #568]	@ (801a890 <HAL_GPIO_Init+0x29c>)
 801a656:	4293      	cmp	r3, r2
 801a658:	d863      	bhi.n	801a722 <HAL_GPIO_Init+0x12e>
 801a65a:	4a8e      	ldr	r2, [pc, #568]	@ (801a894 <HAL_GPIO_Init+0x2a0>)
 801a65c:	4293      	cmp	r3, r2
 801a65e:	d046      	beq.n	801a6ee <HAL_GPIO_Init+0xfa>
 801a660:	4a8c      	ldr	r2, [pc, #560]	@ (801a894 <HAL_GPIO_Init+0x2a0>)
 801a662:	4293      	cmp	r3, r2
 801a664:	d85d      	bhi.n	801a722 <HAL_GPIO_Init+0x12e>
 801a666:	2b12      	cmp	r3, #18
 801a668:	d82a      	bhi.n	801a6c0 <HAL_GPIO_Init+0xcc>
 801a66a:	2b12      	cmp	r3, #18
 801a66c:	d859      	bhi.n	801a722 <HAL_GPIO_Init+0x12e>
 801a66e:	a201      	add	r2, pc, #4	@ (adr r2, 801a674 <HAL_GPIO_Init+0x80>)
 801a670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a674:	0801a6ef 	.word	0x0801a6ef
 801a678:	0801a6c9 	.word	0x0801a6c9
 801a67c:	0801a6db 	.word	0x0801a6db
 801a680:	0801a71d 	.word	0x0801a71d
 801a684:	0801a723 	.word	0x0801a723
 801a688:	0801a723 	.word	0x0801a723
 801a68c:	0801a723 	.word	0x0801a723
 801a690:	0801a723 	.word	0x0801a723
 801a694:	0801a723 	.word	0x0801a723
 801a698:	0801a723 	.word	0x0801a723
 801a69c:	0801a723 	.word	0x0801a723
 801a6a0:	0801a723 	.word	0x0801a723
 801a6a4:	0801a723 	.word	0x0801a723
 801a6a8:	0801a723 	.word	0x0801a723
 801a6ac:	0801a723 	.word	0x0801a723
 801a6b0:	0801a723 	.word	0x0801a723
 801a6b4:	0801a723 	.word	0x0801a723
 801a6b8:	0801a6d1 	.word	0x0801a6d1
 801a6bc:	0801a6e5 	.word	0x0801a6e5
 801a6c0:	4a75      	ldr	r2, [pc, #468]	@ (801a898 <HAL_GPIO_Init+0x2a4>)
 801a6c2:	4293      	cmp	r3, r2
 801a6c4:	d013      	beq.n	801a6ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 801a6c6:	e02c      	b.n	801a722 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 801a6c8:	683b      	ldr	r3, [r7, #0]
 801a6ca:	68db      	ldr	r3, [r3, #12]
 801a6cc:	623b      	str	r3, [r7, #32]
          break;
 801a6ce:	e029      	b.n	801a724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 801a6d0:	683b      	ldr	r3, [r7, #0]
 801a6d2:	68db      	ldr	r3, [r3, #12]
 801a6d4:	3304      	adds	r3, #4
 801a6d6:	623b      	str	r3, [r7, #32]
          break;
 801a6d8:	e024      	b.n	801a724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 801a6da:	683b      	ldr	r3, [r7, #0]
 801a6dc:	68db      	ldr	r3, [r3, #12]
 801a6de:	3308      	adds	r3, #8
 801a6e0:	623b      	str	r3, [r7, #32]
          break;
 801a6e2:	e01f      	b.n	801a724 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 801a6e4:	683b      	ldr	r3, [r7, #0]
 801a6e6:	68db      	ldr	r3, [r3, #12]
 801a6e8:	330c      	adds	r3, #12
 801a6ea:	623b      	str	r3, [r7, #32]
          break;
 801a6ec:	e01a      	b.n	801a724 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 801a6ee:	683b      	ldr	r3, [r7, #0]
 801a6f0:	689b      	ldr	r3, [r3, #8]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d102      	bne.n	801a6fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 801a6f6:	2304      	movs	r3, #4
 801a6f8:	623b      	str	r3, [r7, #32]
          break;
 801a6fa:	e013      	b.n	801a724 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 801a6fc:	683b      	ldr	r3, [r7, #0]
 801a6fe:	689b      	ldr	r3, [r3, #8]
 801a700:	2b01      	cmp	r3, #1
 801a702:	d105      	bne.n	801a710 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 801a704:	2308      	movs	r3, #8
 801a706:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	69fa      	ldr	r2, [r7, #28]
 801a70c:	611a      	str	r2, [r3, #16]
          break;
 801a70e:	e009      	b.n	801a724 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 801a710:	2308      	movs	r3, #8
 801a712:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	69fa      	ldr	r2, [r7, #28]
 801a718:	615a      	str	r2, [r3, #20]
          break;
 801a71a:	e003      	b.n	801a724 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 801a71c:	2300      	movs	r3, #0
 801a71e:	623b      	str	r3, [r7, #32]
          break;
 801a720:	e000      	b.n	801a724 <HAL_GPIO_Init+0x130>
          break;
 801a722:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 801a724:	69bb      	ldr	r3, [r7, #24]
 801a726:	2bff      	cmp	r3, #255	@ 0xff
 801a728:	d801      	bhi.n	801a72e <HAL_GPIO_Init+0x13a>
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	e001      	b.n	801a732 <HAL_GPIO_Init+0x13e>
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	3304      	adds	r3, #4
 801a732:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 801a734:	69bb      	ldr	r3, [r7, #24]
 801a736:	2bff      	cmp	r3, #255	@ 0xff
 801a738:	d802      	bhi.n	801a740 <HAL_GPIO_Init+0x14c>
 801a73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a73c:	009b      	lsls	r3, r3, #2
 801a73e:	e002      	b.n	801a746 <HAL_GPIO_Init+0x152>
 801a740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a742:	3b08      	subs	r3, #8
 801a744:	009b      	lsls	r3, r3, #2
 801a746:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 801a748:	697b      	ldr	r3, [r7, #20]
 801a74a:	681a      	ldr	r2, [r3, #0]
 801a74c:	210f      	movs	r1, #15
 801a74e:	693b      	ldr	r3, [r7, #16]
 801a750:	fa01 f303 	lsl.w	r3, r1, r3
 801a754:	43db      	mvns	r3, r3
 801a756:	401a      	ands	r2, r3
 801a758:	6a39      	ldr	r1, [r7, #32]
 801a75a:	693b      	ldr	r3, [r7, #16]
 801a75c:	fa01 f303 	lsl.w	r3, r1, r3
 801a760:	431a      	orrs	r2, r3
 801a762:	697b      	ldr	r3, [r7, #20]
 801a764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801a766:	683b      	ldr	r3, [r7, #0]
 801a768:	685b      	ldr	r3, [r3, #4]
 801a76a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801a76e:	2b00      	cmp	r3, #0
 801a770:	f000 80c1 	beq.w	801a8f6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 801a774:	4b49      	ldr	r3, [pc, #292]	@ (801a89c <HAL_GPIO_Init+0x2a8>)
 801a776:	699b      	ldr	r3, [r3, #24]
 801a778:	4a48      	ldr	r2, [pc, #288]	@ (801a89c <HAL_GPIO_Init+0x2a8>)
 801a77a:	f043 0301 	orr.w	r3, r3, #1
 801a77e:	6193      	str	r3, [r2, #24]
 801a780:	4b46      	ldr	r3, [pc, #280]	@ (801a89c <HAL_GPIO_Init+0x2a8>)
 801a782:	699b      	ldr	r3, [r3, #24]
 801a784:	f003 0301 	and.w	r3, r3, #1
 801a788:	60bb      	str	r3, [r7, #8]
 801a78a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 801a78c:	4a44      	ldr	r2, [pc, #272]	@ (801a8a0 <HAL_GPIO_Init+0x2ac>)
 801a78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a790:	089b      	lsrs	r3, r3, #2
 801a792:	3302      	adds	r3, #2
 801a794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a798:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 801a79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a79c:	f003 0303 	and.w	r3, r3, #3
 801a7a0:	009b      	lsls	r3, r3, #2
 801a7a2:	220f      	movs	r2, #15
 801a7a4:	fa02 f303 	lsl.w	r3, r2, r3
 801a7a8:	43db      	mvns	r3, r3
 801a7aa:	68fa      	ldr	r2, [r7, #12]
 801a7ac:	4013      	ands	r3, r2
 801a7ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	4a3c      	ldr	r2, [pc, #240]	@ (801a8a4 <HAL_GPIO_Init+0x2b0>)
 801a7b4:	4293      	cmp	r3, r2
 801a7b6:	d01f      	beq.n	801a7f8 <HAL_GPIO_Init+0x204>
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	4a3b      	ldr	r2, [pc, #236]	@ (801a8a8 <HAL_GPIO_Init+0x2b4>)
 801a7bc:	4293      	cmp	r3, r2
 801a7be:	d019      	beq.n	801a7f4 <HAL_GPIO_Init+0x200>
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	4a3a      	ldr	r2, [pc, #232]	@ (801a8ac <HAL_GPIO_Init+0x2b8>)
 801a7c4:	4293      	cmp	r3, r2
 801a7c6:	d013      	beq.n	801a7f0 <HAL_GPIO_Init+0x1fc>
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	4a39      	ldr	r2, [pc, #228]	@ (801a8b0 <HAL_GPIO_Init+0x2bc>)
 801a7cc:	4293      	cmp	r3, r2
 801a7ce:	d00d      	beq.n	801a7ec <HAL_GPIO_Init+0x1f8>
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	4a38      	ldr	r2, [pc, #224]	@ (801a8b4 <HAL_GPIO_Init+0x2c0>)
 801a7d4:	4293      	cmp	r3, r2
 801a7d6:	d007      	beq.n	801a7e8 <HAL_GPIO_Init+0x1f4>
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	4a37      	ldr	r2, [pc, #220]	@ (801a8b8 <HAL_GPIO_Init+0x2c4>)
 801a7dc:	4293      	cmp	r3, r2
 801a7de:	d101      	bne.n	801a7e4 <HAL_GPIO_Init+0x1f0>
 801a7e0:	2305      	movs	r3, #5
 801a7e2:	e00a      	b.n	801a7fa <HAL_GPIO_Init+0x206>
 801a7e4:	2306      	movs	r3, #6
 801a7e6:	e008      	b.n	801a7fa <HAL_GPIO_Init+0x206>
 801a7e8:	2304      	movs	r3, #4
 801a7ea:	e006      	b.n	801a7fa <HAL_GPIO_Init+0x206>
 801a7ec:	2303      	movs	r3, #3
 801a7ee:	e004      	b.n	801a7fa <HAL_GPIO_Init+0x206>
 801a7f0:	2302      	movs	r3, #2
 801a7f2:	e002      	b.n	801a7fa <HAL_GPIO_Init+0x206>
 801a7f4:	2301      	movs	r3, #1
 801a7f6:	e000      	b.n	801a7fa <HAL_GPIO_Init+0x206>
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a7fc:	f002 0203 	and.w	r2, r2, #3
 801a800:	0092      	lsls	r2, r2, #2
 801a802:	4093      	lsls	r3, r2
 801a804:	68fa      	ldr	r2, [r7, #12]
 801a806:	4313      	orrs	r3, r2
 801a808:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 801a80a:	4925      	ldr	r1, [pc, #148]	@ (801a8a0 <HAL_GPIO_Init+0x2ac>)
 801a80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a80e:	089b      	lsrs	r3, r3, #2
 801a810:	3302      	adds	r3, #2
 801a812:	68fa      	ldr	r2, [r7, #12]
 801a814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801a818:	683b      	ldr	r3, [r7, #0]
 801a81a:	685b      	ldr	r3, [r3, #4]
 801a81c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801a820:	2b00      	cmp	r3, #0
 801a822:	d006      	beq.n	801a832 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 801a824:	4b25      	ldr	r3, [pc, #148]	@ (801a8bc <HAL_GPIO_Init+0x2c8>)
 801a826:	689a      	ldr	r2, [r3, #8]
 801a828:	4924      	ldr	r1, [pc, #144]	@ (801a8bc <HAL_GPIO_Init+0x2c8>)
 801a82a:	69bb      	ldr	r3, [r7, #24]
 801a82c:	4313      	orrs	r3, r2
 801a82e:	608b      	str	r3, [r1, #8]
 801a830:	e006      	b.n	801a840 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 801a832:	4b22      	ldr	r3, [pc, #136]	@ (801a8bc <HAL_GPIO_Init+0x2c8>)
 801a834:	689a      	ldr	r2, [r3, #8]
 801a836:	69bb      	ldr	r3, [r7, #24]
 801a838:	43db      	mvns	r3, r3
 801a83a:	4920      	ldr	r1, [pc, #128]	@ (801a8bc <HAL_GPIO_Init+0x2c8>)
 801a83c:	4013      	ands	r3, r2
 801a83e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801a840:	683b      	ldr	r3, [r7, #0]
 801a842:	685b      	ldr	r3, [r3, #4]
 801a844:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801a848:	2b00      	cmp	r3, #0
 801a84a:	d006      	beq.n	801a85a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 801a84c:	4b1b      	ldr	r3, [pc, #108]	@ (801a8bc <HAL_GPIO_Init+0x2c8>)
 801a84e:	68da      	ldr	r2, [r3, #12]
 801a850:	491a      	ldr	r1, [pc, #104]	@ (801a8bc <HAL_GPIO_Init+0x2c8>)
 801a852:	69bb      	ldr	r3, [r7, #24]
 801a854:	4313      	orrs	r3, r2
 801a856:	60cb      	str	r3, [r1, #12]
 801a858:	e006      	b.n	801a868 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 801a85a:	4b18      	ldr	r3, [pc, #96]	@ (801a8bc <HAL_GPIO_Init+0x2c8>)
 801a85c:	68da      	ldr	r2, [r3, #12]
 801a85e:	69bb      	ldr	r3, [r7, #24]
 801a860:	43db      	mvns	r3, r3
 801a862:	4916      	ldr	r1, [pc, #88]	@ (801a8bc <HAL_GPIO_Init+0x2c8>)
 801a864:	4013      	ands	r3, r2
 801a866:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801a868:	683b      	ldr	r3, [r7, #0]
 801a86a:	685b      	ldr	r3, [r3, #4]
 801a86c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a870:	2b00      	cmp	r3, #0
 801a872:	d025      	beq.n	801a8c0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 801a874:	4b11      	ldr	r3, [pc, #68]	@ (801a8bc <HAL_GPIO_Init+0x2c8>)
 801a876:	685a      	ldr	r2, [r3, #4]
 801a878:	4910      	ldr	r1, [pc, #64]	@ (801a8bc <HAL_GPIO_Init+0x2c8>)
 801a87a:	69bb      	ldr	r3, [r7, #24]
 801a87c:	4313      	orrs	r3, r2
 801a87e:	604b      	str	r3, [r1, #4]
 801a880:	e025      	b.n	801a8ce <HAL_GPIO_Init+0x2da>
 801a882:	bf00      	nop
 801a884:	10320000 	.word	0x10320000
 801a888:	10310000 	.word	0x10310000
 801a88c:	10220000 	.word	0x10220000
 801a890:	10210000 	.word	0x10210000
 801a894:	10120000 	.word	0x10120000
 801a898:	10110000 	.word	0x10110000
 801a89c:	40021000 	.word	0x40021000
 801a8a0:	40010000 	.word	0x40010000
 801a8a4:	40010800 	.word	0x40010800
 801a8a8:	40010c00 	.word	0x40010c00
 801a8ac:	40011000 	.word	0x40011000
 801a8b0:	40011400 	.word	0x40011400
 801a8b4:	40011800 	.word	0x40011800
 801a8b8:	40011c00 	.word	0x40011c00
 801a8bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 801a8c0:	4b15      	ldr	r3, [pc, #84]	@ (801a918 <HAL_GPIO_Init+0x324>)
 801a8c2:	685a      	ldr	r2, [r3, #4]
 801a8c4:	69bb      	ldr	r3, [r7, #24]
 801a8c6:	43db      	mvns	r3, r3
 801a8c8:	4913      	ldr	r1, [pc, #76]	@ (801a918 <HAL_GPIO_Init+0x324>)
 801a8ca:	4013      	ands	r3, r2
 801a8cc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801a8ce:	683b      	ldr	r3, [r7, #0]
 801a8d0:	685b      	ldr	r3, [r3, #4]
 801a8d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d006      	beq.n	801a8e8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 801a8da:	4b0f      	ldr	r3, [pc, #60]	@ (801a918 <HAL_GPIO_Init+0x324>)
 801a8dc:	681a      	ldr	r2, [r3, #0]
 801a8de:	490e      	ldr	r1, [pc, #56]	@ (801a918 <HAL_GPIO_Init+0x324>)
 801a8e0:	69bb      	ldr	r3, [r7, #24]
 801a8e2:	4313      	orrs	r3, r2
 801a8e4:	600b      	str	r3, [r1, #0]
 801a8e6:	e006      	b.n	801a8f6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 801a8e8:	4b0b      	ldr	r3, [pc, #44]	@ (801a918 <HAL_GPIO_Init+0x324>)
 801a8ea:	681a      	ldr	r2, [r3, #0]
 801a8ec:	69bb      	ldr	r3, [r7, #24]
 801a8ee:	43db      	mvns	r3, r3
 801a8f0:	4909      	ldr	r1, [pc, #36]	@ (801a918 <HAL_GPIO_Init+0x324>)
 801a8f2:	4013      	ands	r3, r2
 801a8f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 801a8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8f8:	3301      	adds	r3, #1
 801a8fa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801a8fc:	683b      	ldr	r3, [r7, #0]
 801a8fe:	681a      	ldr	r2, [r3, #0]
 801a900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a902:	fa22 f303 	lsr.w	r3, r2, r3
 801a906:	2b00      	cmp	r3, #0
 801a908:	f47f ae7e 	bne.w	801a608 <HAL_GPIO_Init+0x14>
  }
}
 801a90c:	bf00      	nop
 801a90e:	bf00      	nop
 801a910:	372c      	adds	r7, #44	@ 0x2c
 801a912:	46bd      	mov	sp, r7
 801a914:	bc80      	pop	{r7}
 801a916:	4770      	bx	lr
 801a918:	40010400 	.word	0x40010400

0801a91c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801a91c:	b480      	push	{r7}
 801a91e:	b085      	sub	sp, #20
 801a920:	af00      	add	r7, sp, #0
 801a922:	6078      	str	r0, [r7, #4]
 801a924:	460b      	mov	r3, r1
 801a926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	689a      	ldr	r2, [r3, #8]
 801a92c:	887b      	ldrh	r3, [r7, #2]
 801a92e:	4013      	ands	r3, r2
 801a930:	2b00      	cmp	r3, #0
 801a932:	d002      	beq.n	801a93a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801a934:	2301      	movs	r3, #1
 801a936:	73fb      	strb	r3, [r7, #15]
 801a938:	e001      	b.n	801a93e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801a93a:	2300      	movs	r3, #0
 801a93c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801a93e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a940:	4618      	mov	r0, r3
 801a942:	3714      	adds	r7, #20
 801a944:	46bd      	mov	sp, r7
 801a946:	bc80      	pop	{r7}
 801a948:	4770      	bx	lr

0801a94a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801a94a:	b480      	push	{r7}
 801a94c:	b083      	sub	sp, #12
 801a94e:	af00      	add	r7, sp, #0
 801a950:	6078      	str	r0, [r7, #4]
 801a952:	460b      	mov	r3, r1
 801a954:	807b      	strh	r3, [r7, #2]
 801a956:	4613      	mov	r3, r2
 801a958:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801a95a:	787b      	ldrb	r3, [r7, #1]
 801a95c:	2b00      	cmp	r3, #0
 801a95e:	d003      	beq.n	801a968 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801a960:	887a      	ldrh	r2, [r7, #2]
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 801a966:	e003      	b.n	801a970 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 801a968:	887b      	ldrh	r3, [r7, #2]
 801a96a:	041a      	lsls	r2, r3, #16
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	611a      	str	r2, [r3, #16]
}
 801a970:	bf00      	nop
 801a972:	370c      	adds	r7, #12
 801a974:	46bd      	mov	sp, r7
 801a976:	bc80      	pop	{r7}
 801a978:	4770      	bx	lr
	...

0801a97c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a97c:	b580      	push	{r7, lr}
 801a97e:	b086      	sub	sp, #24
 801a980:	af00      	add	r7, sp, #0
 801a982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	2b00      	cmp	r3, #0
 801a988:	d101      	bne.n	801a98e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801a98a:	2301      	movs	r3, #1
 801a98c:	e272      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	f003 0301 	and.w	r3, r3, #1
 801a996:	2b00      	cmp	r3, #0
 801a998:	f000 8087 	beq.w	801aaaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801a99c:	4b92      	ldr	r3, [pc, #584]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801a99e:	685b      	ldr	r3, [r3, #4]
 801a9a0:	f003 030c 	and.w	r3, r3, #12
 801a9a4:	2b04      	cmp	r3, #4
 801a9a6:	d00c      	beq.n	801a9c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 801a9a8:	4b8f      	ldr	r3, [pc, #572]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801a9aa:	685b      	ldr	r3, [r3, #4]
 801a9ac:	f003 030c 	and.w	r3, r3, #12
 801a9b0:	2b08      	cmp	r3, #8
 801a9b2:	d112      	bne.n	801a9da <HAL_RCC_OscConfig+0x5e>
 801a9b4:	4b8c      	ldr	r3, [pc, #560]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801a9b6:	685b      	ldr	r3, [r3, #4]
 801a9b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801a9bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a9c0:	d10b      	bne.n	801a9da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a9c2:	4b89      	ldr	r3, [pc, #548]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d06c      	beq.n	801aaa8 <HAL_RCC_OscConfig+0x12c>
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	685b      	ldr	r3, [r3, #4]
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d168      	bne.n	801aaa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801a9d6:	2301      	movs	r3, #1
 801a9d8:	e24c      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	685b      	ldr	r3, [r3, #4]
 801a9de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a9e2:	d106      	bne.n	801a9f2 <HAL_RCC_OscConfig+0x76>
 801a9e4:	4b80      	ldr	r3, [pc, #512]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	4a7f      	ldr	r2, [pc, #508]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801a9ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801a9ee:	6013      	str	r3, [r2, #0]
 801a9f0:	e02e      	b.n	801aa50 <HAL_RCC_OscConfig+0xd4>
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	685b      	ldr	r3, [r3, #4]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	d10c      	bne.n	801aa14 <HAL_RCC_OscConfig+0x98>
 801a9fa:	4b7b      	ldr	r3, [pc, #492]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	4a7a      	ldr	r2, [pc, #488]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aa00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801aa04:	6013      	str	r3, [r2, #0]
 801aa06:	4b78      	ldr	r3, [pc, #480]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	4a77      	ldr	r2, [pc, #476]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aa0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801aa10:	6013      	str	r3, [r2, #0]
 801aa12:	e01d      	b.n	801aa50 <HAL_RCC_OscConfig+0xd4>
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	685b      	ldr	r3, [r3, #4]
 801aa18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801aa1c:	d10c      	bne.n	801aa38 <HAL_RCC_OscConfig+0xbc>
 801aa1e:	4b72      	ldr	r3, [pc, #456]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	4a71      	ldr	r2, [pc, #452]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aa24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801aa28:	6013      	str	r3, [r2, #0]
 801aa2a:	4b6f      	ldr	r3, [pc, #444]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	4a6e      	ldr	r2, [pc, #440]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aa30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801aa34:	6013      	str	r3, [r2, #0]
 801aa36:	e00b      	b.n	801aa50 <HAL_RCC_OscConfig+0xd4>
 801aa38:	4b6b      	ldr	r3, [pc, #428]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	4a6a      	ldr	r2, [pc, #424]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aa3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801aa42:	6013      	str	r3, [r2, #0]
 801aa44:	4b68      	ldr	r3, [pc, #416]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	4a67      	ldr	r2, [pc, #412]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aa4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801aa4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	685b      	ldr	r3, [r3, #4]
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d013      	beq.n	801aa80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801aa58:	f7ff fcbe 	bl	801a3d8 <HAL_GetTick>
 801aa5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801aa5e:	e008      	b.n	801aa72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801aa60:	f7ff fcba 	bl	801a3d8 <HAL_GetTick>
 801aa64:	4602      	mov	r2, r0
 801aa66:	693b      	ldr	r3, [r7, #16]
 801aa68:	1ad3      	subs	r3, r2, r3
 801aa6a:	2b64      	cmp	r3, #100	@ 0x64
 801aa6c:	d901      	bls.n	801aa72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801aa6e:	2303      	movs	r3, #3
 801aa70:	e200      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801aa72:	4b5d      	ldr	r3, [pc, #372]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d0f0      	beq.n	801aa60 <HAL_RCC_OscConfig+0xe4>
 801aa7e:	e014      	b.n	801aaaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801aa80:	f7ff fcaa 	bl	801a3d8 <HAL_GetTick>
 801aa84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801aa86:	e008      	b.n	801aa9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801aa88:	f7ff fca6 	bl	801a3d8 <HAL_GetTick>
 801aa8c:	4602      	mov	r2, r0
 801aa8e:	693b      	ldr	r3, [r7, #16]
 801aa90:	1ad3      	subs	r3, r2, r3
 801aa92:	2b64      	cmp	r3, #100	@ 0x64
 801aa94:	d901      	bls.n	801aa9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801aa96:	2303      	movs	r3, #3
 801aa98:	e1ec      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801aa9a:	4b53      	ldr	r3, [pc, #332]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aa9c:	681b      	ldr	r3, [r3, #0]
 801aa9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d1f0      	bne.n	801aa88 <HAL_RCC_OscConfig+0x10c>
 801aaa6:	e000      	b.n	801aaaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801aaa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	f003 0302 	and.w	r3, r3, #2
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d063      	beq.n	801ab7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801aab6:	4b4c      	ldr	r3, [pc, #304]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aab8:	685b      	ldr	r3, [r3, #4]
 801aaba:	f003 030c 	and.w	r3, r3, #12
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d00b      	beq.n	801aada <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 801aac2:	4b49      	ldr	r3, [pc, #292]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aac4:	685b      	ldr	r3, [r3, #4]
 801aac6:	f003 030c 	and.w	r3, r3, #12
 801aaca:	2b08      	cmp	r3, #8
 801aacc:	d11c      	bne.n	801ab08 <HAL_RCC_OscConfig+0x18c>
 801aace:	4b46      	ldr	r3, [pc, #280]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aad0:	685b      	ldr	r3, [r3, #4]
 801aad2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d116      	bne.n	801ab08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801aada:	4b43      	ldr	r3, [pc, #268]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	f003 0302 	and.w	r3, r3, #2
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d005      	beq.n	801aaf2 <HAL_RCC_OscConfig+0x176>
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	691b      	ldr	r3, [r3, #16]
 801aaea:	2b01      	cmp	r3, #1
 801aaec:	d001      	beq.n	801aaf2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 801aaee:	2301      	movs	r3, #1
 801aaf0:	e1c0      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801aaf2:	4b3d      	ldr	r3, [pc, #244]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	695b      	ldr	r3, [r3, #20]
 801aafe:	00db      	lsls	r3, r3, #3
 801ab00:	4939      	ldr	r1, [pc, #228]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801ab02:	4313      	orrs	r3, r2
 801ab04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801ab06:	e03a      	b.n	801ab7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	691b      	ldr	r3, [r3, #16]
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d020      	beq.n	801ab52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801ab10:	4b36      	ldr	r3, [pc, #216]	@ (801abec <HAL_RCC_OscConfig+0x270>)
 801ab12:	2201      	movs	r2, #1
 801ab14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ab16:	f7ff fc5f 	bl	801a3d8 <HAL_GetTick>
 801ab1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801ab1c:	e008      	b.n	801ab30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ab1e:	f7ff fc5b 	bl	801a3d8 <HAL_GetTick>
 801ab22:	4602      	mov	r2, r0
 801ab24:	693b      	ldr	r3, [r7, #16]
 801ab26:	1ad3      	subs	r3, r2, r3
 801ab28:	2b02      	cmp	r3, #2
 801ab2a:	d901      	bls.n	801ab30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 801ab2c:	2303      	movs	r3, #3
 801ab2e:	e1a1      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801ab30:	4b2d      	ldr	r3, [pc, #180]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	f003 0302 	and.w	r3, r3, #2
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d0f0      	beq.n	801ab1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ab3c:	4b2a      	ldr	r3, [pc, #168]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801ab3e:	681b      	ldr	r3, [r3, #0]
 801ab40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	695b      	ldr	r3, [r3, #20]
 801ab48:	00db      	lsls	r3, r3, #3
 801ab4a:	4927      	ldr	r1, [pc, #156]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801ab4c:	4313      	orrs	r3, r2
 801ab4e:	600b      	str	r3, [r1, #0]
 801ab50:	e015      	b.n	801ab7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801ab52:	4b26      	ldr	r3, [pc, #152]	@ (801abec <HAL_RCC_OscConfig+0x270>)
 801ab54:	2200      	movs	r2, #0
 801ab56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ab58:	f7ff fc3e 	bl	801a3d8 <HAL_GetTick>
 801ab5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801ab5e:	e008      	b.n	801ab72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801ab60:	f7ff fc3a 	bl	801a3d8 <HAL_GetTick>
 801ab64:	4602      	mov	r2, r0
 801ab66:	693b      	ldr	r3, [r7, #16]
 801ab68:	1ad3      	subs	r3, r2, r3
 801ab6a:	2b02      	cmp	r3, #2
 801ab6c:	d901      	bls.n	801ab72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 801ab6e:	2303      	movs	r3, #3
 801ab70:	e180      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801ab72:	4b1d      	ldr	r3, [pc, #116]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	f003 0302 	and.w	r3, r3, #2
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	d1f0      	bne.n	801ab60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	f003 0308 	and.w	r3, r3, #8
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d03a      	beq.n	801ac00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	699b      	ldr	r3, [r3, #24]
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	d019      	beq.n	801abc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801ab92:	4b17      	ldr	r3, [pc, #92]	@ (801abf0 <HAL_RCC_OscConfig+0x274>)
 801ab94:	2201      	movs	r2, #1
 801ab96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801ab98:	f7ff fc1e 	bl	801a3d8 <HAL_GetTick>
 801ab9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801ab9e:	e008      	b.n	801abb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801aba0:	f7ff fc1a 	bl	801a3d8 <HAL_GetTick>
 801aba4:	4602      	mov	r2, r0
 801aba6:	693b      	ldr	r3, [r7, #16]
 801aba8:	1ad3      	subs	r3, r2, r3
 801abaa:	2b02      	cmp	r3, #2
 801abac:	d901      	bls.n	801abb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 801abae:	2303      	movs	r3, #3
 801abb0:	e160      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801abb2:	4b0d      	ldr	r3, [pc, #52]	@ (801abe8 <HAL_RCC_OscConfig+0x26c>)
 801abb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801abb6:	f003 0302 	and.w	r3, r3, #2
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d0f0      	beq.n	801aba0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 801abbe:	2001      	movs	r0, #1
 801abc0:	f000 faea 	bl	801b198 <RCC_Delay>
 801abc4:	e01c      	b.n	801ac00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801abc6:	4b0a      	ldr	r3, [pc, #40]	@ (801abf0 <HAL_RCC_OscConfig+0x274>)
 801abc8:	2200      	movs	r2, #0
 801abca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801abcc:	f7ff fc04 	bl	801a3d8 <HAL_GetTick>
 801abd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801abd2:	e00f      	b.n	801abf4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801abd4:	f7ff fc00 	bl	801a3d8 <HAL_GetTick>
 801abd8:	4602      	mov	r2, r0
 801abda:	693b      	ldr	r3, [r7, #16]
 801abdc:	1ad3      	subs	r3, r2, r3
 801abde:	2b02      	cmp	r3, #2
 801abe0:	d908      	bls.n	801abf4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 801abe2:	2303      	movs	r3, #3
 801abe4:	e146      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
 801abe6:	bf00      	nop
 801abe8:	40021000 	.word	0x40021000
 801abec:	42420000 	.word	0x42420000
 801abf0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801abf4:	4b92      	ldr	r3, [pc, #584]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801abf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801abf8:	f003 0302 	and.w	r3, r3, #2
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d1e9      	bne.n	801abd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	f003 0304 	and.w	r3, r3, #4
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	f000 80a6 	beq.w	801ad5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 801ac0e:	2300      	movs	r3, #0
 801ac10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801ac12:	4b8b      	ldr	r3, [pc, #556]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ac14:	69db      	ldr	r3, [r3, #28]
 801ac16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d10d      	bne.n	801ac3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801ac1e:	4b88      	ldr	r3, [pc, #544]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ac20:	69db      	ldr	r3, [r3, #28]
 801ac22:	4a87      	ldr	r2, [pc, #540]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ac24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801ac28:	61d3      	str	r3, [r2, #28]
 801ac2a:	4b85      	ldr	r3, [pc, #532]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ac2c:	69db      	ldr	r3, [r3, #28]
 801ac2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801ac32:	60bb      	str	r3, [r7, #8]
 801ac34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801ac36:	2301      	movs	r3, #1
 801ac38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801ac3a:	4b82      	ldr	r3, [pc, #520]	@ (801ae44 <HAL_RCC_OscConfig+0x4c8>)
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d118      	bne.n	801ac78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801ac46:	4b7f      	ldr	r3, [pc, #508]	@ (801ae44 <HAL_RCC_OscConfig+0x4c8>)
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	4a7e      	ldr	r2, [pc, #504]	@ (801ae44 <HAL_RCC_OscConfig+0x4c8>)
 801ac4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801ac50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801ac52:	f7ff fbc1 	bl	801a3d8 <HAL_GetTick>
 801ac56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801ac58:	e008      	b.n	801ac6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ac5a:	f7ff fbbd 	bl	801a3d8 <HAL_GetTick>
 801ac5e:	4602      	mov	r2, r0
 801ac60:	693b      	ldr	r3, [r7, #16]
 801ac62:	1ad3      	subs	r3, r2, r3
 801ac64:	2b64      	cmp	r3, #100	@ 0x64
 801ac66:	d901      	bls.n	801ac6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 801ac68:	2303      	movs	r3, #3
 801ac6a:	e103      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801ac6c:	4b75      	ldr	r3, [pc, #468]	@ (801ae44 <HAL_RCC_OscConfig+0x4c8>)
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d0f0      	beq.n	801ac5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	68db      	ldr	r3, [r3, #12]
 801ac7c:	2b01      	cmp	r3, #1
 801ac7e:	d106      	bne.n	801ac8e <HAL_RCC_OscConfig+0x312>
 801ac80:	4b6f      	ldr	r3, [pc, #444]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ac82:	6a1b      	ldr	r3, [r3, #32]
 801ac84:	4a6e      	ldr	r2, [pc, #440]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ac86:	f043 0301 	orr.w	r3, r3, #1
 801ac8a:	6213      	str	r3, [r2, #32]
 801ac8c:	e02d      	b.n	801acea <HAL_RCC_OscConfig+0x36e>
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	68db      	ldr	r3, [r3, #12]
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d10c      	bne.n	801acb0 <HAL_RCC_OscConfig+0x334>
 801ac96:	4b6a      	ldr	r3, [pc, #424]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ac98:	6a1b      	ldr	r3, [r3, #32]
 801ac9a:	4a69      	ldr	r2, [pc, #420]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ac9c:	f023 0301 	bic.w	r3, r3, #1
 801aca0:	6213      	str	r3, [r2, #32]
 801aca2:	4b67      	ldr	r3, [pc, #412]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801aca4:	6a1b      	ldr	r3, [r3, #32]
 801aca6:	4a66      	ldr	r2, [pc, #408]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801aca8:	f023 0304 	bic.w	r3, r3, #4
 801acac:	6213      	str	r3, [r2, #32]
 801acae:	e01c      	b.n	801acea <HAL_RCC_OscConfig+0x36e>
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	68db      	ldr	r3, [r3, #12]
 801acb4:	2b05      	cmp	r3, #5
 801acb6:	d10c      	bne.n	801acd2 <HAL_RCC_OscConfig+0x356>
 801acb8:	4b61      	ldr	r3, [pc, #388]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801acba:	6a1b      	ldr	r3, [r3, #32]
 801acbc:	4a60      	ldr	r2, [pc, #384]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801acbe:	f043 0304 	orr.w	r3, r3, #4
 801acc2:	6213      	str	r3, [r2, #32]
 801acc4:	4b5e      	ldr	r3, [pc, #376]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801acc6:	6a1b      	ldr	r3, [r3, #32]
 801acc8:	4a5d      	ldr	r2, [pc, #372]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801acca:	f043 0301 	orr.w	r3, r3, #1
 801acce:	6213      	str	r3, [r2, #32]
 801acd0:	e00b      	b.n	801acea <HAL_RCC_OscConfig+0x36e>
 801acd2:	4b5b      	ldr	r3, [pc, #364]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801acd4:	6a1b      	ldr	r3, [r3, #32]
 801acd6:	4a5a      	ldr	r2, [pc, #360]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801acd8:	f023 0301 	bic.w	r3, r3, #1
 801acdc:	6213      	str	r3, [r2, #32]
 801acde:	4b58      	ldr	r3, [pc, #352]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ace0:	6a1b      	ldr	r3, [r3, #32]
 801ace2:	4a57      	ldr	r2, [pc, #348]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ace4:	f023 0304 	bic.w	r3, r3, #4
 801ace8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	68db      	ldr	r3, [r3, #12]
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d015      	beq.n	801ad1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801acf2:	f7ff fb71 	bl	801a3d8 <HAL_GetTick>
 801acf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801acf8:	e00a      	b.n	801ad10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801acfa:	f7ff fb6d 	bl	801a3d8 <HAL_GetTick>
 801acfe:	4602      	mov	r2, r0
 801ad00:	693b      	ldr	r3, [r7, #16]
 801ad02:	1ad3      	subs	r3, r2, r3
 801ad04:	f241 3288 	movw	r2, #5000	@ 0x1388
 801ad08:	4293      	cmp	r3, r2
 801ad0a:	d901      	bls.n	801ad10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 801ad0c:	2303      	movs	r3, #3
 801ad0e:	e0b1      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801ad10:	4b4b      	ldr	r3, [pc, #300]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ad12:	6a1b      	ldr	r3, [r3, #32]
 801ad14:	f003 0302 	and.w	r3, r3, #2
 801ad18:	2b00      	cmp	r3, #0
 801ad1a:	d0ee      	beq.n	801acfa <HAL_RCC_OscConfig+0x37e>
 801ad1c:	e014      	b.n	801ad48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801ad1e:	f7ff fb5b 	bl	801a3d8 <HAL_GetTick>
 801ad22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801ad24:	e00a      	b.n	801ad3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ad26:	f7ff fb57 	bl	801a3d8 <HAL_GetTick>
 801ad2a:	4602      	mov	r2, r0
 801ad2c:	693b      	ldr	r3, [r7, #16]
 801ad2e:	1ad3      	subs	r3, r2, r3
 801ad30:	f241 3288 	movw	r2, #5000	@ 0x1388
 801ad34:	4293      	cmp	r3, r2
 801ad36:	d901      	bls.n	801ad3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 801ad38:	2303      	movs	r3, #3
 801ad3a:	e09b      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801ad3c:	4b40      	ldr	r3, [pc, #256]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ad3e:	6a1b      	ldr	r3, [r3, #32]
 801ad40:	f003 0302 	and.w	r3, r3, #2
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d1ee      	bne.n	801ad26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 801ad48:	7dfb      	ldrb	r3, [r7, #23]
 801ad4a:	2b01      	cmp	r3, #1
 801ad4c:	d105      	bne.n	801ad5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801ad4e:	4b3c      	ldr	r3, [pc, #240]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ad50:	69db      	ldr	r3, [r3, #28]
 801ad52:	4a3b      	ldr	r2, [pc, #236]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ad54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801ad58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801ad5a:	687b      	ldr	r3, [r7, #4]
 801ad5c:	69db      	ldr	r3, [r3, #28]
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	f000 8087 	beq.w	801ae72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801ad64:	4b36      	ldr	r3, [pc, #216]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ad66:	685b      	ldr	r3, [r3, #4]
 801ad68:	f003 030c 	and.w	r3, r3, #12
 801ad6c:	2b08      	cmp	r3, #8
 801ad6e:	d061      	beq.n	801ae34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	69db      	ldr	r3, [r3, #28]
 801ad74:	2b02      	cmp	r3, #2
 801ad76:	d146      	bne.n	801ae06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801ad78:	4b33      	ldr	r3, [pc, #204]	@ (801ae48 <HAL_RCC_OscConfig+0x4cc>)
 801ad7a:	2200      	movs	r2, #0
 801ad7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ad7e:	f7ff fb2b 	bl	801a3d8 <HAL_GetTick>
 801ad82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801ad84:	e008      	b.n	801ad98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801ad86:	f7ff fb27 	bl	801a3d8 <HAL_GetTick>
 801ad8a:	4602      	mov	r2, r0
 801ad8c:	693b      	ldr	r3, [r7, #16]
 801ad8e:	1ad3      	subs	r3, r2, r3
 801ad90:	2b02      	cmp	r3, #2
 801ad92:	d901      	bls.n	801ad98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 801ad94:	2303      	movs	r3, #3
 801ad96:	e06d      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801ad98:	4b29      	ldr	r3, [pc, #164]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d1f0      	bne.n	801ad86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	6a1b      	ldr	r3, [r3, #32]
 801ada8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801adac:	d108      	bne.n	801adc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 801adae:	4b24      	ldr	r3, [pc, #144]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801adb0:	685b      	ldr	r3, [r3, #4]
 801adb2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	689b      	ldr	r3, [r3, #8]
 801adba:	4921      	ldr	r1, [pc, #132]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801adbc:	4313      	orrs	r3, r2
 801adbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801adc0:	4b1f      	ldr	r3, [pc, #124]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801adc2:	685b      	ldr	r3, [r3, #4]
 801adc4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	6a19      	ldr	r1, [r3, #32]
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801add0:	430b      	orrs	r3, r1
 801add2:	491b      	ldr	r1, [pc, #108]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801add4:	4313      	orrs	r3, r2
 801add6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801add8:	4b1b      	ldr	r3, [pc, #108]	@ (801ae48 <HAL_RCC_OscConfig+0x4cc>)
 801adda:	2201      	movs	r2, #1
 801addc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801adde:	f7ff fafb 	bl	801a3d8 <HAL_GetTick>
 801ade2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801ade4:	e008      	b.n	801adf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801ade6:	f7ff faf7 	bl	801a3d8 <HAL_GetTick>
 801adea:	4602      	mov	r2, r0
 801adec:	693b      	ldr	r3, [r7, #16]
 801adee:	1ad3      	subs	r3, r2, r3
 801adf0:	2b02      	cmp	r3, #2
 801adf2:	d901      	bls.n	801adf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 801adf4:	2303      	movs	r3, #3
 801adf6:	e03d      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801adf8:	4b11      	ldr	r3, [pc, #68]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d0f0      	beq.n	801ade6 <HAL_RCC_OscConfig+0x46a>
 801ae04:	e035      	b.n	801ae72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801ae06:	4b10      	ldr	r3, [pc, #64]	@ (801ae48 <HAL_RCC_OscConfig+0x4cc>)
 801ae08:	2200      	movs	r2, #0
 801ae0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801ae0c:	f7ff fae4 	bl	801a3d8 <HAL_GetTick>
 801ae10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801ae12:	e008      	b.n	801ae26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801ae14:	f7ff fae0 	bl	801a3d8 <HAL_GetTick>
 801ae18:	4602      	mov	r2, r0
 801ae1a:	693b      	ldr	r3, [r7, #16]
 801ae1c:	1ad3      	subs	r3, r2, r3
 801ae1e:	2b02      	cmp	r3, #2
 801ae20:	d901      	bls.n	801ae26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 801ae22:	2303      	movs	r3, #3
 801ae24:	e026      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801ae26:	4b06      	ldr	r3, [pc, #24]	@ (801ae40 <HAL_RCC_OscConfig+0x4c4>)
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	d1f0      	bne.n	801ae14 <HAL_RCC_OscConfig+0x498>
 801ae32:	e01e      	b.n	801ae72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	69db      	ldr	r3, [r3, #28]
 801ae38:	2b01      	cmp	r3, #1
 801ae3a:	d107      	bne.n	801ae4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 801ae3c:	2301      	movs	r3, #1
 801ae3e:	e019      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
 801ae40:	40021000 	.word	0x40021000
 801ae44:	40007000 	.word	0x40007000
 801ae48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 801ae4c:	4b0b      	ldr	r3, [pc, #44]	@ (801ae7c <HAL_RCC_OscConfig+0x500>)
 801ae4e:	685b      	ldr	r3, [r3, #4]
 801ae50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	6a1b      	ldr	r3, [r3, #32]
 801ae5c:	429a      	cmp	r2, r3
 801ae5e:	d106      	bne.n	801ae6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 801ae60:	68fb      	ldr	r3, [r7, #12]
 801ae62:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ae6a:	429a      	cmp	r2, r3
 801ae6c:	d001      	beq.n	801ae72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 801ae6e:	2301      	movs	r3, #1
 801ae70:	e000      	b.n	801ae74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 801ae72:	2300      	movs	r3, #0
}
 801ae74:	4618      	mov	r0, r3
 801ae76:	3718      	adds	r7, #24
 801ae78:	46bd      	mov	sp, r7
 801ae7a:	bd80      	pop	{r7, pc}
 801ae7c:	40021000 	.word	0x40021000

0801ae80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801ae80:	b580      	push	{r7, lr}
 801ae82:	b084      	sub	sp, #16
 801ae84:	af00      	add	r7, sp, #0
 801ae86:	6078      	str	r0, [r7, #4]
 801ae88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d101      	bne.n	801ae94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801ae90:	2301      	movs	r3, #1
 801ae92:	e0d0      	b.n	801b036 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801ae94:	4b6a      	ldr	r3, [pc, #424]	@ (801b040 <HAL_RCC_ClockConfig+0x1c0>)
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	f003 0307 	and.w	r3, r3, #7
 801ae9c:	683a      	ldr	r2, [r7, #0]
 801ae9e:	429a      	cmp	r2, r3
 801aea0:	d910      	bls.n	801aec4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801aea2:	4b67      	ldr	r3, [pc, #412]	@ (801b040 <HAL_RCC_ClockConfig+0x1c0>)
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	f023 0207 	bic.w	r2, r3, #7
 801aeaa:	4965      	ldr	r1, [pc, #404]	@ (801b040 <HAL_RCC_ClockConfig+0x1c0>)
 801aeac:	683b      	ldr	r3, [r7, #0]
 801aeae:	4313      	orrs	r3, r2
 801aeb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801aeb2:	4b63      	ldr	r3, [pc, #396]	@ (801b040 <HAL_RCC_ClockConfig+0x1c0>)
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	f003 0307 	and.w	r3, r3, #7
 801aeba:	683a      	ldr	r2, [r7, #0]
 801aebc:	429a      	cmp	r2, r3
 801aebe:	d001      	beq.n	801aec4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 801aec0:	2301      	movs	r3, #1
 801aec2:	e0b8      	b.n	801b036 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	f003 0302 	and.w	r3, r3, #2
 801aecc:	2b00      	cmp	r3, #0
 801aece:	d020      	beq.n	801af12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	f003 0304 	and.w	r3, r3, #4
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d005      	beq.n	801aee8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801aedc:	4b59      	ldr	r3, [pc, #356]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801aede:	685b      	ldr	r3, [r3, #4]
 801aee0:	4a58      	ldr	r2, [pc, #352]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801aee2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 801aee6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	f003 0308 	and.w	r3, r3, #8
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	d005      	beq.n	801af00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801aef4:	4b53      	ldr	r3, [pc, #332]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801aef6:	685b      	ldr	r3, [r3, #4]
 801aef8:	4a52      	ldr	r2, [pc, #328]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801aefa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 801aefe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801af00:	4b50      	ldr	r3, [pc, #320]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801af02:	685b      	ldr	r3, [r3, #4]
 801af04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	689b      	ldr	r3, [r3, #8]
 801af0c:	494d      	ldr	r1, [pc, #308]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801af0e:	4313      	orrs	r3, r2
 801af10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	f003 0301 	and.w	r3, r3, #1
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d040      	beq.n	801afa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	685b      	ldr	r3, [r3, #4]
 801af22:	2b01      	cmp	r3, #1
 801af24:	d107      	bne.n	801af36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801af26:	4b47      	ldr	r3, [pc, #284]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801af2e:	2b00      	cmp	r3, #0
 801af30:	d115      	bne.n	801af5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801af32:	2301      	movs	r3, #1
 801af34:	e07f      	b.n	801b036 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	685b      	ldr	r3, [r3, #4]
 801af3a:	2b02      	cmp	r3, #2
 801af3c:	d107      	bne.n	801af4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801af3e:	4b41      	ldr	r3, [pc, #260]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801af40:	681b      	ldr	r3, [r3, #0]
 801af42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801af46:	2b00      	cmp	r3, #0
 801af48:	d109      	bne.n	801af5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801af4a:	2301      	movs	r3, #1
 801af4c:	e073      	b.n	801b036 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801af4e:	4b3d      	ldr	r3, [pc, #244]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	f003 0302 	and.w	r3, r3, #2
 801af56:	2b00      	cmp	r3, #0
 801af58:	d101      	bne.n	801af5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801af5a:	2301      	movs	r3, #1
 801af5c:	e06b      	b.n	801b036 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801af5e:	4b39      	ldr	r3, [pc, #228]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801af60:	685b      	ldr	r3, [r3, #4]
 801af62:	f023 0203 	bic.w	r2, r3, #3
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	685b      	ldr	r3, [r3, #4]
 801af6a:	4936      	ldr	r1, [pc, #216]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801af6c:	4313      	orrs	r3, r2
 801af6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801af70:	f7ff fa32 	bl	801a3d8 <HAL_GetTick>
 801af74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801af76:	e00a      	b.n	801af8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801af78:	f7ff fa2e 	bl	801a3d8 <HAL_GetTick>
 801af7c:	4602      	mov	r2, r0
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	1ad3      	subs	r3, r2, r3
 801af82:	f241 3288 	movw	r2, #5000	@ 0x1388
 801af86:	4293      	cmp	r3, r2
 801af88:	d901      	bls.n	801af8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801af8a:	2303      	movs	r3, #3
 801af8c:	e053      	b.n	801b036 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801af8e:	4b2d      	ldr	r3, [pc, #180]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801af90:	685b      	ldr	r3, [r3, #4]
 801af92:	f003 020c 	and.w	r2, r3, #12
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	685b      	ldr	r3, [r3, #4]
 801af9a:	009b      	lsls	r3, r3, #2
 801af9c:	429a      	cmp	r2, r3
 801af9e:	d1eb      	bne.n	801af78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801afa0:	4b27      	ldr	r3, [pc, #156]	@ (801b040 <HAL_RCC_ClockConfig+0x1c0>)
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	f003 0307 	and.w	r3, r3, #7
 801afa8:	683a      	ldr	r2, [r7, #0]
 801afaa:	429a      	cmp	r2, r3
 801afac:	d210      	bcs.n	801afd0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801afae:	4b24      	ldr	r3, [pc, #144]	@ (801b040 <HAL_RCC_ClockConfig+0x1c0>)
 801afb0:	681b      	ldr	r3, [r3, #0]
 801afb2:	f023 0207 	bic.w	r2, r3, #7
 801afb6:	4922      	ldr	r1, [pc, #136]	@ (801b040 <HAL_RCC_ClockConfig+0x1c0>)
 801afb8:	683b      	ldr	r3, [r7, #0]
 801afba:	4313      	orrs	r3, r2
 801afbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801afbe:	4b20      	ldr	r3, [pc, #128]	@ (801b040 <HAL_RCC_ClockConfig+0x1c0>)
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	f003 0307 	and.w	r3, r3, #7
 801afc6:	683a      	ldr	r2, [r7, #0]
 801afc8:	429a      	cmp	r2, r3
 801afca:	d001      	beq.n	801afd0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 801afcc:	2301      	movs	r3, #1
 801afce:	e032      	b.n	801b036 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	f003 0304 	and.w	r3, r3, #4
 801afd8:	2b00      	cmp	r3, #0
 801afda:	d008      	beq.n	801afee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801afdc:	4b19      	ldr	r3, [pc, #100]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801afde:	685b      	ldr	r3, [r3, #4]
 801afe0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	68db      	ldr	r3, [r3, #12]
 801afe8:	4916      	ldr	r1, [pc, #88]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801afea:	4313      	orrs	r3, r2
 801afec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	f003 0308 	and.w	r3, r3, #8
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d009      	beq.n	801b00e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801affa:	4b12      	ldr	r3, [pc, #72]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801affc:	685b      	ldr	r3, [r3, #4]
 801affe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	691b      	ldr	r3, [r3, #16]
 801b006:	00db      	lsls	r3, r3, #3
 801b008:	490e      	ldr	r1, [pc, #56]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801b00a:	4313      	orrs	r3, r2
 801b00c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801b00e:	f000 f821 	bl	801b054 <HAL_RCC_GetSysClockFreq>
 801b012:	4602      	mov	r2, r0
 801b014:	4b0b      	ldr	r3, [pc, #44]	@ (801b044 <HAL_RCC_ClockConfig+0x1c4>)
 801b016:	685b      	ldr	r3, [r3, #4]
 801b018:	091b      	lsrs	r3, r3, #4
 801b01a:	f003 030f 	and.w	r3, r3, #15
 801b01e:	490a      	ldr	r1, [pc, #40]	@ (801b048 <HAL_RCC_ClockConfig+0x1c8>)
 801b020:	5ccb      	ldrb	r3, [r1, r3]
 801b022:	fa22 f303 	lsr.w	r3, r2, r3
 801b026:	4a09      	ldr	r2, [pc, #36]	@ (801b04c <HAL_RCC_ClockConfig+0x1cc>)
 801b028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801b02a:	4b09      	ldr	r3, [pc, #36]	@ (801b050 <HAL_RCC_ClockConfig+0x1d0>)
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	4618      	mov	r0, r3
 801b030:	f7e7 fa84 	bl	800253c <HAL_InitTick>

  return HAL_OK;
 801b034:	2300      	movs	r3, #0
}
 801b036:	4618      	mov	r0, r3
 801b038:	3710      	adds	r7, #16
 801b03a:	46bd      	mov	sp, r7
 801b03c:	bd80      	pop	{r7, pc}
 801b03e:	bf00      	nop
 801b040:	40022000 	.word	0x40022000
 801b044:	40021000 	.word	0x40021000
 801b048:	0801cb54 	.word	0x0801cb54
 801b04c:	200000a0 	.word	0x200000a0
 801b050:	20000f34 	.word	0x20000f34

0801b054 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b054:	b480      	push	{r7}
 801b056:	b087      	sub	sp, #28
 801b058:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 801b05a:	2300      	movs	r3, #0
 801b05c:	60fb      	str	r3, [r7, #12]
 801b05e:	2300      	movs	r3, #0
 801b060:	60bb      	str	r3, [r7, #8]
 801b062:	2300      	movs	r3, #0
 801b064:	617b      	str	r3, [r7, #20]
 801b066:	2300      	movs	r3, #0
 801b068:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 801b06a:	2300      	movs	r3, #0
 801b06c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 801b06e:	4b1e      	ldr	r3, [pc, #120]	@ (801b0e8 <HAL_RCC_GetSysClockFreq+0x94>)
 801b070:	685b      	ldr	r3, [r3, #4]
 801b072:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 801b074:	68fb      	ldr	r3, [r7, #12]
 801b076:	f003 030c 	and.w	r3, r3, #12
 801b07a:	2b04      	cmp	r3, #4
 801b07c:	d002      	beq.n	801b084 <HAL_RCC_GetSysClockFreq+0x30>
 801b07e:	2b08      	cmp	r3, #8
 801b080:	d003      	beq.n	801b08a <HAL_RCC_GetSysClockFreq+0x36>
 801b082:	e027      	b.n	801b0d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801b084:	4b19      	ldr	r3, [pc, #100]	@ (801b0ec <HAL_RCC_GetSysClockFreq+0x98>)
 801b086:	613b      	str	r3, [r7, #16]
      break;
 801b088:	e027      	b.n	801b0da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 801b08a:	68fb      	ldr	r3, [r7, #12]
 801b08c:	0c9b      	lsrs	r3, r3, #18
 801b08e:	f003 030f 	and.w	r3, r3, #15
 801b092:	4a17      	ldr	r2, [pc, #92]	@ (801b0f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 801b094:	5cd3      	ldrb	r3, [r2, r3]
 801b096:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	d010      	beq.n	801b0c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 801b0a2:	4b11      	ldr	r3, [pc, #68]	@ (801b0e8 <HAL_RCC_GetSysClockFreq+0x94>)
 801b0a4:	685b      	ldr	r3, [r3, #4]
 801b0a6:	0c5b      	lsrs	r3, r3, #17
 801b0a8:	f003 0301 	and.w	r3, r3, #1
 801b0ac:	4a11      	ldr	r2, [pc, #68]	@ (801b0f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 801b0ae:	5cd3      	ldrb	r3, [r2, r3]
 801b0b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	4a0d      	ldr	r2, [pc, #52]	@ (801b0ec <HAL_RCC_GetSysClockFreq+0x98>)
 801b0b6:	fb03 f202 	mul.w	r2, r3, r2
 801b0ba:	68bb      	ldr	r3, [r7, #8]
 801b0bc:	fbb2 f3f3 	udiv	r3, r2, r3
 801b0c0:	617b      	str	r3, [r7, #20]
 801b0c2:	e004      	b.n	801b0ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	4a0c      	ldr	r2, [pc, #48]	@ (801b0f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 801b0c8:	fb02 f303 	mul.w	r3, r2, r3
 801b0cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 801b0ce:	697b      	ldr	r3, [r7, #20]
 801b0d0:	613b      	str	r3, [r7, #16]
      break;
 801b0d2:	e002      	b.n	801b0da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 801b0d4:	4b05      	ldr	r3, [pc, #20]	@ (801b0ec <HAL_RCC_GetSysClockFreq+0x98>)
 801b0d6:	613b      	str	r3, [r7, #16]
      break;
 801b0d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 801b0da:	693b      	ldr	r3, [r7, #16]
}
 801b0dc:	4618      	mov	r0, r3
 801b0de:	371c      	adds	r7, #28
 801b0e0:	46bd      	mov	sp, r7
 801b0e2:	bc80      	pop	{r7}
 801b0e4:	4770      	bx	lr
 801b0e6:	bf00      	nop
 801b0e8:	40021000 	.word	0x40021000
 801b0ec:	007a1200 	.word	0x007a1200
 801b0f0:	0801f080 	.word	0x0801f080
 801b0f4:	0801f090 	.word	0x0801f090
 801b0f8:	003d0900 	.word	0x003d0900

0801b0fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b0fc:	b480      	push	{r7}
 801b0fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b100:	4b02      	ldr	r3, [pc, #8]	@ (801b10c <HAL_RCC_GetHCLKFreq+0x10>)
 801b102:	681b      	ldr	r3, [r3, #0]
}
 801b104:	4618      	mov	r0, r3
 801b106:	46bd      	mov	sp, r7
 801b108:	bc80      	pop	{r7}
 801b10a:	4770      	bx	lr
 801b10c:	200000a0 	.word	0x200000a0

0801b110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801b110:	b580      	push	{r7, lr}
 801b112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801b114:	f7ff fff2 	bl	801b0fc <HAL_RCC_GetHCLKFreq>
 801b118:	4602      	mov	r2, r0
 801b11a:	4b05      	ldr	r3, [pc, #20]	@ (801b130 <HAL_RCC_GetPCLK1Freq+0x20>)
 801b11c:	685b      	ldr	r3, [r3, #4]
 801b11e:	0a1b      	lsrs	r3, r3, #8
 801b120:	f003 0307 	and.w	r3, r3, #7
 801b124:	4903      	ldr	r1, [pc, #12]	@ (801b134 <HAL_RCC_GetPCLK1Freq+0x24>)
 801b126:	5ccb      	ldrb	r3, [r1, r3]
 801b128:	fa22 f303 	lsr.w	r3, r2, r3
}
 801b12c:	4618      	mov	r0, r3
 801b12e:	bd80      	pop	{r7, pc}
 801b130:	40021000 	.word	0x40021000
 801b134:	0801cb64 	.word	0x0801cb64

0801b138 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801b138:	b480      	push	{r7}
 801b13a:	b083      	sub	sp, #12
 801b13c:	af00      	add	r7, sp, #0
 801b13e:	6078      	str	r0, [r7, #4]
 801b140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	220f      	movs	r2, #15
 801b146:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801b148:	4b11      	ldr	r3, [pc, #68]	@ (801b190 <HAL_RCC_GetClockConfig+0x58>)
 801b14a:	685b      	ldr	r3, [r3, #4]
 801b14c:	f003 0203 	and.w	r2, r3, #3
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 801b154:	4b0e      	ldr	r3, [pc, #56]	@ (801b190 <HAL_RCC_GetClockConfig+0x58>)
 801b156:	685b      	ldr	r3, [r3, #4]
 801b158:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801b160:	4b0b      	ldr	r3, [pc, #44]	@ (801b190 <HAL_RCC_GetClockConfig+0x58>)
 801b162:	685b      	ldr	r3, [r3, #4]
 801b164:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 801b16c:	4b08      	ldr	r3, [pc, #32]	@ (801b190 <HAL_RCC_GetClockConfig+0x58>)
 801b16e:	685b      	ldr	r3, [r3, #4]
 801b170:	08db      	lsrs	r3, r3, #3
 801b172:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801b17a:	4b06      	ldr	r3, [pc, #24]	@ (801b194 <HAL_RCC_GetClockConfig+0x5c>)
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	f003 0207 	and.w	r2, r3, #7
 801b182:	683b      	ldr	r3, [r7, #0]
 801b184:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 801b186:	bf00      	nop
 801b188:	370c      	adds	r7, #12
 801b18a:	46bd      	mov	sp, r7
 801b18c:	bc80      	pop	{r7}
 801b18e:	4770      	bx	lr
 801b190:	40021000 	.word	0x40021000
 801b194:	40022000 	.word	0x40022000

0801b198 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 801b198:	b480      	push	{r7}
 801b19a:	b085      	sub	sp, #20
 801b19c:	af00      	add	r7, sp, #0
 801b19e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 801b1a0:	4b0a      	ldr	r3, [pc, #40]	@ (801b1cc <RCC_Delay+0x34>)
 801b1a2:	681b      	ldr	r3, [r3, #0]
 801b1a4:	4a0a      	ldr	r2, [pc, #40]	@ (801b1d0 <RCC_Delay+0x38>)
 801b1a6:	fba2 2303 	umull	r2, r3, r2, r3
 801b1aa:	0a5b      	lsrs	r3, r3, #9
 801b1ac:	687a      	ldr	r2, [r7, #4]
 801b1ae:	fb02 f303 	mul.w	r3, r2, r3
 801b1b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 801b1b4:	bf00      	nop
  }
  while (Delay --);
 801b1b6:	68fb      	ldr	r3, [r7, #12]
 801b1b8:	1e5a      	subs	r2, r3, #1
 801b1ba:	60fa      	str	r2, [r7, #12]
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d1f9      	bne.n	801b1b4 <RCC_Delay+0x1c>
}
 801b1c0:	bf00      	nop
 801b1c2:	bf00      	nop
 801b1c4:	3714      	adds	r7, #20
 801b1c6:	46bd      	mov	sp, r7
 801b1c8:	bc80      	pop	{r7}
 801b1ca:	4770      	bx	lr
 801b1cc:	200000a0 	.word	0x200000a0
 801b1d0:	10624dd3 	.word	0x10624dd3

0801b1d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801b1d4:	b580      	push	{r7, lr}
 801b1d6:	b082      	sub	sp, #8
 801b1d8:	af00      	add	r7, sp, #0
 801b1da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	d101      	bne.n	801b1e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801b1e2:	2301      	movs	r3, #1
 801b1e4:	e041      	b.n	801b26a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801b1ec:	b2db      	uxtb	r3, r3
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d106      	bne.n	801b200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	2200      	movs	r2, #0
 801b1f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801b1fa:	6878      	ldr	r0, [r7, #4]
 801b1fc:	f000 f839 	bl	801b272 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	2202      	movs	r2, #2
 801b204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	681a      	ldr	r2, [r3, #0]
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	3304      	adds	r3, #4
 801b210:	4619      	mov	r1, r3
 801b212:	4610      	mov	r0, r2
 801b214:	f000 f9c2 	bl	801b59c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	2201      	movs	r2, #1
 801b21c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	2201      	movs	r2, #1
 801b224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	2201      	movs	r2, #1
 801b22c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	2201      	movs	r2, #1
 801b234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	2201      	movs	r2, #1
 801b23c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	2201      	movs	r2, #1
 801b244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	2201      	movs	r2, #1
 801b24c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	2201      	movs	r2, #1
 801b254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	2201      	movs	r2, #1
 801b25c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	2201      	movs	r2, #1
 801b264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801b268:	2300      	movs	r3, #0
}
 801b26a:	4618      	mov	r0, r3
 801b26c:	3708      	adds	r7, #8
 801b26e:	46bd      	mov	sp, r7
 801b270:	bd80      	pop	{r7, pc}

0801b272 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 801b272:	b480      	push	{r7}
 801b274:	b083      	sub	sp, #12
 801b276:	af00      	add	r7, sp, #0
 801b278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801b27a:	bf00      	nop
 801b27c:	370c      	adds	r7, #12
 801b27e:	46bd      	mov	sp, r7
 801b280:	bc80      	pop	{r7}
 801b282:	4770      	bx	lr

0801b284 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801b284:	b480      	push	{r7}
 801b286:	b085      	sub	sp, #20
 801b288:	af00      	add	r7, sp, #0
 801b28a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801b292:	b2db      	uxtb	r3, r3
 801b294:	2b01      	cmp	r3, #1
 801b296:	d001      	beq.n	801b29c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801b298:	2301      	movs	r3, #1
 801b29a:	e044      	b.n	801b326 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	2202      	movs	r2, #2
 801b2a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	68da      	ldr	r2, [r3, #12]
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	f042 0201 	orr.w	r2, r2, #1
 801b2b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	4a1d      	ldr	r2, [pc, #116]	@ (801b330 <HAL_TIM_Base_Start_IT+0xac>)
 801b2ba:	4293      	cmp	r3, r2
 801b2bc:	d018      	beq.n	801b2f0 <HAL_TIM_Base_Start_IT+0x6c>
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	4a1c      	ldr	r2, [pc, #112]	@ (801b334 <HAL_TIM_Base_Start_IT+0xb0>)
 801b2c4:	4293      	cmp	r3, r2
 801b2c6:	d013      	beq.n	801b2f0 <HAL_TIM_Base_Start_IT+0x6c>
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b2d0:	d00e      	beq.n	801b2f0 <HAL_TIM_Base_Start_IT+0x6c>
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	4a18      	ldr	r2, [pc, #96]	@ (801b338 <HAL_TIM_Base_Start_IT+0xb4>)
 801b2d8:	4293      	cmp	r3, r2
 801b2da:	d009      	beq.n	801b2f0 <HAL_TIM_Base_Start_IT+0x6c>
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	4a16      	ldr	r2, [pc, #88]	@ (801b33c <HAL_TIM_Base_Start_IT+0xb8>)
 801b2e2:	4293      	cmp	r3, r2
 801b2e4:	d004      	beq.n	801b2f0 <HAL_TIM_Base_Start_IT+0x6c>
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	4a15      	ldr	r2, [pc, #84]	@ (801b340 <HAL_TIM_Base_Start_IT+0xbc>)
 801b2ec:	4293      	cmp	r3, r2
 801b2ee:	d111      	bne.n	801b314 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	681b      	ldr	r3, [r3, #0]
 801b2f4:	689b      	ldr	r3, [r3, #8]
 801b2f6:	f003 0307 	and.w	r3, r3, #7
 801b2fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	2b06      	cmp	r3, #6
 801b300:	d010      	beq.n	801b324 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	681b      	ldr	r3, [r3, #0]
 801b306:	681a      	ldr	r2, [r3, #0]
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	f042 0201 	orr.w	r2, r2, #1
 801b310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801b312:	e007      	b.n	801b324 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	681a      	ldr	r2, [r3, #0]
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	f042 0201 	orr.w	r2, r2, #1
 801b322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801b324:	2300      	movs	r3, #0
}
 801b326:	4618      	mov	r0, r3
 801b328:	3714      	adds	r7, #20
 801b32a:	46bd      	mov	sp, r7
 801b32c:	bc80      	pop	{r7}
 801b32e:	4770      	bx	lr
 801b330:	40012c00 	.word	0x40012c00
 801b334:	40013400 	.word	0x40013400
 801b338:	40000400 	.word	0x40000400
 801b33c:	40000800 	.word	0x40000800
 801b340:	40000c00 	.word	0x40000c00

0801b344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801b344:	b580      	push	{r7, lr}
 801b346:	b082      	sub	sp, #8
 801b348:	af00      	add	r7, sp, #0
 801b34a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	691b      	ldr	r3, [r3, #16]
 801b352:	f003 0302 	and.w	r3, r3, #2
 801b356:	2b02      	cmp	r3, #2
 801b358:	d122      	bne.n	801b3a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	68db      	ldr	r3, [r3, #12]
 801b360:	f003 0302 	and.w	r3, r3, #2
 801b364:	2b02      	cmp	r3, #2
 801b366:	d11b      	bne.n	801b3a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	f06f 0202 	mvn.w	r2, #2
 801b370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	2201      	movs	r2, #1
 801b376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	699b      	ldr	r3, [r3, #24]
 801b37e:	f003 0303 	and.w	r3, r3, #3
 801b382:	2b00      	cmp	r3, #0
 801b384:	d003      	beq.n	801b38e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801b386:	6878      	ldr	r0, [r7, #4]
 801b388:	f000 f8ed 	bl	801b566 <HAL_TIM_IC_CaptureCallback>
 801b38c:	e005      	b.n	801b39a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801b38e:	6878      	ldr	r0, [r7, #4]
 801b390:	f000 f8e0 	bl	801b554 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b394:	6878      	ldr	r0, [r7, #4]
 801b396:	f000 f8ef 	bl	801b578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	2200      	movs	r2, #0
 801b39e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	681b      	ldr	r3, [r3, #0]
 801b3a4:	691b      	ldr	r3, [r3, #16]
 801b3a6:	f003 0304 	and.w	r3, r3, #4
 801b3aa:	2b04      	cmp	r3, #4
 801b3ac:	d122      	bne.n	801b3f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	68db      	ldr	r3, [r3, #12]
 801b3b4:	f003 0304 	and.w	r3, r3, #4
 801b3b8:	2b04      	cmp	r3, #4
 801b3ba:	d11b      	bne.n	801b3f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	f06f 0204 	mvn.w	r2, #4
 801b3c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	2202      	movs	r2, #2
 801b3ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	699b      	ldr	r3, [r3, #24]
 801b3d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d003      	beq.n	801b3e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b3da:	6878      	ldr	r0, [r7, #4]
 801b3dc:	f000 f8c3 	bl	801b566 <HAL_TIM_IC_CaptureCallback>
 801b3e0:	e005      	b.n	801b3ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b3e2:	6878      	ldr	r0, [r7, #4]
 801b3e4:	f000 f8b6 	bl	801b554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b3e8:	6878      	ldr	r0, [r7, #4]
 801b3ea:	f000 f8c5 	bl	801b578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	2200      	movs	r2, #0
 801b3f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	691b      	ldr	r3, [r3, #16]
 801b3fa:	f003 0308 	and.w	r3, r3, #8
 801b3fe:	2b08      	cmp	r3, #8
 801b400:	d122      	bne.n	801b448 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	68db      	ldr	r3, [r3, #12]
 801b408:	f003 0308 	and.w	r3, r3, #8
 801b40c:	2b08      	cmp	r3, #8
 801b40e:	d11b      	bne.n	801b448 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	f06f 0208 	mvn.w	r2, #8
 801b418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	2204      	movs	r2, #4
 801b41e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	681b      	ldr	r3, [r3, #0]
 801b424:	69db      	ldr	r3, [r3, #28]
 801b426:	f003 0303 	and.w	r3, r3, #3
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	d003      	beq.n	801b436 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b42e:	6878      	ldr	r0, [r7, #4]
 801b430:	f000 f899 	bl	801b566 <HAL_TIM_IC_CaptureCallback>
 801b434:	e005      	b.n	801b442 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b436:	6878      	ldr	r0, [r7, #4]
 801b438:	f000 f88c 	bl	801b554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b43c:	6878      	ldr	r0, [r7, #4]
 801b43e:	f000 f89b 	bl	801b578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	2200      	movs	r2, #0
 801b446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801b448:	687b      	ldr	r3, [r7, #4]
 801b44a:	681b      	ldr	r3, [r3, #0]
 801b44c:	691b      	ldr	r3, [r3, #16]
 801b44e:	f003 0310 	and.w	r3, r3, #16
 801b452:	2b10      	cmp	r3, #16
 801b454:	d122      	bne.n	801b49c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	68db      	ldr	r3, [r3, #12]
 801b45c:	f003 0310 	and.w	r3, r3, #16
 801b460:	2b10      	cmp	r3, #16
 801b462:	d11b      	bne.n	801b49c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	f06f 0210 	mvn.w	r2, #16
 801b46c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	2208      	movs	r2, #8
 801b472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	69db      	ldr	r3, [r3, #28]
 801b47a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d003      	beq.n	801b48a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801b482:	6878      	ldr	r0, [r7, #4]
 801b484:	f000 f86f 	bl	801b566 <HAL_TIM_IC_CaptureCallback>
 801b488:	e005      	b.n	801b496 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801b48a:	6878      	ldr	r0, [r7, #4]
 801b48c:	f000 f862 	bl	801b554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801b490:	6878      	ldr	r0, [r7, #4]
 801b492:	f000 f871 	bl	801b578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b496:	687b      	ldr	r3, [r7, #4]
 801b498:	2200      	movs	r2, #0
 801b49a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	691b      	ldr	r3, [r3, #16]
 801b4a2:	f003 0301 	and.w	r3, r3, #1
 801b4a6:	2b01      	cmp	r3, #1
 801b4a8:	d10e      	bne.n	801b4c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	68db      	ldr	r3, [r3, #12]
 801b4b0:	f003 0301 	and.w	r3, r3, #1
 801b4b4:	2b01      	cmp	r3, #1
 801b4b6:	d107      	bne.n	801b4c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	f06f 0201 	mvn.w	r2, #1
 801b4c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801b4c2:	6878      	ldr	r0, [r7, #4]
 801b4c4:	f7e6 fff0 	bl	80024a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	691b      	ldr	r3, [r3, #16]
 801b4ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b4d2:	2b80      	cmp	r3, #128	@ 0x80
 801b4d4:	d10e      	bne.n	801b4f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	68db      	ldr	r3, [r3, #12]
 801b4dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b4e0:	2b80      	cmp	r3, #128	@ 0x80
 801b4e2:	d107      	bne.n	801b4f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 801b4ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801b4ee:	6878      	ldr	r0, [r7, #4]
 801b4f0:	f000 f8d7 	bl	801b6a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	691b      	ldr	r3, [r3, #16]
 801b4fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b4fe:	2b40      	cmp	r3, #64	@ 0x40
 801b500:	d10e      	bne.n	801b520 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	68db      	ldr	r3, [r3, #12]
 801b508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b50c:	2b40      	cmp	r3, #64	@ 0x40
 801b50e:	d107      	bne.n	801b520 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801b518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801b51a:	6878      	ldr	r0, [r7, #4]
 801b51c:	f000 f835 	bl	801b58a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	691b      	ldr	r3, [r3, #16]
 801b526:	f003 0320 	and.w	r3, r3, #32
 801b52a:	2b20      	cmp	r3, #32
 801b52c:	d10e      	bne.n	801b54c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	681b      	ldr	r3, [r3, #0]
 801b532:	68db      	ldr	r3, [r3, #12]
 801b534:	f003 0320 	and.w	r3, r3, #32
 801b538:	2b20      	cmp	r3, #32
 801b53a:	d107      	bne.n	801b54c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	681b      	ldr	r3, [r3, #0]
 801b540:	f06f 0220 	mvn.w	r2, #32
 801b544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801b546:	6878      	ldr	r0, [r7, #4]
 801b548:	f000 f8a2 	bl	801b690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801b54c:	bf00      	nop
 801b54e:	3708      	adds	r7, #8
 801b550:	46bd      	mov	sp, r7
 801b552:	bd80      	pop	{r7, pc}

0801b554 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801b554:	b480      	push	{r7}
 801b556:	b083      	sub	sp, #12
 801b558:	af00      	add	r7, sp, #0
 801b55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801b55c:	bf00      	nop
 801b55e:	370c      	adds	r7, #12
 801b560:	46bd      	mov	sp, r7
 801b562:	bc80      	pop	{r7}
 801b564:	4770      	bx	lr

0801b566 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801b566:	b480      	push	{r7}
 801b568:	b083      	sub	sp, #12
 801b56a:	af00      	add	r7, sp, #0
 801b56c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801b56e:	bf00      	nop
 801b570:	370c      	adds	r7, #12
 801b572:	46bd      	mov	sp, r7
 801b574:	bc80      	pop	{r7}
 801b576:	4770      	bx	lr

0801b578 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801b578:	b480      	push	{r7}
 801b57a:	b083      	sub	sp, #12
 801b57c:	af00      	add	r7, sp, #0
 801b57e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801b580:	bf00      	nop
 801b582:	370c      	adds	r7, #12
 801b584:	46bd      	mov	sp, r7
 801b586:	bc80      	pop	{r7}
 801b588:	4770      	bx	lr

0801b58a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801b58a:	b480      	push	{r7}
 801b58c:	b083      	sub	sp, #12
 801b58e:	af00      	add	r7, sp, #0
 801b590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801b592:	bf00      	nop
 801b594:	370c      	adds	r7, #12
 801b596:	46bd      	mov	sp, r7
 801b598:	bc80      	pop	{r7}
 801b59a:	4770      	bx	lr

0801b59c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801b59c:	b480      	push	{r7}
 801b59e:	b085      	sub	sp, #20
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	6078      	str	r0, [r7, #4]
 801b5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	681b      	ldr	r3, [r3, #0]
 801b5aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	4a33      	ldr	r2, [pc, #204]	@ (801b67c <TIM_Base_SetConfig+0xe0>)
 801b5b0:	4293      	cmp	r3, r2
 801b5b2:	d013      	beq.n	801b5dc <TIM_Base_SetConfig+0x40>
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	4a32      	ldr	r2, [pc, #200]	@ (801b680 <TIM_Base_SetConfig+0xe4>)
 801b5b8:	4293      	cmp	r3, r2
 801b5ba:	d00f      	beq.n	801b5dc <TIM_Base_SetConfig+0x40>
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b5c2:	d00b      	beq.n	801b5dc <TIM_Base_SetConfig+0x40>
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	4a2f      	ldr	r2, [pc, #188]	@ (801b684 <TIM_Base_SetConfig+0xe8>)
 801b5c8:	4293      	cmp	r3, r2
 801b5ca:	d007      	beq.n	801b5dc <TIM_Base_SetConfig+0x40>
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	4a2e      	ldr	r2, [pc, #184]	@ (801b688 <TIM_Base_SetConfig+0xec>)
 801b5d0:	4293      	cmp	r3, r2
 801b5d2:	d003      	beq.n	801b5dc <TIM_Base_SetConfig+0x40>
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	4a2d      	ldr	r2, [pc, #180]	@ (801b68c <TIM_Base_SetConfig+0xf0>)
 801b5d8:	4293      	cmp	r3, r2
 801b5da:	d108      	bne.n	801b5ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801b5dc:	68fb      	ldr	r3, [r7, #12]
 801b5de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801b5e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801b5e4:	683b      	ldr	r3, [r7, #0]
 801b5e6:	685b      	ldr	r3, [r3, #4]
 801b5e8:	68fa      	ldr	r2, [r7, #12]
 801b5ea:	4313      	orrs	r3, r2
 801b5ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	4a22      	ldr	r2, [pc, #136]	@ (801b67c <TIM_Base_SetConfig+0xe0>)
 801b5f2:	4293      	cmp	r3, r2
 801b5f4:	d013      	beq.n	801b61e <TIM_Base_SetConfig+0x82>
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	4a21      	ldr	r2, [pc, #132]	@ (801b680 <TIM_Base_SetConfig+0xe4>)
 801b5fa:	4293      	cmp	r3, r2
 801b5fc:	d00f      	beq.n	801b61e <TIM_Base_SetConfig+0x82>
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b604:	d00b      	beq.n	801b61e <TIM_Base_SetConfig+0x82>
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	4a1e      	ldr	r2, [pc, #120]	@ (801b684 <TIM_Base_SetConfig+0xe8>)
 801b60a:	4293      	cmp	r3, r2
 801b60c:	d007      	beq.n	801b61e <TIM_Base_SetConfig+0x82>
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	4a1d      	ldr	r2, [pc, #116]	@ (801b688 <TIM_Base_SetConfig+0xec>)
 801b612:	4293      	cmp	r3, r2
 801b614:	d003      	beq.n	801b61e <TIM_Base_SetConfig+0x82>
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	4a1c      	ldr	r2, [pc, #112]	@ (801b68c <TIM_Base_SetConfig+0xf0>)
 801b61a:	4293      	cmp	r3, r2
 801b61c:	d108      	bne.n	801b630 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801b61e:	68fb      	ldr	r3, [r7, #12]
 801b620:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801b624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801b626:	683b      	ldr	r3, [r7, #0]
 801b628:	68db      	ldr	r3, [r3, #12]
 801b62a:	68fa      	ldr	r2, [r7, #12]
 801b62c:	4313      	orrs	r3, r2
 801b62e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801b630:	68fb      	ldr	r3, [r7, #12]
 801b632:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801b636:	683b      	ldr	r3, [r7, #0]
 801b638:	695b      	ldr	r3, [r3, #20]
 801b63a:	4313      	orrs	r3, r2
 801b63c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	68fa      	ldr	r2, [r7, #12]
 801b642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801b644:	683b      	ldr	r3, [r7, #0]
 801b646:	689a      	ldr	r2, [r3, #8]
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801b64c:	683b      	ldr	r3, [r7, #0]
 801b64e:	681a      	ldr	r2, [r3, #0]
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	4a09      	ldr	r2, [pc, #36]	@ (801b67c <TIM_Base_SetConfig+0xe0>)
 801b658:	4293      	cmp	r3, r2
 801b65a:	d003      	beq.n	801b664 <TIM_Base_SetConfig+0xc8>
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	4a08      	ldr	r2, [pc, #32]	@ (801b680 <TIM_Base_SetConfig+0xe4>)
 801b660:	4293      	cmp	r3, r2
 801b662:	d103      	bne.n	801b66c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801b664:	683b      	ldr	r3, [r7, #0]
 801b666:	691a      	ldr	r2, [r3, #16]
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	2201      	movs	r2, #1
 801b670:	615a      	str	r2, [r3, #20]
}
 801b672:	bf00      	nop
 801b674:	3714      	adds	r7, #20
 801b676:	46bd      	mov	sp, r7
 801b678:	bc80      	pop	{r7}
 801b67a:	4770      	bx	lr
 801b67c:	40012c00 	.word	0x40012c00
 801b680:	40013400 	.word	0x40013400
 801b684:	40000400 	.word	0x40000400
 801b688:	40000800 	.word	0x40000800
 801b68c:	40000c00 	.word	0x40000c00

0801b690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801b690:	b480      	push	{r7}
 801b692:	b083      	sub	sp, #12
 801b694:	af00      	add	r7, sp, #0
 801b696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801b698:	bf00      	nop
 801b69a:	370c      	adds	r7, #12
 801b69c:	46bd      	mov	sp, r7
 801b69e:	bc80      	pop	{r7}
 801b6a0:	4770      	bx	lr

0801b6a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801b6a2:	b480      	push	{r7}
 801b6a4:	b083      	sub	sp, #12
 801b6a6:	af00      	add	r7, sp, #0
 801b6a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801b6aa:	bf00      	nop
 801b6ac:	370c      	adds	r7, #12
 801b6ae:	46bd      	mov	sp, r7
 801b6b0:	bc80      	pop	{r7}
 801b6b2:	4770      	bx	lr

0801b6b4 <std>:
 801b6b4:	2300      	movs	r3, #0
 801b6b6:	b510      	push	{r4, lr}
 801b6b8:	4604      	mov	r4, r0
 801b6ba:	e9c0 3300 	strd	r3, r3, [r0]
 801b6be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b6c2:	6083      	str	r3, [r0, #8]
 801b6c4:	8181      	strh	r1, [r0, #12]
 801b6c6:	6643      	str	r3, [r0, #100]	@ 0x64
 801b6c8:	81c2      	strh	r2, [r0, #14]
 801b6ca:	6183      	str	r3, [r0, #24]
 801b6cc:	4619      	mov	r1, r3
 801b6ce:	2208      	movs	r2, #8
 801b6d0:	305c      	adds	r0, #92	@ 0x5c
 801b6d2:	f000 f906 	bl	801b8e2 <memset>
 801b6d6:	4b0d      	ldr	r3, [pc, #52]	@ (801b70c <std+0x58>)
 801b6d8:	6224      	str	r4, [r4, #32]
 801b6da:	6263      	str	r3, [r4, #36]	@ 0x24
 801b6dc:	4b0c      	ldr	r3, [pc, #48]	@ (801b710 <std+0x5c>)
 801b6de:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b6e0:	4b0c      	ldr	r3, [pc, #48]	@ (801b714 <std+0x60>)
 801b6e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b6e4:	4b0c      	ldr	r3, [pc, #48]	@ (801b718 <std+0x64>)
 801b6e6:	6323      	str	r3, [r4, #48]	@ 0x30
 801b6e8:	4b0c      	ldr	r3, [pc, #48]	@ (801b71c <std+0x68>)
 801b6ea:	429c      	cmp	r4, r3
 801b6ec:	d006      	beq.n	801b6fc <std+0x48>
 801b6ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b6f2:	4294      	cmp	r4, r2
 801b6f4:	d002      	beq.n	801b6fc <std+0x48>
 801b6f6:	33d0      	adds	r3, #208	@ 0xd0
 801b6f8:	429c      	cmp	r4, r3
 801b6fa:	d105      	bne.n	801b708 <std+0x54>
 801b6fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b704:	f000 b966 	b.w	801b9d4 <__retarget_lock_init_recursive>
 801b708:	bd10      	pop	{r4, pc}
 801b70a:	bf00      	nop
 801b70c:	0801b85d 	.word	0x0801b85d
 801b710:	0801b87f 	.word	0x0801b87f
 801b714:	0801b8b7 	.word	0x0801b8b7
 801b718:	0801b8db 	.word	0x0801b8db
 801b71c:	2000adb8 	.word	0x2000adb8

0801b720 <stdio_exit_handler>:
 801b720:	4a02      	ldr	r2, [pc, #8]	@ (801b72c <stdio_exit_handler+0xc>)
 801b722:	4903      	ldr	r1, [pc, #12]	@ (801b730 <stdio_exit_handler+0x10>)
 801b724:	4803      	ldr	r0, [pc, #12]	@ (801b734 <stdio_exit_handler+0x14>)
 801b726:	f000 b869 	b.w	801b7fc <_fwalk_sglue>
 801b72a:	bf00      	nop
 801b72c:	20000f3c 	.word	0x20000f3c
 801b730:	0801c299 	.word	0x0801c299
 801b734:	20000f4c 	.word	0x20000f4c

0801b738 <cleanup_stdio>:
 801b738:	6841      	ldr	r1, [r0, #4]
 801b73a:	4b0c      	ldr	r3, [pc, #48]	@ (801b76c <cleanup_stdio+0x34>)
 801b73c:	b510      	push	{r4, lr}
 801b73e:	4299      	cmp	r1, r3
 801b740:	4604      	mov	r4, r0
 801b742:	d001      	beq.n	801b748 <cleanup_stdio+0x10>
 801b744:	f000 fda8 	bl	801c298 <_fflush_r>
 801b748:	68a1      	ldr	r1, [r4, #8]
 801b74a:	4b09      	ldr	r3, [pc, #36]	@ (801b770 <cleanup_stdio+0x38>)
 801b74c:	4299      	cmp	r1, r3
 801b74e:	d002      	beq.n	801b756 <cleanup_stdio+0x1e>
 801b750:	4620      	mov	r0, r4
 801b752:	f000 fda1 	bl	801c298 <_fflush_r>
 801b756:	68e1      	ldr	r1, [r4, #12]
 801b758:	4b06      	ldr	r3, [pc, #24]	@ (801b774 <cleanup_stdio+0x3c>)
 801b75a:	4299      	cmp	r1, r3
 801b75c:	d004      	beq.n	801b768 <cleanup_stdio+0x30>
 801b75e:	4620      	mov	r0, r4
 801b760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b764:	f000 bd98 	b.w	801c298 <_fflush_r>
 801b768:	bd10      	pop	{r4, pc}
 801b76a:	bf00      	nop
 801b76c:	2000adb8 	.word	0x2000adb8
 801b770:	2000ae20 	.word	0x2000ae20
 801b774:	2000ae88 	.word	0x2000ae88

0801b778 <global_stdio_init.part.0>:
 801b778:	b510      	push	{r4, lr}
 801b77a:	4b0b      	ldr	r3, [pc, #44]	@ (801b7a8 <global_stdio_init.part.0+0x30>)
 801b77c:	4c0b      	ldr	r4, [pc, #44]	@ (801b7ac <global_stdio_init.part.0+0x34>)
 801b77e:	4a0c      	ldr	r2, [pc, #48]	@ (801b7b0 <global_stdio_init.part.0+0x38>)
 801b780:	4620      	mov	r0, r4
 801b782:	601a      	str	r2, [r3, #0]
 801b784:	2104      	movs	r1, #4
 801b786:	2200      	movs	r2, #0
 801b788:	f7ff ff94 	bl	801b6b4 <std>
 801b78c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b790:	2201      	movs	r2, #1
 801b792:	2109      	movs	r1, #9
 801b794:	f7ff ff8e 	bl	801b6b4 <std>
 801b798:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b79c:	2202      	movs	r2, #2
 801b79e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b7a2:	2112      	movs	r1, #18
 801b7a4:	f7ff bf86 	b.w	801b6b4 <std>
 801b7a8:	2000aef0 	.word	0x2000aef0
 801b7ac:	2000adb8 	.word	0x2000adb8
 801b7b0:	0801b721 	.word	0x0801b721

0801b7b4 <__sfp_lock_acquire>:
 801b7b4:	4801      	ldr	r0, [pc, #4]	@ (801b7bc <__sfp_lock_acquire+0x8>)
 801b7b6:	f000 b90e 	b.w	801b9d6 <__retarget_lock_acquire_recursive>
 801b7ba:	bf00      	nop
 801b7bc:	2000aef9 	.word	0x2000aef9

0801b7c0 <__sfp_lock_release>:
 801b7c0:	4801      	ldr	r0, [pc, #4]	@ (801b7c8 <__sfp_lock_release+0x8>)
 801b7c2:	f000 b909 	b.w	801b9d8 <__retarget_lock_release_recursive>
 801b7c6:	bf00      	nop
 801b7c8:	2000aef9 	.word	0x2000aef9

0801b7cc <__sinit>:
 801b7cc:	b510      	push	{r4, lr}
 801b7ce:	4604      	mov	r4, r0
 801b7d0:	f7ff fff0 	bl	801b7b4 <__sfp_lock_acquire>
 801b7d4:	6a23      	ldr	r3, [r4, #32]
 801b7d6:	b11b      	cbz	r3, 801b7e0 <__sinit+0x14>
 801b7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b7dc:	f7ff bff0 	b.w	801b7c0 <__sfp_lock_release>
 801b7e0:	4b04      	ldr	r3, [pc, #16]	@ (801b7f4 <__sinit+0x28>)
 801b7e2:	6223      	str	r3, [r4, #32]
 801b7e4:	4b04      	ldr	r3, [pc, #16]	@ (801b7f8 <__sinit+0x2c>)
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d1f5      	bne.n	801b7d8 <__sinit+0xc>
 801b7ec:	f7ff ffc4 	bl	801b778 <global_stdio_init.part.0>
 801b7f0:	e7f2      	b.n	801b7d8 <__sinit+0xc>
 801b7f2:	bf00      	nop
 801b7f4:	0801b739 	.word	0x0801b739
 801b7f8:	2000aef0 	.word	0x2000aef0

0801b7fc <_fwalk_sglue>:
 801b7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b800:	4607      	mov	r7, r0
 801b802:	4688      	mov	r8, r1
 801b804:	4614      	mov	r4, r2
 801b806:	2600      	movs	r6, #0
 801b808:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b80c:	f1b9 0901 	subs.w	r9, r9, #1
 801b810:	d505      	bpl.n	801b81e <_fwalk_sglue+0x22>
 801b812:	6824      	ldr	r4, [r4, #0]
 801b814:	2c00      	cmp	r4, #0
 801b816:	d1f7      	bne.n	801b808 <_fwalk_sglue+0xc>
 801b818:	4630      	mov	r0, r6
 801b81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b81e:	89ab      	ldrh	r3, [r5, #12]
 801b820:	2b01      	cmp	r3, #1
 801b822:	d907      	bls.n	801b834 <_fwalk_sglue+0x38>
 801b824:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b828:	3301      	adds	r3, #1
 801b82a:	d003      	beq.n	801b834 <_fwalk_sglue+0x38>
 801b82c:	4629      	mov	r1, r5
 801b82e:	4638      	mov	r0, r7
 801b830:	47c0      	blx	r8
 801b832:	4306      	orrs	r6, r0
 801b834:	3568      	adds	r5, #104	@ 0x68
 801b836:	e7e9      	b.n	801b80c <_fwalk_sglue+0x10>

0801b838 <iprintf>:
 801b838:	b40f      	push	{r0, r1, r2, r3}
 801b83a:	b507      	push	{r0, r1, r2, lr}
 801b83c:	4906      	ldr	r1, [pc, #24]	@ (801b858 <iprintf+0x20>)
 801b83e:	ab04      	add	r3, sp, #16
 801b840:	6808      	ldr	r0, [r1, #0]
 801b842:	f853 2b04 	ldr.w	r2, [r3], #4
 801b846:	6881      	ldr	r1, [r0, #8]
 801b848:	9301      	str	r3, [sp, #4]
 801b84a:	f000 f9fb 	bl	801bc44 <_vfiprintf_r>
 801b84e:	b003      	add	sp, #12
 801b850:	f85d eb04 	ldr.w	lr, [sp], #4
 801b854:	b004      	add	sp, #16
 801b856:	4770      	bx	lr
 801b858:	20000f48 	.word	0x20000f48

0801b85c <__sread>:
 801b85c:	b510      	push	{r4, lr}
 801b85e:	460c      	mov	r4, r1
 801b860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b864:	f000 f868 	bl	801b938 <_read_r>
 801b868:	2800      	cmp	r0, #0
 801b86a:	bfab      	itete	ge
 801b86c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b86e:	89a3      	ldrhlt	r3, [r4, #12]
 801b870:	181b      	addge	r3, r3, r0
 801b872:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b876:	bfac      	ite	ge
 801b878:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b87a:	81a3      	strhlt	r3, [r4, #12]
 801b87c:	bd10      	pop	{r4, pc}

0801b87e <__swrite>:
 801b87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b882:	461f      	mov	r7, r3
 801b884:	898b      	ldrh	r3, [r1, #12]
 801b886:	4605      	mov	r5, r0
 801b888:	05db      	lsls	r3, r3, #23
 801b88a:	460c      	mov	r4, r1
 801b88c:	4616      	mov	r6, r2
 801b88e:	d505      	bpl.n	801b89c <__swrite+0x1e>
 801b890:	2302      	movs	r3, #2
 801b892:	2200      	movs	r2, #0
 801b894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b898:	f000 f83c 	bl	801b914 <_lseek_r>
 801b89c:	89a3      	ldrh	r3, [r4, #12]
 801b89e:	4632      	mov	r2, r6
 801b8a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b8a4:	81a3      	strh	r3, [r4, #12]
 801b8a6:	4628      	mov	r0, r5
 801b8a8:	463b      	mov	r3, r7
 801b8aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b8ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b8b2:	f000 b853 	b.w	801b95c <_write_r>

0801b8b6 <__sseek>:
 801b8b6:	b510      	push	{r4, lr}
 801b8b8:	460c      	mov	r4, r1
 801b8ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8be:	f000 f829 	bl	801b914 <_lseek_r>
 801b8c2:	1c43      	adds	r3, r0, #1
 801b8c4:	89a3      	ldrh	r3, [r4, #12]
 801b8c6:	bf15      	itete	ne
 801b8c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b8ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b8ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b8d2:	81a3      	strheq	r3, [r4, #12]
 801b8d4:	bf18      	it	ne
 801b8d6:	81a3      	strhne	r3, [r4, #12]
 801b8d8:	bd10      	pop	{r4, pc}

0801b8da <__sclose>:
 801b8da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8de:	f000 b809 	b.w	801b8f4 <_close_r>

0801b8e2 <memset>:
 801b8e2:	4603      	mov	r3, r0
 801b8e4:	4402      	add	r2, r0
 801b8e6:	4293      	cmp	r3, r2
 801b8e8:	d100      	bne.n	801b8ec <memset+0xa>
 801b8ea:	4770      	bx	lr
 801b8ec:	f803 1b01 	strb.w	r1, [r3], #1
 801b8f0:	e7f9      	b.n	801b8e6 <memset+0x4>
	...

0801b8f4 <_close_r>:
 801b8f4:	b538      	push	{r3, r4, r5, lr}
 801b8f6:	2300      	movs	r3, #0
 801b8f8:	4d05      	ldr	r5, [pc, #20]	@ (801b910 <_close_r+0x1c>)
 801b8fa:	4604      	mov	r4, r0
 801b8fc:	4608      	mov	r0, r1
 801b8fe:	602b      	str	r3, [r5, #0]
 801b900:	f7e6 feed 	bl	80026de <_close>
 801b904:	1c43      	adds	r3, r0, #1
 801b906:	d102      	bne.n	801b90e <_close_r+0x1a>
 801b908:	682b      	ldr	r3, [r5, #0]
 801b90a:	b103      	cbz	r3, 801b90e <_close_r+0x1a>
 801b90c:	6023      	str	r3, [r4, #0]
 801b90e:	bd38      	pop	{r3, r4, r5, pc}
 801b910:	2000aef4 	.word	0x2000aef4

0801b914 <_lseek_r>:
 801b914:	b538      	push	{r3, r4, r5, lr}
 801b916:	4604      	mov	r4, r0
 801b918:	4608      	mov	r0, r1
 801b91a:	4611      	mov	r1, r2
 801b91c:	2200      	movs	r2, #0
 801b91e:	4d05      	ldr	r5, [pc, #20]	@ (801b934 <_lseek_r+0x20>)
 801b920:	602a      	str	r2, [r5, #0]
 801b922:	461a      	mov	r2, r3
 801b924:	f7e6 feff 	bl	8002726 <_lseek>
 801b928:	1c43      	adds	r3, r0, #1
 801b92a:	d102      	bne.n	801b932 <_lseek_r+0x1e>
 801b92c:	682b      	ldr	r3, [r5, #0]
 801b92e:	b103      	cbz	r3, 801b932 <_lseek_r+0x1e>
 801b930:	6023      	str	r3, [r4, #0]
 801b932:	bd38      	pop	{r3, r4, r5, pc}
 801b934:	2000aef4 	.word	0x2000aef4

0801b938 <_read_r>:
 801b938:	b538      	push	{r3, r4, r5, lr}
 801b93a:	4604      	mov	r4, r0
 801b93c:	4608      	mov	r0, r1
 801b93e:	4611      	mov	r1, r2
 801b940:	2200      	movs	r2, #0
 801b942:	4d05      	ldr	r5, [pc, #20]	@ (801b958 <_read_r+0x20>)
 801b944:	602a      	str	r2, [r5, #0]
 801b946:	461a      	mov	r2, r3
 801b948:	f7e6 feac 	bl	80026a4 <_read>
 801b94c:	1c43      	adds	r3, r0, #1
 801b94e:	d102      	bne.n	801b956 <_read_r+0x1e>
 801b950:	682b      	ldr	r3, [r5, #0]
 801b952:	b103      	cbz	r3, 801b956 <_read_r+0x1e>
 801b954:	6023      	str	r3, [r4, #0]
 801b956:	bd38      	pop	{r3, r4, r5, pc}
 801b958:	2000aef4 	.word	0x2000aef4

0801b95c <_write_r>:
 801b95c:	b538      	push	{r3, r4, r5, lr}
 801b95e:	4604      	mov	r4, r0
 801b960:	4608      	mov	r0, r1
 801b962:	4611      	mov	r1, r2
 801b964:	2200      	movs	r2, #0
 801b966:	4d05      	ldr	r5, [pc, #20]	@ (801b97c <_write_r+0x20>)
 801b968:	602a      	str	r2, [r5, #0]
 801b96a:	461a      	mov	r2, r3
 801b96c:	f7e6 fd7e 	bl	800246c <_write>
 801b970:	1c43      	adds	r3, r0, #1
 801b972:	d102      	bne.n	801b97a <_write_r+0x1e>
 801b974:	682b      	ldr	r3, [r5, #0]
 801b976:	b103      	cbz	r3, 801b97a <_write_r+0x1e>
 801b978:	6023      	str	r3, [r4, #0]
 801b97a:	bd38      	pop	{r3, r4, r5, pc}
 801b97c:	2000aef4 	.word	0x2000aef4

0801b980 <__errno>:
 801b980:	4b01      	ldr	r3, [pc, #4]	@ (801b988 <__errno+0x8>)
 801b982:	6818      	ldr	r0, [r3, #0]
 801b984:	4770      	bx	lr
 801b986:	bf00      	nop
 801b988:	20000f48 	.word	0x20000f48

0801b98c <__libc_init_array>:
 801b98c:	b570      	push	{r4, r5, r6, lr}
 801b98e:	2600      	movs	r6, #0
 801b990:	4d0c      	ldr	r5, [pc, #48]	@ (801b9c4 <__libc_init_array+0x38>)
 801b992:	4c0d      	ldr	r4, [pc, #52]	@ (801b9c8 <__libc_init_array+0x3c>)
 801b994:	1b64      	subs	r4, r4, r5
 801b996:	10a4      	asrs	r4, r4, #2
 801b998:	42a6      	cmp	r6, r4
 801b99a:	d109      	bne.n	801b9b0 <__libc_init_array+0x24>
 801b99c:	f000 fdda 	bl	801c554 <_init>
 801b9a0:	2600      	movs	r6, #0
 801b9a2:	4d0a      	ldr	r5, [pc, #40]	@ (801b9cc <__libc_init_array+0x40>)
 801b9a4:	4c0a      	ldr	r4, [pc, #40]	@ (801b9d0 <__libc_init_array+0x44>)
 801b9a6:	1b64      	subs	r4, r4, r5
 801b9a8:	10a4      	asrs	r4, r4, #2
 801b9aa:	42a6      	cmp	r6, r4
 801b9ac:	d105      	bne.n	801b9ba <__libc_init_array+0x2e>
 801b9ae:	bd70      	pop	{r4, r5, r6, pc}
 801b9b0:	f855 3b04 	ldr.w	r3, [r5], #4
 801b9b4:	4798      	blx	r3
 801b9b6:	3601      	adds	r6, #1
 801b9b8:	e7ee      	b.n	801b998 <__libc_init_array+0xc>
 801b9ba:	f855 3b04 	ldr.w	r3, [r5], #4
 801b9be:	4798      	blx	r3
 801b9c0:	3601      	adds	r6, #1
 801b9c2:	e7f2      	b.n	801b9aa <__libc_init_array+0x1e>
 801b9c4:	0801f0d0 	.word	0x0801f0d0
 801b9c8:	0801f0d0 	.word	0x0801f0d0
 801b9cc:	0801f0d0 	.word	0x0801f0d0
 801b9d0:	0801f0d4 	.word	0x0801f0d4

0801b9d4 <__retarget_lock_init_recursive>:
 801b9d4:	4770      	bx	lr

0801b9d6 <__retarget_lock_acquire_recursive>:
 801b9d6:	4770      	bx	lr

0801b9d8 <__retarget_lock_release_recursive>:
 801b9d8:	4770      	bx	lr

0801b9da <strcpy>:
 801b9da:	4603      	mov	r3, r0
 801b9dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b9e0:	f803 2b01 	strb.w	r2, [r3], #1
 801b9e4:	2a00      	cmp	r2, #0
 801b9e6:	d1f9      	bne.n	801b9dc <strcpy+0x2>
 801b9e8:	4770      	bx	lr

0801b9ea <memcpy>:
 801b9ea:	440a      	add	r2, r1
 801b9ec:	4291      	cmp	r1, r2
 801b9ee:	f100 33ff 	add.w	r3, r0, #4294967295
 801b9f2:	d100      	bne.n	801b9f6 <memcpy+0xc>
 801b9f4:	4770      	bx	lr
 801b9f6:	b510      	push	{r4, lr}
 801b9f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b9fc:	4291      	cmp	r1, r2
 801b9fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ba02:	d1f9      	bne.n	801b9f8 <memcpy+0xe>
 801ba04:	bd10      	pop	{r4, pc}
	...

0801ba08 <_free_r>:
 801ba08:	b538      	push	{r3, r4, r5, lr}
 801ba0a:	4605      	mov	r5, r0
 801ba0c:	2900      	cmp	r1, #0
 801ba0e:	d040      	beq.n	801ba92 <_free_r+0x8a>
 801ba10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ba14:	1f0c      	subs	r4, r1, #4
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	bfb8      	it	lt
 801ba1a:	18e4      	addlt	r4, r4, r3
 801ba1c:	f000 f8de 	bl	801bbdc <__malloc_lock>
 801ba20:	4a1c      	ldr	r2, [pc, #112]	@ (801ba94 <_free_r+0x8c>)
 801ba22:	6813      	ldr	r3, [r2, #0]
 801ba24:	b933      	cbnz	r3, 801ba34 <_free_r+0x2c>
 801ba26:	6063      	str	r3, [r4, #4]
 801ba28:	6014      	str	r4, [r2, #0]
 801ba2a:	4628      	mov	r0, r5
 801ba2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ba30:	f000 b8da 	b.w	801bbe8 <__malloc_unlock>
 801ba34:	42a3      	cmp	r3, r4
 801ba36:	d908      	bls.n	801ba4a <_free_r+0x42>
 801ba38:	6820      	ldr	r0, [r4, #0]
 801ba3a:	1821      	adds	r1, r4, r0
 801ba3c:	428b      	cmp	r3, r1
 801ba3e:	bf01      	itttt	eq
 801ba40:	6819      	ldreq	r1, [r3, #0]
 801ba42:	685b      	ldreq	r3, [r3, #4]
 801ba44:	1809      	addeq	r1, r1, r0
 801ba46:	6021      	streq	r1, [r4, #0]
 801ba48:	e7ed      	b.n	801ba26 <_free_r+0x1e>
 801ba4a:	461a      	mov	r2, r3
 801ba4c:	685b      	ldr	r3, [r3, #4]
 801ba4e:	b10b      	cbz	r3, 801ba54 <_free_r+0x4c>
 801ba50:	42a3      	cmp	r3, r4
 801ba52:	d9fa      	bls.n	801ba4a <_free_r+0x42>
 801ba54:	6811      	ldr	r1, [r2, #0]
 801ba56:	1850      	adds	r0, r2, r1
 801ba58:	42a0      	cmp	r0, r4
 801ba5a:	d10b      	bne.n	801ba74 <_free_r+0x6c>
 801ba5c:	6820      	ldr	r0, [r4, #0]
 801ba5e:	4401      	add	r1, r0
 801ba60:	1850      	adds	r0, r2, r1
 801ba62:	4283      	cmp	r3, r0
 801ba64:	6011      	str	r1, [r2, #0]
 801ba66:	d1e0      	bne.n	801ba2a <_free_r+0x22>
 801ba68:	6818      	ldr	r0, [r3, #0]
 801ba6a:	685b      	ldr	r3, [r3, #4]
 801ba6c:	4408      	add	r0, r1
 801ba6e:	6010      	str	r0, [r2, #0]
 801ba70:	6053      	str	r3, [r2, #4]
 801ba72:	e7da      	b.n	801ba2a <_free_r+0x22>
 801ba74:	d902      	bls.n	801ba7c <_free_r+0x74>
 801ba76:	230c      	movs	r3, #12
 801ba78:	602b      	str	r3, [r5, #0]
 801ba7a:	e7d6      	b.n	801ba2a <_free_r+0x22>
 801ba7c:	6820      	ldr	r0, [r4, #0]
 801ba7e:	1821      	adds	r1, r4, r0
 801ba80:	428b      	cmp	r3, r1
 801ba82:	bf01      	itttt	eq
 801ba84:	6819      	ldreq	r1, [r3, #0]
 801ba86:	685b      	ldreq	r3, [r3, #4]
 801ba88:	1809      	addeq	r1, r1, r0
 801ba8a:	6021      	streq	r1, [r4, #0]
 801ba8c:	6063      	str	r3, [r4, #4]
 801ba8e:	6054      	str	r4, [r2, #4]
 801ba90:	e7cb      	b.n	801ba2a <_free_r+0x22>
 801ba92:	bd38      	pop	{r3, r4, r5, pc}
 801ba94:	2000af00 	.word	0x2000af00

0801ba98 <sbrk_aligned>:
 801ba98:	b570      	push	{r4, r5, r6, lr}
 801ba9a:	4e0f      	ldr	r6, [pc, #60]	@ (801bad8 <sbrk_aligned+0x40>)
 801ba9c:	460c      	mov	r4, r1
 801ba9e:	6831      	ldr	r1, [r6, #0]
 801baa0:	4605      	mov	r5, r0
 801baa2:	b911      	cbnz	r1, 801baaa <sbrk_aligned+0x12>
 801baa4:	f000 fcb4 	bl	801c410 <_sbrk_r>
 801baa8:	6030      	str	r0, [r6, #0]
 801baaa:	4621      	mov	r1, r4
 801baac:	4628      	mov	r0, r5
 801baae:	f000 fcaf 	bl	801c410 <_sbrk_r>
 801bab2:	1c43      	adds	r3, r0, #1
 801bab4:	d103      	bne.n	801babe <sbrk_aligned+0x26>
 801bab6:	f04f 34ff 	mov.w	r4, #4294967295
 801baba:	4620      	mov	r0, r4
 801babc:	bd70      	pop	{r4, r5, r6, pc}
 801babe:	1cc4      	adds	r4, r0, #3
 801bac0:	f024 0403 	bic.w	r4, r4, #3
 801bac4:	42a0      	cmp	r0, r4
 801bac6:	d0f8      	beq.n	801baba <sbrk_aligned+0x22>
 801bac8:	1a21      	subs	r1, r4, r0
 801baca:	4628      	mov	r0, r5
 801bacc:	f000 fca0 	bl	801c410 <_sbrk_r>
 801bad0:	3001      	adds	r0, #1
 801bad2:	d1f2      	bne.n	801baba <sbrk_aligned+0x22>
 801bad4:	e7ef      	b.n	801bab6 <sbrk_aligned+0x1e>
 801bad6:	bf00      	nop
 801bad8:	2000aefc 	.word	0x2000aefc

0801badc <_malloc_r>:
 801badc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bae0:	1ccd      	adds	r5, r1, #3
 801bae2:	f025 0503 	bic.w	r5, r5, #3
 801bae6:	3508      	adds	r5, #8
 801bae8:	2d0c      	cmp	r5, #12
 801baea:	bf38      	it	cc
 801baec:	250c      	movcc	r5, #12
 801baee:	2d00      	cmp	r5, #0
 801baf0:	4606      	mov	r6, r0
 801baf2:	db01      	blt.n	801baf8 <_malloc_r+0x1c>
 801baf4:	42a9      	cmp	r1, r5
 801baf6:	d904      	bls.n	801bb02 <_malloc_r+0x26>
 801baf8:	230c      	movs	r3, #12
 801bafa:	6033      	str	r3, [r6, #0]
 801bafc:	2000      	movs	r0, #0
 801bafe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bb02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801bbd8 <_malloc_r+0xfc>
 801bb06:	f000 f869 	bl	801bbdc <__malloc_lock>
 801bb0a:	f8d8 3000 	ldr.w	r3, [r8]
 801bb0e:	461c      	mov	r4, r3
 801bb10:	bb44      	cbnz	r4, 801bb64 <_malloc_r+0x88>
 801bb12:	4629      	mov	r1, r5
 801bb14:	4630      	mov	r0, r6
 801bb16:	f7ff ffbf 	bl	801ba98 <sbrk_aligned>
 801bb1a:	1c43      	adds	r3, r0, #1
 801bb1c:	4604      	mov	r4, r0
 801bb1e:	d158      	bne.n	801bbd2 <_malloc_r+0xf6>
 801bb20:	f8d8 4000 	ldr.w	r4, [r8]
 801bb24:	4627      	mov	r7, r4
 801bb26:	2f00      	cmp	r7, #0
 801bb28:	d143      	bne.n	801bbb2 <_malloc_r+0xd6>
 801bb2a:	2c00      	cmp	r4, #0
 801bb2c:	d04b      	beq.n	801bbc6 <_malloc_r+0xea>
 801bb2e:	6823      	ldr	r3, [r4, #0]
 801bb30:	4639      	mov	r1, r7
 801bb32:	4630      	mov	r0, r6
 801bb34:	eb04 0903 	add.w	r9, r4, r3
 801bb38:	f000 fc6a 	bl	801c410 <_sbrk_r>
 801bb3c:	4581      	cmp	r9, r0
 801bb3e:	d142      	bne.n	801bbc6 <_malloc_r+0xea>
 801bb40:	6821      	ldr	r1, [r4, #0]
 801bb42:	4630      	mov	r0, r6
 801bb44:	1a6d      	subs	r5, r5, r1
 801bb46:	4629      	mov	r1, r5
 801bb48:	f7ff ffa6 	bl	801ba98 <sbrk_aligned>
 801bb4c:	3001      	adds	r0, #1
 801bb4e:	d03a      	beq.n	801bbc6 <_malloc_r+0xea>
 801bb50:	6823      	ldr	r3, [r4, #0]
 801bb52:	442b      	add	r3, r5
 801bb54:	6023      	str	r3, [r4, #0]
 801bb56:	f8d8 3000 	ldr.w	r3, [r8]
 801bb5a:	685a      	ldr	r2, [r3, #4]
 801bb5c:	bb62      	cbnz	r2, 801bbb8 <_malloc_r+0xdc>
 801bb5e:	f8c8 7000 	str.w	r7, [r8]
 801bb62:	e00f      	b.n	801bb84 <_malloc_r+0xa8>
 801bb64:	6822      	ldr	r2, [r4, #0]
 801bb66:	1b52      	subs	r2, r2, r5
 801bb68:	d420      	bmi.n	801bbac <_malloc_r+0xd0>
 801bb6a:	2a0b      	cmp	r2, #11
 801bb6c:	d917      	bls.n	801bb9e <_malloc_r+0xc2>
 801bb6e:	1961      	adds	r1, r4, r5
 801bb70:	42a3      	cmp	r3, r4
 801bb72:	6025      	str	r5, [r4, #0]
 801bb74:	bf18      	it	ne
 801bb76:	6059      	strne	r1, [r3, #4]
 801bb78:	6863      	ldr	r3, [r4, #4]
 801bb7a:	bf08      	it	eq
 801bb7c:	f8c8 1000 	streq.w	r1, [r8]
 801bb80:	5162      	str	r2, [r4, r5]
 801bb82:	604b      	str	r3, [r1, #4]
 801bb84:	4630      	mov	r0, r6
 801bb86:	f000 f82f 	bl	801bbe8 <__malloc_unlock>
 801bb8a:	f104 000b 	add.w	r0, r4, #11
 801bb8e:	1d23      	adds	r3, r4, #4
 801bb90:	f020 0007 	bic.w	r0, r0, #7
 801bb94:	1ac2      	subs	r2, r0, r3
 801bb96:	bf1c      	itt	ne
 801bb98:	1a1b      	subne	r3, r3, r0
 801bb9a:	50a3      	strne	r3, [r4, r2]
 801bb9c:	e7af      	b.n	801bafe <_malloc_r+0x22>
 801bb9e:	6862      	ldr	r2, [r4, #4]
 801bba0:	42a3      	cmp	r3, r4
 801bba2:	bf0c      	ite	eq
 801bba4:	f8c8 2000 	streq.w	r2, [r8]
 801bba8:	605a      	strne	r2, [r3, #4]
 801bbaa:	e7eb      	b.n	801bb84 <_malloc_r+0xa8>
 801bbac:	4623      	mov	r3, r4
 801bbae:	6864      	ldr	r4, [r4, #4]
 801bbb0:	e7ae      	b.n	801bb10 <_malloc_r+0x34>
 801bbb2:	463c      	mov	r4, r7
 801bbb4:	687f      	ldr	r7, [r7, #4]
 801bbb6:	e7b6      	b.n	801bb26 <_malloc_r+0x4a>
 801bbb8:	461a      	mov	r2, r3
 801bbba:	685b      	ldr	r3, [r3, #4]
 801bbbc:	42a3      	cmp	r3, r4
 801bbbe:	d1fb      	bne.n	801bbb8 <_malloc_r+0xdc>
 801bbc0:	2300      	movs	r3, #0
 801bbc2:	6053      	str	r3, [r2, #4]
 801bbc4:	e7de      	b.n	801bb84 <_malloc_r+0xa8>
 801bbc6:	230c      	movs	r3, #12
 801bbc8:	4630      	mov	r0, r6
 801bbca:	6033      	str	r3, [r6, #0]
 801bbcc:	f000 f80c 	bl	801bbe8 <__malloc_unlock>
 801bbd0:	e794      	b.n	801bafc <_malloc_r+0x20>
 801bbd2:	6005      	str	r5, [r0, #0]
 801bbd4:	e7d6      	b.n	801bb84 <_malloc_r+0xa8>
 801bbd6:	bf00      	nop
 801bbd8:	2000af00 	.word	0x2000af00

0801bbdc <__malloc_lock>:
 801bbdc:	4801      	ldr	r0, [pc, #4]	@ (801bbe4 <__malloc_lock+0x8>)
 801bbde:	f7ff befa 	b.w	801b9d6 <__retarget_lock_acquire_recursive>
 801bbe2:	bf00      	nop
 801bbe4:	2000aef8 	.word	0x2000aef8

0801bbe8 <__malloc_unlock>:
 801bbe8:	4801      	ldr	r0, [pc, #4]	@ (801bbf0 <__malloc_unlock+0x8>)
 801bbea:	f7ff bef5 	b.w	801b9d8 <__retarget_lock_release_recursive>
 801bbee:	bf00      	nop
 801bbf0:	2000aef8 	.word	0x2000aef8

0801bbf4 <__sfputc_r>:
 801bbf4:	6893      	ldr	r3, [r2, #8]
 801bbf6:	b410      	push	{r4}
 801bbf8:	3b01      	subs	r3, #1
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	6093      	str	r3, [r2, #8]
 801bbfe:	da07      	bge.n	801bc10 <__sfputc_r+0x1c>
 801bc00:	6994      	ldr	r4, [r2, #24]
 801bc02:	42a3      	cmp	r3, r4
 801bc04:	db01      	blt.n	801bc0a <__sfputc_r+0x16>
 801bc06:	290a      	cmp	r1, #10
 801bc08:	d102      	bne.n	801bc10 <__sfputc_r+0x1c>
 801bc0a:	bc10      	pop	{r4}
 801bc0c:	f000 bb6c 	b.w	801c2e8 <__swbuf_r>
 801bc10:	6813      	ldr	r3, [r2, #0]
 801bc12:	1c58      	adds	r0, r3, #1
 801bc14:	6010      	str	r0, [r2, #0]
 801bc16:	7019      	strb	r1, [r3, #0]
 801bc18:	4608      	mov	r0, r1
 801bc1a:	bc10      	pop	{r4}
 801bc1c:	4770      	bx	lr

0801bc1e <__sfputs_r>:
 801bc1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc20:	4606      	mov	r6, r0
 801bc22:	460f      	mov	r7, r1
 801bc24:	4614      	mov	r4, r2
 801bc26:	18d5      	adds	r5, r2, r3
 801bc28:	42ac      	cmp	r4, r5
 801bc2a:	d101      	bne.n	801bc30 <__sfputs_r+0x12>
 801bc2c:	2000      	movs	r0, #0
 801bc2e:	e007      	b.n	801bc40 <__sfputs_r+0x22>
 801bc30:	463a      	mov	r2, r7
 801bc32:	4630      	mov	r0, r6
 801bc34:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc38:	f7ff ffdc 	bl	801bbf4 <__sfputc_r>
 801bc3c:	1c43      	adds	r3, r0, #1
 801bc3e:	d1f3      	bne.n	801bc28 <__sfputs_r+0xa>
 801bc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bc44 <_vfiprintf_r>:
 801bc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc48:	460d      	mov	r5, r1
 801bc4a:	4614      	mov	r4, r2
 801bc4c:	4698      	mov	r8, r3
 801bc4e:	4606      	mov	r6, r0
 801bc50:	b09d      	sub	sp, #116	@ 0x74
 801bc52:	b118      	cbz	r0, 801bc5c <_vfiprintf_r+0x18>
 801bc54:	6a03      	ldr	r3, [r0, #32]
 801bc56:	b90b      	cbnz	r3, 801bc5c <_vfiprintf_r+0x18>
 801bc58:	f7ff fdb8 	bl	801b7cc <__sinit>
 801bc5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bc5e:	07d9      	lsls	r1, r3, #31
 801bc60:	d405      	bmi.n	801bc6e <_vfiprintf_r+0x2a>
 801bc62:	89ab      	ldrh	r3, [r5, #12]
 801bc64:	059a      	lsls	r2, r3, #22
 801bc66:	d402      	bmi.n	801bc6e <_vfiprintf_r+0x2a>
 801bc68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bc6a:	f7ff feb4 	bl	801b9d6 <__retarget_lock_acquire_recursive>
 801bc6e:	89ab      	ldrh	r3, [r5, #12]
 801bc70:	071b      	lsls	r3, r3, #28
 801bc72:	d501      	bpl.n	801bc78 <_vfiprintf_r+0x34>
 801bc74:	692b      	ldr	r3, [r5, #16]
 801bc76:	b99b      	cbnz	r3, 801bca0 <_vfiprintf_r+0x5c>
 801bc78:	4629      	mov	r1, r5
 801bc7a:	4630      	mov	r0, r6
 801bc7c:	f000 fb72 	bl	801c364 <__swsetup_r>
 801bc80:	b170      	cbz	r0, 801bca0 <_vfiprintf_r+0x5c>
 801bc82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bc84:	07dc      	lsls	r4, r3, #31
 801bc86:	d504      	bpl.n	801bc92 <_vfiprintf_r+0x4e>
 801bc88:	f04f 30ff 	mov.w	r0, #4294967295
 801bc8c:	b01d      	add	sp, #116	@ 0x74
 801bc8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc92:	89ab      	ldrh	r3, [r5, #12]
 801bc94:	0598      	lsls	r0, r3, #22
 801bc96:	d4f7      	bmi.n	801bc88 <_vfiprintf_r+0x44>
 801bc98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bc9a:	f7ff fe9d 	bl	801b9d8 <__retarget_lock_release_recursive>
 801bc9e:	e7f3      	b.n	801bc88 <_vfiprintf_r+0x44>
 801bca0:	2300      	movs	r3, #0
 801bca2:	9309      	str	r3, [sp, #36]	@ 0x24
 801bca4:	2320      	movs	r3, #32
 801bca6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801bcaa:	2330      	movs	r3, #48	@ 0x30
 801bcac:	f04f 0901 	mov.w	r9, #1
 801bcb0:	f8cd 800c 	str.w	r8, [sp, #12]
 801bcb4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 801be60 <_vfiprintf_r+0x21c>
 801bcb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bcbc:	4623      	mov	r3, r4
 801bcbe:	469a      	mov	sl, r3
 801bcc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bcc4:	b10a      	cbz	r2, 801bcca <_vfiprintf_r+0x86>
 801bcc6:	2a25      	cmp	r2, #37	@ 0x25
 801bcc8:	d1f9      	bne.n	801bcbe <_vfiprintf_r+0x7a>
 801bcca:	ebba 0b04 	subs.w	fp, sl, r4
 801bcce:	d00b      	beq.n	801bce8 <_vfiprintf_r+0xa4>
 801bcd0:	465b      	mov	r3, fp
 801bcd2:	4622      	mov	r2, r4
 801bcd4:	4629      	mov	r1, r5
 801bcd6:	4630      	mov	r0, r6
 801bcd8:	f7ff ffa1 	bl	801bc1e <__sfputs_r>
 801bcdc:	3001      	adds	r0, #1
 801bcde:	f000 80a7 	beq.w	801be30 <_vfiprintf_r+0x1ec>
 801bce2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bce4:	445a      	add	r2, fp
 801bce6:	9209      	str	r2, [sp, #36]	@ 0x24
 801bce8:	f89a 3000 	ldrb.w	r3, [sl]
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	f000 809f 	beq.w	801be30 <_vfiprintf_r+0x1ec>
 801bcf2:	2300      	movs	r3, #0
 801bcf4:	f04f 32ff 	mov.w	r2, #4294967295
 801bcf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bcfc:	f10a 0a01 	add.w	sl, sl, #1
 801bd00:	9304      	str	r3, [sp, #16]
 801bd02:	9307      	str	r3, [sp, #28]
 801bd04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bd08:	931a      	str	r3, [sp, #104]	@ 0x68
 801bd0a:	4654      	mov	r4, sl
 801bd0c:	2205      	movs	r2, #5
 801bd0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd12:	4853      	ldr	r0, [pc, #332]	@ (801be60 <_vfiprintf_r+0x21c>)
 801bd14:	f000 fb8c 	bl	801c430 <memchr>
 801bd18:	9a04      	ldr	r2, [sp, #16]
 801bd1a:	b9d8      	cbnz	r0, 801bd54 <_vfiprintf_r+0x110>
 801bd1c:	06d1      	lsls	r1, r2, #27
 801bd1e:	bf44      	itt	mi
 801bd20:	2320      	movmi	r3, #32
 801bd22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bd26:	0713      	lsls	r3, r2, #28
 801bd28:	bf44      	itt	mi
 801bd2a:	232b      	movmi	r3, #43	@ 0x2b
 801bd2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bd30:	f89a 3000 	ldrb.w	r3, [sl]
 801bd34:	2b2a      	cmp	r3, #42	@ 0x2a
 801bd36:	d015      	beq.n	801bd64 <_vfiprintf_r+0x120>
 801bd38:	4654      	mov	r4, sl
 801bd3a:	2000      	movs	r0, #0
 801bd3c:	f04f 0c0a 	mov.w	ip, #10
 801bd40:	9a07      	ldr	r2, [sp, #28]
 801bd42:	4621      	mov	r1, r4
 801bd44:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bd48:	3b30      	subs	r3, #48	@ 0x30
 801bd4a:	2b09      	cmp	r3, #9
 801bd4c:	d94b      	bls.n	801bde6 <_vfiprintf_r+0x1a2>
 801bd4e:	b1b0      	cbz	r0, 801bd7e <_vfiprintf_r+0x13a>
 801bd50:	9207      	str	r2, [sp, #28]
 801bd52:	e014      	b.n	801bd7e <_vfiprintf_r+0x13a>
 801bd54:	eba0 0308 	sub.w	r3, r0, r8
 801bd58:	fa09 f303 	lsl.w	r3, r9, r3
 801bd5c:	4313      	orrs	r3, r2
 801bd5e:	46a2      	mov	sl, r4
 801bd60:	9304      	str	r3, [sp, #16]
 801bd62:	e7d2      	b.n	801bd0a <_vfiprintf_r+0xc6>
 801bd64:	9b03      	ldr	r3, [sp, #12]
 801bd66:	1d19      	adds	r1, r3, #4
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	9103      	str	r1, [sp, #12]
 801bd6c:	2b00      	cmp	r3, #0
 801bd6e:	bfbb      	ittet	lt
 801bd70:	425b      	neglt	r3, r3
 801bd72:	f042 0202 	orrlt.w	r2, r2, #2
 801bd76:	9307      	strge	r3, [sp, #28]
 801bd78:	9307      	strlt	r3, [sp, #28]
 801bd7a:	bfb8      	it	lt
 801bd7c:	9204      	strlt	r2, [sp, #16]
 801bd7e:	7823      	ldrb	r3, [r4, #0]
 801bd80:	2b2e      	cmp	r3, #46	@ 0x2e
 801bd82:	d10a      	bne.n	801bd9a <_vfiprintf_r+0x156>
 801bd84:	7863      	ldrb	r3, [r4, #1]
 801bd86:	2b2a      	cmp	r3, #42	@ 0x2a
 801bd88:	d132      	bne.n	801bdf0 <_vfiprintf_r+0x1ac>
 801bd8a:	9b03      	ldr	r3, [sp, #12]
 801bd8c:	3402      	adds	r4, #2
 801bd8e:	1d1a      	adds	r2, r3, #4
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	9203      	str	r2, [sp, #12]
 801bd94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bd98:	9305      	str	r3, [sp, #20]
 801bd9a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801be64 <_vfiprintf_r+0x220>
 801bd9e:	2203      	movs	r2, #3
 801bda0:	4650      	mov	r0, sl
 801bda2:	7821      	ldrb	r1, [r4, #0]
 801bda4:	f000 fb44 	bl	801c430 <memchr>
 801bda8:	b138      	cbz	r0, 801bdba <_vfiprintf_r+0x176>
 801bdaa:	2240      	movs	r2, #64	@ 0x40
 801bdac:	9b04      	ldr	r3, [sp, #16]
 801bdae:	eba0 000a 	sub.w	r0, r0, sl
 801bdb2:	4082      	lsls	r2, r0
 801bdb4:	4313      	orrs	r3, r2
 801bdb6:	3401      	adds	r4, #1
 801bdb8:	9304      	str	r3, [sp, #16]
 801bdba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdbe:	2206      	movs	r2, #6
 801bdc0:	4829      	ldr	r0, [pc, #164]	@ (801be68 <_vfiprintf_r+0x224>)
 801bdc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bdc6:	f000 fb33 	bl	801c430 <memchr>
 801bdca:	2800      	cmp	r0, #0
 801bdcc:	d03f      	beq.n	801be4e <_vfiprintf_r+0x20a>
 801bdce:	4b27      	ldr	r3, [pc, #156]	@ (801be6c <_vfiprintf_r+0x228>)
 801bdd0:	bb1b      	cbnz	r3, 801be1a <_vfiprintf_r+0x1d6>
 801bdd2:	9b03      	ldr	r3, [sp, #12]
 801bdd4:	3307      	adds	r3, #7
 801bdd6:	f023 0307 	bic.w	r3, r3, #7
 801bdda:	3308      	adds	r3, #8
 801bddc:	9303      	str	r3, [sp, #12]
 801bdde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bde0:	443b      	add	r3, r7
 801bde2:	9309      	str	r3, [sp, #36]	@ 0x24
 801bde4:	e76a      	b.n	801bcbc <_vfiprintf_r+0x78>
 801bde6:	460c      	mov	r4, r1
 801bde8:	2001      	movs	r0, #1
 801bdea:	fb0c 3202 	mla	r2, ip, r2, r3
 801bdee:	e7a8      	b.n	801bd42 <_vfiprintf_r+0xfe>
 801bdf0:	2300      	movs	r3, #0
 801bdf2:	f04f 0c0a 	mov.w	ip, #10
 801bdf6:	4619      	mov	r1, r3
 801bdf8:	3401      	adds	r4, #1
 801bdfa:	9305      	str	r3, [sp, #20]
 801bdfc:	4620      	mov	r0, r4
 801bdfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801be02:	3a30      	subs	r2, #48	@ 0x30
 801be04:	2a09      	cmp	r2, #9
 801be06:	d903      	bls.n	801be10 <_vfiprintf_r+0x1cc>
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d0c6      	beq.n	801bd9a <_vfiprintf_r+0x156>
 801be0c:	9105      	str	r1, [sp, #20]
 801be0e:	e7c4      	b.n	801bd9a <_vfiprintf_r+0x156>
 801be10:	4604      	mov	r4, r0
 801be12:	2301      	movs	r3, #1
 801be14:	fb0c 2101 	mla	r1, ip, r1, r2
 801be18:	e7f0      	b.n	801bdfc <_vfiprintf_r+0x1b8>
 801be1a:	ab03      	add	r3, sp, #12
 801be1c:	9300      	str	r3, [sp, #0]
 801be1e:	462a      	mov	r2, r5
 801be20:	4630      	mov	r0, r6
 801be22:	4b13      	ldr	r3, [pc, #76]	@ (801be70 <_vfiprintf_r+0x22c>)
 801be24:	a904      	add	r1, sp, #16
 801be26:	f3af 8000 	nop.w
 801be2a:	4607      	mov	r7, r0
 801be2c:	1c78      	adds	r0, r7, #1
 801be2e:	d1d6      	bne.n	801bdde <_vfiprintf_r+0x19a>
 801be30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801be32:	07d9      	lsls	r1, r3, #31
 801be34:	d405      	bmi.n	801be42 <_vfiprintf_r+0x1fe>
 801be36:	89ab      	ldrh	r3, [r5, #12]
 801be38:	059a      	lsls	r2, r3, #22
 801be3a:	d402      	bmi.n	801be42 <_vfiprintf_r+0x1fe>
 801be3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801be3e:	f7ff fdcb 	bl	801b9d8 <__retarget_lock_release_recursive>
 801be42:	89ab      	ldrh	r3, [r5, #12]
 801be44:	065b      	lsls	r3, r3, #25
 801be46:	f53f af1f 	bmi.w	801bc88 <_vfiprintf_r+0x44>
 801be4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801be4c:	e71e      	b.n	801bc8c <_vfiprintf_r+0x48>
 801be4e:	ab03      	add	r3, sp, #12
 801be50:	9300      	str	r3, [sp, #0]
 801be52:	462a      	mov	r2, r5
 801be54:	4630      	mov	r0, r6
 801be56:	4b06      	ldr	r3, [pc, #24]	@ (801be70 <_vfiprintf_r+0x22c>)
 801be58:	a904      	add	r1, sp, #16
 801be5a:	f000 f87d 	bl	801bf58 <_printf_i>
 801be5e:	e7e4      	b.n	801be2a <_vfiprintf_r+0x1e6>
 801be60:	0801f092 	.word	0x0801f092
 801be64:	0801f098 	.word	0x0801f098
 801be68:	0801f09c 	.word	0x0801f09c
 801be6c:	00000000 	.word	0x00000000
 801be70:	0801bc1f 	.word	0x0801bc1f

0801be74 <_printf_common>:
 801be74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801be78:	4616      	mov	r6, r2
 801be7a:	4698      	mov	r8, r3
 801be7c:	688a      	ldr	r2, [r1, #8]
 801be7e:	690b      	ldr	r3, [r1, #16]
 801be80:	4607      	mov	r7, r0
 801be82:	4293      	cmp	r3, r2
 801be84:	bfb8      	it	lt
 801be86:	4613      	movlt	r3, r2
 801be88:	6033      	str	r3, [r6, #0]
 801be8a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801be8e:	460c      	mov	r4, r1
 801be90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801be94:	b10a      	cbz	r2, 801be9a <_printf_common+0x26>
 801be96:	3301      	adds	r3, #1
 801be98:	6033      	str	r3, [r6, #0]
 801be9a:	6823      	ldr	r3, [r4, #0]
 801be9c:	0699      	lsls	r1, r3, #26
 801be9e:	bf42      	ittt	mi
 801bea0:	6833      	ldrmi	r3, [r6, #0]
 801bea2:	3302      	addmi	r3, #2
 801bea4:	6033      	strmi	r3, [r6, #0]
 801bea6:	6825      	ldr	r5, [r4, #0]
 801bea8:	f015 0506 	ands.w	r5, r5, #6
 801beac:	d106      	bne.n	801bebc <_printf_common+0x48>
 801beae:	f104 0a19 	add.w	sl, r4, #25
 801beb2:	68e3      	ldr	r3, [r4, #12]
 801beb4:	6832      	ldr	r2, [r6, #0]
 801beb6:	1a9b      	subs	r3, r3, r2
 801beb8:	42ab      	cmp	r3, r5
 801beba:	dc2b      	bgt.n	801bf14 <_printf_common+0xa0>
 801bebc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bec0:	6822      	ldr	r2, [r4, #0]
 801bec2:	3b00      	subs	r3, #0
 801bec4:	bf18      	it	ne
 801bec6:	2301      	movne	r3, #1
 801bec8:	0692      	lsls	r2, r2, #26
 801beca:	d430      	bmi.n	801bf2e <_printf_common+0xba>
 801becc:	4641      	mov	r1, r8
 801bece:	4638      	mov	r0, r7
 801bed0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bed4:	47c8      	blx	r9
 801bed6:	3001      	adds	r0, #1
 801bed8:	d023      	beq.n	801bf22 <_printf_common+0xae>
 801beda:	6823      	ldr	r3, [r4, #0]
 801bedc:	6922      	ldr	r2, [r4, #16]
 801bede:	f003 0306 	and.w	r3, r3, #6
 801bee2:	2b04      	cmp	r3, #4
 801bee4:	bf14      	ite	ne
 801bee6:	2500      	movne	r5, #0
 801bee8:	6833      	ldreq	r3, [r6, #0]
 801beea:	f04f 0600 	mov.w	r6, #0
 801beee:	bf08      	it	eq
 801bef0:	68e5      	ldreq	r5, [r4, #12]
 801bef2:	f104 041a 	add.w	r4, r4, #26
 801bef6:	bf08      	it	eq
 801bef8:	1aed      	subeq	r5, r5, r3
 801befa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801befe:	bf08      	it	eq
 801bf00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bf04:	4293      	cmp	r3, r2
 801bf06:	bfc4      	itt	gt
 801bf08:	1a9b      	subgt	r3, r3, r2
 801bf0a:	18ed      	addgt	r5, r5, r3
 801bf0c:	42b5      	cmp	r5, r6
 801bf0e:	d11a      	bne.n	801bf46 <_printf_common+0xd2>
 801bf10:	2000      	movs	r0, #0
 801bf12:	e008      	b.n	801bf26 <_printf_common+0xb2>
 801bf14:	2301      	movs	r3, #1
 801bf16:	4652      	mov	r2, sl
 801bf18:	4641      	mov	r1, r8
 801bf1a:	4638      	mov	r0, r7
 801bf1c:	47c8      	blx	r9
 801bf1e:	3001      	adds	r0, #1
 801bf20:	d103      	bne.n	801bf2a <_printf_common+0xb6>
 801bf22:	f04f 30ff 	mov.w	r0, #4294967295
 801bf26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf2a:	3501      	adds	r5, #1
 801bf2c:	e7c1      	b.n	801beb2 <_printf_common+0x3e>
 801bf2e:	2030      	movs	r0, #48	@ 0x30
 801bf30:	18e1      	adds	r1, r4, r3
 801bf32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801bf36:	1c5a      	adds	r2, r3, #1
 801bf38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bf3c:	4422      	add	r2, r4
 801bf3e:	3302      	adds	r3, #2
 801bf40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bf44:	e7c2      	b.n	801becc <_printf_common+0x58>
 801bf46:	2301      	movs	r3, #1
 801bf48:	4622      	mov	r2, r4
 801bf4a:	4641      	mov	r1, r8
 801bf4c:	4638      	mov	r0, r7
 801bf4e:	47c8      	blx	r9
 801bf50:	3001      	adds	r0, #1
 801bf52:	d0e6      	beq.n	801bf22 <_printf_common+0xae>
 801bf54:	3601      	adds	r6, #1
 801bf56:	e7d9      	b.n	801bf0c <_printf_common+0x98>

0801bf58 <_printf_i>:
 801bf58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bf5c:	7e0f      	ldrb	r7, [r1, #24]
 801bf5e:	4691      	mov	r9, r2
 801bf60:	2f78      	cmp	r7, #120	@ 0x78
 801bf62:	4680      	mov	r8, r0
 801bf64:	460c      	mov	r4, r1
 801bf66:	469a      	mov	sl, r3
 801bf68:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bf6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bf6e:	d807      	bhi.n	801bf80 <_printf_i+0x28>
 801bf70:	2f62      	cmp	r7, #98	@ 0x62
 801bf72:	d80a      	bhi.n	801bf8a <_printf_i+0x32>
 801bf74:	2f00      	cmp	r7, #0
 801bf76:	f000 80d3 	beq.w	801c120 <_printf_i+0x1c8>
 801bf7a:	2f58      	cmp	r7, #88	@ 0x58
 801bf7c:	f000 80ba 	beq.w	801c0f4 <_printf_i+0x19c>
 801bf80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bf84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bf88:	e03a      	b.n	801c000 <_printf_i+0xa8>
 801bf8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bf8e:	2b15      	cmp	r3, #21
 801bf90:	d8f6      	bhi.n	801bf80 <_printf_i+0x28>
 801bf92:	a101      	add	r1, pc, #4	@ (adr r1, 801bf98 <_printf_i+0x40>)
 801bf94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bf98:	0801bff1 	.word	0x0801bff1
 801bf9c:	0801c005 	.word	0x0801c005
 801bfa0:	0801bf81 	.word	0x0801bf81
 801bfa4:	0801bf81 	.word	0x0801bf81
 801bfa8:	0801bf81 	.word	0x0801bf81
 801bfac:	0801bf81 	.word	0x0801bf81
 801bfb0:	0801c005 	.word	0x0801c005
 801bfb4:	0801bf81 	.word	0x0801bf81
 801bfb8:	0801bf81 	.word	0x0801bf81
 801bfbc:	0801bf81 	.word	0x0801bf81
 801bfc0:	0801bf81 	.word	0x0801bf81
 801bfc4:	0801c107 	.word	0x0801c107
 801bfc8:	0801c02f 	.word	0x0801c02f
 801bfcc:	0801c0c1 	.word	0x0801c0c1
 801bfd0:	0801bf81 	.word	0x0801bf81
 801bfd4:	0801bf81 	.word	0x0801bf81
 801bfd8:	0801c129 	.word	0x0801c129
 801bfdc:	0801bf81 	.word	0x0801bf81
 801bfe0:	0801c02f 	.word	0x0801c02f
 801bfe4:	0801bf81 	.word	0x0801bf81
 801bfe8:	0801bf81 	.word	0x0801bf81
 801bfec:	0801c0c9 	.word	0x0801c0c9
 801bff0:	6833      	ldr	r3, [r6, #0]
 801bff2:	1d1a      	adds	r2, r3, #4
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	6032      	str	r2, [r6, #0]
 801bff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bffc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c000:	2301      	movs	r3, #1
 801c002:	e09e      	b.n	801c142 <_printf_i+0x1ea>
 801c004:	6833      	ldr	r3, [r6, #0]
 801c006:	6820      	ldr	r0, [r4, #0]
 801c008:	1d19      	adds	r1, r3, #4
 801c00a:	6031      	str	r1, [r6, #0]
 801c00c:	0606      	lsls	r6, r0, #24
 801c00e:	d501      	bpl.n	801c014 <_printf_i+0xbc>
 801c010:	681d      	ldr	r5, [r3, #0]
 801c012:	e003      	b.n	801c01c <_printf_i+0xc4>
 801c014:	0645      	lsls	r5, r0, #25
 801c016:	d5fb      	bpl.n	801c010 <_printf_i+0xb8>
 801c018:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c01c:	2d00      	cmp	r5, #0
 801c01e:	da03      	bge.n	801c028 <_printf_i+0xd0>
 801c020:	232d      	movs	r3, #45	@ 0x2d
 801c022:	426d      	negs	r5, r5
 801c024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c028:	230a      	movs	r3, #10
 801c02a:	4859      	ldr	r0, [pc, #356]	@ (801c190 <_printf_i+0x238>)
 801c02c:	e011      	b.n	801c052 <_printf_i+0xfa>
 801c02e:	6821      	ldr	r1, [r4, #0]
 801c030:	6833      	ldr	r3, [r6, #0]
 801c032:	0608      	lsls	r0, r1, #24
 801c034:	f853 5b04 	ldr.w	r5, [r3], #4
 801c038:	d402      	bmi.n	801c040 <_printf_i+0xe8>
 801c03a:	0649      	lsls	r1, r1, #25
 801c03c:	bf48      	it	mi
 801c03e:	b2ad      	uxthmi	r5, r5
 801c040:	2f6f      	cmp	r7, #111	@ 0x6f
 801c042:	6033      	str	r3, [r6, #0]
 801c044:	bf14      	ite	ne
 801c046:	230a      	movne	r3, #10
 801c048:	2308      	moveq	r3, #8
 801c04a:	4851      	ldr	r0, [pc, #324]	@ (801c190 <_printf_i+0x238>)
 801c04c:	2100      	movs	r1, #0
 801c04e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c052:	6866      	ldr	r6, [r4, #4]
 801c054:	2e00      	cmp	r6, #0
 801c056:	bfa8      	it	ge
 801c058:	6821      	ldrge	r1, [r4, #0]
 801c05a:	60a6      	str	r6, [r4, #8]
 801c05c:	bfa4      	itt	ge
 801c05e:	f021 0104 	bicge.w	r1, r1, #4
 801c062:	6021      	strge	r1, [r4, #0]
 801c064:	b90d      	cbnz	r5, 801c06a <_printf_i+0x112>
 801c066:	2e00      	cmp	r6, #0
 801c068:	d04b      	beq.n	801c102 <_printf_i+0x1aa>
 801c06a:	4616      	mov	r6, r2
 801c06c:	fbb5 f1f3 	udiv	r1, r5, r3
 801c070:	fb03 5711 	mls	r7, r3, r1, r5
 801c074:	5dc7      	ldrb	r7, [r0, r7]
 801c076:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c07a:	462f      	mov	r7, r5
 801c07c:	42bb      	cmp	r3, r7
 801c07e:	460d      	mov	r5, r1
 801c080:	d9f4      	bls.n	801c06c <_printf_i+0x114>
 801c082:	2b08      	cmp	r3, #8
 801c084:	d10b      	bne.n	801c09e <_printf_i+0x146>
 801c086:	6823      	ldr	r3, [r4, #0]
 801c088:	07df      	lsls	r7, r3, #31
 801c08a:	d508      	bpl.n	801c09e <_printf_i+0x146>
 801c08c:	6923      	ldr	r3, [r4, #16]
 801c08e:	6861      	ldr	r1, [r4, #4]
 801c090:	4299      	cmp	r1, r3
 801c092:	bfde      	ittt	le
 801c094:	2330      	movle	r3, #48	@ 0x30
 801c096:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c09a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c09e:	1b92      	subs	r2, r2, r6
 801c0a0:	6122      	str	r2, [r4, #16]
 801c0a2:	464b      	mov	r3, r9
 801c0a4:	4621      	mov	r1, r4
 801c0a6:	4640      	mov	r0, r8
 801c0a8:	f8cd a000 	str.w	sl, [sp]
 801c0ac:	aa03      	add	r2, sp, #12
 801c0ae:	f7ff fee1 	bl	801be74 <_printf_common>
 801c0b2:	3001      	adds	r0, #1
 801c0b4:	d14a      	bne.n	801c14c <_printf_i+0x1f4>
 801c0b6:	f04f 30ff 	mov.w	r0, #4294967295
 801c0ba:	b004      	add	sp, #16
 801c0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c0c0:	6823      	ldr	r3, [r4, #0]
 801c0c2:	f043 0320 	orr.w	r3, r3, #32
 801c0c6:	6023      	str	r3, [r4, #0]
 801c0c8:	2778      	movs	r7, #120	@ 0x78
 801c0ca:	4832      	ldr	r0, [pc, #200]	@ (801c194 <_printf_i+0x23c>)
 801c0cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c0d0:	6823      	ldr	r3, [r4, #0]
 801c0d2:	6831      	ldr	r1, [r6, #0]
 801c0d4:	061f      	lsls	r7, r3, #24
 801c0d6:	f851 5b04 	ldr.w	r5, [r1], #4
 801c0da:	d402      	bmi.n	801c0e2 <_printf_i+0x18a>
 801c0dc:	065f      	lsls	r7, r3, #25
 801c0de:	bf48      	it	mi
 801c0e0:	b2ad      	uxthmi	r5, r5
 801c0e2:	6031      	str	r1, [r6, #0]
 801c0e4:	07d9      	lsls	r1, r3, #31
 801c0e6:	bf44      	itt	mi
 801c0e8:	f043 0320 	orrmi.w	r3, r3, #32
 801c0ec:	6023      	strmi	r3, [r4, #0]
 801c0ee:	b11d      	cbz	r5, 801c0f8 <_printf_i+0x1a0>
 801c0f0:	2310      	movs	r3, #16
 801c0f2:	e7ab      	b.n	801c04c <_printf_i+0xf4>
 801c0f4:	4826      	ldr	r0, [pc, #152]	@ (801c190 <_printf_i+0x238>)
 801c0f6:	e7e9      	b.n	801c0cc <_printf_i+0x174>
 801c0f8:	6823      	ldr	r3, [r4, #0]
 801c0fa:	f023 0320 	bic.w	r3, r3, #32
 801c0fe:	6023      	str	r3, [r4, #0]
 801c100:	e7f6      	b.n	801c0f0 <_printf_i+0x198>
 801c102:	4616      	mov	r6, r2
 801c104:	e7bd      	b.n	801c082 <_printf_i+0x12a>
 801c106:	6833      	ldr	r3, [r6, #0]
 801c108:	6825      	ldr	r5, [r4, #0]
 801c10a:	1d18      	adds	r0, r3, #4
 801c10c:	6961      	ldr	r1, [r4, #20]
 801c10e:	6030      	str	r0, [r6, #0]
 801c110:	062e      	lsls	r6, r5, #24
 801c112:	681b      	ldr	r3, [r3, #0]
 801c114:	d501      	bpl.n	801c11a <_printf_i+0x1c2>
 801c116:	6019      	str	r1, [r3, #0]
 801c118:	e002      	b.n	801c120 <_printf_i+0x1c8>
 801c11a:	0668      	lsls	r0, r5, #25
 801c11c:	d5fb      	bpl.n	801c116 <_printf_i+0x1be>
 801c11e:	8019      	strh	r1, [r3, #0]
 801c120:	2300      	movs	r3, #0
 801c122:	4616      	mov	r6, r2
 801c124:	6123      	str	r3, [r4, #16]
 801c126:	e7bc      	b.n	801c0a2 <_printf_i+0x14a>
 801c128:	6833      	ldr	r3, [r6, #0]
 801c12a:	2100      	movs	r1, #0
 801c12c:	1d1a      	adds	r2, r3, #4
 801c12e:	6032      	str	r2, [r6, #0]
 801c130:	681e      	ldr	r6, [r3, #0]
 801c132:	6862      	ldr	r2, [r4, #4]
 801c134:	4630      	mov	r0, r6
 801c136:	f000 f97b 	bl	801c430 <memchr>
 801c13a:	b108      	cbz	r0, 801c140 <_printf_i+0x1e8>
 801c13c:	1b80      	subs	r0, r0, r6
 801c13e:	6060      	str	r0, [r4, #4]
 801c140:	6863      	ldr	r3, [r4, #4]
 801c142:	6123      	str	r3, [r4, #16]
 801c144:	2300      	movs	r3, #0
 801c146:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c14a:	e7aa      	b.n	801c0a2 <_printf_i+0x14a>
 801c14c:	4632      	mov	r2, r6
 801c14e:	4649      	mov	r1, r9
 801c150:	4640      	mov	r0, r8
 801c152:	6923      	ldr	r3, [r4, #16]
 801c154:	47d0      	blx	sl
 801c156:	3001      	adds	r0, #1
 801c158:	d0ad      	beq.n	801c0b6 <_printf_i+0x15e>
 801c15a:	6823      	ldr	r3, [r4, #0]
 801c15c:	079b      	lsls	r3, r3, #30
 801c15e:	d413      	bmi.n	801c188 <_printf_i+0x230>
 801c160:	68e0      	ldr	r0, [r4, #12]
 801c162:	9b03      	ldr	r3, [sp, #12]
 801c164:	4298      	cmp	r0, r3
 801c166:	bfb8      	it	lt
 801c168:	4618      	movlt	r0, r3
 801c16a:	e7a6      	b.n	801c0ba <_printf_i+0x162>
 801c16c:	2301      	movs	r3, #1
 801c16e:	4632      	mov	r2, r6
 801c170:	4649      	mov	r1, r9
 801c172:	4640      	mov	r0, r8
 801c174:	47d0      	blx	sl
 801c176:	3001      	adds	r0, #1
 801c178:	d09d      	beq.n	801c0b6 <_printf_i+0x15e>
 801c17a:	3501      	adds	r5, #1
 801c17c:	68e3      	ldr	r3, [r4, #12]
 801c17e:	9903      	ldr	r1, [sp, #12]
 801c180:	1a5b      	subs	r3, r3, r1
 801c182:	42ab      	cmp	r3, r5
 801c184:	dcf2      	bgt.n	801c16c <_printf_i+0x214>
 801c186:	e7eb      	b.n	801c160 <_printf_i+0x208>
 801c188:	2500      	movs	r5, #0
 801c18a:	f104 0619 	add.w	r6, r4, #25
 801c18e:	e7f5      	b.n	801c17c <_printf_i+0x224>
 801c190:	0801f0a3 	.word	0x0801f0a3
 801c194:	0801f0b4 	.word	0x0801f0b4

0801c198 <__sflush_r>:
 801c198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c19e:	0716      	lsls	r6, r2, #28
 801c1a0:	4605      	mov	r5, r0
 801c1a2:	460c      	mov	r4, r1
 801c1a4:	d454      	bmi.n	801c250 <__sflush_r+0xb8>
 801c1a6:	684b      	ldr	r3, [r1, #4]
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	dc02      	bgt.n	801c1b2 <__sflush_r+0x1a>
 801c1ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	dd48      	ble.n	801c244 <__sflush_r+0xac>
 801c1b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c1b4:	2e00      	cmp	r6, #0
 801c1b6:	d045      	beq.n	801c244 <__sflush_r+0xac>
 801c1b8:	2300      	movs	r3, #0
 801c1ba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c1be:	682f      	ldr	r7, [r5, #0]
 801c1c0:	6a21      	ldr	r1, [r4, #32]
 801c1c2:	602b      	str	r3, [r5, #0]
 801c1c4:	d030      	beq.n	801c228 <__sflush_r+0x90>
 801c1c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c1c8:	89a3      	ldrh	r3, [r4, #12]
 801c1ca:	0759      	lsls	r1, r3, #29
 801c1cc:	d505      	bpl.n	801c1da <__sflush_r+0x42>
 801c1ce:	6863      	ldr	r3, [r4, #4]
 801c1d0:	1ad2      	subs	r2, r2, r3
 801c1d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c1d4:	b10b      	cbz	r3, 801c1da <__sflush_r+0x42>
 801c1d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c1d8:	1ad2      	subs	r2, r2, r3
 801c1da:	2300      	movs	r3, #0
 801c1dc:	4628      	mov	r0, r5
 801c1de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c1e0:	6a21      	ldr	r1, [r4, #32]
 801c1e2:	47b0      	blx	r6
 801c1e4:	1c43      	adds	r3, r0, #1
 801c1e6:	89a3      	ldrh	r3, [r4, #12]
 801c1e8:	d106      	bne.n	801c1f8 <__sflush_r+0x60>
 801c1ea:	6829      	ldr	r1, [r5, #0]
 801c1ec:	291d      	cmp	r1, #29
 801c1ee:	d82b      	bhi.n	801c248 <__sflush_r+0xb0>
 801c1f0:	4a28      	ldr	r2, [pc, #160]	@ (801c294 <__sflush_r+0xfc>)
 801c1f2:	410a      	asrs	r2, r1
 801c1f4:	07d6      	lsls	r6, r2, #31
 801c1f6:	d427      	bmi.n	801c248 <__sflush_r+0xb0>
 801c1f8:	2200      	movs	r2, #0
 801c1fa:	6062      	str	r2, [r4, #4]
 801c1fc:	6922      	ldr	r2, [r4, #16]
 801c1fe:	04d9      	lsls	r1, r3, #19
 801c200:	6022      	str	r2, [r4, #0]
 801c202:	d504      	bpl.n	801c20e <__sflush_r+0x76>
 801c204:	1c42      	adds	r2, r0, #1
 801c206:	d101      	bne.n	801c20c <__sflush_r+0x74>
 801c208:	682b      	ldr	r3, [r5, #0]
 801c20a:	b903      	cbnz	r3, 801c20e <__sflush_r+0x76>
 801c20c:	6560      	str	r0, [r4, #84]	@ 0x54
 801c20e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c210:	602f      	str	r7, [r5, #0]
 801c212:	b1b9      	cbz	r1, 801c244 <__sflush_r+0xac>
 801c214:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c218:	4299      	cmp	r1, r3
 801c21a:	d002      	beq.n	801c222 <__sflush_r+0x8a>
 801c21c:	4628      	mov	r0, r5
 801c21e:	f7ff fbf3 	bl	801ba08 <_free_r>
 801c222:	2300      	movs	r3, #0
 801c224:	6363      	str	r3, [r4, #52]	@ 0x34
 801c226:	e00d      	b.n	801c244 <__sflush_r+0xac>
 801c228:	2301      	movs	r3, #1
 801c22a:	4628      	mov	r0, r5
 801c22c:	47b0      	blx	r6
 801c22e:	4602      	mov	r2, r0
 801c230:	1c50      	adds	r0, r2, #1
 801c232:	d1c9      	bne.n	801c1c8 <__sflush_r+0x30>
 801c234:	682b      	ldr	r3, [r5, #0]
 801c236:	2b00      	cmp	r3, #0
 801c238:	d0c6      	beq.n	801c1c8 <__sflush_r+0x30>
 801c23a:	2b1d      	cmp	r3, #29
 801c23c:	d001      	beq.n	801c242 <__sflush_r+0xaa>
 801c23e:	2b16      	cmp	r3, #22
 801c240:	d11d      	bne.n	801c27e <__sflush_r+0xe6>
 801c242:	602f      	str	r7, [r5, #0]
 801c244:	2000      	movs	r0, #0
 801c246:	e021      	b.n	801c28c <__sflush_r+0xf4>
 801c248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c24c:	b21b      	sxth	r3, r3
 801c24e:	e01a      	b.n	801c286 <__sflush_r+0xee>
 801c250:	690f      	ldr	r7, [r1, #16]
 801c252:	2f00      	cmp	r7, #0
 801c254:	d0f6      	beq.n	801c244 <__sflush_r+0xac>
 801c256:	0793      	lsls	r3, r2, #30
 801c258:	bf18      	it	ne
 801c25a:	2300      	movne	r3, #0
 801c25c:	680e      	ldr	r6, [r1, #0]
 801c25e:	bf08      	it	eq
 801c260:	694b      	ldreq	r3, [r1, #20]
 801c262:	1bf6      	subs	r6, r6, r7
 801c264:	600f      	str	r7, [r1, #0]
 801c266:	608b      	str	r3, [r1, #8]
 801c268:	2e00      	cmp	r6, #0
 801c26a:	ddeb      	ble.n	801c244 <__sflush_r+0xac>
 801c26c:	4633      	mov	r3, r6
 801c26e:	463a      	mov	r2, r7
 801c270:	4628      	mov	r0, r5
 801c272:	6a21      	ldr	r1, [r4, #32]
 801c274:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801c278:	47e0      	blx	ip
 801c27a:	2800      	cmp	r0, #0
 801c27c:	dc07      	bgt.n	801c28e <__sflush_r+0xf6>
 801c27e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c286:	f04f 30ff 	mov.w	r0, #4294967295
 801c28a:	81a3      	strh	r3, [r4, #12]
 801c28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c28e:	4407      	add	r7, r0
 801c290:	1a36      	subs	r6, r6, r0
 801c292:	e7e9      	b.n	801c268 <__sflush_r+0xd0>
 801c294:	dfbffffe 	.word	0xdfbffffe

0801c298 <_fflush_r>:
 801c298:	b538      	push	{r3, r4, r5, lr}
 801c29a:	690b      	ldr	r3, [r1, #16]
 801c29c:	4605      	mov	r5, r0
 801c29e:	460c      	mov	r4, r1
 801c2a0:	b913      	cbnz	r3, 801c2a8 <_fflush_r+0x10>
 801c2a2:	2500      	movs	r5, #0
 801c2a4:	4628      	mov	r0, r5
 801c2a6:	bd38      	pop	{r3, r4, r5, pc}
 801c2a8:	b118      	cbz	r0, 801c2b2 <_fflush_r+0x1a>
 801c2aa:	6a03      	ldr	r3, [r0, #32]
 801c2ac:	b90b      	cbnz	r3, 801c2b2 <_fflush_r+0x1a>
 801c2ae:	f7ff fa8d 	bl	801b7cc <__sinit>
 801c2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	d0f3      	beq.n	801c2a2 <_fflush_r+0xa>
 801c2ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c2bc:	07d0      	lsls	r0, r2, #31
 801c2be:	d404      	bmi.n	801c2ca <_fflush_r+0x32>
 801c2c0:	0599      	lsls	r1, r3, #22
 801c2c2:	d402      	bmi.n	801c2ca <_fflush_r+0x32>
 801c2c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c2c6:	f7ff fb86 	bl	801b9d6 <__retarget_lock_acquire_recursive>
 801c2ca:	4628      	mov	r0, r5
 801c2cc:	4621      	mov	r1, r4
 801c2ce:	f7ff ff63 	bl	801c198 <__sflush_r>
 801c2d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c2d4:	4605      	mov	r5, r0
 801c2d6:	07da      	lsls	r2, r3, #31
 801c2d8:	d4e4      	bmi.n	801c2a4 <_fflush_r+0xc>
 801c2da:	89a3      	ldrh	r3, [r4, #12]
 801c2dc:	059b      	lsls	r3, r3, #22
 801c2de:	d4e1      	bmi.n	801c2a4 <_fflush_r+0xc>
 801c2e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c2e2:	f7ff fb79 	bl	801b9d8 <__retarget_lock_release_recursive>
 801c2e6:	e7dd      	b.n	801c2a4 <_fflush_r+0xc>

0801c2e8 <__swbuf_r>:
 801c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2ea:	460e      	mov	r6, r1
 801c2ec:	4614      	mov	r4, r2
 801c2ee:	4605      	mov	r5, r0
 801c2f0:	b118      	cbz	r0, 801c2fa <__swbuf_r+0x12>
 801c2f2:	6a03      	ldr	r3, [r0, #32]
 801c2f4:	b90b      	cbnz	r3, 801c2fa <__swbuf_r+0x12>
 801c2f6:	f7ff fa69 	bl	801b7cc <__sinit>
 801c2fa:	69a3      	ldr	r3, [r4, #24]
 801c2fc:	60a3      	str	r3, [r4, #8]
 801c2fe:	89a3      	ldrh	r3, [r4, #12]
 801c300:	071a      	lsls	r2, r3, #28
 801c302:	d501      	bpl.n	801c308 <__swbuf_r+0x20>
 801c304:	6923      	ldr	r3, [r4, #16]
 801c306:	b943      	cbnz	r3, 801c31a <__swbuf_r+0x32>
 801c308:	4621      	mov	r1, r4
 801c30a:	4628      	mov	r0, r5
 801c30c:	f000 f82a 	bl	801c364 <__swsetup_r>
 801c310:	b118      	cbz	r0, 801c31a <__swbuf_r+0x32>
 801c312:	f04f 37ff 	mov.w	r7, #4294967295
 801c316:	4638      	mov	r0, r7
 801c318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c31a:	6823      	ldr	r3, [r4, #0]
 801c31c:	6922      	ldr	r2, [r4, #16]
 801c31e:	b2f6      	uxtb	r6, r6
 801c320:	1a98      	subs	r0, r3, r2
 801c322:	6963      	ldr	r3, [r4, #20]
 801c324:	4637      	mov	r7, r6
 801c326:	4283      	cmp	r3, r0
 801c328:	dc05      	bgt.n	801c336 <__swbuf_r+0x4e>
 801c32a:	4621      	mov	r1, r4
 801c32c:	4628      	mov	r0, r5
 801c32e:	f7ff ffb3 	bl	801c298 <_fflush_r>
 801c332:	2800      	cmp	r0, #0
 801c334:	d1ed      	bne.n	801c312 <__swbuf_r+0x2a>
 801c336:	68a3      	ldr	r3, [r4, #8]
 801c338:	3b01      	subs	r3, #1
 801c33a:	60a3      	str	r3, [r4, #8]
 801c33c:	6823      	ldr	r3, [r4, #0]
 801c33e:	1c5a      	adds	r2, r3, #1
 801c340:	6022      	str	r2, [r4, #0]
 801c342:	701e      	strb	r6, [r3, #0]
 801c344:	6962      	ldr	r2, [r4, #20]
 801c346:	1c43      	adds	r3, r0, #1
 801c348:	429a      	cmp	r2, r3
 801c34a:	d004      	beq.n	801c356 <__swbuf_r+0x6e>
 801c34c:	89a3      	ldrh	r3, [r4, #12]
 801c34e:	07db      	lsls	r3, r3, #31
 801c350:	d5e1      	bpl.n	801c316 <__swbuf_r+0x2e>
 801c352:	2e0a      	cmp	r6, #10
 801c354:	d1df      	bne.n	801c316 <__swbuf_r+0x2e>
 801c356:	4621      	mov	r1, r4
 801c358:	4628      	mov	r0, r5
 801c35a:	f7ff ff9d 	bl	801c298 <_fflush_r>
 801c35e:	2800      	cmp	r0, #0
 801c360:	d0d9      	beq.n	801c316 <__swbuf_r+0x2e>
 801c362:	e7d6      	b.n	801c312 <__swbuf_r+0x2a>

0801c364 <__swsetup_r>:
 801c364:	b538      	push	{r3, r4, r5, lr}
 801c366:	4b29      	ldr	r3, [pc, #164]	@ (801c40c <__swsetup_r+0xa8>)
 801c368:	4605      	mov	r5, r0
 801c36a:	6818      	ldr	r0, [r3, #0]
 801c36c:	460c      	mov	r4, r1
 801c36e:	b118      	cbz	r0, 801c378 <__swsetup_r+0x14>
 801c370:	6a03      	ldr	r3, [r0, #32]
 801c372:	b90b      	cbnz	r3, 801c378 <__swsetup_r+0x14>
 801c374:	f7ff fa2a 	bl	801b7cc <__sinit>
 801c378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c37c:	0719      	lsls	r1, r3, #28
 801c37e:	d422      	bmi.n	801c3c6 <__swsetup_r+0x62>
 801c380:	06da      	lsls	r2, r3, #27
 801c382:	d407      	bmi.n	801c394 <__swsetup_r+0x30>
 801c384:	2209      	movs	r2, #9
 801c386:	602a      	str	r2, [r5, #0]
 801c388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c38c:	f04f 30ff 	mov.w	r0, #4294967295
 801c390:	81a3      	strh	r3, [r4, #12]
 801c392:	e033      	b.n	801c3fc <__swsetup_r+0x98>
 801c394:	0758      	lsls	r0, r3, #29
 801c396:	d512      	bpl.n	801c3be <__swsetup_r+0x5a>
 801c398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c39a:	b141      	cbz	r1, 801c3ae <__swsetup_r+0x4a>
 801c39c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c3a0:	4299      	cmp	r1, r3
 801c3a2:	d002      	beq.n	801c3aa <__swsetup_r+0x46>
 801c3a4:	4628      	mov	r0, r5
 801c3a6:	f7ff fb2f 	bl	801ba08 <_free_r>
 801c3aa:	2300      	movs	r3, #0
 801c3ac:	6363      	str	r3, [r4, #52]	@ 0x34
 801c3ae:	89a3      	ldrh	r3, [r4, #12]
 801c3b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c3b4:	81a3      	strh	r3, [r4, #12]
 801c3b6:	2300      	movs	r3, #0
 801c3b8:	6063      	str	r3, [r4, #4]
 801c3ba:	6923      	ldr	r3, [r4, #16]
 801c3bc:	6023      	str	r3, [r4, #0]
 801c3be:	89a3      	ldrh	r3, [r4, #12]
 801c3c0:	f043 0308 	orr.w	r3, r3, #8
 801c3c4:	81a3      	strh	r3, [r4, #12]
 801c3c6:	6923      	ldr	r3, [r4, #16]
 801c3c8:	b94b      	cbnz	r3, 801c3de <__swsetup_r+0x7a>
 801c3ca:	89a3      	ldrh	r3, [r4, #12]
 801c3cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c3d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c3d4:	d003      	beq.n	801c3de <__swsetup_r+0x7a>
 801c3d6:	4621      	mov	r1, r4
 801c3d8:	4628      	mov	r0, r5
 801c3da:	f000 f85c 	bl	801c496 <__smakebuf_r>
 801c3de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c3e2:	f013 0201 	ands.w	r2, r3, #1
 801c3e6:	d00a      	beq.n	801c3fe <__swsetup_r+0x9a>
 801c3e8:	2200      	movs	r2, #0
 801c3ea:	60a2      	str	r2, [r4, #8]
 801c3ec:	6962      	ldr	r2, [r4, #20]
 801c3ee:	4252      	negs	r2, r2
 801c3f0:	61a2      	str	r2, [r4, #24]
 801c3f2:	6922      	ldr	r2, [r4, #16]
 801c3f4:	b942      	cbnz	r2, 801c408 <__swsetup_r+0xa4>
 801c3f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c3fa:	d1c5      	bne.n	801c388 <__swsetup_r+0x24>
 801c3fc:	bd38      	pop	{r3, r4, r5, pc}
 801c3fe:	0799      	lsls	r1, r3, #30
 801c400:	bf58      	it	pl
 801c402:	6962      	ldrpl	r2, [r4, #20]
 801c404:	60a2      	str	r2, [r4, #8]
 801c406:	e7f4      	b.n	801c3f2 <__swsetup_r+0x8e>
 801c408:	2000      	movs	r0, #0
 801c40a:	e7f7      	b.n	801c3fc <__swsetup_r+0x98>
 801c40c:	20000f48 	.word	0x20000f48

0801c410 <_sbrk_r>:
 801c410:	b538      	push	{r3, r4, r5, lr}
 801c412:	2300      	movs	r3, #0
 801c414:	4d05      	ldr	r5, [pc, #20]	@ (801c42c <_sbrk_r+0x1c>)
 801c416:	4604      	mov	r4, r0
 801c418:	4608      	mov	r0, r1
 801c41a:	602b      	str	r3, [r5, #0]
 801c41c:	f7e6 f990 	bl	8002740 <_sbrk>
 801c420:	1c43      	adds	r3, r0, #1
 801c422:	d102      	bne.n	801c42a <_sbrk_r+0x1a>
 801c424:	682b      	ldr	r3, [r5, #0]
 801c426:	b103      	cbz	r3, 801c42a <_sbrk_r+0x1a>
 801c428:	6023      	str	r3, [r4, #0]
 801c42a:	bd38      	pop	{r3, r4, r5, pc}
 801c42c:	2000aef4 	.word	0x2000aef4

0801c430 <memchr>:
 801c430:	4603      	mov	r3, r0
 801c432:	b510      	push	{r4, lr}
 801c434:	b2c9      	uxtb	r1, r1
 801c436:	4402      	add	r2, r0
 801c438:	4293      	cmp	r3, r2
 801c43a:	4618      	mov	r0, r3
 801c43c:	d101      	bne.n	801c442 <memchr+0x12>
 801c43e:	2000      	movs	r0, #0
 801c440:	e003      	b.n	801c44a <memchr+0x1a>
 801c442:	7804      	ldrb	r4, [r0, #0]
 801c444:	3301      	adds	r3, #1
 801c446:	428c      	cmp	r4, r1
 801c448:	d1f6      	bne.n	801c438 <memchr+0x8>
 801c44a:	bd10      	pop	{r4, pc}

0801c44c <__swhatbuf_r>:
 801c44c:	b570      	push	{r4, r5, r6, lr}
 801c44e:	460c      	mov	r4, r1
 801c450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c454:	4615      	mov	r5, r2
 801c456:	2900      	cmp	r1, #0
 801c458:	461e      	mov	r6, r3
 801c45a:	b096      	sub	sp, #88	@ 0x58
 801c45c:	da0c      	bge.n	801c478 <__swhatbuf_r+0x2c>
 801c45e:	89a3      	ldrh	r3, [r4, #12]
 801c460:	2100      	movs	r1, #0
 801c462:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c466:	bf14      	ite	ne
 801c468:	2340      	movne	r3, #64	@ 0x40
 801c46a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c46e:	2000      	movs	r0, #0
 801c470:	6031      	str	r1, [r6, #0]
 801c472:	602b      	str	r3, [r5, #0]
 801c474:	b016      	add	sp, #88	@ 0x58
 801c476:	bd70      	pop	{r4, r5, r6, pc}
 801c478:	466a      	mov	r2, sp
 801c47a:	f000 f849 	bl	801c510 <_fstat_r>
 801c47e:	2800      	cmp	r0, #0
 801c480:	dbed      	blt.n	801c45e <__swhatbuf_r+0x12>
 801c482:	9901      	ldr	r1, [sp, #4]
 801c484:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c488:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c48c:	4259      	negs	r1, r3
 801c48e:	4159      	adcs	r1, r3
 801c490:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c494:	e7eb      	b.n	801c46e <__swhatbuf_r+0x22>

0801c496 <__smakebuf_r>:
 801c496:	898b      	ldrh	r3, [r1, #12]
 801c498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c49a:	079d      	lsls	r5, r3, #30
 801c49c:	4606      	mov	r6, r0
 801c49e:	460c      	mov	r4, r1
 801c4a0:	d507      	bpl.n	801c4b2 <__smakebuf_r+0x1c>
 801c4a2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c4a6:	6023      	str	r3, [r4, #0]
 801c4a8:	6123      	str	r3, [r4, #16]
 801c4aa:	2301      	movs	r3, #1
 801c4ac:	6163      	str	r3, [r4, #20]
 801c4ae:	b003      	add	sp, #12
 801c4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c4b2:	466a      	mov	r2, sp
 801c4b4:	ab01      	add	r3, sp, #4
 801c4b6:	f7ff ffc9 	bl	801c44c <__swhatbuf_r>
 801c4ba:	9f00      	ldr	r7, [sp, #0]
 801c4bc:	4605      	mov	r5, r0
 801c4be:	4639      	mov	r1, r7
 801c4c0:	4630      	mov	r0, r6
 801c4c2:	f7ff fb0b 	bl	801badc <_malloc_r>
 801c4c6:	b948      	cbnz	r0, 801c4dc <__smakebuf_r+0x46>
 801c4c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c4cc:	059a      	lsls	r2, r3, #22
 801c4ce:	d4ee      	bmi.n	801c4ae <__smakebuf_r+0x18>
 801c4d0:	f023 0303 	bic.w	r3, r3, #3
 801c4d4:	f043 0302 	orr.w	r3, r3, #2
 801c4d8:	81a3      	strh	r3, [r4, #12]
 801c4da:	e7e2      	b.n	801c4a2 <__smakebuf_r+0xc>
 801c4dc:	89a3      	ldrh	r3, [r4, #12]
 801c4de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c4e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c4e6:	81a3      	strh	r3, [r4, #12]
 801c4e8:	9b01      	ldr	r3, [sp, #4]
 801c4ea:	6020      	str	r0, [r4, #0]
 801c4ec:	b15b      	cbz	r3, 801c506 <__smakebuf_r+0x70>
 801c4ee:	4630      	mov	r0, r6
 801c4f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c4f4:	f000 f81e 	bl	801c534 <_isatty_r>
 801c4f8:	b128      	cbz	r0, 801c506 <__smakebuf_r+0x70>
 801c4fa:	89a3      	ldrh	r3, [r4, #12]
 801c4fc:	f023 0303 	bic.w	r3, r3, #3
 801c500:	f043 0301 	orr.w	r3, r3, #1
 801c504:	81a3      	strh	r3, [r4, #12]
 801c506:	89a3      	ldrh	r3, [r4, #12]
 801c508:	431d      	orrs	r5, r3
 801c50a:	81a5      	strh	r5, [r4, #12]
 801c50c:	e7cf      	b.n	801c4ae <__smakebuf_r+0x18>
	...

0801c510 <_fstat_r>:
 801c510:	b538      	push	{r3, r4, r5, lr}
 801c512:	2300      	movs	r3, #0
 801c514:	4d06      	ldr	r5, [pc, #24]	@ (801c530 <_fstat_r+0x20>)
 801c516:	4604      	mov	r4, r0
 801c518:	4608      	mov	r0, r1
 801c51a:	4611      	mov	r1, r2
 801c51c:	602b      	str	r3, [r5, #0]
 801c51e:	f7e6 f8e9 	bl	80026f4 <_fstat>
 801c522:	1c43      	adds	r3, r0, #1
 801c524:	d102      	bne.n	801c52c <_fstat_r+0x1c>
 801c526:	682b      	ldr	r3, [r5, #0]
 801c528:	b103      	cbz	r3, 801c52c <_fstat_r+0x1c>
 801c52a:	6023      	str	r3, [r4, #0]
 801c52c:	bd38      	pop	{r3, r4, r5, pc}
 801c52e:	bf00      	nop
 801c530:	2000aef4 	.word	0x2000aef4

0801c534 <_isatty_r>:
 801c534:	b538      	push	{r3, r4, r5, lr}
 801c536:	2300      	movs	r3, #0
 801c538:	4d05      	ldr	r5, [pc, #20]	@ (801c550 <_isatty_r+0x1c>)
 801c53a:	4604      	mov	r4, r0
 801c53c:	4608      	mov	r0, r1
 801c53e:	602b      	str	r3, [r5, #0]
 801c540:	f7e6 f8e7 	bl	8002712 <_isatty>
 801c544:	1c43      	adds	r3, r0, #1
 801c546:	d102      	bne.n	801c54e <_isatty_r+0x1a>
 801c548:	682b      	ldr	r3, [r5, #0]
 801c54a:	b103      	cbz	r3, 801c54e <_isatty_r+0x1a>
 801c54c:	6023      	str	r3, [r4, #0]
 801c54e:	bd38      	pop	{r3, r4, r5, pc}
 801c550:	2000aef4 	.word	0x2000aef4

0801c554 <_init>:
 801c554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c556:	bf00      	nop
 801c558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c55a:	bc08      	pop	{r3}
 801c55c:	469e      	mov	lr, r3
 801c55e:	4770      	bx	lr

0801c560 <_fini>:
 801c560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c562:	bf00      	nop
 801c564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c566:	bc08      	pop	{r3}
 801c568:	469e      	mov	lr, r3
 801c56a:	4770      	bx	lr
